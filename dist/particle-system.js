import * as nt from "react";
import R0, { useReducer as Ky, useRef as Si, useDebugValue as Qy, useEffect as rr, useLayoutEffect as $y, useState as ra, useMemo as xf } from "react";
function ex(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
var C0 = { exports: {} }, jc = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var tx = R0, nx = Symbol.for("react.element"), ix = Symbol.for("react.fragment"), rx = Object.prototype.hasOwnProperty, sx = tx.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, ox = { key: !0, ref: !0, __self: !0, __source: !0 };
function P0(r, e, t) {
  var n, i = {}, s = null, l = null;
  t !== void 0 && (s = "" + t), e.key !== void 0 && (s = "" + e.key), e.ref !== void 0 && (l = e.ref);
  for (n in e)
    rx.call(e, n) && !ox.hasOwnProperty(n) && (i[n] = e[n]);
  if (r && r.defaultProps)
    for (n in e = r.defaultProps, e)
      i[n] === void 0 && (i[n] = e[n]);
  return { $$typeof: nx, type: r, key: s, ref: l, props: i, _owner: sx.current };
}
jc.Fragment = ix;
jc.jsx = P0;
jc.jsxs = P0;
C0.exports = jc;
var Et = C0.exports;
const Zc = "157", ns = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, is = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, L0 = 0, Sf = 1, I0 = 2, ax = 3, D0 = 0, Jc = 1, aa = 2, yi = 3, ar = 0, On = 1, Ni = 2, lx = 2, sr = 0, Ar = 1, Mf = 2, Ef = 3, wf = 4, N0 = 5, ss = 100, U0 = 101, O0 = 102, Tf = 103, bf = 104, F0 = 200, z0 = 201, B0 = 202, k0 = 203, dd = 204, pd = 205, H0 = 206, V0 = 207, G0 = 208, W0 = 209, X0 = 210, Y0 = 0, q0 = 1, j0 = 2, Gc = 3, Z0 = 4, J0 = 5, K0 = 6, Q0 = 7, Ua = 0, $0 = 1, ev = 2, Oi = 0, tv = 1, nv = 2, iv = 3, md = 4, rv = 5, Kc = 300, lr = 301, Lr = 302, da = 303, pa = 304, Mo = 306, ma = 1e3, Rn = 1001, ga = 1002, Wt = 1003, Wc = 1004, cx = 1004, la = 1005, ux = 1005, Xt = 1006, gd = 1007, hx = 1007, Ir = 1008, fx = 1008, Fi = 1009, sv = 1010, ov = 1011, Qc = 1012, vd = 1013, ir = 1014, ei = 1015, ms = 1016, _d = 1017, yd = 1018, Rr = 1020, av = 1021, Cn = 1023, lv = 1024, cv = 1025, Cr = 1026, gs = 1027, uv = 1028, xd = 1029, hv = 1030, Sd = 1031, Md = 1033, Nc = 33776, Uc = 33777, Oc = 33778, Fc = 33779, Af = 35840, Rf = 35841, Cf = 35842, Pf = 35843, fv = 36196, Lf = 37492, If = 37496, Df = 37808, Nf = 37809, Uf = 37810, Of = 37811, Ff = 37812, zf = 37813, Bf = 37814, kf = 37815, Hf = 37816, Vf = 37817, Gf = 37818, Wf = 37819, Xf = 37820, Yf = 37821, zc = 36492, qf = 36494, jf = 36495, dv = 36283, Zf = 36284, Jf = 36285, Kf = 36286, pv = 2200, mv = 2201, gv = 2202, va = 2300, _a = 2301, Bc = 2302, as = 2400, ls = 2401, ya = 2402, $c = 2500, Ed = 2501, dx = 0, px = 1, mx = 2, wd = 3e3, Pr = 3001, vv = 3200, _v = 3201, Nr = 0, yv = 1, $n = "", hn = "srgb", Bi = "srgb-linear", eu = "display-p3", Oa = "display-p3-linear", xa = "linear", zt = "srgb", Sa = "rec709", Ma = "p3", gx = 0, kc = 7680, vx = 7681, _x = 7682, yx = 7683, xx = 34055, Sx = 34056, Mx = 5386, Ex = 512, wx = 513, Tx = 514, bx = 515, Ax = 516, Rx = 517, Cx = 518, xv = 519, Sv = 512, Mv = 513, Ev = 514, wv = 515, Tv = 516, bv = 517, Av = 518, Rv = 519, Ea = 35044, Px = 35048, Lx = 35040, Ix = 35045, Dx = 35049, Nx = 35041, Ux = 35046, Ox = 35050, Fx = 35042, zx = "100", Qf = "300 es", Xc = 1035, Ui = 2e3, wa = 2001;
let ur = class {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const i = this._listeners[e];
    if (i !== void 0) {
      const s = i.indexOf(t);
      s !== -1 && i.splice(s, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const i = n.slice(0);
      for (let s = 0, l = i.length; s < l; s++)
        i[s].call(this, e);
      e.target = null;
    }
  }
};
const bn = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let zm = 1234567;
const hs = Math.PI / 180, _o = 180 / Math.PI;
function ti() {
  const r = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
  return (bn[r & 255] + bn[r >> 8 & 255] + bn[r >> 16 & 255] + bn[r >> 24 & 255] + "-" + bn[e & 255] + bn[e >> 8 & 255] + "-" + bn[e >> 16 & 15 | 64] + bn[e >> 24 & 255] + "-" + bn[t & 63 | 128] + bn[t >> 8 & 255] + "-" + bn[t >> 16 & 255] + bn[t >> 24 & 255] + bn[n & 255] + bn[n >> 8 & 255] + bn[n >> 16 & 255] + bn[n >> 24 & 255]).toLowerCase();
}
function Qt(r, e, t) {
  return Math.max(e, Math.min(t, r));
}
function Td(r, e) {
  return (r % e + e) % e;
}
function Bx(r, e, t, n, i) {
  return n + (r - e) * (i - n) / (t - e);
}
function kx(r, e, t) {
  return r !== e ? (t - r) / (e - r) : 0;
}
function ca(r, e, t) {
  return (1 - t) * r + t * e;
}
function Hx(r, e, t, n) {
  return ca(r, e, 1 - Math.exp(-t * n));
}
function Vx(r, e = 1) {
  return e - Math.abs(Td(r, e * 2) - e);
}
function Gx(r, e, t) {
  return r <= e ? 0 : r >= t ? 1 : (r = (r - e) / (t - e), r * r * (3 - 2 * r));
}
function Wx(r, e, t) {
  return r <= e ? 0 : r >= t ? 1 : (r = (r - e) / (t - e), r * r * r * (r * (r * 6 - 15) + 10));
}
function Xx(r, e) {
  return r + Math.floor(Math.random() * (e - r + 1));
}
function Yx(r, e) {
  return r + Math.random() * (e - r);
}
function qx(r) {
  return r * (0.5 - Math.random());
}
function jx(r) {
  r !== void 0 && (zm = r);
  let e = zm += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function Zx(r) {
  return r * hs;
}
function Jx(r) {
  return r * _o;
}
function $f(r) {
  return (r & r - 1) === 0 && r !== 0;
}
function Cv(r) {
  return Math.pow(2, Math.ceil(Math.log(r) / Math.LN2));
}
function Yc(r) {
  return Math.pow(2, Math.floor(Math.log(r) / Math.LN2));
}
function Kx(r, e, t, n, i) {
  const s = Math.cos, l = Math.sin, c = s(t / 2), u = l(t / 2), h = s((e + n) / 2), f = l((e + n) / 2), p = s((e - n) / 2), m = l((e - n) / 2), v = s((n - e) / 2), y = l((n - e) / 2);
  switch (i) {
    case "XYX":
      r.set(c * f, u * p, u * m, c * h);
      break;
    case "YZY":
      r.set(u * m, c * f, u * p, c * h);
      break;
    case "ZXZ":
      r.set(u * p, u * m, c * f, c * h);
      break;
    case "XZX":
      r.set(c * f, u * y, u * v, c * h);
      break;
    case "YXY":
      r.set(u * v, c * f, u * y, c * h);
      break;
    case "ZYZ":
      r.set(u * y, u * v, c * f, c * h);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
  }
}
function Wn(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint32Array:
      return r / 4294967295;
    case Uint16Array:
      return r / 65535;
    case Uint8Array:
      return r / 255;
    case Int32Array:
      return Math.max(r / 2147483647, -1);
    case Int16Array:
      return Math.max(r / 32767, -1);
    case Int8Array:
      return Math.max(r / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function ft(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint32Array:
      return Math.round(r * 4294967295);
    case Uint16Array:
      return Math.round(r * 65535);
    case Uint8Array:
      return Math.round(r * 255);
    case Int32Array:
      return Math.round(r * 2147483647);
    case Int16Array:
      return Math.round(r * 32767);
    case Int8Array:
      return Math.round(r * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const Pv = {
  DEG2RAD: hs,
  RAD2DEG: _o,
  generateUUID: ti,
  clamp: Qt,
  euclideanModulo: Td,
  mapLinear: Bx,
  inverseLerp: kx,
  lerp: ca,
  damp: Hx,
  pingpong: Vx,
  smoothstep: Gx,
  smootherstep: Wx,
  randInt: Xx,
  randFloat: Yx,
  randFloatSpread: qx,
  seededRandom: jx,
  degToRad: Zx,
  radToDeg: Jx,
  isPowerOfTwo: $f,
  ceilPowerOfTwo: Cv,
  floorPowerOfTwo: Yc,
  setQuaternionFromProperEuler: Kx,
  normalize: ft,
  denormalize: Wn
};
class ue {
  constructor(e = 0, t = 0) {
    ue.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, i = e.elements;
    return this.x = i[0] * t + i[3] * n + i[6], this.y = i[1] * t + i[4] * n + i[7], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(Qt(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t), i = Math.sin(t), s = this.x - e.x, l = this.y - e.y;
    return this.x = s * n - l * i + e.x, this.y = s * i + l * n + e.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class pt {
  constructor(e, t, n, i, s, l, c, u, h) {
    pt.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, i, s, l, c, u, h);
  }
  set(e, t, n, i, s, l, c, u, h) {
    const f = this.elements;
    return f[0] = e, f[1] = i, f[2] = c, f[3] = t, f[4] = s, f[5] = u, f[6] = n, f[7] = l, f[8] = h, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, i = t.elements, s = this.elements, l = n[0], c = n[3], u = n[6], h = n[1], f = n[4], p = n[7], m = n[2], v = n[5], y = n[8], E = i[0], x = i[3], _ = i[6], w = i[1], M = i[4], b = i[7], A = i[2], C = i[5], I = i[8];
    return s[0] = l * E + c * w + u * A, s[3] = l * x + c * M + u * C, s[6] = l * _ + c * b + u * I, s[1] = h * E + f * w + p * A, s[4] = h * x + f * M + p * C, s[7] = h * _ + f * b + p * I, s[2] = m * E + v * w + y * A, s[5] = m * x + v * M + y * C, s[8] = m * _ + v * b + y * I, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], s = e[3], l = e[4], c = e[5], u = e[6], h = e[7], f = e[8];
    return t * l * f - t * c * h - n * s * f + n * c * u + i * s * h - i * l * u;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], s = e[3], l = e[4], c = e[5], u = e[6], h = e[7], f = e[8], p = f * l - c * h, m = c * u - f * s, v = h * s - l * u, y = t * p + n * m + i * v;
    if (y === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const E = 1 / y;
    return e[0] = p * E, e[1] = (i * h - f * n) * E, e[2] = (c * n - i * l) * E, e[3] = m * E, e[4] = (f * t - i * u) * E, e[5] = (i * s - c * t) * E, e[6] = v * E, e[7] = (n * u - h * t) * E, e[8] = (l * t - n * s) * E, this;
  }
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  setUvTransform(e, t, n, i, s, l, c) {
    const u = Math.cos(s), h = Math.sin(s);
    return this.set(
      n * u,
      n * h,
      -n * (u * l + h * c) + l + e,
      -i * h,
      i * u,
      -i * (-h * l + u * c) + c + t,
      0,
      0,
      1
    ), this;
  }
  //
  scale(e, t) {
    return this.premultiply(Ih.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(Ih.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(Ih.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    return e.isVector2 ? this.set(
      1,
      0,
      e.x,
      0,
      1,
      e.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  makeRotation(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      n,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  //
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let i = 0; i < 9; i++)
      if (t[i] !== n[i])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const Ih = /* @__PURE__ */ new pt();
function Lv(r) {
  for (let e = r.length - 1; e >= 0; --e)
    if (r[e] >= 65535)
      return !0;
  return !1;
}
const Qx = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function ho(r, e) {
  return new Qx[r](e);
}
function Ta(r) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", r);
}
function Iv() {
  const r = Ta("canvas");
  return r.style.display = "block", r;
}
const Bm = {};
function ua(r) {
  r in Bm || (Bm[r] = !0, console.warn(r));
}
const km = /* @__PURE__ */ new pt().set(
  0.8224621,
  0.177538,
  0,
  0.0331941,
  0.9668058,
  0,
  0.0170827,
  0.0723974,
  0.9105199
), Hm = /* @__PURE__ */ new pt().set(
  1.2249401,
  -0.2249404,
  0,
  -0.0420569,
  1.0420571,
  0,
  -0.0196376,
  -0.0786361,
  1.0982735
), Gl = {
  [Bi]: {
    transfer: xa,
    primaries: Sa,
    toReference: (r) => r,
    fromReference: (r) => r
  },
  [hn]: {
    transfer: zt,
    primaries: Sa,
    toReference: (r) => r.convertSRGBToLinear(),
    fromReference: (r) => r.convertLinearToSRGB()
  },
  [Oa]: {
    transfer: xa,
    primaries: Ma,
    toReference: (r) => r.applyMatrix3(Hm),
    fromReference: (r) => r.applyMatrix3(km)
  },
  [eu]: {
    transfer: zt,
    primaries: Ma,
    toReference: (r) => r.convertSRGBToLinear().applyMatrix3(Hm),
    fromReference: (r) => r.applyMatrix3(km).convertLinearToSRGB()
  }
}, $x = /* @__PURE__ */ new Set([Bi, Oa]), Lt = {
  enabled: !0,
  _workingColorSpace: Bi,
  get legacyMode() {
    return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), !this.enabled;
  },
  set legacyMode(r) {
    console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), this.enabled = !r;
  },
  get workingColorSpace() {
    return this._workingColorSpace;
  },
  set workingColorSpace(r) {
    if (!$x.has(r))
      throw new Error(`Unsupported working color space, "${r}".`);
    this._workingColorSpace = r;
  },
  convert: function(r, e, t) {
    if (this.enabled === !1 || e === t || !e || !t)
      return r;
    const n = Gl[e].toReference, i = Gl[t].fromReference;
    return i(n(r));
  },
  fromWorkingColorSpace: function(r, e) {
    return this.convert(r, this._workingColorSpace, e);
  },
  toWorkingColorSpace: function(r, e) {
    return this.convert(r, e, this._workingColorSpace);
  },
  getPrimaries: function(r) {
    return Gl[r].primaries;
  },
  getTransfer: function(r) {
    return r === $n ? xa : Gl[r].transfer;
  }
};
function vo(r) {
  return r < 0.04045 ? r * 0.0773993808 : Math.pow(r * 0.9478672986 + 0.0521327014, 2.4);
}
function Dh(r) {
  return r < 31308e-7 ? r * 12.92 : 1.055 * Math.pow(r, 0.41666) - 0.055;
}
let Bs;
class bd {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let t;
    if (e instanceof HTMLCanvasElement)
      t = e;
    else {
      Bs === void 0 && (Bs = Ta("canvas")), Bs.width = e.width, Bs.height = e.height;
      const n = Bs.getContext("2d");
      e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = Bs;
    }
    return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", 0.6)) : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = Ta("canvas");
      t.width = e.width, t.height = e.height;
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const i = n.getImageData(0, 0, e.width, e.height), s = i.data;
      for (let l = 0; l < s.length; l++)
        s[l] = vo(s[l] / 255) * 255;
      return n.putImageData(i, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor(vo(t[n] / 255) * 255) : t[n] = vo(t[n]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
let eS = 0;
class cs {
  constructor(e = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: eS++ }), this.uuid = ti(), this.data = e, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const n = {
      uuid: this.uuid,
      url: ""
    }, i = this.data;
    if (i !== null) {
      let s;
      if (Array.isArray(i)) {
        s = [];
        for (let l = 0, c = i.length; l < c; l++)
          i[l].isDataTexture ? s.push(Nh(i[l].image)) : s.push(Nh(i[l]));
      } else
        s = Nh(i);
      n.url = s;
    }
    return t || (e.images[this.uuid] = n), n;
  }
}
function Nh(r) {
  return typeof HTMLImageElement < "u" && r instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && r instanceof ImageBitmap ? bd.getDataURL(r) : r.data ? {
    data: Array.from(r.data),
    width: r.width,
    height: r.height,
    type: r.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let tS = 0;
class nn extends ur {
  constructor(e = nn.DEFAULT_IMAGE, t = nn.DEFAULT_MAPPING, n = Rn, i = Rn, s = Xt, l = Ir, c = Cn, u = Fi, h = nn.DEFAULT_ANISOTROPY, f = $n) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: tS++ }), this.uuid = ti(), this.name = "", this.source = new cs(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = i, this.magFilter = s, this.minFilter = l, this.anisotropy = h, this.format = c, this.internalFormat = null, this.type = u, this.offset = new ue(0, 0), this.repeat = new ue(1, 1), this.center = new ue(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new pt(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, typeof f == "string" ? this.colorSpace = f : (ua("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = f === Pr ? hn : $n), this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.needsPMREMUpdate = !1;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const n = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== Kc)
      return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case ma:
          e.x = e.x - Math.floor(e.x);
          break;
        case Rn:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case ga:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case ma:
          e.y = e.y - Math.floor(e.y);
          break;
        case Rn:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case ga:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  get encoding() {
    return ua("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace === hn ? Pr : wd;
  }
  set encoding(e) {
    ua("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = e === Pr ? hn : $n;
  }
}
nn.DEFAULT_IMAGE = null;
nn.DEFAULT_MAPPING = Kc;
nn.DEFAULT_ANISOTROPY = 1;
class It {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    It.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = i;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, i) {
    return this.x = e, this.y = t, this.z = n, this.w = i, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setW(e) {
    return this.w = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, i = this.z, s = this.w, l = e.elements;
    return this.x = l[0] * t + l[4] * n + l[8] * i + l[12] * s, this.y = l[1] * t + l[5] * n + l[9] * i + l[13] * s, this.z = l[2] * t + l[6] * n + l[10] * i + l[14] * s, this.w = l[3] * t + l[7] * n + l[11] * i + l[15] * s, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, i, s;
    const u = e.elements, h = u[0], f = u[4], p = u[8], m = u[1], v = u[5], y = u[9], E = u[2], x = u[6], _ = u[10];
    if (Math.abs(f - m) < 0.01 && Math.abs(p - E) < 0.01 && Math.abs(y - x) < 0.01) {
      if (Math.abs(f + m) < 0.1 && Math.abs(p + E) < 0.1 && Math.abs(y + x) < 0.1 && Math.abs(h + v + _ - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const M = (h + 1) / 2, b = (v + 1) / 2, A = (_ + 1) / 2, C = (f + m) / 4, I = (p + E) / 4, z = (y + x) / 4;
      return M > b && M > A ? M < 0.01 ? (n = 0, i = 0.707106781, s = 0.707106781) : (n = Math.sqrt(M), i = C / n, s = I / n) : b > A ? b < 0.01 ? (n = 0.707106781, i = 0, s = 0.707106781) : (i = Math.sqrt(b), n = C / i, s = z / i) : A < 0.01 ? (n = 0.707106781, i = 0.707106781, s = 0) : (s = Math.sqrt(A), n = I / s, i = z / s), this.set(n, i, s, t), this;
    }
    let w = Math.sqrt((x - y) * (x - y) + (p - E) * (p - E) + (m - f) * (m - f));
    return Math.abs(w) < 1e-3 && (w = 1), this.x = (x - y) / w, this.y = (p - E) / w, this.z = (m - f) / w, this.w = Math.acos((h + v + _ - 1) / 2), this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class Dv extends ur {
  constructor(e = 1, t = 1, n = {}) {
    super(), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new It(0, 0, e, t), this.scissorTest = !1, this.viewport = new It(0, 0, e, t);
    const i = { width: e, height: t, depth: 1 };
    n.encoding !== void 0 && (ua("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."), n.colorSpace = n.encoding === Pr ? hn : $n), n = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: Xt,
      depthBuffer: !0,
      stencilBuffer: !1,
      depthTexture: null,
      samples: 0
    }, n), this.texture = new nn(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.flipY = !1, this.texture.generateMipmaps = n.generateMipmaps, this.texture.internalFormat = n.internalFormat, this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.depthTexture = n.depthTexture, this.samples = n.samples;
  }
  setSize(e, t, n = 1) {
    (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.isRenderTargetTexture = !0;
    const t = Object.assign({}, e.texture.image);
    return this.texture.source = new cs(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class hi extends Dv {
  constructor(e = 1, t = 1, n = {}) {
    super(e, t, n), this.isWebGLRenderTarget = !0;
  }
}
class tu extends nn {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: n, depth: i }, this.magFilter = Wt, this.minFilter = Wt, this.wrapR = Rn, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class nS extends hi {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new tu(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class Ad extends nn {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: n, depth: i }, this.magFilter = Wt, this.minFilter = Wt, this.wrapR = Rn, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class iS extends hi {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new Ad(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class rS extends hi {
  constructor(e = 1, t = 1, n = 1, i = {}) {
    super(e, t, i), this.isWebGLMultipleRenderTargets = !0;
    const s = this.texture;
    this.texture = [];
    for (let l = 0; l < n; l++)
      this.texture[l] = s.clone(), this.texture[l].isRenderTargetTexture = !0;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e, this.height = t, this.depth = n;
      for (let i = 0, s = this.texture.length; i < s; i++)
        this.texture[i].image.width = e, this.texture[i].image.height = t, this.texture[i].image.depth = n;
      this.dispose();
    }
    this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  copy(e) {
    this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.texture.length = 0;
    for (let t = 0, n = e.texture.length; t < n; t++)
      this.texture[t] = e.texture[t].clone(), this.texture[t].isRenderTargetTexture = !0;
    return this;
  }
}
class Pn {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = i;
  }
  static slerpFlat(e, t, n, i, s, l, c) {
    let u = n[i + 0], h = n[i + 1], f = n[i + 2], p = n[i + 3];
    const m = s[l + 0], v = s[l + 1], y = s[l + 2], E = s[l + 3];
    if (c === 0) {
      e[t + 0] = u, e[t + 1] = h, e[t + 2] = f, e[t + 3] = p;
      return;
    }
    if (c === 1) {
      e[t + 0] = m, e[t + 1] = v, e[t + 2] = y, e[t + 3] = E;
      return;
    }
    if (p !== E || u !== m || h !== v || f !== y) {
      let x = 1 - c;
      const _ = u * m + h * v + f * y + p * E, w = _ >= 0 ? 1 : -1, M = 1 - _ * _;
      if (M > Number.EPSILON) {
        const A = Math.sqrt(M), C = Math.atan2(A, _ * w);
        x = Math.sin(x * C) / A, c = Math.sin(c * C) / A;
      }
      const b = c * w;
      if (u = u * x + m * b, h = h * x + v * b, f = f * x + y * b, p = p * x + E * b, x === 1 - c) {
        const A = 1 / Math.sqrt(u * u + h * h + f * f + p * p);
        u *= A, h *= A, f *= A, p *= A;
      }
    }
    e[t] = u, e[t + 1] = h, e[t + 2] = f, e[t + 3] = p;
  }
  static multiplyQuaternionsFlat(e, t, n, i, s, l) {
    const c = n[i], u = n[i + 1], h = n[i + 2], f = n[i + 3], p = s[l], m = s[l + 1], v = s[l + 2], y = s[l + 3];
    return e[t] = c * y + f * p + u * v - h * m, e[t + 1] = u * y + f * m + h * p - c * v, e[t + 2] = h * y + f * v + c * m - u * p, e[t + 3] = f * y - c * p - u * m - h * v, e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  set(e, t, n, i) {
    return this._x = e, this._y = t, this._z = n, this._w = i, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  setFromEuler(e, t) {
    const n = e._x, i = e._y, s = e._z, l = e._order, c = Math.cos, u = Math.sin, h = c(n / 2), f = c(i / 2), p = c(s / 2), m = u(n / 2), v = u(i / 2), y = u(s / 2);
    switch (l) {
      case "XYZ":
        this._x = m * f * p + h * v * y, this._y = h * v * p - m * f * y, this._z = h * f * y + m * v * p, this._w = h * f * p - m * v * y;
        break;
      case "YXZ":
        this._x = m * f * p + h * v * y, this._y = h * v * p - m * f * y, this._z = h * f * y - m * v * p, this._w = h * f * p + m * v * y;
        break;
      case "ZXY":
        this._x = m * f * p - h * v * y, this._y = h * v * p + m * f * y, this._z = h * f * y + m * v * p, this._w = h * f * p - m * v * y;
        break;
      case "ZYX":
        this._x = m * f * p - h * v * y, this._y = h * v * p + m * f * y, this._z = h * f * y - m * v * p, this._w = h * f * p + m * v * y;
        break;
      case "YZX":
        this._x = m * f * p + h * v * y, this._y = h * v * p + m * f * y, this._z = h * f * y - m * v * p, this._w = h * f * p - m * v * y;
        break;
      case "XZY":
        this._x = m * f * p - h * v * y, this._y = h * v * p - m * f * y, this._z = h * f * y + m * v * p, this._w = h * f * p + m * v * y;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + l);
    }
    return t !== !1 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2, i = Math.sin(n);
    return this._x = e.x * i, this._y = e.y * i, this._z = e.z * i, this._w = Math.cos(n), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, n = t[0], i = t[4], s = t[8], l = t[1], c = t[5], u = t[9], h = t[2], f = t[6], p = t[10], m = n + c + p;
    if (m > 0) {
      const v = 0.5 / Math.sqrt(m + 1);
      this._w = 0.25 / v, this._x = (f - u) * v, this._y = (s - h) * v, this._z = (l - i) * v;
    } else if (n > c && n > p) {
      const v = 2 * Math.sqrt(1 + n - c - p);
      this._w = (f - u) / v, this._x = 0.25 * v, this._y = (i + l) / v, this._z = (s + h) / v;
    } else if (c > p) {
      const v = 2 * Math.sqrt(1 + c - n - p);
      this._w = (s - h) / v, this._x = (i + l) / v, this._y = 0.25 * v, this._z = (u + f) / v;
    } else {
      const v = 2 * Math.sqrt(1 + p - n - c);
      this._w = (l - i) / v, this._x = (s + h) / v, this._y = (u + f) / v, this._z = 0.25 * v;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(Qt(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0)
      return this;
    const i = Math.min(1, t / n);
    return this.slerp(e, i), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x, i = e._y, s = e._z, l = e._w, c = t._x, u = t._y, h = t._z, f = t._w;
    return this._x = n * f + l * c + i * h - s * u, this._y = i * f + l * u + s * c - n * h, this._z = s * f + l * h + n * u - i * c, this._w = l * f - n * c - i * u - s * h, this._onChangeCallback(), this;
  }
  slerp(e, t) {
    if (t === 0)
      return this;
    if (t === 1)
      return this.copy(e);
    const n = this._x, i = this._y, s = this._z, l = this._w;
    let c = l * e._w + n * e._x + i * e._y + s * e._z;
    if (c < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, c = -c) : this.copy(e), c >= 1)
      return this._w = l, this._x = n, this._y = i, this._z = s, this;
    const u = 1 - c * c;
    if (u <= Number.EPSILON) {
      const v = 1 - t;
      return this._w = v * l + t * this._w, this._x = v * n + t * this._x, this._y = v * i + t * this._y, this._z = v * s + t * this._z, this.normalize(), this._onChangeCallback(), this;
    }
    const h = Math.sqrt(u), f = Math.atan2(h, c), p = Math.sin((1 - t) * f) / h, m = Math.sin(t * f) / h;
    return this._w = l * p + this._w * m, this._x = n * p + this._x * m, this._y = i * p + this._y * m, this._z = s * p + this._z * m, this._onChangeCallback(), this;
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = Math.random(), t = Math.sqrt(1 - e), n = Math.sqrt(e), i = 2 * Math.PI * Math.random(), s = 2 * Math.PI * Math.random();
    return this.set(
      t * Math.cos(i),
      n * Math.sin(s),
      n * Math.cos(s),
      t * Math.sin(i)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class D {
  constructor(e = 0, t = 0, n = 0) {
    D.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
  }
  set(e, t, n) {
    return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  applyEuler(e) {
    return this.applyQuaternion(Vm.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(Vm.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, i = this.z, s = e.elements;
    return this.x = s[0] * t + s[3] * n + s[6] * i, this.y = s[1] * t + s[4] * n + s[7] * i, this.z = s[2] * t + s[5] * n + s[8] * i, this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, i = this.z, s = e.elements, l = 1 / (s[3] * t + s[7] * n + s[11] * i + s[15]);
    return this.x = (s[0] * t + s[4] * n + s[8] * i + s[12]) * l, this.y = (s[1] * t + s[5] * n + s[9] * i + s[13]) * l, this.z = (s[2] * t + s[6] * n + s[10] * i + s[14]) * l, this;
  }
  applyQuaternion(e) {
    const t = this.x, n = this.y, i = this.z, s = e.x, l = e.y, c = e.z, u = e.w, h = u * t + l * i - c * n, f = u * n + c * t - s * i, p = u * i + s * n - l * t, m = -s * t - l * n - c * i;
    return this.x = h * u + m * -s + f * -c - p * -l, this.y = f * u + m * -l + p * -s - h * -c, this.z = p * u + m * -c + h * -l - f * -s, this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, n = this.y, i = this.z, s = e.elements;
    return this.x = s[0] * t + s[4] * n + s[8] * i, this.y = s[1] * t + s[5] * n + s[9] * i, this.z = s[2] * t + s[6] * n + s[10] * i, this.normalize();
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x, i = e.y, s = e.z, l = t.x, c = t.y, u = t.z;
    return this.x = i * u - s * c, this.y = s * l - n * u, this.z = n * c - i * l, this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0)
      return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    return Uh.copy(this).projectOnVector(e), this.sub(Uh);
  }
  reflect(e) {
    return this.sub(Uh.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(Qt(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y, i = this.z - e.z;
    return t * t + n * n + i * i;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const i = Math.sin(t) * e;
    return this.x = i * Math.sin(n), this.y = Math.cos(t) * e, this.z = i * Math.cos(n), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), i = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = n, this.z = i, this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    const e = (Math.random() - 0.5) * 2, t = Math.random() * Math.PI * 2, n = Math.sqrt(1 - e ** 2);
    return this.x = n * Math.cos(t), this.y = n * Math.sin(t), this.z = e, this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const Uh = /* @__PURE__ */ new D(), Vm = /* @__PURE__ */ new Pn();
class ki {
  constructor(e = new D(1 / 0, 1 / 0, 1 / 0), t = new D(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3)
      this.expandByPoint(Zi.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++)
      this.expandByPoint(Zi.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = Zi.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    if (e.updateWorldMatrix(!1, !1), e.boundingBox !== void 0)
      e.boundingBox === null && e.computeBoundingBox(), ks.copy(e.boundingBox), ks.applyMatrix4(e.matrixWorld), this.union(ks);
    else {
      const i = e.geometry;
      if (i !== void 0)
        if (t && i.attributes !== void 0 && i.attributes.position !== void 0) {
          const s = i.attributes.position;
          for (let l = 0, c = s.count; l < c; l++)
            Zi.fromBufferAttribute(s, l).applyMatrix4(e.matrixWorld), this.expandByPoint(Zi);
        } else
          i.boundingBox === null && i.computeBoundingBox(), ks.copy(i.boundingBox), ks.applyMatrix4(e.matrixWorld), this.union(ks);
    }
    const n = e.children;
    for (let i = 0, s = n.length; i < s; i++)
      this.expandByObject(n[i], t);
    return this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, Zi), Zi.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(Yo), Wl.subVectors(this.max, Yo), Hs.subVectors(e.a, Yo), Vs.subVectors(e.b, Yo), Gs.subVectors(e.c, Yo), Sr.subVectors(Vs, Hs), Mr.subVectors(Gs, Vs), qr.subVectors(Hs, Gs);
    let t = [
      0,
      -Sr.z,
      Sr.y,
      0,
      -Mr.z,
      Mr.y,
      0,
      -qr.z,
      qr.y,
      Sr.z,
      0,
      -Sr.x,
      Mr.z,
      0,
      -Mr.x,
      qr.z,
      0,
      -qr.x,
      -Sr.y,
      Sr.x,
      0,
      -Mr.y,
      Mr.x,
      0,
      -qr.y,
      qr.x,
      0
    ];
    return !Oh(t, Hs, Vs, Gs, Wl) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !Oh(t, Hs, Vs, Gs, Wl)) ? !1 : (Xl.crossVectors(Sr, Mr), t = [Xl.x, Xl.y, Xl.z], Oh(t, Hs, Vs, Gs, Wl));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, Zi).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(Zi).length() * 0.5), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty() ? this : (ji[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), ji[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), ji[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), ji[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), ji[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), ji[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), ji[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), ji[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(ji), this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const ji = [
  /* @__PURE__ */ new D(),
  /* @__PURE__ */ new D(),
  /* @__PURE__ */ new D(),
  /* @__PURE__ */ new D(),
  /* @__PURE__ */ new D(),
  /* @__PURE__ */ new D(),
  /* @__PURE__ */ new D(),
  /* @__PURE__ */ new D()
], Zi = /* @__PURE__ */ new D(), ks = /* @__PURE__ */ new ki(), Hs = /* @__PURE__ */ new D(), Vs = /* @__PURE__ */ new D(), Gs = /* @__PURE__ */ new D(), Sr = /* @__PURE__ */ new D(), Mr = /* @__PURE__ */ new D(), qr = /* @__PURE__ */ new D(), Yo = /* @__PURE__ */ new D(), Wl = /* @__PURE__ */ new D(), Xl = /* @__PURE__ */ new D(), jr = /* @__PURE__ */ new D();
function Oh(r, e, t, n, i) {
  for (let s = 0, l = r.length - 3; s <= l; s += 3) {
    jr.fromArray(r, s);
    const c = i.x * Math.abs(jr.x) + i.y * Math.abs(jr.y) + i.z * Math.abs(jr.z), u = e.dot(jr), h = t.dot(jr), f = n.dot(jr);
    if (Math.max(-Math.max(u, h, f), Math.min(u, h, f)) > c)
      return !1;
  }
  return !0;
}
const sS = /* @__PURE__ */ new ki(), qo = /* @__PURE__ */ new D(), Fh = /* @__PURE__ */ new D();
class Ei {
  constructor(e = new D(), t = -1) {
    this.center = e, this.radius = t;
  }
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    t !== void 0 ? n.copy(t) : sS.setFromPoints(e).getCenter(n);
    let i = 0;
    for (let s = 0, l = e.length; s < l; s++)
      i = Math.max(i, n.distanceToSquared(e[s]));
    return this.radius = Math.sqrt(i), this;
  }
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    qo.subVectors(e, this.center);
    const t = qo.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t), i = (n - this.radius) * 0.5;
      this.center.addScaledVector(qo, i / n), this.radius += i;
    }
    return this;
  }
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (Fh.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(qo.copy(e.center).add(Fh)), this.expandByPoint(qo.copy(e.center).sub(Fh))), this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Ji = /* @__PURE__ */ new D(), zh = /* @__PURE__ */ new D(), Yl = /* @__PURE__ */ new D(), Er = /* @__PURE__ */ new D(), Bh = /* @__PURE__ */ new D(), ql = /* @__PURE__ */ new D(), kh = /* @__PURE__ */ new D();
class xs {
  constructor(e = new D(), t = new D(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, Ji)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = Ji.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (Ji.copy(this.origin).addScaledVector(this.direction, t), Ji.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, n, i) {
    zh.copy(e).add(t).multiplyScalar(0.5), Yl.copy(t).sub(e).normalize(), Er.copy(this.origin).sub(zh);
    const s = e.distanceTo(t) * 0.5, l = -this.direction.dot(Yl), c = Er.dot(this.direction), u = -Er.dot(Yl), h = Er.lengthSq(), f = Math.abs(1 - l * l);
    let p, m, v, y;
    if (f > 0)
      if (p = l * u - c, m = l * c - u, y = s * f, p >= 0)
        if (m >= -y)
          if (m <= y) {
            const E = 1 / f;
            p *= E, m *= E, v = p * (p + l * m + 2 * c) + m * (l * p + m + 2 * u) + h;
          } else
            m = s, p = Math.max(0, -(l * m + c)), v = -p * p + m * (m + 2 * u) + h;
        else
          m = -s, p = Math.max(0, -(l * m + c)), v = -p * p + m * (m + 2 * u) + h;
      else
        m <= -y ? (p = Math.max(0, -(-l * s + c)), m = p > 0 ? -s : Math.min(Math.max(-s, -u), s), v = -p * p + m * (m + 2 * u) + h) : m <= y ? (p = 0, m = Math.min(Math.max(-s, -u), s), v = m * (m + 2 * u) + h) : (p = Math.max(0, -(l * s + c)), m = p > 0 ? s : Math.min(Math.max(-s, -u), s), v = -p * p + m * (m + 2 * u) + h);
    else
      m = l > 0 ? -s : s, p = Math.max(0, -(l * m + c)), v = -p * p + m * (m + 2 * u) + h;
    return n && n.copy(this.origin).addScaledVector(this.direction, p), i && i.copy(zh).addScaledVector(Yl, m), v;
  }
  intersectSphere(e, t) {
    Ji.subVectors(e.center, this.origin);
    const n = Ji.dot(this.direction), i = Ji.dot(Ji) - n * n, s = e.radius * e.radius;
    if (i > s)
      return null;
    const l = Math.sqrt(s - i), c = n - l, u = n + l;
    return u < 0 ? null : c < 0 ? this.at(u, t) : this.at(c, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    return n === null ? null : this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let n, i, s, l, c, u;
    const h = 1 / this.direction.x, f = 1 / this.direction.y, p = 1 / this.direction.z, m = this.origin;
    return h >= 0 ? (n = (e.min.x - m.x) * h, i = (e.max.x - m.x) * h) : (n = (e.max.x - m.x) * h, i = (e.min.x - m.x) * h), f >= 0 ? (s = (e.min.y - m.y) * f, l = (e.max.y - m.y) * f) : (s = (e.max.y - m.y) * f, l = (e.min.y - m.y) * f), n > l || s > i || ((s > n || isNaN(n)) && (n = s), (l < i || isNaN(i)) && (i = l), p >= 0 ? (c = (e.min.z - m.z) * p, u = (e.max.z - m.z) * p) : (c = (e.max.z - m.z) * p, u = (e.min.z - m.z) * p), n > u || c > i) || ((c > n || n !== n) && (n = c), (u < i || i !== i) && (i = u), i < 0) ? null : this.at(n >= 0 ? n : i, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, Ji) !== null;
  }
  intersectTriangle(e, t, n, i, s) {
    Bh.subVectors(t, e), ql.subVectors(n, e), kh.crossVectors(Bh, ql);
    let l = this.direction.dot(kh), c;
    if (l > 0) {
      if (i)
        return null;
      c = 1;
    } else if (l < 0)
      c = -1, l = -l;
    else
      return null;
    Er.subVectors(this.origin, e);
    const u = c * this.direction.dot(ql.crossVectors(Er, ql));
    if (u < 0)
      return null;
    const h = c * this.direction.dot(Bh.cross(Er));
    if (h < 0 || u + h > l)
      return null;
    const f = -c * Er.dot(kh);
    return f < 0 ? null : this.at(f / l, s);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class ut {
  constructor(e, t, n, i, s, l, c, u, h, f, p, m, v, y, E, x) {
    ut.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, i, s, l, c, u, h, f, p, m, v, y, E, x);
  }
  set(e, t, n, i, s, l, c, u, h, f, p, m, v, y, E, x) {
    const _ = this.elements;
    return _[0] = e, _[4] = t, _[8] = n, _[12] = i, _[1] = s, _[5] = l, _[9] = c, _[13] = u, _[2] = h, _[6] = f, _[10] = p, _[14] = m, _[3] = v, _[7] = y, _[11] = E, _[15] = x, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  clone() {
    return new ut().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
  }
  copyPosition(e) {
    const t = this.elements, n = e.elements;
    return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, n) {
    return this.set(
      e.x,
      t.x,
      n.x,
      0,
      e.y,
      t.y,
      n.y,
      0,
      e.z,
      t.z,
      n.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractRotation(e) {
    const t = this.elements, n = e.elements, i = 1 / Ws.setFromMatrixColumn(e, 0).length(), s = 1 / Ws.setFromMatrixColumn(e, 1).length(), l = 1 / Ws.setFromMatrixColumn(e, 2).length();
    return t[0] = n[0] * i, t[1] = n[1] * i, t[2] = n[2] * i, t[3] = 0, t[4] = n[4] * s, t[5] = n[5] * s, t[6] = n[6] * s, t[7] = 0, t[8] = n[8] * l, t[9] = n[9] * l, t[10] = n[10] * l, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements, n = e.x, i = e.y, s = e.z, l = Math.cos(n), c = Math.sin(n), u = Math.cos(i), h = Math.sin(i), f = Math.cos(s), p = Math.sin(s);
    if (e.order === "XYZ") {
      const m = l * f, v = l * p, y = c * f, E = c * p;
      t[0] = u * f, t[4] = -u * p, t[8] = h, t[1] = v + y * h, t[5] = m - E * h, t[9] = -c * u, t[2] = E - m * h, t[6] = y + v * h, t[10] = l * u;
    } else if (e.order === "YXZ") {
      const m = u * f, v = u * p, y = h * f, E = h * p;
      t[0] = m + E * c, t[4] = y * c - v, t[8] = l * h, t[1] = l * p, t[5] = l * f, t[9] = -c, t[2] = v * c - y, t[6] = E + m * c, t[10] = l * u;
    } else if (e.order === "ZXY") {
      const m = u * f, v = u * p, y = h * f, E = h * p;
      t[0] = m - E * c, t[4] = -l * p, t[8] = y + v * c, t[1] = v + y * c, t[5] = l * f, t[9] = E - m * c, t[2] = -l * h, t[6] = c, t[10] = l * u;
    } else if (e.order === "ZYX") {
      const m = l * f, v = l * p, y = c * f, E = c * p;
      t[0] = u * f, t[4] = y * h - v, t[8] = m * h + E, t[1] = u * p, t[5] = E * h + m, t[9] = v * h - y, t[2] = -h, t[6] = c * u, t[10] = l * u;
    } else if (e.order === "YZX") {
      const m = l * u, v = l * h, y = c * u, E = c * h;
      t[0] = u * f, t[4] = E - m * p, t[8] = y * p + v, t[1] = p, t[5] = l * f, t[9] = -c * f, t[2] = -h * f, t[6] = v * p + y, t[10] = m - E * p;
    } else if (e.order === "XZY") {
      const m = l * u, v = l * h, y = c * u, E = c * h;
      t[0] = u * f, t[4] = -p, t[8] = h * f, t[1] = m * p + E, t[5] = l * f, t[9] = v * p - y, t[2] = y * p - v, t[6] = c * f, t[10] = E * p + m;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(oS, e, aS);
  }
  lookAt(e, t, n) {
    const i = this.elements;
    return Kn.subVectors(e, t), Kn.lengthSq() === 0 && (Kn.z = 1), Kn.normalize(), wr.crossVectors(n, Kn), wr.lengthSq() === 0 && (Math.abs(n.z) === 1 ? Kn.x += 1e-4 : Kn.z += 1e-4, Kn.normalize(), wr.crossVectors(n, Kn)), wr.normalize(), jl.crossVectors(Kn, wr), i[0] = wr.x, i[4] = jl.x, i[8] = Kn.x, i[1] = wr.y, i[5] = jl.y, i[9] = Kn.y, i[2] = wr.z, i[6] = jl.z, i[10] = Kn.z, this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, i = t.elements, s = this.elements, l = n[0], c = n[4], u = n[8], h = n[12], f = n[1], p = n[5], m = n[9], v = n[13], y = n[2], E = n[6], x = n[10], _ = n[14], w = n[3], M = n[7], b = n[11], A = n[15], C = i[0], I = i[4], z = i[8], R = i[12], L = i[1], H = i[5], te = i[9], se = i[13], G = i[2], $ = i[6], oe = i[10], ie = i[14], Y = i[3], q = i[7], j = i[11], k = i[15];
    return s[0] = l * C + c * L + u * G + h * Y, s[4] = l * I + c * H + u * $ + h * q, s[8] = l * z + c * te + u * oe + h * j, s[12] = l * R + c * se + u * ie + h * k, s[1] = f * C + p * L + m * G + v * Y, s[5] = f * I + p * H + m * $ + v * q, s[9] = f * z + p * te + m * oe + v * j, s[13] = f * R + p * se + m * ie + v * k, s[2] = y * C + E * L + x * G + _ * Y, s[6] = y * I + E * H + x * $ + _ * q, s[10] = y * z + E * te + x * oe + _ * j, s[14] = y * R + E * se + x * ie + _ * k, s[3] = w * C + M * L + b * G + A * Y, s[7] = w * I + M * H + b * $ + A * q, s[11] = w * z + M * te + b * oe + A * j, s[15] = w * R + M * se + b * ie + A * k, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[4], i = e[8], s = e[12], l = e[1], c = e[5], u = e[9], h = e[13], f = e[2], p = e[6], m = e[10], v = e[14], y = e[3], E = e[7], x = e[11], _ = e[15];
    return y * (+s * u * p - i * h * p - s * c * m + n * h * m + i * c * v - n * u * v) + E * (+t * u * v - t * h * m + s * l * m - i * l * v + i * h * f - s * u * f) + x * (+t * h * p - t * c * v - s * l * p + n * l * v + s * c * f - n * h * f) + _ * (-i * c * f - t * u * p + t * c * m + i * l * p - n * l * m + n * u * f);
  }
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  setPosition(e, t, n) {
    const i = this.elements;
    return e.isVector3 ? (i[12] = e.x, i[13] = e.y, i[14] = e.z) : (i[12] = e, i[13] = t, i[14] = n), this;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], s = e[3], l = e[4], c = e[5], u = e[6], h = e[7], f = e[8], p = e[9], m = e[10], v = e[11], y = e[12], E = e[13], x = e[14], _ = e[15], w = p * x * h - E * m * h + E * u * v - c * x * v - p * u * _ + c * m * _, M = y * m * h - f * x * h - y * u * v + l * x * v + f * u * _ - l * m * _, b = f * E * h - y * p * h + y * c * v - l * E * v - f * c * _ + l * p * _, A = y * p * u - f * E * u - y * c * m + l * E * m + f * c * x - l * p * x, C = t * w + n * M + i * b + s * A;
    if (C === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const I = 1 / C;
    return e[0] = w * I, e[1] = (E * m * s - p * x * s - E * i * v + n * x * v + p * i * _ - n * m * _) * I, e[2] = (c * x * s - E * u * s + E * i * h - n * x * h - c * i * _ + n * u * _) * I, e[3] = (p * u * s - c * m * s - p * i * h + n * m * h + c * i * v - n * u * v) * I, e[4] = M * I, e[5] = (f * x * s - y * m * s + y * i * v - t * x * v - f * i * _ + t * m * _) * I, e[6] = (y * u * s - l * x * s - y * i * h + t * x * h + l * i * _ - t * u * _) * I, e[7] = (l * m * s - f * u * s + f * i * h - t * m * h - l * i * v + t * u * v) * I, e[8] = b * I, e[9] = (y * p * s - f * E * s - y * n * v + t * E * v + f * n * _ - t * p * _) * I, e[10] = (l * E * s - y * c * s + y * n * h - t * E * h - l * n * _ + t * c * _) * I, e[11] = (f * c * s - l * p * s - f * n * h + t * p * h + l * n * v - t * c * v) * I, e[12] = A * I, e[13] = (f * E * i - y * p * i + y * n * m - t * E * m - f * n * x + t * p * x) * I, e[14] = (y * c * i - l * E * i - y * n * u + t * E * u + l * n * x - t * c * x) * I, e[15] = (l * p * i - f * c * i + f * n * u - t * p * u - l * n * m + t * c * m) * I, this;
  }
  scale(e) {
    const t = this.elements, n = e.x, i = e.y, s = e.z;
    return t[0] *= n, t[4] *= i, t[8] *= s, t[1] *= n, t[5] *= i, t[9] *= s, t[2] *= n, t[6] *= i, t[10] *= s, t[3] *= n, t[7] *= i, t[11] *= s, this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, i));
  }
  makeTranslation(e, t, n) {
    return e.isVector3 ? this.set(
      1,
      0,
      0,
      e.x,
      0,
      1,
      0,
      e.y,
      0,
      0,
      1,
      e.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      0,
      n,
      0,
      0,
      1,
      0,
      0,
      -n,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t), i = Math.sin(t), s = 1 - n, l = e.x, c = e.y, u = e.z, h = s * l, f = s * c;
    return this.set(
      h * l + n,
      h * c - i * u,
      h * u + i * c,
      0,
      h * c + i * u,
      f * c + n,
      f * u - i * l,
      0,
      h * u - i * c,
      f * u + i * l,
      s * u * u + n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t, n) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeShear(e, t, n, i, s, l) {
    return this.set(
      1,
      n,
      s,
      0,
      e,
      1,
      l,
      0,
      t,
      i,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  compose(e, t, n) {
    const i = this.elements, s = t._x, l = t._y, c = t._z, u = t._w, h = s + s, f = l + l, p = c + c, m = s * h, v = s * f, y = s * p, E = l * f, x = l * p, _ = c * p, w = u * h, M = u * f, b = u * p, A = n.x, C = n.y, I = n.z;
    return i[0] = (1 - (E + _)) * A, i[1] = (v + b) * A, i[2] = (y - M) * A, i[3] = 0, i[4] = (v - b) * C, i[5] = (1 - (m + _)) * C, i[6] = (x + w) * C, i[7] = 0, i[8] = (y + M) * I, i[9] = (x - w) * I, i[10] = (1 - (m + E)) * I, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1, this;
  }
  decompose(e, t, n) {
    const i = this.elements;
    let s = Ws.set(i[0], i[1], i[2]).length();
    const l = Ws.set(i[4], i[5], i[6]).length(), c = Ws.set(i[8], i[9], i[10]).length();
    this.determinant() < 0 && (s = -s), e.x = i[12], e.y = i[13], e.z = i[14], vi.copy(this);
    const h = 1 / s, f = 1 / l, p = 1 / c;
    return vi.elements[0] *= h, vi.elements[1] *= h, vi.elements[2] *= h, vi.elements[4] *= f, vi.elements[5] *= f, vi.elements[6] *= f, vi.elements[8] *= p, vi.elements[9] *= p, vi.elements[10] *= p, t.setFromRotationMatrix(vi), n.x = s, n.y = l, n.z = c, this;
  }
  makePerspective(e, t, n, i, s, l, c = Ui) {
    const u = this.elements, h = 2 * s / (t - e), f = 2 * s / (n - i), p = (t + e) / (t - e), m = (n + i) / (n - i);
    let v, y;
    if (c === Ui)
      v = -(l + s) / (l - s), y = -2 * l * s / (l - s);
    else if (c === wa)
      v = -l / (l - s), y = -l * s / (l - s);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + c);
    return u[0] = h, u[4] = 0, u[8] = p, u[12] = 0, u[1] = 0, u[5] = f, u[9] = m, u[13] = 0, u[2] = 0, u[6] = 0, u[10] = v, u[14] = y, u[3] = 0, u[7] = 0, u[11] = -1, u[15] = 0, this;
  }
  makeOrthographic(e, t, n, i, s, l, c = Ui) {
    const u = this.elements, h = 1 / (t - e), f = 1 / (n - i), p = 1 / (l - s), m = (t + e) * h, v = (n + i) * f;
    let y, E;
    if (c === Ui)
      y = (l + s) * p, E = -2 * p;
    else if (c === wa)
      y = s * p, E = -1 * p;
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + c);
    return u[0] = 2 * h, u[4] = 0, u[8] = 0, u[12] = -m, u[1] = 0, u[5] = 2 * f, u[9] = 0, u[13] = -v, u[2] = 0, u[6] = 0, u[10] = E, u[14] = -y, u[3] = 0, u[7] = 0, u[11] = 0, u[15] = 1, this;
  }
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let i = 0; i < 16; i++)
      if (t[i] !== n[i])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
  }
}
const Ws = /* @__PURE__ */ new D(), vi = /* @__PURE__ */ new ut(), oS = /* @__PURE__ */ new D(0, 0, 0), aS = /* @__PURE__ */ new D(1, 1, 1), wr = /* @__PURE__ */ new D(), jl = /* @__PURE__ */ new D(), Kn = /* @__PURE__ */ new D(), Gm = /* @__PURE__ */ new ut(), Wm = /* @__PURE__ */ new Pn();
class Fa {
  constructor(e = 0, t = 0, n = 0, i = Fa.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = i;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  set(e, t, n, i = this._order) {
    return this._x = e, this._y = t, this._z = n, this._order = i, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e, t = this._order, n = !0) {
    const i = e.elements, s = i[0], l = i[4], c = i[8], u = i[1], h = i[5], f = i[9], p = i[2], m = i[6], v = i[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(Qt(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(-f, v), this._z = Math.atan2(-l, s)) : (this._x = Math.atan2(m, h), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-Qt(f, -1, 1)), Math.abs(f) < 0.9999999 ? (this._y = Math.atan2(c, v), this._z = Math.atan2(u, h)) : (this._y = Math.atan2(-p, s), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(Qt(m, -1, 1)), Math.abs(m) < 0.9999999 ? (this._y = Math.atan2(-p, v), this._z = Math.atan2(-l, h)) : (this._y = 0, this._z = Math.atan2(u, s));
        break;
      case "ZYX":
        this._y = Math.asin(-Qt(p, -1, 1)), Math.abs(p) < 0.9999999 ? (this._x = Math.atan2(m, v), this._z = Math.atan2(u, s)) : (this._x = 0, this._z = Math.atan2(-l, h));
        break;
      case "YZX":
        this._z = Math.asin(Qt(u, -1, 1)), Math.abs(u) < 0.9999999 ? (this._x = Math.atan2(-f, h), this._y = Math.atan2(-p, s)) : (this._x = 0, this._y = Math.atan2(c, v));
        break;
      case "XZY":
        this._z = Math.asin(-Qt(l, -1, 1)), Math.abs(l) < 0.9999999 ? (this._x = Math.atan2(m, h), this._y = Math.atan2(c, s)) : (this._x = Math.atan2(-f, v), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, n === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, n) {
    return Gm.makeRotationFromQuaternion(e), this.setFromRotationMatrix(Gm, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return Wm.setFromEuler(this), this.setFromQuaternion(Wm, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
Fa.DEFAULT_ORDER = "XYZ";
class fs {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let lS = 0;
const Xm = /* @__PURE__ */ new D(), Xs = /* @__PURE__ */ new Pn(), Ki = /* @__PURE__ */ new ut(), Zl = /* @__PURE__ */ new D(), jo = /* @__PURE__ */ new D(), cS = /* @__PURE__ */ new D(), uS = /* @__PURE__ */ new Pn(), Ym = /* @__PURE__ */ new D(1, 0, 0), qm = /* @__PURE__ */ new D(0, 1, 0), jm = /* @__PURE__ */ new D(0, 0, 1), hS = { type: "added" }, fS = { type: "removed" };
class Rt extends ur {
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: lS++ }), this.uuid = ti(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Rt.DEFAULT_UP.clone();
    const e = new D(), t = new Fa(), n = new Pn(), i = new D(1, 1, 1);
    function s() {
      n.setFromEuler(t, !1);
    }
    function l() {
      t.setFromQuaternion(n, void 0, !1);
    }
    t._onChange(s), n._onChange(l), Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: n
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: i
      },
      modelViewMatrix: {
        value: new ut()
      },
      normalMatrix: {
        value: new pt()
      }
    }), this.matrix = new ut(), this.matrixWorld = new ut(), this.matrixAutoUpdate = Rt.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.matrixWorldAutoUpdate = Rt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.layers = new fs(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return Xs.setFromAxisAngle(e, t), this.quaternion.multiply(Xs), this;
  }
  rotateOnWorldAxis(e, t) {
    return Xs.setFromAxisAngle(e, t), this.quaternion.premultiply(Xs), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(Ym, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(qm, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(jm, e);
  }
  translateOnAxis(e, t) {
    return Xm.copy(e).applyQuaternion(this.quaternion), this.position.add(Xm.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(Ym, e);
  }
  translateY(e) {
    return this.translateOnAxis(qm, e);
  }
  translateZ(e) {
    return this.translateOnAxis(jm, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(Ki.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    e.isVector3 ? Zl.copy(e) : Zl.set(e, t, n);
    const i = this.parent;
    this.updateWorldMatrix(!0, !1), jo.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Ki.lookAt(jo, Zl, this.up) : Ki.lookAt(Zl, jo, this.up), this.quaternion.setFromRotationMatrix(Ki), i && (Ki.extractRotation(i.matrixWorld), Xs.setFromRotationMatrix(Ki), this.quaternion.premultiply(Xs.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(hS)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++)
        this.remove(arguments[n]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(fS)), this;
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(e) {
    return this.updateWorldMatrix(!0, !1), Ki.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), Ki.multiply(e.parent.matrixWorld)), e.applyMatrix4(Ki), this.add(e), e.updateWorldMatrix(!1, !0), this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t)
      return this;
    for (let n = 0, i = this.children.length; n < i; n++) {
      const l = this.children[n].getObjectByProperty(e, t);
      if (l !== void 0)
        return l;
    }
  }
  getObjectsByProperty(e, t) {
    let n = [];
    this[e] === t && n.push(this);
    for (let i = 0, s = this.children.length; i < s; i++) {
      const l = this.children[i].getObjectsByProperty(e, t);
      l.length > 0 && (n = n.concat(l));
    }
    return n;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(jo, e, cS), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(jo, uS, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++)
      t[n].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1)
      return;
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++)
      t[n].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++) {
      const s = t[n];
      (s.matrixWorldAutoUpdate === !0 || e === !0) && s.updateMatrixWorld(e);
    }
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (e === !0 && n !== null && n.matrixWorldAutoUpdate === !0 && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
      const i = this.children;
      for (let s = 0, l = i.length; s < l; s++) {
        const c = i[s];
        c.matrixWorldAutoUpdate === !0 && c.updateWorldMatrix(!1, !0);
      }
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", n = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, n.metadata = {
      version: 4.6,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const i = {};
    i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.castShadow === !0 && (i.castShadow = !0), this.receiveShadow === !0 && (i.receiveShadow = !0), this.visible === !1 && (i.visible = !1), this.frustumCulled === !1 && (i.frustumCulled = !1), this.renderOrder !== 0 && (i.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), i.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON()));
    function s(c, u) {
      return c[u.uuid] === void 0 && (c[u.uuid] = u.toJSON(e)), u.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (i.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      i.geometry = s(e.geometries, this.geometry);
      const c = this.geometry.parameters;
      if (c !== void 0 && c.shapes !== void 0) {
        const u = c.shapes;
        if (Array.isArray(u))
          for (let h = 0, f = u.length; h < f; h++) {
            const p = u[h];
            s(e.shapes, p);
          }
        else
          s(e.shapes, u);
      }
    }
    if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (s(e.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const c = [];
        for (let u = 0, h = this.material.length; u < h; u++)
          c.push(s(e.materials, this.material[u]));
        i.material = c;
      } else
        i.material = s(e.materials, this.material);
    if (this.children.length > 0) {
      i.children = [];
      for (let c = 0; c < this.children.length; c++)
        i.children.push(this.children[c].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      i.animations = [];
      for (let c = 0; c < this.animations.length; c++) {
        const u = this.animations[c];
        i.animations.push(s(e.animations, u));
      }
    }
    if (t) {
      const c = l(e.geometries), u = l(e.materials), h = l(e.textures), f = l(e.images), p = l(e.shapes), m = l(e.skeletons), v = l(e.animations), y = l(e.nodes);
      c.length > 0 && (n.geometries = c), u.length > 0 && (n.materials = u), h.length > 0 && (n.textures = h), f.length > 0 && (n.images = f), p.length > 0 && (n.shapes = p), m.length > 0 && (n.skeletons = m), v.length > 0 && (n.animations = v), y.length > 0 && (n.nodes = y);
    }
    return n.object = i, n;
    function l(c) {
      const u = [];
      for (const h in c) {
        const f = c[h];
        delete f.metadata, u.push(f);
      }
      return u;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let n = 0; n < e.children.length; n++) {
        const i = e.children[n];
        this.add(i.clone());
      }
    return this;
  }
}
Rt.DEFAULT_UP = /* @__PURE__ */ new D(0, 1, 0);
Rt.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Rt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const _i = /* @__PURE__ */ new D(), Qi = /* @__PURE__ */ new D(), Hh = /* @__PURE__ */ new D(), $i = /* @__PURE__ */ new D(), Ys = /* @__PURE__ */ new D(), qs = /* @__PURE__ */ new D(), Zm = /* @__PURE__ */ new D(), Vh = /* @__PURE__ */ new D(), Gh = /* @__PURE__ */ new D(), Wh = /* @__PURE__ */ new D();
let Jl = !1;
class Gn {
  constructor(e = new D(), t = new D(), n = new D()) {
    this.a = e, this.b = t, this.c = n;
  }
  static getNormal(e, t, n, i) {
    i.subVectors(n, t), _i.subVectors(e, t), i.cross(_i);
    const s = i.lengthSq();
    return s > 0 ? i.multiplyScalar(1 / Math.sqrt(s)) : i.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, n, i, s) {
    _i.subVectors(i, t), Qi.subVectors(n, t), Hh.subVectors(e, t);
    const l = _i.dot(_i), c = _i.dot(Qi), u = _i.dot(Hh), h = Qi.dot(Qi), f = Qi.dot(Hh), p = l * h - c * c;
    if (p === 0)
      return s.set(-2, -1, -1);
    const m = 1 / p, v = (h * u - c * f) * m, y = (l * f - c * u) * m;
    return s.set(1 - v - y, y, v);
  }
  static containsPoint(e, t, n, i) {
    return this.getBarycoord(e, t, n, i, $i), $i.x >= 0 && $i.y >= 0 && $i.x + $i.y <= 1;
  }
  static getUV(e, t, n, i, s, l, c, u) {
    return Jl === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), Jl = !0), this.getInterpolation(e, t, n, i, s, l, c, u);
  }
  static getInterpolation(e, t, n, i, s, l, c, u) {
    return this.getBarycoord(e, t, n, i, $i), u.setScalar(0), u.addScaledVector(s, $i.x), u.addScaledVector(l, $i.y), u.addScaledVector(c, $i.z), u;
  }
  static isFrontFacing(e, t, n, i) {
    return _i.subVectors(n, t), Qi.subVectors(e, t), _i.cross(Qi).dot(i) < 0;
  }
  set(e, t, n) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
  }
  setFromPointsAndIndices(e, t, n, i) {
    return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this;
  }
  setFromAttributeAndIndices(e, t, n, i) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, i), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return _i.subVectors(this.c, this.b), Qi.subVectors(this.a, this.b), _i.cross(Qi).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return Gn.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return Gn.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getUV(e, t, n, i, s) {
    return Jl === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), Jl = !0), Gn.getInterpolation(e, this.a, this.b, this.c, t, n, i, s);
  }
  getInterpolation(e, t, n, i, s) {
    return Gn.getInterpolation(e, this.a, this.b, this.c, t, n, i, s);
  }
  containsPoint(e) {
    return Gn.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return Gn.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a, i = this.b, s = this.c;
    let l, c;
    Ys.subVectors(i, n), qs.subVectors(s, n), Vh.subVectors(e, n);
    const u = Ys.dot(Vh), h = qs.dot(Vh);
    if (u <= 0 && h <= 0)
      return t.copy(n);
    Gh.subVectors(e, i);
    const f = Ys.dot(Gh), p = qs.dot(Gh);
    if (f >= 0 && p <= f)
      return t.copy(i);
    const m = u * p - f * h;
    if (m <= 0 && u >= 0 && f <= 0)
      return l = u / (u - f), t.copy(n).addScaledVector(Ys, l);
    Wh.subVectors(e, s);
    const v = Ys.dot(Wh), y = qs.dot(Wh);
    if (y >= 0 && v <= y)
      return t.copy(s);
    const E = v * h - u * y;
    if (E <= 0 && h >= 0 && y <= 0)
      return c = h / (h - y), t.copy(n).addScaledVector(qs, c);
    const x = f * y - v * p;
    if (x <= 0 && p - f >= 0 && v - y >= 0)
      return Zm.subVectors(s, i), c = (p - f) / (p - f + (v - y)), t.copy(i).addScaledVector(Zm, c);
    const _ = 1 / (x + E + m);
    return l = E * _, c = m * _, t.copy(n).addScaledVector(Ys, l).addScaledVector(qs, c);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
let dS = 0;
class Ln extends ur {
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: dS++ }), this.uuid = ti(), this.name = "", this.type = "Material", this.blending = Ar, this.side = ar, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = dd, this.blendDst = pd, this.blendEquation = ss, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = Gc, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = xv, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = kc, this.stencilZFail = kc, this.stencilZPass = kc, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  onBuild() {
  }
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const n = e[t];
        if (n === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const i = this[t];
        if (i === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[t] = n;
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const n = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== Ar && (n.blending = this.blending), this.side !== ar && (n.side = this.side), this.vertexColors === !0 && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = !0), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === !0 && (n.alphaHash = !0), this.alphaToCoverage === !0 && (n.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0), this.forceSinglePass === !0 && (n.forceSinglePass = !0), this.wireframe === !0 && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = !0), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function i(s) {
      const l = [];
      for (const c in s) {
        const u = s[c];
        delete u.metadata, l.push(u);
      }
      return l;
    }
    if (t) {
      const s = i(e.textures), l = i(e.images);
      s.length > 0 && (n.textures = s), l.length > 0 && (n.images = l);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const i = t.length;
      n = new Array(i);
      for (let s = 0; s !== i; ++s)
        n[s] = t[s].clone();
    }
    return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
}
const Nv = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, Tr = { h: 0, s: 0, l: 0 }, Kl = { h: 0, s: 0, l: 0 };
function Xh(r, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? r + (e - r) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? r + (e - r) * 6 * (2 / 3 - t) : r;
}
class Fe {
  constructor(e, t, n) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, n);
  }
  set(e, t, n) {
    if (t === void 0 && n === void 0) {
      const i = e;
      i && i.isColor ? this.copy(i) : typeof i == "number" ? this.setHex(i) : typeof i == "string" && this.setStyle(i);
    } else
      this.setRGB(e, t, n);
    return this;
  }
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  setHex(e, t = hn) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, Lt.toWorkingColorSpace(this, t), this;
  }
  setRGB(e, t, n, i = Lt.workingColorSpace) {
    return this.r = e, this.g = t, this.b = n, Lt.toWorkingColorSpace(this, i), this;
  }
  setHSL(e, t, n, i = Lt.workingColorSpace) {
    if (e = Td(e, 1), t = Qt(t, 0, 1), n = Qt(n, 0, 1), t === 0)
      this.r = this.g = this.b = n;
    else {
      const s = n <= 0.5 ? n * (1 + t) : n + t - n * t, l = 2 * n - s;
      this.r = Xh(l, s, e + 1 / 3), this.g = Xh(l, s, e), this.b = Xh(l, s, e - 1 / 3);
    }
    return Lt.toWorkingColorSpace(this, i), this;
  }
  setStyle(e, t = hn) {
    function n(s) {
      s !== void 0 && parseFloat(s) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let i;
    if (i = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let s;
      const l = i[1], c = i[2];
      switch (l) {
        case "rgb":
        case "rgba":
          if (s = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c))
            return n(s[4]), this.setRGB(
              Math.min(255, parseInt(s[1], 10)) / 255,
              Math.min(255, parseInt(s[2], 10)) / 255,
              Math.min(255, parseInt(s[3], 10)) / 255,
              t
            );
          if (s = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c))
            return n(s[4]), this.setRGB(
              Math.min(100, parseInt(s[1], 10)) / 100,
              Math.min(100, parseInt(s[2], 10)) / 100,
              Math.min(100, parseInt(s[3], 10)) / 100,
              t
            );
          break;
        case "hsl":
        case "hsla":
          if (s = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c))
            return n(s[4]), this.setHSL(
              parseFloat(s[1]) / 360,
              parseFloat(s[2]) / 100,
              parseFloat(s[3]) / 100,
              t
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (i = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const s = i[1], l = s.length;
      if (l === 3)
        return this.setRGB(
          parseInt(s.charAt(0), 16) / 15,
          parseInt(s.charAt(1), 16) / 15,
          parseInt(s.charAt(2), 16) / 15,
          t
        );
      if (l === 6)
        return this.setHex(parseInt(s, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = hn) {
    const n = Nv[e.toLowerCase()];
    return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  copySRGBToLinear(e) {
    return this.r = vo(e.r), this.g = vo(e.g), this.b = vo(e.b), this;
  }
  copyLinearToSRGB(e) {
    return this.r = Dh(e.r), this.g = Dh(e.g), this.b = Dh(e.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = hn) {
    return Lt.fromWorkingColorSpace(An.copy(this), e), Math.round(Qt(An.r * 255, 0, 255)) * 65536 + Math.round(Qt(An.g * 255, 0, 255)) * 256 + Math.round(Qt(An.b * 255, 0, 255));
  }
  getHexString(e = hn) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = Lt.workingColorSpace) {
    Lt.fromWorkingColorSpace(An.copy(this), t);
    const n = An.r, i = An.g, s = An.b, l = Math.max(n, i, s), c = Math.min(n, i, s);
    let u, h;
    const f = (c + l) / 2;
    if (c === l)
      u = 0, h = 0;
    else {
      const p = l - c;
      switch (h = f <= 0.5 ? p / (l + c) : p / (2 - l - c), l) {
        case n:
          u = (i - s) / p + (i < s ? 6 : 0);
          break;
        case i:
          u = (s - n) / p + 2;
          break;
        case s:
          u = (n - i) / p + 4;
          break;
      }
      u /= 6;
    }
    return e.h = u, e.s = h, e.l = f, e;
  }
  getRGB(e, t = Lt.workingColorSpace) {
    return Lt.fromWorkingColorSpace(An.copy(this), t), e.r = An.r, e.g = An.g, e.b = An.b, e;
  }
  getStyle(e = hn) {
    Lt.fromWorkingColorSpace(An.copy(this), e);
    const t = An.r, n = An.g, i = An.b;
    return e !== hn ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(i * 255)})`;
  }
  offsetHSL(e, t, n) {
    return this.getHSL(Tr), this.setHSL(Tr.h + e, Tr.s + t, Tr.l + n);
  }
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  lerpColors(e, t, n) {
    return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
  }
  lerpHSL(e, t) {
    this.getHSL(Tr), e.getHSL(Kl);
    const n = ca(Tr.h, Kl.h, t), i = ca(Tr.s, Kl.s, t), s = ca(Tr.l, Kl.l, t);
    return this.setHSL(n, i, s), this;
  }
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  applyMatrix3(e) {
    const t = this.r, n = this.g, i = this.b, s = e.elements;
    return this.r = s[0] * t + s[3] * n + s[6] * i, this.g = s[1] * t + s[4] * n + s[7] * i, this.b = s[2] * t + s[5] * n + s[8] * i, this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const An = /* @__PURE__ */ new Fe();
Fe.NAMES = Nv;
class Ur extends Ln {
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new Fe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Ua, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const nr = /* @__PURE__ */ pS();
function pS() {
  const r = new ArrayBuffer(4), e = new Float32Array(r), t = new Uint32Array(r), n = new Uint32Array(512), i = new Uint32Array(512);
  for (let u = 0; u < 256; ++u) {
    const h = u - 127;
    h < -27 ? (n[u] = 0, n[u | 256] = 32768, i[u] = 24, i[u | 256] = 24) : h < -14 ? (n[u] = 1024 >> -h - 14, n[u | 256] = 1024 >> -h - 14 | 32768, i[u] = -h - 1, i[u | 256] = -h - 1) : h <= 15 ? (n[u] = h + 15 << 10, n[u | 256] = h + 15 << 10 | 32768, i[u] = 13, i[u | 256] = 13) : h < 128 ? (n[u] = 31744, n[u | 256] = 64512, i[u] = 24, i[u | 256] = 24) : (n[u] = 31744, n[u | 256] = 64512, i[u] = 13, i[u | 256] = 13);
  }
  const s = new Uint32Array(2048), l = new Uint32Array(64), c = new Uint32Array(64);
  for (let u = 1; u < 1024; ++u) {
    let h = u << 13, f = 0;
    for (; !(h & 8388608); )
      h <<= 1, f -= 8388608;
    h &= -8388609, f += 947912704, s[u] = h | f;
  }
  for (let u = 1024; u < 2048; ++u)
    s[u] = 939524096 + (u - 1024 << 13);
  for (let u = 1; u < 31; ++u)
    l[u] = u << 23;
  l[31] = 1199570944, l[32] = 2147483648;
  for (let u = 33; u < 63; ++u)
    l[u] = 2147483648 + (u - 32 << 23);
  l[63] = 3347054592;
  for (let u = 1; u < 64; ++u)
    u !== 32 && (c[u] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: n,
    shiftTable: i,
    mantissaTable: s,
    exponentTable: l,
    offsetTable: c
  };
}
function Vn(r) {
  Math.abs(r) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), r = Qt(r, -65504, 65504), nr.floatView[0] = r;
  const e = nr.uint32View[0], t = e >> 23 & 511;
  return nr.baseTable[t] + ((e & 8388607) >> nr.shiftTable[t]);
}
function sa(r) {
  const e = r >> 10;
  return nr.uint32View[0] = nr.mantissaTable[nr.offsetTable[e] + (r & 1023)] + nr.exponentTable[e], nr.floatView[0];
}
const mS = {
  toHalfFloat: Vn,
  fromHalfFloat: sa
}, an = /* @__PURE__ */ new D(), Ql = /* @__PURE__ */ new ue();
class Ot {
  constructor(e, t, n = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = Ea, this.updateRange = { offset: 0, count: -1 }, this.gpuType = ei, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
  }
  copyAt(e, t, n) {
    e *= this.itemSize, n *= t.itemSize;
    for (let i = 0, s = this.itemSize; i < s; i++)
      this.array[e + i] = t.array[n + i];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, n = this.count; t < n; t++)
        Ql.fromBufferAttribute(this, t), Ql.applyMatrix3(e), this.setXY(t, Ql.x, Ql.y);
    else if (this.itemSize === 3)
      for (let t = 0, n = this.count; t < n; t++)
        an.fromBufferAttribute(this, t), an.applyMatrix3(e), this.setXYZ(t, an.x, an.y, an.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++)
      an.fromBufferAttribute(this, t), an.applyMatrix4(e), this.setXYZ(t, an.x, an.y, an.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      an.fromBufferAttribute(this, t), an.applyNormalMatrix(e), this.setXYZ(t, an.x, an.y, an.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      an.fromBufferAttribute(this, t), an.transformDirection(e), this.setXYZ(t, an.x, an.y, an.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getComponent(e, t) {
    let n = this.array[e * this.itemSize + t];
    return this.normalized && (n = Wn(n, this.array)), n;
  }
  setComponent(e, t, n) {
    return this.normalized && (n = ft(n, this.array)), this.array[e * this.itemSize + t] = n, this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = ft(t, this.array), n = ft(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, i) {
    return e *= this.itemSize, this.normalized && (t = ft(t, this.array), n = ft(n, this.array), i = ft(i, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this;
  }
  setXYZW(e, t, n, i, s) {
    return e *= this.itemSize, this.normalized && (t = ft(t, this.array), n = ft(n, this.array), i = ft(i, this.array), s = ft(s, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this.array[e + 3] = s, this;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== Ea && (e.usage = this.usage), (this.updateRange.offset !== 0 || this.updateRange.count !== -1) && (e.updateRange = this.updateRange), e;
  }
}
class gS extends Ot {
  constructor(e, t, n) {
    super(new Int8Array(e), t, n);
  }
}
class vS extends Ot {
  constructor(e, t, n) {
    super(new Uint8Array(e), t, n);
  }
}
class _S extends Ot {
  constructor(e, t, n) {
    super(new Uint8ClampedArray(e), t, n);
  }
}
class yS extends Ot {
  constructor(e, t, n) {
    super(new Int16Array(e), t, n);
  }
}
class Rd extends Ot {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
}
class xS extends Ot {
  constructor(e, t, n) {
    super(new Int32Array(e), t, n);
  }
}
class Cd extends Ot {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
}
class SS extends Ot {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let t = sa(this.array[e * this.itemSize]);
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.array[e * this.itemSize] = Vn(t), this;
  }
  getY(e) {
    let t = sa(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.array[e * this.itemSize + 1] = Vn(t), this;
  }
  getZ(e) {
    let t = sa(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.array[e * this.itemSize + 2] = Vn(t), this;
  }
  getW(e) {
    let t = sa(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.array[e * this.itemSize + 3] = Vn(t), this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = ft(t, this.array), n = ft(n, this.array)), this.array[e + 0] = Vn(t), this.array[e + 1] = Vn(n), this;
  }
  setXYZ(e, t, n, i) {
    return e *= this.itemSize, this.normalized && (t = ft(t, this.array), n = ft(n, this.array), i = ft(i, this.array)), this.array[e + 0] = Vn(t), this.array[e + 1] = Vn(n), this.array[e + 2] = Vn(i), this;
  }
  setXYZW(e, t, n, i, s) {
    return e *= this.itemSize, this.normalized && (t = ft(t, this.array), n = ft(n, this.array), i = ft(i, this.array), s = ft(s, this.array)), this.array[e + 0] = Vn(t), this.array[e + 1] = Vn(n), this.array[e + 2] = Vn(i), this.array[e + 3] = Vn(s), this;
  }
}
class We extends Ot {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
}
class MS extends Ot {
  constructor(e, t, n) {
    super(new Float64Array(e), t, n);
  }
}
let ES = 0;
const ui = /* @__PURE__ */ new ut(), Yh = /* @__PURE__ */ new Rt(), js = /* @__PURE__ */ new D(), Qn = /* @__PURE__ */ new ki(), Zo = /* @__PURE__ */ new ki(), vn = /* @__PURE__ */ new D();
class _t extends ur {
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: ES++ }), this.uuid = ti(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (Lv(e) ? Cd : Rd)(e, 1) : this.index = e, this;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: n
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const n = this.attributes.normal;
    if (n !== void 0) {
      const s = new pt().getNormalMatrix(e);
      n.applyNormalMatrix(s), n.needsUpdate = !0;
    }
    const i = this.attributes.tangent;
    return i !== void 0 && (i.transformDirection(e), i.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(e) {
    return ui.makeRotationFromQuaternion(e), this.applyMatrix4(ui), this;
  }
  rotateX(e) {
    return ui.makeRotationX(e), this.applyMatrix4(ui), this;
  }
  rotateY(e) {
    return ui.makeRotationY(e), this.applyMatrix4(ui), this;
  }
  rotateZ(e) {
    return ui.makeRotationZ(e), this.applyMatrix4(ui), this;
  }
  translate(e, t, n) {
    return ui.makeTranslation(e, t, n), this.applyMatrix4(ui), this;
  }
  scale(e, t, n) {
    return ui.makeScale(e, t, n), this.applyMatrix4(ui), this;
  }
  lookAt(e) {
    return Yh.lookAt(e), Yh.updateMatrix(), this.applyMatrix4(Yh.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(js).negate(), this.translate(js.x, js.y, js.z), this;
  }
  setFromPoints(e) {
    const t = [];
    for (let n = 0, i = e.length; n < i; n++) {
      const s = e[n];
      t.push(s.x, s.y, s.z || 0);
    }
    return this.setAttribute("position", new We(t, 3)), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new ki());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(
        new D(-1 / 0, -1 / 0, -1 / 0),
        new D(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let n = 0, i = t.length; n < i; n++) {
          const s = t[n];
          Qn.setFromBufferAttribute(s), this.morphTargetsRelative ? (vn.addVectors(this.boundingBox.min, Qn.min), this.boundingBox.expandByPoint(vn), vn.addVectors(this.boundingBox.max, Qn.max), this.boundingBox.expandByPoint(vn)) : (this.boundingBox.expandByPoint(Qn.min), this.boundingBox.expandByPoint(Qn.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new Ei());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new D(), 1 / 0);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      if (Qn.setFromBufferAttribute(e), t)
        for (let s = 0, l = t.length; s < l; s++) {
          const c = t[s];
          Zo.setFromBufferAttribute(c), this.morphTargetsRelative ? (vn.addVectors(Qn.min, Zo.min), Qn.expandByPoint(vn), vn.addVectors(Qn.max, Zo.max), Qn.expandByPoint(vn)) : (Qn.expandByPoint(Zo.min), Qn.expandByPoint(Zo.max));
        }
      Qn.getCenter(n);
      let i = 0;
      for (let s = 0, l = e.count; s < l; s++)
        vn.fromBufferAttribute(e, s), i = Math.max(i, n.distanceToSquared(vn));
      if (t)
        for (let s = 0, l = t.length; s < l; s++) {
          const c = t[s], u = this.morphTargetsRelative;
          for (let h = 0, f = c.count; h < f; h++)
            vn.fromBufferAttribute(c, h), u && (js.fromBufferAttribute(e, h), vn.add(js)), i = Math.max(i, n.distanceToSquared(vn));
        }
      this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const n = e.array, i = t.position.array, s = t.normal.array, l = t.uv.array, c = i.length / 3;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new Ot(new Float32Array(4 * c), 4));
    const u = this.getAttribute("tangent").array, h = [], f = [];
    for (let L = 0; L < c; L++)
      h[L] = new D(), f[L] = new D();
    const p = new D(), m = new D(), v = new D(), y = new ue(), E = new ue(), x = new ue(), _ = new D(), w = new D();
    function M(L, H, te) {
      p.fromArray(i, L * 3), m.fromArray(i, H * 3), v.fromArray(i, te * 3), y.fromArray(l, L * 2), E.fromArray(l, H * 2), x.fromArray(l, te * 2), m.sub(p), v.sub(p), E.sub(y), x.sub(y);
      const se = 1 / (E.x * x.y - x.x * E.y);
      isFinite(se) && (_.copy(m).multiplyScalar(x.y).addScaledVector(v, -E.y).multiplyScalar(se), w.copy(v).multiplyScalar(E.x).addScaledVector(m, -x.x).multiplyScalar(se), h[L].add(_), h[H].add(_), h[te].add(_), f[L].add(w), f[H].add(w), f[te].add(w));
    }
    let b = this.groups;
    b.length === 0 && (b = [{
      start: 0,
      count: n.length
    }]);
    for (let L = 0, H = b.length; L < H; ++L) {
      const te = b[L], se = te.start, G = te.count;
      for (let $ = se, oe = se + G; $ < oe; $ += 3)
        M(
          n[$ + 0],
          n[$ + 1],
          n[$ + 2]
        );
    }
    const A = new D(), C = new D(), I = new D(), z = new D();
    function R(L) {
      I.fromArray(s, L * 3), z.copy(I);
      const H = h[L];
      A.copy(H), A.sub(I.multiplyScalar(I.dot(H))).normalize(), C.crossVectors(z, H);
      const se = C.dot(f[L]) < 0 ? -1 : 1;
      u[L * 4] = A.x, u[L * 4 + 1] = A.y, u[L * 4 + 2] = A.z, u[L * 4 + 3] = se;
    }
    for (let L = 0, H = b.length; L < H; ++L) {
      const te = b[L], se = te.start, G = te.count;
      for (let $ = se, oe = se + G; $ < oe; $ += 3)
        R(n[$ + 0]), R(n[$ + 1]), R(n[$ + 2]);
    }
  }
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0)
        n = new Ot(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
      else
        for (let m = 0, v = n.count; m < v; m++)
          n.setXYZ(m, 0, 0, 0);
      const i = new D(), s = new D(), l = new D(), c = new D(), u = new D(), h = new D(), f = new D(), p = new D();
      if (e)
        for (let m = 0, v = e.count; m < v; m += 3) {
          const y = e.getX(m + 0), E = e.getX(m + 1), x = e.getX(m + 2);
          i.fromBufferAttribute(t, y), s.fromBufferAttribute(t, E), l.fromBufferAttribute(t, x), f.subVectors(l, s), p.subVectors(i, s), f.cross(p), c.fromBufferAttribute(n, y), u.fromBufferAttribute(n, E), h.fromBufferAttribute(n, x), c.add(f), u.add(f), h.add(f), n.setXYZ(y, c.x, c.y, c.z), n.setXYZ(E, u.x, u.y, u.z), n.setXYZ(x, h.x, h.y, h.z);
        }
      else
        for (let m = 0, v = t.count; m < v; m += 3)
          i.fromBufferAttribute(t, m + 0), s.fromBufferAttribute(t, m + 1), l.fromBufferAttribute(t, m + 2), f.subVectors(l, s), p.subVectors(i, s), f.cross(p), n.setXYZ(m + 0, f.x, f.y, f.z), n.setXYZ(m + 1, f.x, f.y, f.z), n.setXYZ(m + 2, f.x, f.y, f.z);
      this.normalizeNormals(), n.needsUpdate = !0;
    }
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++)
      vn.fromBufferAttribute(e, t), vn.normalize(), e.setXYZ(t, vn.x, vn.y, vn.z);
  }
  toNonIndexed() {
    function e(c, u) {
      const h = c.array, f = c.itemSize, p = c.normalized, m = new h.constructor(u.length * f);
      let v = 0, y = 0;
      for (let E = 0, x = u.length; E < x; E++) {
        c.isInterleavedBufferAttribute ? v = u[E] * c.data.stride + c.offset : v = u[E] * f;
        for (let _ = 0; _ < f; _++)
          m[y++] = h[v++];
      }
      return new Ot(m, f, p);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new _t(), n = this.index.array, i = this.attributes;
    for (const c in i) {
      const u = i[c], h = e(u, n);
      t.setAttribute(c, h);
    }
    const s = this.morphAttributes;
    for (const c in s) {
      const u = [], h = s[c];
      for (let f = 0, p = h.length; f < p; f++) {
        const m = h[f], v = e(m, n);
        u.push(v);
      }
      t.morphAttributes[c] = u;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const l = this.groups;
    for (let c = 0, u = l.length; c < u; c++) {
      const h = l[c];
      t.addGroup(h.start, h.count, h.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const u = this.parameters;
      for (const h in u)
        u[h] !== void 0 && (e[h] = u[h]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const n = this.attributes;
    for (const u in n) {
      const h = n[u];
      e.data.attributes[u] = h.toJSON(e.data);
    }
    const i = {};
    let s = !1;
    for (const u in this.morphAttributes) {
      const h = this.morphAttributes[u], f = [];
      for (let p = 0, m = h.length; p < m; p++) {
        const v = h[p];
        f.push(v.toJSON(e.data));
      }
      f.length > 0 && (i[u] = f, s = !0);
    }
    s && (e.data.morphAttributes = i, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const l = this.groups;
    l.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(l)));
    const c = this.boundingSphere;
    return c !== null && (e.data.boundingSphere = {
      center: c.center.toArray(),
      radius: c.radius
    }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const n = e.index;
    n !== null && this.setIndex(n.clone(t));
    const i = e.attributes;
    for (const h in i) {
      const f = i[h];
      this.setAttribute(h, f.clone(t));
    }
    const s = e.morphAttributes;
    for (const h in s) {
      const f = [], p = s[h];
      for (let m = 0, v = p.length; m < v; m++)
        f.push(p[m].clone(t));
      this.morphAttributes[h] = f;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const l = e.groups;
    for (let h = 0, f = l.length; h < f; h++) {
      const p = l[h];
      this.addGroup(p.start, p.count, p.materialIndex);
    }
    const c = e.boundingBox;
    c !== null && (this.boundingBox = c.clone());
    const u = e.boundingSphere;
    return u !== null && (this.boundingSphere = u.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const Jm = /* @__PURE__ */ new ut(), Zr = /* @__PURE__ */ new xs(), $l = /* @__PURE__ */ new Ei(), Km = /* @__PURE__ */ new D(), Zs = /* @__PURE__ */ new D(), Js = /* @__PURE__ */ new D(), Ks = /* @__PURE__ */ new D(), qh = /* @__PURE__ */ new D(), ec = /* @__PURE__ */ new D(), tc = /* @__PURE__ */ new ue(), nc = /* @__PURE__ */ new ue(), ic = /* @__PURE__ */ new ue(), Qm = /* @__PURE__ */ new D(), $m = /* @__PURE__ */ new D(), eg = /* @__PURE__ */ new D(), rc = /* @__PURE__ */ new D(), sc = /* @__PURE__ */ new D();
class yn extends Rt {
  constructor(e = new _t(), t = new Ur()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, l = i.length; s < l; s++) {
          const c = i[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[c] = s;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry, i = n.attributes.position, s = n.morphAttributes.position, l = n.morphTargetsRelative;
    t.fromBufferAttribute(i, e);
    const c = this.morphTargetInfluences;
    if (s && c) {
      ec.set(0, 0, 0);
      for (let u = 0, h = s.length; u < h; u++) {
        const f = c[u], p = s[u];
        f !== 0 && (qh.fromBufferAttribute(p, e), l ? ec.addScaledVector(qh, f) : ec.addScaledVector(qh.sub(t), f));
      }
      t.add(ec);
    }
    return t;
  }
  raycast(e, t) {
    const n = this.geometry, i = this.material, s = this.matrixWorld;
    i !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), $l.copy(n.boundingSphere), $l.applyMatrix4(s), Zr.copy(e.ray).recast(e.near), !($l.containsPoint(Zr.origin) === !1 && (Zr.intersectSphere($l, Km) === null || Zr.origin.distanceToSquared(Km) > (e.far - e.near) ** 2)) && (Jm.copy(s).invert(), Zr.copy(e.ray).applyMatrix4(Jm), !(n.boundingBox !== null && Zr.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(e, t, Zr)));
  }
  _computeIntersections(e, t, n) {
    let i;
    const s = this.geometry, l = this.material, c = s.index, u = s.attributes.position, h = s.attributes.uv, f = s.attributes.uv1, p = s.attributes.normal, m = s.groups, v = s.drawRange;
    if (c !== null)
      if (Array.isArray(l))
        for (let y = 0, E = m.length; y < E; y++) {
          const x = m[y], _ = l[x.materialIndex], w = Math.max(x.start, v.start), M = Math.min(c.count, Math.min(x.start + x.count, v.start + v.count));
          for (let b = w, A = M; b < A; b += 3) {
            const C = c.getX(b), I = c.getX(b + 1), z = c.getX(b + 2);
            i = oc(this, _, e, n, h, f, p, C, I, z), i && (i.faceIndex = Math.floor(b / 3), i.face.materialIndex = x.materialIndex, t.push(i));
          }
        }
      else {
        const y = Math.max(0, v.start), E = Math.min(c.count, v.start + v.count);
        for (let x = y, _ = E; x < _; x += 3) {
          const w = c.getX(x), M = c.getX(x + 1), b = c.getX(x + 2);
          i = oc(this, l, e, n, h, f, p, w, M, b), i && (i.faceIndex = Math.floor(x / 3), t.push(i));
        }
      }
    else if (u !== void 0)
      if (Array.isArray(l))
        for (let y = 0, E = m.length; y < E; y++) {
          const x = m[y], _ = l[x.materialIndex], w = Math.max(x.start, v.start), M = Math.min(u.count, Math.min(x.start + x.count, v.start + v.count));
          for (let b = w, A = M; b < A; b += 3) {
            const C = b, I = b + 1, z = b + 2;
            i = oc(this, _, e, n, h, f, p, C, I, z), i && (i.faceIndex = Math.floor(b / 3), i.face.materialIndex = x.materialIndex, t.push(i));
          }
        }
      else {
        const y = Math.max(0, v.start), E = Math.min(u.count, v.start + v.count);
        for (let x = y, _ = E; x < _; x += 3) {
          const w = x, M = x + 1, b = x + 2;
          i = oc(this, l, e, n, h, f, p, w, M, b), i && (i.faceIndex = Math.floor(x / 3), t.push(i));
        }
      }
  }
}
function wS(r, e, t, n, i, s, l, c) {
  let u;
  if (e.side === On ? u = n.intersectTriangle(l, s, i, !0, c) : u = n.intersectTriangle(i, s, l, e.side === ar, c), u === null)
    return null;
  sc.copy(c), sc.applyMatrix4(r.matrixWorld);
  const h = t.ray.origin.distanceTo(sc);
  return h < t.near || h > t.far ? null : {
    distance: h,
    point: sc.clone(),
    object: r
  };
}
function oc(r, e, t, n, i, s, l, c, u, h) {
  r.getVertexPosition(c, Zs), r.getVertexPosition(u, Js), r.getVertexPosition(h, Ks);
  const f = wS(r, e, t, n, Zs, Js, Ks, rc);
  if (f) {
    i && (tc.fromBufferAttribute(i, c), nc.fromBufferAttribute(i, u), ic.fromBufferAttribute(i, h), f.uv = Gn.getInterpolation(rc, Zs, Js, Ks, tc, nc, ic, new ue())), s && (tc.fromBufferAttribute(s, c), nc.fromBufferAttribute(s, u), ic.fromBufferAttribute(s, h), f.uv1 = Gn.getInterpolation(rc, Zs, Js, Ks, tc, nc, ic, new ue()), f.uv2 = f.uv1), l && (Qm.fromBufferAttribute(l, c), $m.fromBufferAttribute(l, u), eg.fromBufferAttribute(l, h), f.normal = Gn.getInterpolation(rc, Zs, Js, Ks, Qm, $m, eg, new D()), f.normal.dot(n.direction) > 0 && f.normal.multiplyScalar(-1));
    const p = {
      a: c,
      b: u,
      c: h,
      normal: new D(),
      materialIndex: 0
    };
    Gn.getNormal(Zs, Js, Ks, p.normal), f.face = p;
  }
  return f;
}
class Ss extends _t {
  constructor(e = 1, t = 1, n = 1, i = 1, s = 1, l = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: n,
      widthSegments: i,
      heightSegments: s,
      depthSegments: l
    };
    const c = this;
    i = Math.floor(i), s = Math.floor(s), l = Math.floor(l);
    const u = [], h = [], f = [], p = [];
    let m = 0, v = 0;
    y("z", "y", "x", -1, -1, n, t, e, l, s, 0), y("z", "y", "x", 1, -1, n, t, -e, l, s, 1), y("x", "z", "y", 1, 1, e, n, t, i, l, 2), y("x", "z", "y", 1, -1, e, n, -t, i, l, 3), y("x", "y", "z", 1, -1, e, t, n, i, s, 4), y("x", "y", "z", -1, -1, e, t, -n, i, s, 5), this.setIndex(u), this.setAttribute("position", new We(h, 3)), this.setAttribute("normal", new We(f, 3)), this.setAttribute("uv", new We(p, 2));
    function y(E, x, _, w, M, b, A, C, I, z, R) {
      const L = b / I, H = A / z, te = b / 2, se = A / 2, G = C / 2, $ = I + 1, oe = z + 1;
      let ie = 0, Y = 0;
      const q = new D();
      for (let j = 0; j < oe; j++) {
        const k = j * H - se;
        for (let Q = 0; Q < $; Q++) {
          const fe = Q * L - te;
          q[E] = fe * w, q[x] = k * M, q[_] = G, h.push(q.x, q.y, q.z), q[E] = 0, q[x] = 0, q[_] = C > 0 ? 1 : -1, f.push(q.x, q.y, q.z), p.push(Q / I), p.push(1 - j / z), ie += 1;
        }
      }
      for (let j = 0; j < z; j++)
        for (let k = 0; k < I; k++) {
          const Q = m + k + $ * j, fe = m + k + $ * (j + 1), Te = m + (k + 1) + $ * (j + 1), Ae = m + (k + 1) + $ * j;
          u.push(Q, fe, Ae), u.push(fe, Te, Ae), Y += 6;
        }
      c.addGroup(v, Y, R), v += Y, m += ie;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Ss(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function yo(r) {
  const e = {};
  for (const t in r) {
    e[t] = {};
    for (const n in r[t]) {
      const i = r[t][n];
      i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? i.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = i.clone() : Array.isArray(i) ? e[t][n] = i.slice() : e[t][n] = i;
    }
  }
  return e;
}
function Un(r) {
  const e = {};
  for (let t = 0; t < r.length; t++) {
    const n = yo(r[t]);
    for (const i in n)
      e[i] = n[i];
  }
  return e;
}
function TS(r) {
  const e = [];
  for (let t = 0; t < r.length; t++)
    e.push(r[t].clone());
  return e;
}
function Uv(r) {
  return r.getRenderTarget() === null ? r.outputColorSpace : Lt.workingColorSpace;
}
const Ov = { clone: yo, merge: Un }, bS = (
  /* glsl */
  `
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`
), AS = (
  /* glsl */
  `
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`
);
class fi extends Ln {
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = bS, this.fragmentShader = AS, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      derivatives: !1,
      // set to use derivatives
      fragDepth: !1,
      // set to use fragment depth values
      drawBuffers: !1,
      // set to use draw buffers
      shaderTextureLOD: !1
      // set to use shader texture LOD
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = yo(e.uniforms), this.uniformsGroups = TS(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const i in this.uniforms) {
      const l = this.uniforms[i].value;
      l && l.isTexture ? t.uniforms[i] = {
        type: "t",
        value: l.toJSON(e).uuid
      } : l && l.isColor ? t.uniforms[i] = {
        type: "c",
        value: l.getHex()
      } : l && l.isVector2 ? t.uniforms[i] = {
        type: "v2",
        value: l.toArray()
      } : l && l.isVector3 ? t.uniforms[i] = {
        type: "v3",
        value: l.toArray()
      } : l && l.isVector4 ? t.uniforms[i] = {
        type: "v4",
        value: l.toArray()
      } : l && l.isMatrix3 ? t.uniforms[i] = {
        type: "m3",
        value: l.toArray()
      } : l && l.isMatrix4 ? t.uniforms[i] = {
        type: "m4",
        value: l.toArray()
      } : t.uniforms[i] = {
        value: l
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
    const n = {};
    for (const i in this.extensions)
      this.extensions[i] === !0 && (n[i] = !0);
    return Object.keys(n).length > 0 && (t.extensions = n), t;
  }
}
class za extends Rt {
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new ut(), this.projectionMatrix = new ut(), this.projectionMatrixInverse = new ut(), this.coordinateSystem = Ui;
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
  }
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class tn extends za {
  constructor(e = 50, t = 1, n = 0.1, i = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = _o * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const e = Math.tan(hs * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return _o * 2 * Math.atan(
      Math.tan(hs * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(e, t, n, i, s, l) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = s, this.view.height = l, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(hs * 0.5 * this.fov) / this.zoom, n = 2 * t, i = this.aspect * n, s = -0.5 * i;
    const l = this.view;
    if (this.view !== null && this.view.enabled) {
      const u = l.fullWidth, h = l.fullHeight;
      s += l.offsetX * i / u, t -= l.offsetY * n / h, i *= l.width / u, n *= l.height / h;
    }
    const c = this.filmOffset;
    c !== 0 && (s += e * c / this.getFilmWidth()), this.projectionMatrix.makePerspective(s, s + i, t, t - n, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
}
const Qs = -90, $s = 1;
class Fv extends Rt {
  constructor(e, t, n) {
    super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const i = new tn(Qs, $s, e, t);
    i.layers = this.layers, this.add(i);
    const s = new tn(Qs, $s, e, t);
    s.layers = this.layers, this.add(s);
    const l = new tn(Qs, $s, e, t);
    l.layers = this.layers, this.add(l);
    const c = new tn(Qs, $s, e, t);
    c.layers = this.layers, this.add(c);
    const u = new tn(Qs, $s, e, t);
    u.layers = this.layers, this.add(u);
    const h = new tn(Qs, $s, e, t);
    h.layers = this.layers, this.add(h);
  }
  updateCoordinateSystem() {
    const e = this.coordinateSystem, t = this.children.concat(), [n, i, s, l, c, u] = t;
    for (const h of t)
      this.remove(h);
    if (e === Ui)
      n.up.set(0, 1, 0), n.lookAt(1, 0, 0), i.up.set(0, 1, 0), i.lookAt(-1, 0, 0), s.up.set(0, 0, -1), s.lookAt(0, 1, 0), l.up.set(0, 0, 1), l.lookAt(0, -1, 0), c.up.set(0, 1, 0), c.lookAt(0, 0, 1), u.up.set(0, 1, 0), u.lookAt(0, 0, -1);
    else if (e === wa)
      n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), i.up.set(0, -1, 0), i.lookAt(1, 0, 0), s.up.set(0, 0, 1), s.lookAt(0, 1, 0), l.up.set(0, 0, -1), l.lookAt(0, -1, 0), c.up.set(0, -1, 0), c.lookAt(0, 0, 1), u.up.set(0, -1, 0), u.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const h of t)
      this.add(h), h.updateMatrixWorld();
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: n, activeMipmapLevel: i } = this;
    this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
    const [s, l, c, u, h, f] = this.children, p = e.getRenderTarget(), m = e.getActiveCubeFace(), v = e.getActiveMipmapLevel(), y = e.xr.enabled;
    e.xr.enabled = !1;
    const E = n.texture.generateMipmaps;
    n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0, i), e.render(t, s), e.setRenderTarget(n, 1, i), e.render(t, l), e.setRenderTarget(n, 2, i), e.render(t, c), e.setRenderTarget(n, 3, i), e.render(t, u), e.setRenderTarget(n, 4, i), e.render(t, h), n.texture.generateMipmaps = E, e.setRenderTarget(n, 5, i), e.render(t, f), e.setRenderTarget(p, m, v), e.xr.enabled = y, n.texture.needsPMREMUpdate = !0;
  }
}
class Ba extends nn {
  constructor(e, t, n, i, s, l, c, u, h, f) {
    e = e !== void 0 ? e : [], t = t !== void 0 ? t : lr, super(e, t, n, i, s, l, c, u, h, f), this.isCubeTexture = !0, this.flipY = !1;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class zv extends hi {
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const n = { width: e, height: e, depth: 1 }, i = [n, n, n, n, n, n];
    t.encoding !== void 0 && (ua("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."), t.colorSpace = t.encoding === Pr ? hn : $n), this.texture = new Ba(i, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : Xt;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const n = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, i = new Ss(5, 5, 5), s = new fi({
      name: "CubemapFromEquirect",
      uniforms: yo(n.uniforms),
      vertexShader: n.vertexShader,
      fragmentShader: n.fragmentShader,
      side: On,
      blending: sr
    });
    s.uniforms.tEquirect.value = t;
    const l = new yn(i, s), c = t.minFilter;
    return t.minFilter === Ir && (t.minFilter = Xt), new Fv(1, 10, this).update(e, l), t.minFilter = c, l.geometry.dispose(), l.material.dispose(), this;
  }
  clear(e, t, n, i) {
    const s = e.getRenderTarget();
    for (let l = 0; l < 6; l++)
      e.setRenderTarget(this, l), e.clear(t, n, i);
    e.setRenderTarget(s);
  }
}
const jh = /* @__PURE__ */ new D(), RS = /* @__PURE__ */ new D(), CS = /* @__PURE__ */ new pt();
class tr {
  constructor(e = new D(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  setComponents(e, t, n, i) {
    return this.normal.set(e, t, n), this.constant = i, this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  setFromCoplanarPoints(e, t, n) {
    const i = jh.subVectors(n, t).cross(RS.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(i, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(jh), i = this.normal.dot(n);
    if (i === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const s = -(e.start.dot(this.normal) + this.constant) / i;
    return s < 0 || s > 1 ? null : t.copy(e.start).addScaledVector(n, s);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
    return t < 0 && n > 0 || n < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || CS.getNormalMatrix(e), i = this.coplanarPoint(jh).applyMatrix4(e), s = this.normal.applyMatrix3(n).normalize();
    return this.constant = -i.dot(s), this;
  }
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Jr = /* @__PURE__ */ new Ei(), ac = /* @__PURE__ */ new D();
class nu {
  constructor(e = new tr(), t = new tr(), n = new tr(), i = new tr(), s = new tr(), l = new tr()) {
    this.planes = [e, t, n, i, s, l];
  }
  set(e, t, n, i, s, l) {
    const c = this.planes;
    return c[0].copy(e), c[1].copy(t), c[2].copy(n), c[3].copy(i), c[4].copy(s), c[5].copy(l), this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      t[n].copy(e.planes[n]);
    return this;
  }
  setFromProjectionMatrix(e, t = Ui) {
    const n = this.planes, i = e.elements, s = i[0], l = i[1], c = i[2], u = i[3], h = i[4], f = i[5], p = i[6], m = i[7], v = i[8], y = i[9], E = i[10], x = i[11], _ = i[12], w = i[13], M = i[14], b = i[15];
    if (n[0].setComponents(u - s, m - h, x - v, b - _).normalize(), n[1].setComponents(u + s, m + h, x + v, b + _).normalize(), n[2].setComponents(u + l, m + f, x + y, b + w).normalize(), n[3].setComponents(u - l, m - f, x - y, b - w).normalize(), n[4].setComponents(u - c, m - p, x - E, b - M).normalize(), t === Ui)
      n[5].setComponents(u + c, m + p, x + E, b + M).normalize();
    else if (t === wa)
      n[5].setComponents(c, p, E, M).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
    return this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), Jr.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), Jr.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(Jr);
  }
  intersectsSprite(e) {
    return Jr.center.set(0, 0, 0), Jr.radius = 0.7071067811865476, Jr.applyMatrix4(e.matrixWorld), this.intersectsSphere(Jr);
  }
  intersectsSphere(e) {
    const t = this.planes, n = e.center, i = -e.radius;
    for (let s = 0; s < 6; s++)
      if (t[s].distanceToPoint(n) < i)
        return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const i = t[n];
      if (ac.x = i.normal.x > 0 ? e.max.x : e.min.x, ac.y = i.normal.y > 0 ? e.max.y : e.min.y, ac.z = i.normal.z > 0 ? e.max.z : e.min.z, i.distanceToPoint(ac) < 0)
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      if (t[n].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function Bv() {
  let r = null, e = !1, t = null, n = null;
  function i(s, l) {
    t(s, l), n = r.requestAnimationFrame(i);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (n = r.requestAnimationFrame(i), e = !0);
    },
    stop: function() {
      r.cancelAnimationFrame(n), e = !1;
    },
    setAnimationLoop: function(s) {
      t = s;
    },
    setContext: function(s) {
      r = s;
    }
  };
}
function PS(r, e) {
  const t = e.isWebGL2, n = /* @__PURE__ */ new WeakMap();
  function i(h, f) {
    const p = h.array, m = h.usage, v = r.createBuffer();
    r.bindBuffer(f, v), r.bufferData(f, p, m), h.onUploadCallback();
    let y;
    if (p instanceof Float32Array)
      y = r.FLOAT;
    else if (p instanceof Uint16Array)
      if (h.isFloat16BufferAttribute)
        if (t)
          y = r.HALF_FLOAT;
        else
          throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
      else
        y = r.UNSIGNED_SHORT;
    else if (p instanceof Int16Array)
      y = r.SHORT;
    else if (p instanceof Uint32Array)
      y = r.UNSIGNED_INT;
    else if (p instanceof Int32Array)
      y = r.INT;
    else if (p instanceof Int8Array)
      y = r.BYTE;
    else if (p instanceof Uint8Array)
      y = r.UNSIGNED_BYTE;
    else if (p instanceof Uint8ClampedArray)
      y = r.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + p);
    return {
      buffer: v,
      type: y,
      bytesPerElement: p.BYTES_PER_ELEMENT,
      version: h.version
    };
  }
  function s(h, f, p) {
    const m = f.array, v = f.updateRange;
    r.bindBuffer(p, h), v.count === -1 ? r.bufferSubData(p, 0, m) : (t ? r.bufferSubData(
      p,
      v.offset * m.BYTES_PER_ELEMENT,
      m,
      v.offset,
      v.count
    ) : r.bufferSubData(
      p,
      v.offset * m.BYTES_PER_ELEMENT,
      m.subarray(v.offset, v.offset + v.count)
    ), v.count = -1), f.onUploadCallback();
  }
  function l(h) {
    return h.isInterleavedBufferAttribute && (h = h.data), n.get(h);
  }
  function c(h) {
    h.isInterleavedBufferAttribute && (h = h.data);
    const f = n.get(h);
    f && (r.deleteBuffer(f.buffer), n.delete(h));
  }
  function u(h, f) {
    if (h.isGLBufferAttribute) {
      const m = n.get(h);
      (!m || m.version < h.version) && n.set(h, {
        buffer: h.buffer,
        type: h.type,
        bytesPerElement: h.elementSize,
        version: h.version
      });
      return;
    }
    h.isInterleavedBufferAttribute && (h = h.data);
    const p = n.get(h);
    p === void 0 ? n.set(h, i(h, f)) : p.version < h.version && (s(p.buffer, h, f), p.version = h.version);
  }
  return {
    get: l,
    remove: c,
    update: u
  };
}
class ka extends _t {
  constructor(e = 1, t = 1, n = 1, i = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: n,
      heightSegments: i
    };
    const s = e / 2, l = t / 2, c = Math.floor(n), u = Math.floor(i), h = c + 1, f = u + 1, p = e / c, m = t / u, v = [], y = [], E = [], x = [];
    for (let _ = 0; _ < f; _++) {
      const w = _ * m - l;
      for (let M = 0; M < h; M++) {
        const b = M * p - s;
        y.push(b, -w, 0), E.push(0, 0, 1), x.push(M / c), x.push(1 - _ / u);
      }
    }
    for (let _ = 0; _ < u; _++)
      for (let w = 0; w < c; w++) {
        const M = w + h * _, b = w + h * (_ + 1), A = w + 1 + h * (_ + 1), C = w + 1 + h * _;
        v.push(M, b, C), v.push(b, A, C);
      }
    this.setIndex(v), this.setAttribute("position", new We(y, 3)), this.setAttribute("normal", new We(E, 3)), this.setAttribute("uv", new We(x, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new ka(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
const LS = (
  /* glsl */
  `
#ifdef USE_ALPHAHASH

	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;

#endif
`
), IS = (
  /* glsl */
  `
#ifdef USE_ALPHAHASH

	/**
	 * See: https://casual-effects.com/research/Wyman2017Hashed/index.html
	 */

	const float ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.

	float hash2D( vec2 value ) {

		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );

	}

	float hash3D( vec3 value ) {

		return hash2D( vec2( hash2D( value.xy ), value.z ) );

	}

	float getAlphaHashThreshold( vec3 position ) {

		// Find the discretized derivatives of our coordinates
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );

		// Find two nearest log-discretized noise scales
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);

		// Compute alpha thresholds at our two noise scales
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);

		// Factor to interpolate lerp with
		float lerpFactor = fract( log2( pixScale ) );

		// Interpolate alpha threshold from noise at two scales
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;

		// Pass into CDF to compute uniformly distrib threshold
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);

		// Find our final, uniformly distributed alpha threshold (ατ)
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;

		// Avoids ατ == 0. Could also do ατ =1-ατ
		return clamp( threshold , 1.0e-6, 1.0 );

	}

#endif
`
), DS = (
  /* glsl */
  `
#ifdef USE_ALPHAMAP

	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;

#endif
`
), NS = (
  /* glsl */
  `
#ifdef USE_ALPHAMAP

	uniform sampler2D alphaMap;

#endif
`
), US = (
  /* glsl */
  `
#ifdef USE_ALPHATEST

	if ( diffuseColor.a < alphaTest ) discard;

#endif
`
), OS = (
  /* glsl */
  `
#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif
`
), FS = (
  /* glsl */
  `
#ifdef USE_AOMAP

	// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;

	reflectedLight.indirectDiffuse *= ambientOcclusion;

	#if defined( USE_ENVMAP ) && defined( STANDARD )

		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );

		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );

	#endif

#endif
`
), zS = (
  /* glsl */
  `
#ifdef USE_AOMAP

	uniform sampler2D aoMap;
	uniform float aoMapIntensity;

#endif
`
), BS = (
  /* glsl */
  `
vec3 transformed = vec3( position );

#ifdef USE_ALPHAHASH

	vPosition = vec3( position );

#endif
`
), kS = (
  /* glsl */
  `
vec3 objectNormal = vec3( normal );

#ifdef USE_TANGENT

	vec3 objectTangent = vec3( tangent.xyz );

#endif
`
), HS = (
  /* glsl */
  `

float G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {

	// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)
	return 0.25;

}

float D_BlinnPhong( const in float shininess, const in float dotNH ) {

	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );

}

vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {

	vec3 halfDir = normalize( lightDir + viewDir );

	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );

	vec3 F = F_Schlick( specularColor, 1.0, dotVH );

	float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );

	float D = D_BlinnPhong( shininess, dotNH );

	return F * ( G * D );

} // validated

`
), VS = (
  /* glsl */
  `

#ifdef USE_IRIDESCENCE

	// XYZ to linear-sRGB color space
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);

	// Assume air interface for top
	// Note: We don't handle the case fresnel0 == 1
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {

		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );

	}

	// Conversion FO/IOR
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {

		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );

	}

	// ior is a value between 1.0 and 3.0. 1.0 is air interface
	float IorToFresnel0( float transmittedIor, float incidentIor ) {

		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));

	}

	// Fresnel equations for dielectric/dielectric interfaces.
	// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html
	// Evaluation XYZ sensitivity curves in Fourier space
	vec3 evalSensitivity( float OPD, vec3 shift ) {

		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );

		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;

		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;

	}

	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {

		vec3 I;

		// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		// Evaluate the cosTheta on the base layer (Snell law)
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );

		// Handle TIR:
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {

			return vec3( 1.0 );

		}

		float cosTheta2 = sqrt( cosTheta2Sq );

		// First interface
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;

		// Second interface
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0
		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;

		// Phase shift
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;

		// Compound terms
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );

		// Reflectance term for m = 0 (DC term amplitude)
		vec3 C0 = R12 + Rs;
		I = C0;

		// Reflectance term for m > 0 (pairs of diracs)
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {

			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;

		}

		// Since out of gamut colors might be produced, negative color values are clamped to 0.
		return max( I, vec3( 0.0 ) );

	}

#endif

`
), GS = (
  /* glsl */
  `
#ifdef USE_BUMPMAP

	uniform sampler2D bumpMap;
	uniform float bumpScale;

	// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen
	// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf

	// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)

	vec2 dHdxy_fwd() {

		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );

		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;

		return vec2( dBx, dBy );

	}

	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {

		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm; // normalized

		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );

		float fDet = dot( vSigmaX, R1 ) * faceDirection;

		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );

	}

#endif
`
), WS = (
  /* glsl */
  `
#if NUM_CLIPPING_PLANES > 0

	vec4 plane;

	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {

		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;

	}
	#pragma unroll_loop_end

	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES

		bool clipped = true;

		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {

			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;

		}
		#pragma unroll_loop_end

		if ( clipped ) discard;

	#endif

#endif
`
), XS = (
  /* glsl */
  `
#if NUM_CLIPPING_PLANES > 0

	varying vec3 vClipPosition;

	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];

#endif
`
), YS = (
  /* glsl */
  `
#if NUM_CLIPPING_PLANES > 0

	varying vec3 vClipPosition;

#endif
`
), qS = (
  /* glsl */
  `
#if NUM_CLIPPING_PLANES > 0

	vClipPosition = - mvPosition.xyz;

#endif
`
), jS = (
  /* glsl */
  `
#if defined( USE_COLOR_ALPHA )

	diffuseColor *= vColor;

#elif defined( USE_COLOR )

	diffuseColor.rgb *= vColor;

#endif
`
), ZS = (
  /* glsl */
  `
#if defined( USE_COLOR_ALPHA )

	varying vec4 vColor;

#elif defined( USE_COLOR )

	varying vec3 vColor;

#endif
`
), JS = (
  /* glsl */
  `
#if defined( USE_COLOR_ALPHA )

	varying vec4 vColor;

#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )

	varying vec3 vColor;

#endif
`
), KS = (
  /* glsl */
  `
#if defined( USE_COLOR_ALPHA )

	vColor = vec4( 1.0 );

#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )

	vColor = vec3( 1.0 );

#endif

#ifdef USE_COLOR

	vColor *= color;

#endif

#ifdef USE_INSTANCING_COLOR

	vColor.xyz *= instanceColor.xyz;

#endif
`
), QS = (
  /* glsl */
  `
#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6

#ifndef saturate
// <tonemapping_pars_fragment> may have defined saturate() already
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )

float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }

// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.
// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/
highp float rand( const in vec2 uv ) {

	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );

	return fract( sin( sn ) * c );

}

#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif

struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};

struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};

#ifdef USE_ALPHAHASH

	varying vec3 vPosition;

#endif

vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

}

vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {

	// dir can be either a direction vector or a normal vector
	// upper-left 3x3 of matrix is assumed to be orthogonal

	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );

}

mat3 transposeMat3( const in mat3 m ) {

	mat3 tmp;

	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );

	return tmp;

}

float luminance( const in vec3 rgb ) {

	// assumes rgb is in linear color space with sRGB primaries and D65 white point

	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );

	return dot( weights, rgb );

}

bool isPerspectiveMatrix( mat4 m ) {

	return m[ 2 ][ 3 ] == - 1.0;

}

vec2 equirectUv( in vec3 dir ) {

	// dir is assumed to be unit length

	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;

	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;

	return vec2( u, v );

}

vec3 BRDF_Lambert( const in vec3 diffuseColor ) {

	return RECIPROCAL_PI * diffuseColor;

} // validated

vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {

	// Original approximation by Christophe Schlick '94
	// float fresnel = pow( 1.0 - dotVH, 5.0 );

	// Optimized variant (presented by Epic at SIGGRAPH '13)
	// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );

	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );

} // validated

float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {

	// Original approximation by Christophe Schlick '94
	// float fresnel = pow( 1.0 - dotVH, 5.0 );

	// Optimized variant (presented by Epic at SIGGRAPH '13)
	// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );

	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );

} // validated
`
), $S = (
  /* glsl */
  `
#ifdef ENVMAP_TYPE_CUBE_UV

	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0

	// These shader functions convert between the UV coordinates of a single face of
	// a cubemap, the 0-5 integer index of a cube face, and the direction vector for
	// sampling a textureCube (not generally normalized ).

	float getFace( vec3 direction ) {

		vec3 absDirection = abs( direction );

		float face = - 1.0;

		if ( absDirection.x > absDirection.z ) {

			if ( absDirection.x > absDirection.y )

				face = direction.x > 0.0 ? 0.0 : 3.0;

			else

				face = direction.y > 0.0 ? 1.0 : 4.0;

		} else {

			if ( absDirection.z > absDirection.y )

				face = direction.z > 0.0 ? 2.0 : 5.0;

			else

				face = direction.y > 0.0 ? 1.0 : 4.0;

		}

		return face;

	}

	// RH coordinate system; PMREM face-indexing convention
	vec2 getUV( vec3 direction, float face ) {

		vec2 uv;

		if ( face == 0.0 ) {

			uv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x

		} else if ( face == 1.0 ) {

			uv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y

		} else if ( face == 2.0 ) {

			uv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z

		} else if ( face == 3.0 ) {

			uv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x

		} else if ( face == 4.0 ) {

			uv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y

		} else {

			uv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z

		}

		return 0.5 * ( uv + 1.0 );

	}

	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {

		float face = getFace( direction );

		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );

		mipInt = max( mipInt, cubeUV_minMipLevel );

		float faceSize = exp2( mipInt );

		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0; // #25071

		if ( face > 2.0 ) {

			uv.y += faceSize;

			face -= 3.0;

		}

		uv.x += face * faceSize;

		uv.x += filterInt * 3.0 * cubeUV_minTileSize;

		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );

		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;

		#ifdef texture2DGradEXT

			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb; // disable anisotropic filtering

		#else

			return texture2D( envMap, uv ).rgb;

		#endif

	}

	// These defines must match with PMREMGenerator

	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0

	float roughnessToMip( float roughness ) {

		float mip = 0.0;

		if ( roughness >= cubeUV_r1 ) {

			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;

		} else if ( roughness >= cubeUV_r4 ) {

			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;

		} else if ( roughness >= cubeUV_r5 ) {

			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;

		} else if ( roughness >= cubeUV_r6 ) {

			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;

		} else {

			mip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25
		}

		return mip;

	}

	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {

		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );

		float mipF = fract( mip );

		float mipInt = floor( mip );

		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );

		if ( mipF == 0.0 ) {

			return vec4( color0, 1.0 );

		} else {

			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );

			return vec4( mix( color0, color1, mipF ), 1.0 );

		}

	}

#endif
`
), eM = (
  /* glsl */
  `
vec3 transformedNormal = objectNormal;

#ifdef USE_INSTANCING

	// this is in lieu of a per-instance normal-matrix
	// shear transforms in the instance matrix are not supported

	mat3 m = mat3( instanceMatrix );

	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );

	transformedNormal = m * transformedNormal;

#endif

transformedNormal = normalMatrix * transformedNormal;

#ifdef FLIP_SIDED

	transformedNormal = - transformedNormal;

#endif

#ifdef USE_TANGENT

	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;

	#ifdef FLIP_SIDED

		transformedTangent = - transformedTangent;

	#endif

#endif
`
), tM = (
  /* glsl */
  `
#ifdef USE_DISPLACEMENTMAP

	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;

#endif
`
), nM = (
  /* glsl */
  `
#ifdef USE_DISPLACEMENTMAP

	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );

#endif
`
), iM = (
  /* glsl */
  `
#ifdef USE_EMISSIVEMAP

	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );

	totalEmissiveRadiance *= emissiveColor.rgb;

#endif
`
), rM = (
  /* glsl */
  `
#ifdef USE_EMISSIVEMAP

	uniform sampler2D emissiveMap;

#endif
`
), sM = (
  /* glsl */
  `
gl_FragColor = linearToOutputTexel( gl_FragColor );
`
), oM = (
  /* glsl */
  `

// http://www.russellcottrell.com/photo/matrixCalculator.htm

// Linear sRGB => XYZ => Linear Display P3
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);

// Linear Display P3 => XYZ => Linear sRGB
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);

vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}

vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}

vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}

vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}

// @deprecated, r156
vec4 LinearToLinear( in vec4 value ) {
	return value;
}

// @deprecated, r156
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}
`
), aM = (
  /* glsl */
  `
#ifdef USE_ENVMAP

	#ifdef ENV_WORLDPOS

		vec3 cameraToFrag;

		if ( isOrthographic ) {

			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );

		} else {

			cameraToFrag = normalize( vWorldPosition - cameraPosition );

		}

		// Transforming Normal Vectors with the Inverse Transformation
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );

		#ifdef ENVMAP_MODE_REFLECTION

			vec3 reflectVec = reflect( cameraToFrag, worldNormal );

		#else

			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );

		#endif

	#else

		vec3 reflectVec = vReflect;

	#endif

	#ifdef ENVMAP_TYPE_CUBE

		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );

	#else

		vec4 envColor = vec4( 0.0 );

	#endif

	#ifdef ENVMAP_BLENDING_MULTIPLY

		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );

	#elif defined( ENVMAP_BLENDING_MIX )

		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );

	#elif defined( ENVMAP_BLENDING_ADD )

		outgoingLight += envColor.xyz * specularStrength * reflectivity;

	#endif

#endif
`
), lM = (
  /* glsl */
  `
#ifdef USE_ENVMAP

	uniform float envMapIntensity;
	uniform float flipEnvMap;

	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif
`
), cM = (
  /* glsl */
  `
#ifdef USE_ENVMAP

	uniform float reflectivity;

	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )

		#define ENV_WORLDPOS

	#endif

	#ifdef ENV_WORLDPOS

		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif

#endif
`
), uM = (
  /* glsl */
  `
#ifdef USE_ENVMAP

	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )

		#define ENV_WORLDPOS

	#endif

	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;

	#else

		varying vec3 vReflect;
		uniform float refractionRatio;

	#endif

#endif
`
), hM = (
  /* glsl */
  `
#ifdef USE_ENVMAP

	#ifdef ENV_WORLDPOS

		vWorldPosition = worldPosition.xyz;

	#else

		vec3 cameraToVertex;

		if ( isOrthographic ) {

			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );

		} else {

			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );

		}

		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );

		#ifdef ENVMAP_MODE_REFLECTION

			vReflect = reflect( cameraToVertex, worldNormal );

		#else

			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );

		#endif

	#endif

#endif
`
), fM = (
  /* glsl */
  `
#ifdef USE_FOG

	vFogDepth = - mvPosition.z;

#endif
`
), dM = (
  /* glsl */
  `
#ifdef USE_FOG

	varying float vFogDepth;

#endif
`
), pM = (
  /* glsl */
  `
#ifdef USE_FOG

	#ifdef FOG_EXP2

		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );

	#else

		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );

	#endif

	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );

#endif
`
), mM = (
  /* glsl */
  `
#ifdef USE_FOG

	uniform vec3 fogColor;
	varying float vFogDepth;

	#ifdef FOG_EXP2

		uniform float fogDensity;

	#else

		uniform float fogNear;
		uniform float fogFar;

	#endif

#endif
`
), gM = (
  /* glsl */
  `

#ifdef USE_GRADIENTMAP

	uniform sampler2D gradientMap;

#endif

vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {

	// dotNL will be from -1.0 to 1.0
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );

	#ifdef USE_GRADIENTMAP

		return vec3( texture2D( gradientMap, coord ).r );

	#else

		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );

	#endif

}
`
), vM = (
  /* glsl */
  `
#ifdef USE_LIGHTMAP

	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;

	reflectedLight.indirectDiffuse += lightMapIrradiance;

#endif
`
), _M = (
  /* glsl */
  `
#ifdef USE_LIGHTMAP

	uniform sampler2D lightMap;
	uniform float lightMapIntensity;

#endif
`
), yM = (
  /* glsl */
  `
LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;
`
), xM = (
  /* glsl */
  `
varying vec3 vViewPosition;

struct LambertMaterial {

	vec3 diffuseColor;
	float specularStrength;

};

void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {

	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;

	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert
`
), SM = (
  /* glsl */
  `
uniform bool receiveShadow;
uniform vec3 ambientLightColor;

#if defined( USE_LIGHT_PROBES )

	uniform vec3 lightProbe[ 9 ];

#endif

// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere
// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {

	// normal is assumed to have unit length

	float x = normal.x, y = normal.y, z = normal.z;

	// band 0
	vec3 result = shCoefficients[ 0 ] * 0.886227;

	// band 1
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;

	// band 2
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );

	return result;

}

vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {

	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );

	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );

	return irradiance;

}

vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {

	vec3 irradiance = ambientLightColor;

	return irradiance;

}

float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {

	#if defined ( LEGACY_LIGHTS )

		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {

			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );

		}

		return 1.0;

	#else

		// based upon Frostbite 3 Moving to Physically-based Rendering
		// page 32, equation 26: E[window1]
		// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );

		if ( cutoffDistance > 0.0 ) {

			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );

		}

		return distanceFalloff;

	#endif

}

float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {

	return smoothstep( coneCosine, penumbraCosine, angleCosine );

}

#if NUM_DIR_LIGHTS > 0

	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};

	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];

	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {

		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;

	}

#endif


#if NUM_POINT_LIGHTS > 0

	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};

	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];

	// light is an out parameter as having it as a return value caused compiler errors on some devices
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {

		vec3 lVector = pointLight.position - geometryPosition;

		light.direction = normalize( lVector );

		float lightDistance = length( lVector );

		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );

	}

#endif


#if NUM_SPOT_LIGHTS > 0

	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};

	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];

	// light is an out parameter as having it as a return value caused compiler errors on some devices
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {

		vec3 lVector = spotLight.position - geometryPosition;

		light.direction = normalize( lVector );

		float angleCos = dot( light.direction, spotLight.direction );

		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );

		if ( spotAttenuation > 0.0 ) {

			float lightDistance = length( lVector );

			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );

		} else {

			light.color = vec3( 0.0 );
			light.visible = false;

		}

	}

#endif


#if NUM_RECT_AREA_LIGHTS > 0

	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};

	// Pre-computed values of LinearTransformedCosine approximation of BRDF
	// BRDF approximation Texture is 64x64
	uniform sampler2D ltc_1; // RGBA Float
	uniform sampler2D ltc_2; // RGBA Float

	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];

#endif


#if NUM_HEMI_LIGHTS > 0

	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};

	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];

	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {

		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;

		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );

		return irradiance;

	}

#endif
`
), MM = (
  /* glsl */
  `
#ifdef USE_ENVMAP

	vec3 getIBLIrradiance( const in vec3 normal ) {

		#ifdef ENVMAP_TYPE_CUBE_UV

			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );

			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );

			return PI * envMapColor.rgb * envMapIntensity;

		#else

			return vec3( 0.0 );

		#endif

	}

	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {

		#ifdef ENVMAP_TYPE_CUBE_UV

			vec3 reflectVec = reflect( - viewDir, normal );

			// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );

			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );

			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );

			return envMapColor.rgb * envMapIntensity;

		#else

			return vec3( 0.0 );

		#endif

	}

	#ifdef USE_ANISOTROPY

		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {

			#ifdef ENVMAP_TYPE_CUBE_UV

			  // https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );

				return getIBLRadiance( viewDir, bentNormal, roughness );

			#else

				return vec3( 0.0 );

			#endif

		}

	#endif

#endif
`
), EM = (
  /* glsl */
  `
ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;
`
), wM = (
  /* glsl */
  `
varying vec3 vViewPosition;

struct ToonMaterial {

	vec3 diffuseColor;

};

void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {

	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;

	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
`
), TM = (
  /* glsl */
  `
BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;
`
), bM = (
  /* glsl */
  `
varying vec3 vViewPosition;

struct BlinnPhongMaterial {

	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;

};

void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {

	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;

	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;

}

void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
`
), AM = (
  /* glsl */
  `
PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );

vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );

material.roughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.
material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );

#ifdef IOR

	material.ior = ior;

	#ifdef USE_SPECULAR

		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;

		#ifdef USE_SPECULAR_COLORMAP

			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;

		#endif

		#ifdef USE_SPECULAR_INTENSITYMAP

			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;

		#endif

		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );

	#else

		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;

	#endif

	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );

#else

	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;

#endif

#ifdef USE_CLEARCOAT

	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;

	#ifdef USE_CLEARCOATMAP

		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;

	#endif

	#ifdef USE_CLEARCOAT_ROUGHNESSMAP

		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;

	#endif

	material.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model
	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );

#endif

#ifdef USE_IRIDESCENCE

	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;

	#ifdef USE_IRIDESCENCEMAP

		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;

	#endif

	#ifdef USE_IRIDESCENCE_THICKNESSMAP

		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;

	#else

		material.iridescenceThickness = iridescenceThicknessMaximum;

	#endif

#endif

#ifdef USE_SHEEN

	material.sheenColor = sheenColor;

	#ifdef USE_SHEEN_COLORMAP

		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;

	#endif

	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );

	#ifdef USE_SHEEN_ROUGHNESSMAP

		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;

	#endif

#endif

#ifdef USE_ANISOTROPY

	#ifdef USE_ANISOTROPYMAP

		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;

	#else

		vec2 anisotropyV = anisotropyVector;

	#endif

	material.anisotropy = length( anisotropyV );
	anisotropyV /= material.anisotropy;
	material.anisotropy = saturate( material.anisotropy );

	// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );

	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;

#endif
`
), RM = (
  /* glsl */
  `

struct PhysicalMaterial {

	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;

	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif

	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif

	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif

	#ifdef IOR
		float ior;
	#endif

	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif

	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif

};

// temporary
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );

vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );

    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}

// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2
// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {

	float a2 = pow2( alpha );

	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );

	return 0.5 / max( gv + gl, EPSILON );

}

// Microfacet Models for Refraction through Rough Surfaces - equation (33)
// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html
// alpha is "roughness squared" in Disney’s reparameterization
float D_GGX( const in float alpha, const in float dotNH ) {

	float a2 = pow2( alpha );

	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1

	return RECIPROCAL_PI * a2 / pow2( denom );

}

// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf
#ifdef USE_ANISOTROPY

	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {

		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );

		return saturate(v);

	}

	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {

		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;

		return RECIPROCAL_PI * a2 * pow2 ( w2 );

	}

#endif

#ifdef USE_CLEARCOAT

	// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {

		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;

		float alpha = pow2( roughness ); // UE4's roughness

		vec3 halfDir = normalize( lightDir + viewDir );

		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );

		vec3 F = F_Schlick( f0, f90, dotVH );

		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );

		float D = D_GGX( alpha, dotNH );

		return F * ( V * D );

	}

#endif

vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {

	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;

	float alpha = pow2( roughness ); // UE4's roughness

	vec3 halfDir = normalize( lightDir + viewDir );

	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );

	vec3 F = F_Schlick( f0, f90, dotVH );

	#ifdef USE_IRIDESCENCE

		F = mix( F, material.iridescenceFresnel, material.iridescence );

	#endif

	#ifdef USE_ANISOTROPY

		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );

		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );

		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );

	#else

		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );

		float D = D_GGX( alpha, dotNH );

	#endif

	return F * ( V * D );

}

// Rect Area Light

// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines
// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt
// code: https://github.com/selfshadow/ltc_code/

vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {

	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;

	float dotNV = saturate( dot( N, V ) );

	// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );

	uv = uv * LUT_SCALE + LUT_BIAS;

	return uv;

}

float LTC_ClippedSphereFormFactor( const in vec3 f ) {

	// Real-Time Area Lighting: a Journey from Research to Production (p.102)
	// An approximation of the form factor of a horizon-clipped rectangle.

	float l = length( f );

	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );

}

vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {

	float x = dot( v1, v2 );

	float y = abs( x );

	// rational polynomial approximation to theta / sin( theta ) / 2PI
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;

	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;

	return cross( v1, v2 ) * theta_sintheta;

}

vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {

	// bail if point is on back side of plane of light
	// assumes ccw winding order of light vertices
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );

	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );

	// construct orthonormal basis around N
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system

	// compute transform
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );

	// transform rect
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );

	// project rect onto sphere
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );

	// calculate vector form factor
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );

	// adjust for horizon clipping
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );

/*
	// alternate method of adjusting for horizon clipping (see referece)
	// refactoring required
	float len = length( vectorFormFactor );
	float z = vectorFormFactor.z / len;

	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;

	// tabulated horizon-clipped sphere, apparently...
	vec2 uv = vec2( z * 0.5 + 0.5, len );
	uv = uv * LUT_SCALE + LUT_BIAS;

	float scale = texture2D( ltc_2, uv ).w;

	float result = len * scale;
*/

	return vec3( result );

}

// End Rect Area Light

#if defined( USE_SHEEN )

// https://github.com/google/filament/blob/master/shaders/src/brdf.fs
float D_Charlie( float roughness, float dotNH ) {

	float alpha = pow2( roughness );

	// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16

	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );

}

// https://github.com/google/filament/blob/master/shaders/src/brdf.fs
float V_Neubelt( float dotNV, float dotNL ) {

	// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );

}

vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {

	vec3 halfDir = normalize( lightDir + viewDir );

	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );

	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );

	return sheenColor * ( D * V );

}

#endif

// This is a curve-fit approxmation to the "Charlie sheen" BRDF integrated over the hemisphere from 
// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF". The analysis can be found
// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {

	float dotNV = saturate( dot( normal, viewDir ) );

	float r2 = roughness * roughness;

	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;

	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;

	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );

	return saturate( DG * RECIPROCAL_PI );

}

// Analytical approximation of the DFG LUT, one half of the
// split-sum approximation used in indirect specular lighting.
// via 'environmentBRDF' from "Physically Based Shading on Mobile"
// https://www.unrealengine.com/blog/physically-based-shading-on-mobile
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {

	float dotNV = saturate( dot( normal, viewDir ) );

	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );

	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );

	vec4 r = roughness * c0 + c1;

	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;

	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;

	return fab;

}

vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {

	vec2 fab = DFGApprox( normal, viewDir, roughness );

	return specularColor * fab.x + specularF90 * fab.y;

}

// Fdez-Agüera's "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"
// Approximates multiscattering in order to preserve energy.
// http://www.jcgt.org/published/0008/01/03/
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif

	vec2 fab = DFGApprox( normal, viewDir, roughness );

	#ifdef USE_IRIDESCENCE

		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );

	#else

		vec3 Fr = specularColor;

	#endif

	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;

	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;

	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21
	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );

	singleScatter += FssEss;
	multiScatter += Fms * Ems;

}

#if NUM_RECT_AREA_LIGHTS > 0

	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;

		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction
		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;

		vec2 uv = LTC_Uv( normal, viewDir, roughness );

		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );

		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);

		// LTC Fresnel Approximation by Stephen Hill
		// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );

		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );

		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );

	}

#endif

void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );

	vec3 irradiance = dotNL * directLight.color;

	#ifdef USE_CLEARCOAT

		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );

		vec3 ccIrradiance = dotNLcc * directLight.color;

		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );

	#endif

	#ifdef USE_SHEEN

		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );

	#endif

	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );

	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}

void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {

	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );

}

void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {

	#ifdef USE_CLEARCOAT

		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );

	#endif

	#ifdef USE_SHEEN

		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );

	#endif

	// Both indirect specular and indirect diffuse light accumulate here

	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;

	#ifdef USE_IRIDESCENCE

		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );

	#else

		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );

	#endif

	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );

	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;

	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;

}

#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical

// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {

	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );

}
`
), CM = (
  /* glsl */
  `
/**
 * This is a template that can be used to light a material, it uses pluggable
 * RenderEquations (RE)for specific lighting scenarios.
 *
 * Instructions for use:
 * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined
 * - Create a material parameter that is to be passed as the third parameter to your lighting functions.
 *
 * TODO:
 * - Add area light support.
 * - Add sphere light support.
 * - Add diffuse light probe (irradiance cubemap) support.
 */

vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );

vec3 geometryClearcoatNormal;

#ifdef USE_CLEARCOAT

	geometryClearcoatNormal = clearcoatNormal;

#endif

#ifdef USE_IRIDESCENCE

	float dotNVi = saturate( dot( normal, geometryViewDir ) );

	if ( material.iridescenceThickness == 0.0 ) {

		material.iridescence = 0.0;

	} else {

		material.iridescence = saturate( material.iridescence );

	}

	if ( material.iridescence > 0.0 ) {

		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );

		// Iridescence F0 approximation
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );

	}

#endif

IncidentLight directLight;

#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )

	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {

		pointLight = pointLights[ i ];

		getPointLightInfo( pointLight, geometryPosition, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )

	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;

	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {

		spotLight = spotLights[ i ];

		getSpotLightInfo( spotLight, geometryPosition, directLight );

		// spot lights are ordered [shadows with maps, shadows without maps, maps without shadows, none]
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif

		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif

		#undef SPOT_LIGHT_MAP_INDEX

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )

	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {

		directionalLight = directionalLights[ i ];

		getDirectionalLightInfo( directionalLight, directLight );

		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif

		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )

	RectAreaLight rectAreaLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {

		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

	}
	#pragma unroll_loop_end

#endif

#if defined( RE_IndirectDiffuse )

	vec3 iblIrradiance = vec3( 0.0 );

	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );

	#if defined( USE_LIGHT_PROBES )

		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );

	#endif

	#if ( NUM_HEMI_LIGHTS > 0 )

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {

			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );

		}
		#pragma unroll_loop_end

	#endif

#endif

#if defined( RE_IndirectSpecular )

	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );

#endif
`
), PM = (
  /* glsl */
  `
#if defined( RE_IndirectDiffuse )

	#ifdef USE_LIGHTMAP

		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;

		irradiance += lightMapIrradiance;

	#endif

	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )

		iblIrradiance += getIBLIrradiance( geometryNormal );

	#endif

#endif

#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )

	#ifdef USE_ANISOTROPY

		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );

	#else

		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );

	#endif

	#ifdef USE_CLEARCOAT

		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );

	#endif

#endif
`
), LM = (
  /* glsl */
  `
#if defined( RE_IndirectDiffuse )

	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

#endif

#if defined( RE_IndirectSpecular )

	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );

#endif
`
), IM = (
  /* glsl */
  `
#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )

	// Doing a strict comparison with == 1.0 can cause noise artifacts
	// on some platforms. See issue #17623.
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;

#endif
`
), DM = (
  /* glsl */
  `
#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )

	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;

#endif
`
), NM = (
  /* glsl */
  `
#ifdef USE_LOGDEPTHBUF

	#ifdef USE_LOGDEPTHBUF_EXT

		varying float vFragDepth;
		varying float vIsPerspective;

	#else

		uniform float logDepthBufFC;

	#endif

#endif
`
), UM = (
  /* glsl */
  `
#ifdef USE_LOGDEPTHBUF

	#ifdef USE_LOGDEPTHBUF_EXT

		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );

	#else

		if ( isPerspectiveMatrix( projectionMatrix ) ) {

			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;

			gl_Position.z *= gl_Position.w;

		}

	#endif

#endif
`
), OM = (
  /* glsl */
  `
#ifdef USE_MAP

	vec4 sampledDiffuseColor = texture2D( map, vMapUv );

	#ifdef DECODE_VIDEO_TEXTURE

		// use inline sRGB decode until browsers properly support SRGB8_APLHA8 with video textures

		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif

	diffuseColor *= sampledDiffuseColor;

#endif
`
), FM = (
  /* glsl */
  `
#ifdef USE_MAP

	uniform sampler2D map;

#endif
`
), zM = (
  /* glsl */
  `
#if defined( USE_MAP ) || defined( USE_ALPHAMAP )

	#if defined( USE_POINTS_UV )

		vec2 uv = vUv;

	#else

		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;

	#endif

#endif

#ifdef USE_MAP

	diffuseColor *= texture2D( map, uv );

#endif

#ifdef USE_ALPHAMAP

	diffuseColor.a *= texture2D( alphaMap, uv ).g;

#endif
`
), BM = (
  /* glsl */
  `
#if defined( USE_POINTS_UV )

	varying vec2 vUv;

#else

	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )

		uniform mat3 uvTransform;

	#endif

#endif

#ifdef USE_MAP

	uniform sampler2D map;

#endif

#ifdef USE_ALPHAMAP

	uniform sampler2D alphaMap;

#endif
`
), kM = (
  /* glsl */
  `
float metalnessFactor = metalness;

#ifdef USE_METALNESSMAP

	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );

	// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	metalnessFactor *= texelMetalness.b;

#endif
`
), HM = (
  /* glsl */
  `
#ifdef USE_METALNESSMAP

	uniform sampler2D metalnessMap;

#endif
`
), VM = (
  /* glsl */
  `
#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )

	// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:
	// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)
	// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting
	vColor *= morphTargetBaseInfluence;

	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {

		#if defined( USE_COLOR_ALPHA )

			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];

		#elif defined( USE_COLOR )

			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];

		#endif

	}

#endif
`
), GM = (
  /* glsl */
  `
#ifdef USE_MORPHNORMALS

	// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:
	// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)
	// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting
	objectNormal *= morphTargetBaseInfluence;

	#ifdef MORPHTARGETS_TEXTURE

		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {

			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];

		}

	#else

		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];

	#endif

#endif
`
), WM = (
  /* glsl */
  `
#ifdef USE_MORPHTARGETS

	uniform float morphTargetBaseInfluence;

	#ifdef MORPHTARGETS_TEXTURE

		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;

		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {

			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;

			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );

		}

	#else

		#ifndef USE_MORPHNORMALS

			uniform float morphTargetInfluences[ 8 ];

		#else

			uniform float morphTargetInfluences[ 4 ];

		#endif

	#endif

#endif
`
), XM = (
  /* glsl */
  `
#ifdef USE_MORPHTARGETS

	// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:
	// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)
	// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting
	transformed *= morphTargetBaseInfluence;

	#ifdef MORPHTARGETS_TEXTURE

		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {

			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];

		}

	#else

		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];

		#ifndef USE_MORPHNORMALS

			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];

		#endif

	#endif

#endif
`
), YM = (
  /* glsl */
  `
float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;

#ifdef FLAT_SHADED

	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );

#else

	vec3 normal = normalize( vNormal );

	#ifdef DOUBLE_SIDED

		normal *= faceDirection;

	#endif

#endif

#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )

	#ifdef USE_TANGENT

		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );

	#else

		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);

	#endif

	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )

		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;

	#endif

#endif

#ifdef USE_CLEARCOAT_NORMALMAP

	#ifdef USE_TANGENT

		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );

	#else

		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );

	#endif

	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )

		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;

	#endif

#endif

// non perturbed normal for clearcoat among others

vec3 nonPerturbedNormal = normal;

`
), qM = (
  /* glsl */
  `

#ifdef USE_NORMALMAP_OBJECTSPACE

	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals

	#ifdef FLIP_SIDED

		normal = - normal;

	#endif

	#ifdef DOUBLE_SIDED

		normal = normal * faceDirection;

	#endif

	normal = normalize( normalMatrix * normal );

#elif defined( USE_NORMALMAP_TANGENTSPACE )

	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;

	normal = normalize( tbn * mapN );

#elif defined( USE_BUMPMAP )

	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );

#endif
`
), jM = (
  /* glsl */
  `
#ifndef FLAT_SHADED

	varying vec3 vNormal;

	#ifdef USE_TANGENT

		varying vec3 vTangent;
		varying vec3 vBitangent;

	#endif

#endif
`
), ZM = (
  /* glsl */
  `
#ifndef FLAT_SHADED

	varying vec3 vNormal;

	#ifdef USE_TANGENT

		varying vec3 vTangent;
		varying vec3 vBitangent;

	#endif

#endif
`
), JM = (
  /* glsl */
  `
#ifndef FLAT_SHADED // normal is computed with derivatives when FLAT_SHADED

	vNormal = normalize( transformedNormal );

	#ifdef USE_TANGENT

		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );

	#endif

#endif
`
), KM = (
  /* glsl */
  `
#ifdef USE_NORMALMAP

	uniform sampler2D normalMap;
	uniform vec2 normalScale;

#endif

#ifdef USE_NORMALMAP_OBJECTSPACE

	uniform mat3 normalMatrix;

#endif

#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )

	// Normal Mapping Without Precomputed Tangents
	// http://www.thetenthplanet.de/archives/1180

	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {

		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );

		vec3 N = surf_norm; // normalized

		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );

		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;

		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );

		return mat3( T * scale, B * scale, N );

	}

#endif
`
), QM = (
  /* glsl */
  `
#ifdef USE_CLEARCOAT

	vec3 clearcoatNormal = nonPerturbedNormal;

#endif
`
), $M = (
  /* glsl */
  `
#ifdef USE_CLEARCOAT_NORMALMAP

	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;

	clearcoatNormal = normalize( tbn2 * clearcoatMapN );

#endif
`
), e1 = (
  /* glsl */
  `

#ifdef USE_CLEARCOATMAP

	uniform sampler2D clearcoatMap;

#endif

#ifdef USE_CLEARCOAT_NORMALMAP

	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;

#endif

#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	uniform sampler2D clearcoatRoughnessMap;

#endif
`
), t1 = (
  /* glsl */
  `

#ifdef USE_IRIDESCENCEMAP

	uniform sampler2D iridescenceMap;

#endif

#ifdef USE_IRIDESCENCE_THICKNESSMAP

	uniform sampler2D iridescenceThicknessMap;

#endif
`
), n1 = (
  /* glsl */
  `
#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif

#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif

gl_FragColor = vec4( outgoingLight, diffuseColor.a );
`
), i1 = (
  /* glsl */
  `
vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}

vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}

const float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)
const float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)

const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );

const float ShiftRight8 = 1. / 256.;

vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8; // tidy overflow
	return r * PackUpscale;
}

float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}

vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}

float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}

vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}

vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}

// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera

float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	// -near maps to 0; -far maps to 1
	return ( viewZ + near ) / ( near - far );
}

float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	// maps orthographic depth in [ 0, 1 ] to viewZ
	return depth * ( near - far ) - near;
}

// NOTE: https://twitter.com/gonnavis/status/1377183786949959682

float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	// -near maps to 0; -far maps to 1
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}

float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	// maps perspective depth in [ 0, 1 ] to viewZ
	return ( near * far ) / ( ( far - near ) * depth - far );
}
`
), r1 = (
  /* glsl */
  `
#ifdef PREMULTIPLIED_ALPHA

	// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.
	gl_FragColor.rgb *= gl_FragColor.a;

#endif
`
), s1 = (
  /* glsl */
  `
vec4 mvPosition = vec4( transformed, 1.0 );

#ifdef USE_INSTANCING

	mvPosition = instanceMatrix * mvPosition;

#endif

mvPosition = modelViewMatrix * mvPosition;

gl_Position = projectionMatrix * mvPosition;
`
), o1 = (
  /* glsl */
  `
#ifdef DITHERING

	gl_FragColor.rgb = dithering( gl_FragColor.rgb );

#endif
`
), a1 = (
  /* glsl */
  `
#ifdef DITHERING

	// based on https://www.shadertoy.com/view/MslGR8
	vec3 dithering( vec3 color ) {
		//Calculate grid position
		float grid_position = rand( gl_FragCoord.xy );

		//Shift the individual colors differently, thus making it even harder to see the dithering pattern
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );

		//modify shift according to grid position.
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );

		//shift the color by dither_shift
		return color + dither_shift_RGB;
	}

#endif
`
), l1 = (
  /* glsl */
  `
float roughnessFactor = roughness;

#ifdef USE_ROUGHNESSMAP

	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );

	// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
	roughnessFactor *= texelRoughness.g;

#endif
`
), c1 = (
  /* glsl */
  `
#ifdef USE_ROUGHNESSMAP

	uniform sampler2D roughnessMap;

#endif
`
), u1 = (
  /* glsl */
  `
#if NUM_SPOT_LIGHT_COORDS > 0

	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];

#endif

#if NUM_SPOT_LIGHT_MAPS > 0

	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];

#endif

#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];

		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];

		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];

		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};

		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): create uniforms for area light shadows

	#endif
	*/

	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {

		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );

	}

	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {

		return unpackRGBATo2Half( texture2D( shadow, uv ) );

	}

	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){

		float occlusion = 1.0;

		vec2 distribution = texture2DDistribution( shadow, uv );

		float hard_shadow = step( compare , distribution.x ); // Hard Shadow

		if (hard_shadow != 1.0 ) {

			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality
			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed
			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );

		}
		return occlusion;

	}

	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {

		float shadow = 1.0;

		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;

		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;

		if ( frustumTest ) {

		#if defined( SHADOWMAP_TYPE_PCF )

			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;

			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;

			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );

		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )

			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;

			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;

			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );

		#elif defined( SHADOWMAP_TYPE_VSM )

			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );

		#else // no percentage-closer filtering:

			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );

		#endif

		}

		return shadow;

	}

	// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D
	// vector suitable for 2D texture mapping. This code uses the following layout for the
	// 2D texture:
	//
	// xzXZ
	//  y Y
	//
	// Y - Positive y direction
	// y - Negative y direction
	// X - Positive x direction
	// x - Negative x direction
	// Z - Positive z direction
	// z - Negative z direction
	//
	// Source and test bed:
	// https://gist.github.com/tschw/da10c43c467ce8afd0c4

	vec2 cubeToUV( vec3 v, float texelSizeY ) {

		// Number of texels to avoid at the edge of each square

		vec3 absV = abs( v );

		// Intersect unit cube

		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;

		// Apply scale to avoid seams

		// two texels less per square (one texel will do for NEAREST)
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );

		// Unwrap

		// space: -1 ... 1 range for each square
		//
		// #X##		dim    := ( 4 , 2 )
		//  # #		center := ( 1 , 1 )

		vec2 planar = v.xy;

		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;

		if ( absV.z >= almostOne ) {

			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;

		} else if ( absV.x >= almostOne ) {

			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;

		} else if ( absV.y >= almostOne ) {

			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;

		}

		// Transform to UV space

		// scale := 0.5 / dim
		// translate := ( center + 0.5 ) / dim
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );

	}

	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {

		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );

		// for point lights, the uniform @vShadowCoord is re-purposed to hold
		// the vector from the light to the world-space position of the fragment.
		vec3 lightToPosition = shadowCoord.xyz;

		// dp = normalized distance from light to fragment position
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?
		dp += shadowBias;

		// bd3D = base direction 3D
		vec3 bd3D = normalize( lightToPosition );

		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )

			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;

			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );

		#else // no percentage-closer filtering

			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );

		#endif

	}

#endif
`
), h1 = (
  /* glsl */
  `

#if NUM_SPOT_LIGHT_COORDS > 0

	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];

#endif

#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];

		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];

		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};

		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): uniforms for area light shadows

	#endif
	*/

#endif
`
), f1 = (
  /* glsl */
  `

#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )

	// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;

#endif

#if defined( USE_SHADOWMAP )

	#if NUM_DIR_LIGHT_SHADOWS > 0

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {

			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;

		}
		#pragma unroll_loop_end

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {

			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;

		}
		#pragma unroll_loop_end

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): update vAreaShadowCoord with area light info

	#endif
	*/

#endif

// spot lights can be evaluated without active shadow mapping (when SpotLight.map is used)

#if NUM_SPOT_LIGHT_COORDS > 0

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {

		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;

	}
	#pragma unroll_loop_end

#endif


`
), d1 = (
  /* glsl */
  `
float getShadowMask() {

	float shadow = 1.0;

	#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

	DirectionalLightShadow directionalLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {

		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

	SpotLightShadow spotLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {

		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

	PointLightShadow pointLight;

	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {

		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;

	}
	#pragma unroll_loop_end

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): update shadow for Area light

	#endif
	*/

	#endif

	return shadow;

}
`
), p1 = (
  /* glsl */
  `
#ifdef USE_SKINNING

	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );

#endif
`
), m1 = (
  /* glsl */
  `
#ifdef USE_SKINNING

	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;

	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;

	mat4 getBoneMatrix( const in float i ) {

		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );

		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );

		y = dy * ( y + 0.5 );

		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );

		mat4 bone = mat4( v1, v2, v3, v4 );

		return bone;

	}

#endif
`
), g1 = (
  /* glsl */
  `
#ifdef USE_SKINNING

	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );

	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;

	transformed = ( bindMatrixInverse * skinned ).xyz;

#endif
`
), v1 = (
  /* glsl */
  `
#ifdef USE_SKINNING

	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;

	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;

	#ifdef USE_TANGENT

		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;

	#endif

#endif
`
), _1 = (
  /* glsl */
  `
float specularStrength;

#ifdef USE_SPECULARMAP

	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;

#else

	specularStrength = 1.0;

#endif
`
), y1 = (
  /* glsl */
  `
#ifdef USE_SPECULARMAP

	uniform sampler2D specularMap;

#endif
`
), x1 = (
  /* glsl */
  `
#if defined( TONE_MAPPING )

	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );

#endif
`
), S1 = (
  /* glsl */
  `
#ifndef saturate
// <common> may have defined saturate() already
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif

uniform float toneMappingExposure;

// exposure only
vec3 LinearToneMapping( vec3 color ) {

	return saturate( toneMappingExposure * color );

}

// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf
vec3 ReinhardToneMapping( vec3 color ) {

	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );

}

// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/
vec3 OptimizedCineonToneMapping( vec3 color ) {

	// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );

}

// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs
vec3 RRTAndODTFit( vec3 v ) {

	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;

}

// this implementation of ACES is modified to accommodate a brighter viewing environment.
// the scale factor of 1/0.6 is subjective. see discussion in #19621.

vec3 ACESFilmicToneMapping( vec3 color ) {

	// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ), // transposed from source
		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);

	// ODT_SAT => XYZ => D60_2_D65 => sRGB
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ), // transposed from source
		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);

	color *= toneMappingExposure / 0.6;

	color = ACESInputMat * color;

	// Apply RRT and ODT
	color = RRTAndODTFit( color );

	color = ACESOutputMat * color;

	// Clamp to [0, 1]
	return saturate( color );

}

vec3 CustomToneMapping( vec3 color ) { return color; }
`
), M1 = (
  /* glsl */
  `
#ifdef USE_TRANSMISSION

	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;

	#ifdef USE_TRANSMISSIONMAP

		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;

	#endif

	#ifdef USE_THICKNESSMAP

		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;

	#endif

	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );

	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );

	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );

	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );

#endif
`
), E1 = (
  /* glsl */
  `
#ifdef USE_TRANSMISSION

	// Transmission code is based on glTF-Sampler-Viewer
	// https://github.com/KhronosGroup/glTF-Sample-Viewer

	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;

	#ifdef USE_TRANSMISSIONMAP

		uniform sampler2D transmissionMap;

	#endif

	#ifdef USE_THICKNESSMAP

		uniform sampler2D thicknessMap;

	#endif

	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;

	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;

	varying vec3 vWorldPosition;

	// Mipped Bicubic Texture Filtering by N8
	// https://www.shadertoy.com/view/Dl2SDW

	float w0( float a ) {

		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );

	}

	float w1( float a ) {

		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );

	}

	float w2( float a ){

		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );

	}

	float w3( float a ) {

		return ( 1.0 / 6.0 ) * ( a * a * a );

	}

	// g0 and g1 are the two amplitude functions
	float g0( float a ) {

		return w0( a ) + w1( a );

	}

	float g1( float a ) {

		return w2( a ) + w3( a );

	}

	// h0 and h1 are the two offset functions
	float h0( float a ) {

		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );

	}

	float h1( float a ) {

		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );

	}

	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {

		uv = uv * texelSize.zw + 0.5;

		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );

		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );

		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;

		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );

	}

	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {

		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );

	}

	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {

		// Direction of refracted light.
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );

		// Compute rotation-independant scaling of the model matrix.
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );

		// The thickness is specified in local space.
		return normalize( refractionVector ) * thickness * modelScale;

	}

	float applyIorToRoughness( const in float roughness, const in float ior ) {

		// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and
		// an IOR of 1.5 results in the default amount of microfacet refraction.
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );

	}

	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {

		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );

	}

	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {

		if ( isinf( attenuationDistance ) ) {

			// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.
			return vec3( 1.0 );

		} else {

			// Compute light attenuation using Beer's law.
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law
			return transmittance;

		}

	}

	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {

		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;

		// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;

		// Sample framebuffer to get pixel the refracted ray hits.
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );

		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;

		// Get the specular component.
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );

		// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job 
		// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;

		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );

	}
#endif
`
), w1 = (
  /* glsl */
  `
#if defined( USE_UV ) || defined( USE_ANISOTROPY )

	varying vec2 vUv;

#endif
#ifdef USE_MAP

	varying vec2 vMapUv;

#endif
#ifdef USE_ALPHAMAP

	varying vec2 vAlphaMapUv;

#endif
#ifdef USE_LIGHTMAP

	varying vec2 vLightMapUv;

#endif
#ifdef USE_AOMAP

	varying vec2 vAoMapUv;

#endif
#ifdef USE_BUMPMAP

	varying vec2 vBumpMapUv;

#endif
#ifdef USE_NORMALMAP

	varying vec2 vNormalMapUv;

#endif
#ifdef USE_EMISSIVEMAP

	varying vec2 vEmissiveMapUv;

#endif
#ifdef USE_METALNESSMAP

	varying vec2 vMetalnessMapUv;

#endif
#ifdef USE_ROUGHNESSMAP

	varying vec2 vRoughnessMapUv;

#endif
#ifdef USE_ANISOTROPYMAP

	varying vec2 vAnisotropyMapUv;

#endif
#ifdef USE_CLEARCOATMAP

	varying vec2 vClearcoatMapUv;

#endif
#ifdef USE_CLEARCOAT_NORMALMAP

	varying vec2 vClearcoatNormalMapUv;

#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	varying vec2 vClearcoatRoughnessMapUv;

#endif
#ifdef USE_IRIDESCENCEMAP

	varying vec2 vIridescenceMapUv;

#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP

	varying vec2 vIridescenceThicknessMapUv;

#endif
#ifdef USE_SHEEN_COLORMAP

	varying vec2 vSheenColorMapUv;

#endif
#ifdef USE_SHEEN_ROUGHNESSMAP

	varying vec2 vSheenRoughnessMapUv;

#endif
#ifdef USE_SPECULARMAP

	varying vec2 vSpecularMapUv;

#endif
#ifdef USE_SPECULAR_COLORMAP

	varying vec2 vSpecularColorMapUv;

#endif
#ifdef USE_SPECULAR_INTENSITYMAP

	varying vec2 vSpecularIntensityMapUv;

#endif
#ifdef USE_TRANSMISSIONMAP

	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;

#endif
#ifdef USE_THICKNESSMAP

	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;

#endif
`
), T1 = (
  /* glsl */
  `
#if defined( USE_UV ) || defined( USE_ANISOTROPY )

	varying vec2 vUv;

#endif
#ifdef USE_MAP

	uniform mat3 mapTransform;
	varying vec2 vMapUv;

#endif
#ifdef USE_ALPHAMAP

	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;

#endif
#ifdef USE_LIGHTMAP

	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;

#endif
#ifdef USE_AOMAP

	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;

#endif
#ifdef USE_BUMPMAP

	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;

#endif
#ifdef USE_NORMALMAP

	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;

#endif
#ifdef USE_DISPLACEMENTMAP

	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;

#endif
#ifdef USE_EMISSIVEMAP

	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;

#endif
#ifdef USE_METALNESSMAP

	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;

#endif
#ifdef USE_ROUGHNESSMAP

	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;

#endif
#ifdef USE_ANISOTROPYMAP

	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;

#endif
#ifdef USE_CLEARCOATMAP

	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;

#endif
#ifdef USE_CLEARCOAT_NORMALMAP

	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;

#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;

#endif
#ifdef USE_SHEEN_COLORMAP

	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;

#endif
#ifdef USE_SHEEN_ROUGHNESSMAP

	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;

#endif
#ifdef USE_IRIDESCENCEMAP

	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;

#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP

	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;

#endif
#ifdef USE_SPECULARMAP

	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;

#endif
#ifdef USE_SPECULAR_COLORMAP

	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;

#endif
#ifdef USE_SPECULAR_INTENSITYMAP

	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;

#endif
#ifdef USE_TRANSMISSIONMAP

	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;

#endif
#ifdef USE_THICKNESSMAP

	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;

#endif
`
), b1 = (
  /* glsl */
  `
#if defined( USE_UV ) || defined( USE_ANISOTROPY )

	vUv = vec3( uv, 1 ).xy;

#endif
#ifdef USE_MAP

	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;

#endif
#ifdef USE_ALPHAMAP

	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_LIGHTMAP

	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_AOMAP

	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_BUMPMAP

	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_NORMALMAP

	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_DISPLACEMENTMAP

	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_EMISSIVEMAP

	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_METALNESSMAP

	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_ROUGHNESSMAP

	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_ANISOTROPYMAP

	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_CLEARCOATMAP

	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_CLEARCOAT_NORMALMAP

	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP

	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_IRIDESCENCEMAP

	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP

	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SHEEN_COLORMAP

	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SHEEN_ROUGHNESSMAP

	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SPECULARMAP

	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SPECULAR_COLORMAP

	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_SPECULAR_INTENSITYMAP

	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_TRANSMISSIONMAP

	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;

#endif
#ifdef USE_THICKNESSMAP

	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;

#endif
`
), A1 = (
  /* glsl */
  `
#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0

	vec4 worldPosition = vec4( transformed, 1.0 );

	#ifdef USE_INSTANCING

		worldPosition = instanceMatrix * worldPosition;

	#endif

	worldPosition = modelMatrix * worldPosition;

#endif
`
), R1 = (
  /* glsl */
  `
varying vec2 vUv;
uniform mat3 uvTransform;

void main() {

	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;

	gl_Position = vec4( position.xy, 1.0, 1.0 );

}
`
), C1 = (
  /* glsl */
  `
uniform sampler2D t2D;
uniform float backgroundIntensity;

varying vec2 vUv;

void main() {

	vec4 texColor = texture2D( t2D, vUv );

	#ifdef DECODE_VIDEO_TEXTURE

		// use inline sRGB decode until browsers properly support SRGB8_APLHA8 with video textures

		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );

	#endif

	texColor.rgb *= backgroundIntensity;

	gl_FragColor = texColor;

	#include <tonemapping_fragment>
	#include <colorspace_fragment>

}
`
), P1 = (
  /* glsl */
  `
varying vec3 vWorldDirection;

#include <common>

void main() {

	vWorldDirection = transformDirection( position, modelMatrix );

	#include <begin_vertex>
	#include <project_vertex>

	gl_Position.z = gl_Position.w; // set z to camera.far

}
`
), L1 = (
  /* glsl */
  `

#ifdef ENVMAP_TYPE_CUBE

	uniform samplerCube envMap;

#elif defined( ENVMAP_TYPE_CUBE_UV )

	uniform sampler2D envMap;

#endif

uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;

varying vec3 vWorldDirection;

#include <cube_uv_reflection_fragment>

void main() {

	#ifdef ENVMAP_TYPE_CUBE

		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );

	#elif defined( ENVMAP_TYPE_CUBE_UV )

		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );

	#else

		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );

	#endif

	texColor.rgb *= backgroundIntensity;

	gl_FragColor = texColor;

	#include <tonemapping_fragment>
	#include <colorspace_fragment>

}
`
), I1 = (
  /* glsl */
  `
varying vec3 vWorldDirection;

#include <common>

void main() {

	vWorldDirection = transformDirection( position, modelMatrix );

	#include <begin_vertex>
	#include <project_vertex>

	gl_Position.z = gl_Position.w; // set z to camera.far

}
`
), D1 = (
  /* glsl */
  `
uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;

varying vec3 vWorldDirection;

void main() {

	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );

	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;

	#include <tonemapping_fragment>
	#include <colorspace_fragment>

}
`
), N1 = (
  /* glsl */
  `
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.
// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for
// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.
varying vec2 vHighPrecisionZW;

void main() {

	#include <uv_vertex>

	#include <skinbase_vertex>

	#ifdef USE_DISPLACEMENTMAP

		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vHighPrecisionZW = gl_Position.zw;

}
`
), U1 = (
  /* glsl */
  `
#if DEPTH_PACKING == 3200

	uniform float opacity;

#endif

#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

varying vec2 vHighPrecisionZW;

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( 1.0 );

	#if DEPTH_PACKING == 3200

		diffuseColor.a = opacity;

	#endif

	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>

	#include <logdepthbuf_fragment>

	// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;

	#if DEPTH_PACKING == 3200

		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );

	#elif DEPTH_PACKING == 3201

		gl_FragColor = packDepthToRGBA( fragCoordZ );

	#endif

}
`
), O1 = (
  /* glsl */
  `
#define DISTANCE

varying vec3 vWorldPosition;

#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>

	#include <skinbase_vertex>

	#ifdef USE_DISPLACEMENTMAP

		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>

	vWorldPosition = worldPosition.xyz;

}
`
), F1 = (
  /* glsl */
  `
#define DISTANCE

uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;

#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>

void main () {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( 1.0 );

	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>

	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist ); // clamp to [ 0, 1 ]

	gl_FragColor = packDepthToRGBA( dist );

}
`
), z1 = (
  /* glsl */
  `
varying vec3 vWorldDirection;

#include <common>

void main() {

	vWorldDirection = transformDirection( position, modelMatrix );

	#include <begin_vertex>
	#include <project_vertex>

}
`
), B1 = (
  /* glsl */
  `
uniform sampler2D tEquirect;

varying vec3 vWorldDirection;

#include <common>

void main() {

	vec3 direction = normalize( vWorldDirection );

	vec2 sampleUV = equirectUv( direction );

	gl_FragColor = texture2D( tEquirect, sampleUV );

	#include <tonemapping_fragment>
	#include <colorspace_fragment>

}
`
), k1 = (
  /* glsl */
  `
uniform float scale;
attribute float lineDistance;

varying float vLineDistance;

#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	vLineDistance = scale * lineDistance;

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

}
`
), H1 = (
  /* glsl */
  `
uniform vec3 diffuse;
uniform float opacity;

uniform float dashSize;
uniform float totalSize;

varying float vLineDistance;

#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	if ( mod( vLineDistance, totalSize ) > dashSize ) {

		discard;

	}

	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>

	outgoingLight = diffuseColor.rgb; // simple shader

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>

}
`
), V1 = (
  /* glsl */
  `
#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>

	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )

		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>

	#endif

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>

}
`
), G1 = (
  /* glsl */
  `
uniform vec3 diffuse;
uniform float opacity;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif

#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>

	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );

	// accumulation (baked indirect lighting only)
	#ifdef USE_LIGHTMAP

		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;

	#else

		reflectedLight.indirectDiffuse += vec3( 1.0 );

	#endif

	// modulation
	#include <aomap_fragment>

	reflectedLight.indirectDiffuse *= diffuseColor.rgb;

	vec3 outgoingLight = reflectedLight.indirectDiffuse;

	#include <envmap_fragment>

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`
), W1 = (
  /* glsl */
  `
#define LAMBERT

varying vec3 vViewPosition;

#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`
), X1 = (
  /* glsl */
  `
#define LAMBERT

uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;

	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`
), Y1 = (
  /* glsl */
  `
#define MATCAP

varying vec3 vViewPosition;

#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>

#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

	vViewPosition = - mvPosition.xyz;

}
`
), q1 = (
  /* glsl */
  `
#define MATCAP

uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;

varying vec3 vViewPosition;

#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>

	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks

	#ifdef USE_MATCAP

		vec4 matcapColor = texture2D( matcap, uv );

	#else

		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 ); // default if matcap is missing

	#endif

	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`
), j1 = (
  /* glsl */
  `
#define NORMAL

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )

	varying vec3 vViewPosition;

#endif

#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )

	vViewPosition = - mvPosition.xyz;

#endif

}
`
), Z1 = (
  /* glsl */
  `
#define NORMAL

uniform float opacity;

#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )

	varying vec3 vViewPosition;

#endif

#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>

	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );

	#ifdef OPAQUE

		gl_FragColor.a = 1.0;

	#endif

}
`
), J1 = (
  /* glsl */
  `
#define PHONG

varying vec3 vViewPosition;

#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`
), K1 = (
  /* glsl */
  `
#define PHONG

uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;

	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`
), Q1 = (
  /* glsl */
  `
#define STANDARD

varying vec3 vViewPosition;

#ifdef USE_TRANSMISSION

	varying vec3 vWorldPosition;

#endif

#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

#ifdef USE_TRANSMISSION

	vWorldPosition = worldPosition.xyz;

#endif
}
`
), $1 = (
  /* glsl */
  `
#define STANDARD

#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif

uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;

#ifdef IOR
	uniform float ior;
#endif

#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;

	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif

	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif

#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif

#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif

#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;

	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif

	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif

#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;

	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif

varying vec3 vViewPosition;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;

	#include <transmission_fragment>

	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;

	#ifdef USE_SHEEN

		// Sheen energy compensation approximation calculation can be found at the end of
		// https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );

		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;

	#endif

	#ifdef USE_CLEARCOAT

		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );

		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );

		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;

	#endif

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`
), eE = (
  /* glsl */
  `
#define TOON

varying vec3 vViewPosition;

#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>

	vViewPosition = - mvPosition.xyz;

	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`
), tE = (
  /* glsl */
  `
#define TOON

uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;

#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>

	// accumulation
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>

	// modulation
	#include <aomap_fragment>

	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
`
), nE = (
  /* glsl */
  `
uniform float size;
uniform float scale;

#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

#ifdef USE_POINTS_UV

	varying vec2 vUv;
	uniform mat3 uvTransform;

#endif

void main() {

	#ifdef USE_POINTS_UV

		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;

	#endif

	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>

	gl_PointSize = size;

	#ifdef USE_SIZEATTENUATION

		bool isPerspective = isPerspectiveMatrix( projectionMatrix );

		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );

	#endif

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>

}
`
), iE = (
  /* glsl */
  `
uniform vec3 diffuse;
uniform float opacity;

#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>

	outgoingLight = diffuseColor.rgb;

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>

}
`
), rE = (
  /* glsl */
  `
#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>

void main() {

	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>

	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>

}
`
), sE = (
  /* glsl */
  `
uniform vec3 color;
uniform float opacity;

#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>

void main() {

	#include <logdepthbuf_fragment>

	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );

	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>

}
`
), oE = (
  /* glsl */
  `
uniform float rotation;
uniform vec2 center;

#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>

	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );

	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );

	#ifndef USE_SIZEATTENUATION

		bool isPerspective = isPerspectiveMatrix( projectionMatrix );

		if ( isPerspective ) scale *= - mvPosition.z;

	#endif

	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;

	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;

	mvPosition.xy += rotatedPosition;

	gl_Position = projectionMatrix * mvPosition;

	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>

}
`
), aE = (
  /* glsl */
  `
uniform vec3 diffuse;
uniform float opacity;

#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );

	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>

	outgoingLight = diffuseColor.rgb;

	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>

}
`
), ht = {
  alphahash_fragment: LS,
  alphahash_pars_fragment: IS,
  alphamap_fragment: DS,
  alphamap_pars_fragment: NS,
  alphatest_fragment: US,
  alphatest_pars_fragment: OS,
  aomap_fragment: FS,
  aomap_pars_fragment: zS,
  begin_vertex: BS,
  beginnormal_vertex: kS,
  bsdfs: HS,
  iridescence_fragment: VS,
  bumpmap_pars_fragment: GS,
  clipping_planes_fragment: WS,
  clipping_planes_pars_fragment: XS,
  clipping_planes_pars_vertex: YS,
  clipping_planes_vertex: qS,
  color_fragment: jS,
  color_pars_fragment: ZS,
  color_pars_vertex: JS,
  color_vertex: KS,
  common: QS,
  cube_uv_reflection_fragment: $S,
  defaultnormal_vertex: eM,
  displacementmap_pars_vertex: tM,
  displacementmap_vertex: nM,
  emissivemap_fragment: iM,
  emissivemap_pars_fragment: rM,
  colorspace_fragment: sM,
  colorspace_pars_fragment: oM,
  envmap_fragment: aM,
  envmap_common_pars_fragment: lM,
  envmap_pars_fragment: cM,
  envmap_pars_vertex: uM,
  envmap_physical_pars_fragment: MM,
  envmap_vertex: hM,
  fog_vertex: fM,
  fog_pars_vertex: dM,
  fog_fragment: pM,
  fog_pars_fragment: mM,
  gradientmap_pars_fragment: gM,
  lightmap_fragment: vM,
  lightmap_pars_fragment: _M,
  lights_lambert_fragment: yM,
  lights_lambert_pars_fragment: xM,
  lights_pars_begin: SM,
  lights_toon_fragment: EM,
  lights_toon_pars_fragment: wM,
  lights_phong_fragment: TM,
  lights_phong_pars_fragment: bM,
  lights_physical_fragment: AM,
  lights_physical_pars_fragment: RM,
  lights_fragment_begin: CM,
  lights_fragment_maps: PM,
  lights_fragment_end: LM,
  logdepthbuf_fragment: IM,
  logdepthbuf_pars_fragment: DM,
  logdepthbuf_pars_vertex: NM,
  logdepthbuf_vertex: UM,
  map_fragment: OM,
  map_pars_fragment: FM,
  map_particle_fragment: zM,
  map_particle_pars_fragment: BM,
  metalnessmap_fragment: kM,
  metalnessmap_pars_fragment: HM,
  morphcolor_vertex: VM,
  morphnormal_vertex: GM,
  morphtarget_pars_vertex: WM,
  morphtarget_vertex: XM,
  normal_fragment_begin: YM,
  normal_fragment_maps: qM,
  normal_pars_fragment: jM,
  normal_pars_vertex: ZM,
  normal_vertex: JM,
  normalmap_pars_fragment: KM,
  clearcoat_normal_fragment_begin: QM,
  clearcoat_normal_fragment_maps: $M,
  clearcoat_pars_fragment: e1,
  iridescence_pars_fragment: t1,
  opaque_fragment: n1,
  packing: i1,
  premultiplied_alpha_fragment: r1,
  project_vertex: s1,
  dithering_fragment: o1,
  dithering_pars_fragment: a1,
  roughnessmap_fragment: l1,
  roughnessmap_pars_fragment: c1,
  shadowmap_pars_fragment: u1,
  shadowmap_pars_vertex: h1,
  shadowmap_vertex: f1,
  shadowmask_pars_fragment: d1,
  skinbase_vertex: p1,
  skinning_pars_vertex: m1,
  skinning_vertex: g1,
  skinnormal_vertex: v1,
  specularmap_fragment: _1,
  specularmap_pars_fragment: y1,
  tonemapping_fragment: x1,
  tonemapping_pars_fragment: S1,
  transmission_fragment: M1,
  transmission_pars_fragment: E1,
  uv_pars_fragment: w1,
  uv_pars_vertex: T1,
  uv_vertex: b1,
  worldpos_vertex: A1,
  background_vert: R1,
  background_frag: C1,
  backgroundCube_vert: P1,
  backgroundCube_frag: L1,
  cube_vert: I1,
  cube_frag: D1,
  depth_vert: N1,
  depth_frag: U1,
  distanceRGBA_vert: O1,
  distanceRGBA_frag: F1,
  equirect_vert: z1,
  equirect_frag: B1,
  linedashed_vert: k1,
  linedashed_frag: H1,
  meshbasic_vert: V1,
  meshbasic_frag: G1,
  meshlambert_vert: W1,
  meshlambert_frag: X1,
  meshmatcap_vert: Y1,
  meshmatcap_frag: q1,
  meshnormal_vert: j1,
  meshnormal_frag: Z1,
  meshphong_vert: J1,
  meshphong_frag: K1,
  meshphysical_vert: Q1,
  meshphysical_frag: $1,
  meshtoon_vert: eE,
  meshtoon_frag: tE,
  points_vert: nE,
  points_frag: iE,
  shadow_vert: rE,
  shadow_frag: sE,
  sprite_vert: oE,
  sprite_frag: aE
}, Re = {
  common: {
    diffuse: { value: /* @__PURE__ */ new Fe(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new pt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new pt() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new pt() }
  },
  envmap: {
    envMap: { value: null },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new pt() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new pt() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new pt() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new pt() },
    normalScale: { value: /* @__PURE__ */ new ue(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new pt() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new pt() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new pt() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new pt() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new Fe(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new Fe(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new pt() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new pt() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new Fe(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new ue(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new pt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new pt() },
    alphaTest: { value: 0 }
  }
}, Mi = {
  basic: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.specularmap,
      Re.envmap,
      Re.aomap,
      Re.lightmap,
      Re.fog
    ]),
    vertexShader: ht.meshbasic_vert,
    fragmentShader: ht.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.specularmap,
      Re.envmap,
      Re.aomap,
      Re.lightmap,
      Re.emissivemap,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.fog,
      Re.lights,
      {
        emissive: { value: /* @__PURE__ */ new Fe(0) }
      }
    ]),
    vertexShader: ht.meshlambert_vert,
    fragmentShader: ht.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.specularmap,
      Re.envmap,
      Re.aomap,
      Re.lightmap,
      Re.emissivemap,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.fog,
      Re.lights,
      {
        emissive: { value: /* @__PURE__ */ new Fe(0) },
        specular: { value: /* @__PURE__ */ new Fe(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: ht.meshphong_vert,
    fragmentShader: ht.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.envmap,
      Re.aomap,
      Re.lightmap,
      Re.emissivemap,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.roughnessmap,
      Re.metalnessmap,
      Re.fog,
      Re.lights,
      {
        emissive: { value: /* @__PURE__ */ new Fe(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
        // temporary
      }
    ]),
    vertexShader: ht.meshphysical_vert,
    fragmentShader: ht.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.aomap,
      Re.lightmap,
      Re.emissivemap,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.gradientmap,
      Re.fog,
      Re.lights,
      {
        emissive: { value: /* @__PURE__ */ new Fe(0) }
      }
    ]),
    vertexShader: ht.meshtoon_vert,
    fragmentShader: ht.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: ht.meshmatcap_vert,
    fragmentShader: ht.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ Un([
      Re.points,
      Re.fog
    ]),
    vertexShader: ht.points_vert,
    fragmentShader: ht.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: ht.linedashed_vert,
    fragmentShader: ht.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.displacementmap
    ]),
    vertexShader: ht.depth_vert,
    fragmentShader: ht.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ht.meshnormal_vert,
    fragmentShader: ht.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ Un([
      Re.sprite,
      Re.fog
    ]),
    vertexShader: ht.sprite_vert,
    fragmentShader: ht.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new pt() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: ht.background_vert,
    fragmentShader: ht.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: ht.backgroundCube_vert,
    fragmentShader: ht.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: ht.cube_vert,
    fragmentShader: ht.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: ht.equirect_vert,
    fragmentShader: ht.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ Un([
      Re.common,
      Re.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new D() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: ht.distanceRGBA_vert,
    fragmentShader: ht.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ Un([
      Re.lights,
      Re.fog,
      {
        color: { value: /* @__PURE__ */ new Fe(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ht.shadow_vert,
    fragmentShader: ht.shadow_frag
  }
};
Mi.physical = {
  uniforms: /* @__PURE__ */ Un([
    Mi.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new pt() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new pt() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new ue(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new pt() },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new pt() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new pt() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new Fe(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new pt() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new pt() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new pt() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new ue() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new pt() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new Fe(0) },
      specularColor: { value: /* @__PURE__ */ new Fe(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new pt() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new pt() },
      anisotropyVector: { value: /* @__PURE__ */ new ue() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new pt() }
    }
  ]),
  vertexShader: ht.meshphysical_vert,
  fragmentShader: ht.meshphysical_frag
};
const lc = { r: 0, b: 0, g: 0 };
function lE(r, e, t, n, i, s, l) {
  const c = new Fe(0);
  let u = s === !0 ? 0 : 1, h, f, p = null, m = 0, v = null;
  function y(x, _) {
    let w = !1, M = _.isScene === !0 ? _.background : null;
    M && M.isTexture && (M = (_.backgroundBlurriness > 0 ? t : e).get(M)), M === null ? E(c, u) : M && M.isColor && (E(M, 1), w = !0);
    const b = r.xr.getEnvironmentBlendMode();
    b === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, l) : b === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, l), (r.autoClear || w) && r.clear(r.autoClearColor, r.autoClearDepth, r.autoClearStencil), M && (M.isCubeTexture || M.mapping === Mo) ? (f === void 0 && (f = new yn(
      new Ss(1, 1, 1),
      new fi({
        name: "BackgroundCubeMaterial",
        uniforms: yo(Mi.backgroundCube.uniforms),
        vertexShader: Mi.backgroundCube.vertexShader,
        fragmentShader: Mi.backgroundCube.fragmentShader,
        side: On,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), f.geometry.deleteAttribute("normal"), f.geometry.deleteAttribute("uv"), f.onBeforeRender = function(A, C, I) {
      this.matrixWorld.copyPosition(I.matrixWorld);
    }, Object.defineProperty(f.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), i.update(f)), f.material.uniforms.envMap.value = M, f.material.uniforms.flipEnvMap.value = M.isCubeTexture && M.isRenderTargetTexture === !1 ? -1 : 1, f.material.uniforms.backgroundBlurriness.value = _.backgroundBlurriness, f.material.uniforms.backgroundIntensity.value = _.backgroundIntensity, f.material.toneMapped = Lt.getTransfer(M.colorSpace) !== zt, (p !== M || m !== M.version || v !== r.toneMapping) && (f.material.needsUpdate = !0, p = M, m = M.version, v = r.toneMapping), f.layers.enableAll(), x.unshift(f, f.geometry, f.material, 0, 0, null)) : M && M.isTexture && (h === void 0 && (h = new yn(
      new ka(2, 2),
      new fi({
        name: "BackgroundMaterial",
        uniforms: yo(Mi.background.uniforms),
        vertexShader: Mi.background.vertexShader,
        fragmentShader: Mi.background.fragmentShader,
        side: ar,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), h.geometry.deleteAttribute("normal"), Object.defineProperty(h.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), i.update(h)), h.material.uniforms.t2D.value = M, h.material.uniforms.backgroundIntensity.value = _.backgroundIntensity, h.material.toneMapped = Lt.getTransfer(M.colorSpace) !== zt, M.matrixAutoUpdate === !0 && M.updateMatrix(), h.material.uniforms.uvTransform.value.copy(M.matrix), (p !== M || m !== M.version || v !== r.toneMapping) && (h.material.needsUpdate = !0, p = M, m = M.version, v = r.toneMapping), h.layers.enableAll(), x.unshift(h, h.geometry, h.material, 0, 0, null));
  }
  function E(x, _) {
    x.getRGB(lc, Uv(r)), n.buffers.color.setClear(lc.r, lc.g, lc.b, _, l);
  }
  return {
    getClearColor: function() {
      return c;
    },
    setClearColor: function(x, _ = 1) {
      c.set(x), u = _, E(c, u);
    },
    getClearAlpha: function() {
      return u;
    },
    setClearAlpha: function(x) {
      u = x, E(c, u);
    },
    render: y
  };
}
function cE(r, e, t, n) {
  const i = r.getParameter(r.MAX_VERTEX_ATTRIBS), s = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), l = n.isWebGL2 || s !== null, c = {}, u = x(null);
  let h = u, f = !1;
  function p(G, $, oe, ie, Y) {
    let q = !1;
    if (l) {
      const j = E(ie, oe, $);
      h !== j && (h = j, v(h.object)), q = _(G, ie, oe, Y), q && w(G, ie, oe, Y);
    } else {
      const j = $.wireframe === !0;
      (h.geometry !== ie.id || h.program !== oe.id || h.wireframe !== j) && (h.geometry = ie.id, h.program = oe.id, h.wireframe = j, q = !0);
    }
    Y !== null && t.update(Y, r.ELEMENT_ARRAY_BUFFER), (q || f) && (f = !1, z(G, $, oe, ie), Y !== null && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, t.get(Y).buffer));
  }
  function m() {
    return n.isWebGL2 ? r.createVertexArray() : s.createVertexArrayOES();
  }
  function v(G) {
    return n.isWebGL2 ? r.bindVertexArray(G) : s.bindVertexArrayOES(G);
  }
  function y(G) {
    return n.isWebGL2 ? r.deleteVertexArray(G) : s.deleteVertexArrayOES(G);
  }
  function E(G, $, oe) {
    const ie = oe.wireframe === !0;
    let Y = c[G.id];
    Y === void 0 && (Y = {}, c[G.id] = Y);
    let q = Y[$.id];
    q === void 0 && (q = {}, Y[$.id] = q);
    let j = q[ie];
    return j === void 0 && (j = x(m()), q[ie] = j), j;
  }
  function x(G) {
    const $ = [], oe = [], ie = [];
    for (let Y = 0; Y < i; Y++)
      $[Y] = 0, oe[Y] = 0, ie[Y] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: $,
      enabledAttributes: oe,
      attributeDivisors: ie,
      object: G,
      attributes: {},
      index: null
    };
  }
  function _(G, $, oe, ie) {
    const Y = h.attributes, q = $.attributes;
    let j = 0;
    const k = oe.getAttributes();
    for (const Q in k)
      if (k[Q].location >= 0) {
        const Te = Y[Q];
        let Ae = q[Q];
        if (Ae === void 0 && (Q === "instanceMatrix" && G.instanceMatrix && (Ae = G.instanceMatrix), Q === "instanceColor" && G.instanceColor && (Ae = G.instanceColor)), Te === void 0 || Te.attribute !== Ae || Ae && Te.data !== Ae.data)
          return !0;
        j++;
      }
    return h.attributesNum !== j || h.index !== ie;
  }
  function w(G, $, oe, ie) {
    const Y = {}, q = $.attributes;
    let j = 0;
    const k = oe.getAttributes();
    for (const Q in k)
      if (k[Q].location >= 0) {
        let Te = q[Q];
        Te === void 0 && (Q === "instanceMatrix" && G.instanceMatrix && (Te = G.instanceMatrix), Q === "instanceColor" && G.instanceColor && (Te = G.instanceColor));
        const Ae = {};
        Ae.attribute = Te, Te && Te.data && (Ae.data = Te.data), Y[Q] = Ae, j++;
      }
    h.attributes = Y, h.attributesNum = j, h.index = ie;
  }
  function M() {
    const G = h.newAttributes;
    for (let $ = 0, oe = G.length; $ < oe; $++)
      G[$] = 0;
  }
  function b(G) {
    A(G, 0);
  }
  function A(G, $) {
    const oe = h.newAttributes, ie = h.enabledAttributes, Y = h.attributeDivisors;
    oe[G] = 1, ie[G] === 0 && (r.enableVertexAttribArray(G), ie[G] = 1), Y[G] !== $ && ((n.isWebGL2 ? r : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](G, $), Y[G] = $);
  }
  function C() {
    const G = h.newAttributes, $ = h.enabledAttributes;
    for (let oe = 0, ie = $.length; oe < ie; oe++)
      $[oe] !== G[oe] && (r.disableVertexAttribArray(oe), $[oe] = 0);
  }
  function I(G, $, oe, ie, Y, q, j) {
    j === !0 ? r.vertexAttribIPointer(G, $, oe, Y, q) : r.vertexAttribPointer(G, $, oe, ie, Y, q);
  }
  function z(G, $, oe, ie) {
    if (n.isWebGL2 === !1 && (G.isInstancedMesh || ie.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null)
      return;
    M();
    const Y = ie.attributes, q = oe.getAttributes(), j = $.defaultAttributeValues;
    for (const k in q) {
      const Q = q[k];
      if (Q.location >= 0) {
        let fe = Y[k];
        if (fe === void 0 && (k === "instanceMatrix" && G.instanceMatrix && (fe = G.instanceMatrix), k === "instanceColor" && G.instanceColor && (fe = G.instanceColor)), fe !== void 0) {
          const Te = fe.normalized, Ae = fe.itemSize, ke = t.get(fe);
          if (ke === void 0)
            continue;
          const He = ke.buffer, je = ke.type, yt = ke.bytesPerElement, Ct = n.isWebGL2 === !0 && (je === r.INT || je === r.UNSIGNED_INT || fe.gpuType === vd);
          if (fe.isInterleavedBufferAttribute) {
            const Ve = fe.data, B = Ve.stride, ve = fe.offset;
            if (Ve.isInstancedInterleavedBuffer) {
              for (let he = 0; he < Q.locationSize; he++)
                A(Q.location + he, Ve.meshPerAttribute);
              G.isInstancedMesh !== !0 && ie._maxInstanceCount === void 0 && (ie._maxInstanceCount = Ve.meshPerAttribute * Ve.count);
            } else
              for (let he = 0; he < Q.locationSize; he++)
                b(Q.location + he);
            r.bindBuffer(r.ARRAY_BUFFER, He);
            for (let he = 0; he < Q.locationSize; he++)
              I(
                Q.location + he,
                Ae / Q.locationSize,
                je,
                Te,
                B * yt,
                (ve + Ae / Q.locationSize * he) * yt,
                Ct
              );
          } else {
            if (fe.isInstancedBufferAttribute) {
              for (let Ve = 0; Ve < Q.locationSize; Ve++)
                A(Q.location + Ve, fe.meshPerAttribute);
              G.isInstancedMesh !== !0 && ie._maxInstanceCount === void 0 && (ie._maxInstanceCount = fe.meshPerAttribute * fe.count);
            } else
              for (let Ve = 0; Ve < Q.locationSize; Ve++)
                b(Q.location + Ve);
            r.bindBuffer(r.ARRAY_BUFFER, He);
            for (let Ve = 0; Ve < Q.locationSize; Ve++)
              I(
                Q.location + Ve,
                Ae / Q.locationSize,
                je,
                Te,
                Ae * yt,
                Ae / Q.locationSize * Ve * yt,
                Ct
              );
          }
        } else if (j !== void 0) {
          const Te = j[k];
          if (Te !== void 0)
            switch (Te.length) {
              case 2:
                r.vertexAttrib2fv(Q.location, Te);
                break;
              case 3:
                r.vertexAttrib3fv(Q.location, Te);
                break;
              case 4:
                r.vertexAttrib4fv(Q.location, Te);
                break;
              default:
                r.vertexAttrib1fv(Q.location, Te);
            }
        }
      }
    }
    C();
  }
  function R() {
    te();
    for (const G in c) {
      const $ = c[G];
      for (const oe in $) {
        const ie = $[oe];
        for (const Y in ie)
          y(ie[Y].object), delete ie[Y];
        delete $[oe];
      }
      delete c[G];
    }
  }
  function L(G) {
    if (c[G.id] === void 0)
      return;
    const $ = c[G.id];
    for (const oe in $) {
      const ie = $[oe];
      for (const Y in ie)
        y(ie[Y].object), delete ie[Y];
      delete $[oe];
    }
    delete c[G.id];
  }
  function H(G) {
    for (const $ in c) {
      const oe = c[$];
      if (oe[G.id] === void 0)
        continue;
      const ie = oe[G.id];
      for (const Y in ie)
        y(ie[Y].object), delete ie[Y];
      delete oe[G.id];
    }
  }
  function te() {
    se(), f = !0, h !== u && (h = u, v(h.object));
  }
  function se() {
    u.geometry = null, u.program = null, u.wireframe = !1;
  }
  return {
    setup: p,
    reset: te,
    resetDefaultState: se,
    dispose: R,
    releaseStatesOfGeometry: L,
    releaseStatesOfProgram: H,
    initAttributes: M,
    enableAttribute: b,
    disableUnusedAttributes: C
  };
}
function uE(r, e, t, n) {
  const i = n.isWebGL2;
  let s;
  function l(h) {
    s = h;
  }
  function c(h, f) {
    r.drawArrays(s, h, f), t.update(f, s, 1);
  }
  function u(h, f, p) {
    if (p === 0)
      return;
    let m, v;
    if (i)
      m = r, v = "drawArraysInstanced";
    else if (m = e.get("ANGLE_instanced_arrays"), v = "drawArraysInstancedANGLE", m === null) {
      console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    m[v](s, h, f, p), t.update(f, s, p);
  }
  this.setMode = l, this.render = c, this.renderInstances = u;
}
function hE(r, e, t) {
  let n;
  function i() {
    if (n !== void 0)
      return n;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const I = e.get("EXT_texture_filter_anisotropic");
      n = r.getParameter(I.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      n = 0;
    return n;
  }
  function s(I) {
    if (I === "highp") {
      if (r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.HIGH_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.HIGH_FLOAT).precision > 0)
        return "highp";
      I = "mediump";
    }
    return I === "mediump" && r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.MEDIUM_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  const l = typeof WebGL2RenderingContext < "u" && r.constructor.name === "WebGL2RenderingContext";
  let c = t.precision !== void 0 ? t.precision : "highp";
  const u = s(c);
  u !== c && (console.warn("THREE.WebGLRenderer:", c, "not supported, using", u, "instead."), c = u);
  const h = l || e.has("WEBGL_draw_buffers"), f = t.logarithmicDepthBuffer === !0, p = r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS), m = r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS), v = r.getParameter(r.MAX_TEXTURE_SIZE), y = r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE), E = r.getParameter(r.MAX_VERTEX_ATTRIBS), x = r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS), _ = r.getParameter(r.MAX_VARYING_VECTORS), w = r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS), M = m > 0, b = l || e.has("OES_texture_float"), A = M && b, C = l ? r.getParameter(r.MAX_SAMPLES) : 0;
  return {
    isWebGL2: l,
    drawBuffers: h,
    getMaxAnisotropy: i,
    getMaxPrecision: s,
    precision: c,
    logarithmicDepthBuffer: f,
    maxTextures: p,
    maxVertexTextures: m,
    maxTextureSize: v,
    maxCubemapSize: y,
    maxAttributes: E,
    maxVertexUniforms: x,
    maxVaryings: _,
    maxFragmentUniforms: w,
    vertexTextures: M,
    floatFragmentTextures: b,
    floatVertexTextures: A,
    maxSamples: C
  };
}
function fE(r) {
  const e = this;
  let t = null, n = 0, i = !1, s = !1;
  const l = new tr(), c = new pt(), u = { value: null, needsUpdate: !1 };
  this.uniform = u, this.numPlanes = 0, this.numIntersection = 0, this.init = function(p, m) {
    const v = p.length !== 0 || m || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    n !== 0 || i;
    return i = m, n = p.length, v;
  }, this.beginShadows = function() {
    s = !0, f(null);
  }, this.endShadows = function() {
    s = !1;
  }, this.setGlobalState = function(p, m) {
    t = f(p, m, 0);
  }, this.setState = function(p, m, v) {
    const y = p.clippingPlanes, E = p.clipIntersection, x = p.clipShadows, _ = r.get(p);
    if (!i || y === null || y.length === 0 || s && !x)
      s ? f(null) : h();
    else {
      const w = s ? 0 : n, M = w * 4;
      let b = _.clippingState || null;
      u.value = b, b = f(y, m, M, v);
      for (let A = 0; A !== M; ++A)
        b[A] = t[A];
      _.clippingState = b, this.numIntersection = E ? this.numPlanes : 0, this.numPlanes += w;
    }
  };
  function h() {
    u.value !== t && (u.value = t, u.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
  }
  function f(p, m, v, y) {
    const E = p !== null ? p.length : 0;
    let x = null;
    if (E !== 0) {
      if (x = u.value, y !== !0 || x === null) {
        const _ = v + E * 4, w = m.matrixWorldInverse;
        c.getNormalMatrix(w), (x === null || x.length < _) && (x = new Float32Array(_));
        for (let M = 0, b = v; M !== E; ++M, b += 4)
          l.copy(p[M]).applyMatrix4(w, c), l.normal.toArray(x, b), x[b + 3] = l.constant;
      }
      u.value = x, u.needsUpdate = !0;
    }
    return e.numPlanes = E, e.numIntersection = 0, x;
  }
}
function dE(r) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(l, c) {
    return c === da ? l.mapping = lr : c === pa && (l.mapping = Lr), l;
  }
  function n(l) {
    if (l && l.isTexture && l.isRenderTargetTexture === !1) {
      const c = l.mapping;
      if (c === da || c === pa)
        if (e.has(l)) {
          const u = e.get(l).texture;
          return t(u, l.mapping);
        } else {
          const u = l.image;
          if (u && u.height > 0) {
            const h = new zv(u.height / 2);
            return h.fromEquirectangularTexture(r, l), e.set(l, h), l.addEventListener("dispose", i), t(h.texture, l.mapping);
          } else
            return null;
        }
    }
    return l;
  }
  function i(l) {
    const c = l.target;
    c.removeEventListener("dispose", i);
    const u = e.get(c);
    u !== void 0 && (e.delete(c), u.dispose());
  }
  function s() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: s
  };
}
class or extends za {
  constructor(e = -1, t = 1, n = 1, i = -1, s = 0.1, l = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = i, this.near = s, this.far = l, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  setViewOffset(e, t, n, i, s, l) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = s, this.view.height = l, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2;
    let s = n - e, l = n + e, c = i + t, u = i - t;
    if (this.view !== null && this.view.enabled) {
      const h = (this.right - this.left) / this.view.fullWidth / this.zoom, f = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      s += h * this.view.offsetX, l = s + h * this.view.width, c -= f * this.view.offsetY, u = c - f * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(s, l, c, u, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
const fo = 4, tg = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], os = 20, Zh = /* @__PURE__ */ new or(), ng = /* @__PURE__ */ new Fe();
let Jh = null;
const rs = (1 + Math.sqrt(5)) / 2, eo = 1 / rs, ig = [
  /* @__PURE__ */ new D(1, 1, 1),
  /* @__PURE__ */ new D(-1, 1, 1),
  /* @__PURE__ */ new D(1, 1, -1),
  /* @__PURE__ */ new D(-1, 1, -1),
  /* @__PURE__ */ new D(0, rs, eo),
  /* @__PURE__ */ new D(0, rs, -eo),
  /* @__PURE__ */ new D(eo, 0, rs),
  /* @__PURE__ */ new D(-eo, 0, rs),
  /* @__PURE__ */ new D(rs, eo, 0),
  /* @__PURE__ */ new D(-rs, eo, 0)
];
class ed {
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(e, t = 0, n = 0.1, i = 100) {
    Jh = this._renderer.getRenderTarget(), this._setSize(256);
    const s = this._allocateTargets();
    return s.depthBuffer = !0, this._sceneToCubeUV(e, n, i, s), t > 0 && this._blur(s, 0, 0, t), this._applyPMREM(s), this._cleanup(s), s;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = og(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = sg(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(Jh), e.scissorTest = !1, cc(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === lr || e.mapping === Lr ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), Jh = this._renderer.getRenderTarget();
    const n = t || this._allocateTargets();
    return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
      magFilter: Xt,
      minFilter: Xt,
      generateMipmaps: !1,
      type: ms,
      format: Cn,
      colorSpace: Bi,
      depthBuffer: !1
    }, i = rg(e, t, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = rg(e, t, n);
      const { _lodMax: s } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = pE(s)), this._blurMaterial = mE(s, e, t);
    }
    return i;
  }
  _compileMaterial(e) {
    const t = new yn(this._lodPlanes[0], e);
    this._renderer.compile(t, Zh);
  }
  _sceneToCubeUV(e, t, n, i) {
    const c = new tn(90, 1, t, n), u = [1, -1, 1, 1, 1, 1], h = [1, 1, 1, -1, -1, -1], f = this._renderer, p = f.autoClear, m = f.toneMapping;
    f.getClearColor(ng), f.toneMapping = Oi, f.autoClear = !1;
    const v = new Ur({
      name: "PMREM.Background",
      side: On,
      depthWrite: !1,
      depthTest: !1
    }), y = new yn(new Ss(), v);
    let E = !1;
    const x = e.background;
    x ? x.isColor && (v.color.copy(x), e.background = null, E = !0) : (v.color.copy(ng), E = !0);
    for (let _ = 0; _ < 6; _++) {
      const w = _ % 3;
      w === 0 ? (c.up.set(0, u[_], 0), c.lookAt(h[_], 0, 0)) : w === 1 ? (c.up.set(0, 0, u[_]), c.lookAt(0, h[_], 0)) : (c.up.set(0, u[_], 0), c.lookAt(0, 0, h[_]));
      const M = this._cubeSize;
      cc(i, w * M, _ > 2 ? M : 0, M, M), f.setRenderTarget(i), E && f.render(y, c), f.render(e, c);
    }
    y.geometry.dispose(), y.material.dispose(), f.toneMapping = m, f.autoClear = p, e.background = x;
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer, i = e.mapping === lr || e.mapping === Lr;
    i ? (this._cubemapMaterial === null && (this._cubemapMaterial = og()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = sg());
    const s = i ? this._cubemapMaterial : this._equirectMaterial, l = new yn(this._lodPlanes[0], s), c = s.uniforms;
    c.envMap.value = e;
    const u = this._cubeSize;
    cc(t, 0, 0, 3 * u, 2 * u), n.setRenderTarget(t), n.render(l, Zh);
  }
  _applyPMREM(e) {
    const t = this._renderer, n = t.autoClear;
    t.autoClear = !1;
    for (let i = 1; i < this._lodPlanes.length; i++) {
      const s = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]), l = ig[(i - 1) % ig.length];
      this._blur(e, i - 1, i, s, l);
    }
    t.autoClear = n;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(e, t, n, i, s) {
    const l = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      l,
      t,
      n,
      i,
      "latitudinal",
      s
    ), this._halfBlur(
      l,
      e,
      n,
      n,
      i,
      "longitudinal",
      s
    );
  }
  _halfBlur(e, t, n, i, s, l, c) {
    const u = this._renderer, h = this._blurMaterial;
    l !== "latitudinal" && l !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const f = 3, p = new yn(this._lodPlanes[i], h), m = h.uniforms, v = this._sizeLods[n] - 1, y = isFinite(s) ? Math.PI / (2 * v) : 2 * Math.PI / (2 * os - 1), E = s / y, x = isFinite(s) ? 1 + Math.floor(f * E) : os;
    x > os && console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${x} samples when the maximum is set to ${os}`);
    const _ = [];
    let w = 0;
    for (let I = 0; I < os; ++I) {
      const z = I / E, R = Math.exp(-z * z / 2);
      _.push(R), I === 0 ? w += R : I < x && (w += 2 * R);
    }
    for (let I = 0; I < _.length; I++)
      _[I] = _[I] / w;
    m.envMap.value = e.texture, m.samples.value = x, m.weights.value = _, m.latitudinal.value = l === "latitudinal", c && (m.poleAxis.value = c);
    const { _lodMax: M } = this;
    m.dTheta.value = y, m.mipInt.value = M - n;
    const b = this._sizeLods[i], A = 3 * b * (i > M - fo ? i - M + fo : 0), C = 4 * (this._cubeSize - b);
    cc(t, A, C, 3 * b, 2 * b), u.setRenderTarget(t), u.render(p, Zh);
  }
}
function pE(r) {
  const e = [], t = [], n = [];
  let i = r;
  const s = r - fo + 1 + tg.length;
  for (let l = 0; l < s; l++) {
    const c = Math.pow(2, i);
    t.push(c);
    let u = 1 / c;
    l > r - fo ? u = tg[l - r + fo - 1] : l === 0 && (u = 0), n.push(u);
    const h = 1 / (c - 2), f = -h, p = 1 + h, m = [f, f, p, f, p, p, f, f, p, p, f, p], v = 6, y = 6, E = 3, x = 2, _ = 1, w = new Float32Array(E * y * v), M = new Float32Array(x * y * v), b = new Float32Array(_ * y * v);
    for (let C = 0; C < v; C++) {
      const I = C % 3 * 2 / 3 - 1, z = C > 2 ? 0 : -1, R = [
        I,
        z,
        0,
        I + 2 / 3,
        z,
        0,
        I + 2 / 3,
        z + 1,
        0,
        I,
        z,
        0,
        I + 2 / 3,
        z + 1,
        0,
        I,
        z + 1,
        0
      ];
      w.set(R, E * y * C), M.set(m, x * y * C);
      const L = [C, C, C, C, C, C];
      b.set(L, _ * y * C);
    }
    const A = new _t();
    A.setAttribute("position", new Ot(w, E)), A.setAttribute("uv", new Ot(M, x)), A.setAttribute("faceIndex", new Ot(b, _)), e.push(A), i > fo && i--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function rg(r, e, t) {
  const n = new hi(r, e, t);
  return n.texture.mapping = Mo, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function cc(r, e, t, n, i) {
  r.viewport.set(e, t, n, i), r.scissor.set(e, t, n, i);
}
function mE(r, e, t) {
  const n = new Float32Array(os), i = new D(0, 1, 0);
  return new fi({
    name: "SphericalGaussianBlur",
    defines: {
      n: os,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${r}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: n },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: i }
    },
    vertexShader: Pd(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: sr,
    depthTest: !1,
    depthWrite: !1
  });
}
function sg() {
  return new fi({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: Pd(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: sr,
    depthTest: !1,
    depthWrite: !1
  });
}
function og() {
  return new fi({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: Pd(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: sr,
    depthTest: !1,
    depthWrite: !1
  });
}
function Pd() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function gE(r) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function n(c) {
    if (c && c.isTexture) {
      const u = c.mapping, h = u === da || u === pa, f = u === lr || u === Lr;
      if (h || f)
        if (c.isRenderTargetTexture && c.needsPMREMUpdate === !0) {
          c.needsPMREMUpdate = !1;
          let p = e.get(c);
          return t === null && (t = new ed(r)), p = h ? t.fromEquirectangular(c, p) : t.fromCubemap(c, p), e.set(c, p), p.texture;
        } else {
          if (e.has(c))
            return e.get(c).texture;
          {
            const p = c.image;
            if (h && p && p.height > 0 || f && p && i(p)) {
              t === null && (t = new ed(r));
              const m = h ? t.fromEquirectangular(c) : t.fromCubemap(c);
              return e.set(c, m), c.addEventListener("dispose", s), m.texture;
            } else
              return null;
          }
        }
    }
    return c;
  }
  function i(c) {
    let u = 0;
    const h = 6;
    for (let f = 0; f < h; f++)
      c[f] !== void 0 && u++;
    return u === h;
  }
  function s(c) {
    const u = c.target;
    u.removeEventListener("dispose", s);
    const h = e.get(u);
    h !== void 0 && (e.delete(u), h.dispose());
  }
  function l() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: n,
    dispose: l
  };
}
function vE(r) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0)
      return e[n];
    let i;
    switch (n) {
      case "WEBGL_depth_texture":
        i = r.getExtension("WEBGL_depth_texture") || r.getExtension("MOZ_WEBGL_depth_texture") || r.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        i = r.getExtension("EXT_texture_filter_anisotropic") || r.getExtension("MOZ_EXT_texture_filter_anisotropic") || r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        i = r.getExtension("WEBGL_compressed_texture_s3tc") || r.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        i = r.getExtension("WEBGL_compressed_texture_pvrtc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        i = r.getExtension(n);
    }
    return e[n] = i, i;
  }
  return {
    has: function(n) {
      return t(n) !== null;
    },
    init: function(n) {
      n.isWebGL2 ? t("EXT_color_buffer_float") : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture");
    },
    get: function(n) {
      const i = t(n);
      return i === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), i;
    }
  };
}
function _E(r, e, t, n) {
  const i = {}, s = /* @__PURE__ */ new WeakMap();
  function l(p) {
    const m = p.target;
    m.index !== null && e.remove(m.index);
    for (const y in m.attributes)
      e.remove(m.attributes[y]);
    for (const y in m.morphAttributes) {
      const E = m.morphAttributes[y];
      for (let x = 0, _ = E.length; x < _; x++)
        e.remove(E[x]);
    }
    m.removeEventListener("dispose", l), delete i[m.id];
    const v = s.get(m);
    v && (e.remove(v), s.delete(m)), n.releaseStatesOfGeometry(m), m.isInstancedBufferGeometry === !0 && delete m._maxInstanceCount, t.memory.geometries--;
  }
  function c(p, m) {
    return i[m.id] === !0 || (m.addEventListener("dispose", l), i[m.id] = !0, t.memory.geometries++), m;
  }
  function u(p) {
    const m = p.attributes;
    for (const y in m)
      e.update(m[y], r.ARRAY_BUFFER);
    const v = p.morphAttributes;
    for (const y in v) {
      const E = v[y];
      for (let x = 0, _ = E.length; x < _; x++)
        e.update(E[x], r.ARRAY_BUFFER);
    }
  }
  function h(p) {
    const m = [], v = p.index, y = p.attributes.position;
    let E = 0;
    if (v !== null) {
      const w = v.array;
      E = v.version;
      for (let M = 0, b = w.length; M < b; M += 3) {
        const A = w[M + 0], C = w[M + 1], I = w[M + 2];
        m.push(A, C, C, I, I, A);
      }
    } else if (y !== void 0) {
      const w = y.array;
      E = y.version;
      for (let M = 0, b = w.length / 3 - 1; M < b; M += 3) {
        const A = M + 0, C = M + 1, I = M + 2;
        m.push(A, C, C, I, I, A);
      }
    } else
      return;
    const x = new (Lv(m) ? Cd : Rd)(m, 1);
    x.version = E;
    const _ = s.get(p);
    _ && e.remove(_), s.set(p, x);
  }
  function f(p) {
    const m = s.get(p);
    if (m) {
      const v = p.index;
      v !== null && m.version < v.version && h(p);
    } else
      h(p);
    return s.get(p);
  }
  return {
    get: c,
    update: u,
    getWireframeAttribute: f
  };
}
function yE(r, e, t, n) {
  const i = n.isWebGL2;
  let s;
  function l(m) {
    s = m;
  }
  let c, u;
  function h(m) {
    c = m.type, u = m.bytesPerElement;
  }
  function f(m, v) {
    r.drawElements(s, v, c, m * u), t.update(v, s, 1);
  }
  function p(m, v, y) {
    if (y === 0)
      return;
    let E, x;
    if (i)
      E = r, x = "drawElementsInstanced";
    else if (E = e.get("ANGLE_instanced_arrays"), x = "drawElementsInstancedANGLE", E === null) {
      console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    E[x](s, v, c, m * u, y), t.update(v, s, y);
  }
  this.setMode = l, this.setIndex = h, this.render = f, this.renderInstances = p;
}
function xE(r) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function n(s, l, c) {
    switch (t.calls++, l) {
      case r.TRIANGLES:
        t.triangles += c * (s / 3);
        break;
      case r.LINES:
        t.lines += c * (s / 2);
        break;
      case r.LINE_STRIP:
        t.lines += c * (s - 1);
        break;
      case r.LINE_LOOP:
        t.lines += c * s;
        break;
      case r.POINTS:
        t.points += c * s;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", l);
        break;
    }
  }
  function i() {
    t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: i,
    update: n
  };
}
function SE(r, e) {
  return r[0] - e[0];
}
function ME(r, e) {
  return Math.abs(e[1]) - Math.abs(r[1]);
}
function EE(r, e, t) {
  const n = {}, i = new Float32Array(8), s = /* @__PURE__ */ new WeakMap(), l = new It(), c = [];
  for (let h = 0; h < 8; h++)
    c[h] = [h, 0];
  function u(h, f, p) {
    const m = h.morphTargetInfluences;
    if (e.isWebGL2 === !0) {
      const v = f.morphAttributes.position || f.morphAttributes.normal || f.morphAttributes.color, y = v !== void 0 ? v.length : 0;
      let E = s.get(f);
      if (E === void 0 || E.count !== y) {
        let G = function() {
          te.dispose(), s.delete(f), f.removeEventListener("dispose", G);
        };
        E !== void 0 && E.texture.dispose();
        const w = f.morphAttributes.position !== void 0, M = f.morphAttributes.normal !== void 0, b = f.morphAttributes.color !== void 0, A = f.morphAttributes.position || [], C = f.morphAttributes.normal || [], I = f.morphAttributes.color || [];
        let z = 0;
        w === !0 && (z = 1), M === !0 && (z = 2), b === !0 && (z = 3);
        let R = f.attributes.position.count * z, L = 1;
        R > e.maxTextureSize && (L = Math.ceil(R / e.maxTextureSize), R = e.maxTextureSize);
        const H = new Float32Array(R * L * 4 * y), te = new tu(H, R, L, y);
        te.type = ei, te.needsUpdate = !0;
        const se = z * 4;
        for (let $ = 0; $ < y; $++) {
          const oe = A[$], ie = C[$], Y = I[$], q = R * L * 4 * $;
          for (let j = 0; j < oe.count; j++) {
            const k = j * se;
            w === !0 && (l.fromBufferAttribute(oe, j), H[q + k + 0] = l.x, H[q + k + 1] = l.y, H[q + k + 2] = l.z, H[q + k + 3] = 0), M === !0 && (l.fromBufferAttribute(ie, j), H[q + k + 4] = l.x, H[q + k + 5] = l.y, H[q + k + 6] = l.z, H[q + k + 7] = 0), b === !0 && (l.fromBufferAttribute(Y, j), H[q + k + 8] = l.x, H[q + k + 9] = l.y, H[q + k + 10] = l.z, H[q + k + 11] = Y.itemSize === 4 ? l.w : 1);
          }
        }
        E = {
          count: y,
          texture: te,
          size: new ue(R, L)
        }, s.set(f, E), f.addEventListener("dispose", G);
      }
      let x = 0;
      for (let w = 0; w < m.length; w++)
        x += m[w];
      const _ = f.morphTargetsRelative ? 1 : 1 - x;
      p.getUniforms().setValue(r, "morphTargetBaseInfluence", _), p.getUniforms().setValue(r, "morphTargetInfluences", m), p.getUniforms().setValue(r, "morphTargetsTexture", E.texture, t), p.getUniforms().setValue(r, "morphTargetsTextureSize", E.size);
    } else {
      const v = m === void 0 ? 0 : m.length;
      let y = n[f.id];
      if (y === void 0 || y.length !== v) {
        y = [];
        for (let M = 0; M < v; M++)
          y[M] = [M, 0];
        n[f.id] = y;
      }
      for (let M = 0; M < v; M++) {
        const b = y[M];
        b[0] = M, b[1] = m[M];
      }
      y.sort(ME);
      for (let M = 0; M < 8; M++)
        M < v && y[M][1] ? (c[M][0] = y[M][0], c[M][1] = y[M][1]) : (c[M][0] = Number.MAX_SAFE_INTEGER, c[M][1] = 0);
      c.sort(SE);
      const E = f.morphAttributes.position, x = f.morphAttributes.normal;
      let _ = 0;
      for (let M = 0; M < 8; M++) {
        const b = c[M], A = b[0], C = b[1];
        A !== Number.MAX_SAFE_INTEGER && C ? (E && f.getAttribute("morphTarget" + M) !== E[A] && f.setAttribute("morphTarget" + M, E[A]), x && f.getAttribute("morphNormal" + M) !== x[A] && f.setAttribute("morphNormal" + M, x[A]), i[M] = C, _ += C) : (E && f.hasAttribute("morphTarget" + M) === !0 && f.deleteAttribute("morphTarget" + M), x && f.hasAttribute("morphNormal" + M) === !0 && f.deleteAttribute("morphNormal" + M), i[M] = 0);
      }
      const w = f.morphTargetsRelative ? 1 : 1 - _;
      p.getUniforms().setValue(r, "morphTargetBaseInfluence", w), p.getUniforms().setValue(r, "morphTargetInfluences", i);
    }
  }
  return {
    update: u
  };
}
function wE(r, e, t, n) {
  let i = /* @__PURE__ */ new WeakMap();
  function s(u) {
    const h = n.render.frame, f = u.geometry, p = e.get(u, f);
    if (i.get(p) !== h && (e.update(p), i.set(p, h)), u.isInstancedMesh && (u.hasEventListener("dispose", c) === !1 && u.addEventListener("dispose", c), i.get(u) !== h && (t.update(u.instanceMatrix, r.ARRAY_BUFFER), u.instanceColor !== null && t.update(u.instanceColor, r.ARRAY_BUFFER), i.set(u, h))), u.isSkinnedMesh) {
      const m = u.skeleton;
      i.get(m) !== h && (m.update(), i.set(m, h));
    }
    return p;
  }
  function l() {
    i = /* @__PURE__ */ new WeakMap();
  }
  function c(u) {
    const h = u.target;
    h.removeEventListener("dispose", c), t.remove(h.instanceMatrix), h.instanceColor !== null && t.remove(h.instanceColor);
  }
  return {
    update: s,
    dispose: l
  };
}
const kv = /* @__PURE__ */ new nn(), Hv = /* @__PURE__ */ new tu(), Vv = /* @__PURE__ */ new Ad(), Gv = /* @__PURE__ */ new Ba(), ag = [], lg = [], cg = new Float32Array(16), ug = new Float32Array(9), hg = new Float32Array(4);
function Eo(r, e, t) {
  const n = r[0];
  if (n <= 0 || n > 0)
    return r;
  const i = e * t;
  let s = ag[i];
  if (s === void 0 && (s = new Float32Array(i), ag[i] = s), e !== 0) {
    n.toArray(s, 0);
    for (let l = 1, c = 0; l !== e; ++l)
      c += t, r[l].toArray(s, c);
  }
  return s;
}
function fn(r, e) {
  if (r.length !== e.length)
    return !1;
  for (let t = 0, n = r.length; t < n; t++)
    if (r[t] !== e[t])
      return !1;
  return !0;
}
function dn(r, e) {
  for (let t = 0, n = e.length; t < n; t++)
    r[t] = e[t];
}
function iu(r, e) {
  let t = lg[e];
  t === void 0 && (t = new Int32Array(e), lg[e] = t);
  for (let n = 0; n !== e; ++n)
    t[n] = r.allocateTextureUnit();
  return t;
}
function TE(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1f(this.addr, e), t[0] = e);
}
function bE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (fn(t, e))
      return;
    r.uniform2fv(this.addr, e), dn(t, e);
  }
}
function AE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (r.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (fn(t, e))
      return;
    r.uniform3fv(this.addr, e), dn(t, e);
  }
}
function RE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (fn(t, e))
      return;
    r.uniform4fv(this.addr, e), dn(t, e);
  }
}
function CE(r, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (fn(t, e))
      return;
    r.uniformMatrix2fv(this.addr, !1, e), dn(t, e);
  } else {
    if (fn(t, n))
      return;
    hg.set(n), r.uniformMatrix2fv(this.addr, !1, hg), dn(t, n);
  }
}
function PE(r, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (fn(t, e))
      return;
    r.uniformMatrix3fv(this.addr, !1, e), dn(t, e);
  } else {
    if (fn(t, n))
      return;
    ug.set(n), r.uniformMatrix3fv(this.addr, !1, ug), dn(t, n);
  }
}
function LE(r, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (fn(t, e))
      return;
    r.uniformMatrix4fv(this.addr, !1, e), dn(t, e);
  } else {
    if (fn(t, n))
      return;
    cg.set(n), r.uniformMatrix4fv(this.addr, !1, cg), dn(t, n);
  }
}
function IE(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1i(this.addr, e), t[0] = e);
}
function DE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (fn(t, e))
      return;
    r.uniform2iv(this.addr, e), dn(t, e);
  }
}
function NE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (fn(t, e))
      return;
    r.uniform3iv(this.addr, e), dn(t, e);
  }
}
function UE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (fn(t, e))
      return;
    r.uniform4iv(this.addr, e), dn(t, e);
  }
}
function OE(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1ui(this.addr, e), t[0] = e);
}
function FE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (fn(t, e))
      return;
    r.uniform2uiv(this.addr, e), dn(t, e);
  }
}
function zE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (fn(t, e))
      return;
    r.uniform3uiv(this.addr, e), dn(t, e);
  }
}
function BE(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (fn(t, e))
      return;
    r.uniform4uiv(this.addr, e), dn(t, e);
  }
}
function kE(r, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), n[0] = i), t.setTexture2D(e || kv, i);
}
function HE(r, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), n[0] = i), t.setTexture3D(e || Vv, i);
}
function VE(r, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), n[0] = i), t.setTextureCube(e || Gv, i);
}
function GE(r, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), n[0] = i), t.setTexture2DArray(e || Hv, i);
}
function WE(r) {
  switch (r) {
    case 5126:
      return TE;
    case 35664:
      return bE;
    case 35665:
      return AE;
    case 35666:
      return RE;
    case 35674:
      return CE;
    case 35675:
      return PE;
    case 35676:
      return LE;
    case 5124:
    case 35670:
      return IE;
    case 35667:
    case 35671:
      return DE;
    case 35668:
    case 35672:
      return NE;
    case 35669:
    case 35673:
      return UE;
    case 5125:
      return OE;
    case 36294:
      return FE;
    case 36295:
      return zE;
    case 36296:
      return BE;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return kE;
    case 35679:
    case 36299:
    case 36307:
      return HE;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return VE;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return GE;
  }
}
function XE(r, e) {
  r.uniform1fv(this.addr, e);
}
function YE(r, e) {
  const t = Eo(e, this.size, 2);
  r.uniform2fv(this.addr, t);
}
function qE(r, e) {
  const t = Eo(e, this.size, 3);
  r.uniform3fv(this.addr, t);
}
function jE(r, e) {
  const t = Eo(e, this.size, 4);
  r.uniform4fv(this.addr, t);
}
function ZE(r, e) {
  const t = Eo(e, this.size, 4);
  r.uniformMatrix2fv(this.addr, !1, t);
}
function JE(r, e) {
  const t = Eo(e, this.size, 9);
  r.uniformMatrix3fv(this.addr, !1, t);
}
function KE(r, e) {
  const t = Eo(e, this.size, 16);
  r.uniformMatrix4fv(this.addr, !1, t);
}
function QE(r, e) {
  r.uniform1iv(this.addr, e);
}
function $E(r, e) {
  r.uniform2iv(this.addr, e);
}
function ew(r, e) {
  r.uniform3iv(this.addr, e);
}
function tw(r, e) {
  r.uniform4iv(this.addr, e);
}
function nw(r, e) {
  r.uniform1uiv(this.addr, e);
}
function iw(r, e) {
  r.uniform2uiv(this.addr, e);
}
function rw(r, e) {
  r.uniform3uiv(this.addr, e);
}
function sw(r, e) {
  r.uniform4uiv(this.addr, e);
}
function ow(r, e, t) {
  const n = this.cache, i = e.length, s = iu(t, i);
  fn(n, s) || (r.uniform1iv(this.addr, s), dn(n, s));
  for (let l = 0; l !== i; ++l)
    t.setTexture2D(e[l] || kv, s[l]);
}
function aw(r, e, t) {
  const n = this.cache, i = e.length, s = iu(t, i);
  fn(n, s) || (r.uniform1iv(this.addr, s), dn(n, s));
  for (let l = 0; l !== i; ++l)
    t.setTexture3D(e[l] || Vv, s[l]);
}
function lw(r, e, t) {
  const n = this.cache, i = e.length, s = iu(t, i);
  fn(n, s) || (r.uniform1iv(this.addr, s), dn(n, s));
  for (let l = 0; l !== i; ++l)
    t.setTextureCube(e[l] || Gv, s[l]);
}
function cw(r, e, t) {
  const n = this.cache, i = e.length, s = iu(t, i);
  fn(n, s) || (r.uniform1iv(this.addr, s), dn(n, s));
  for (let l = 0; l !== i; ++l)
    t.setTexture2DArray(e[l] || Hv, s[l]);
}
function uw(r) {
  switch (r) {
    case 5126:
      return XE;
    case 35664:
      return YE;
    case 35665:
      return qE;
    case 35666:
      return jE;
    case 35674:
      return ZE;
    case 35675:
      return JE;
    case 35676:
      return KE;
    case 5124:
    case 35670:
      return QE;
    case 35667:
    case 35671:
      return $E;
    case 35668:
    case 35672:
      return ew;
    case 35669:
    case 35673:
      return tw;
    case 5125:
      return nw;
    case 36294:
      return iw;
    case 36295:
      return rw;
    case 36296:
      return sw;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return ow;
    case 35679:
    case 36299:
    case 36307:
      return aw;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return lw;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return cw;
  }
}
class hw {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.setValue = WE(t.type);
  }
}
class fw {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.size = t.size, this.setValue = uw(t.type);
  }
}
class dw {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, n) {
    const i = this.seq;
    for (let s = 0, l = i.length; s !== l; ++s) {
      const c = i[s];
      c.setValue(e, t[c.id], n);
    }
  }
}
const Kh = /(\w+)(\])?(\[|\.)?/g;
function fg(r, e) {
  r.seq.push(e), r.map[e.id] = e;
}
function pw(r, e, t) {
  const n = r.name, i = n.length;
  for (Kh.lastIndex = 0; ; ) {
    const s = Kh.exec(n), l = Kh.lastIndex;
    let c = s[1];
    const u = s[2] === "]", h = s[3];
    if (u && (c = c | 0), h === void 0 || h === "[" && l + 2 === i) {
      fg(t, h === void 0 ? new hw(c, r, e) : new fw(c, r, e));
      break;
    } else {
      let p = t.map[c];
      p === void 0 && (p = new dw(c), fg(t, p)), t = p;
    }
  }
}
class Hc {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let i = 0; i < n; ++i) {
      const s = e.getActiveUniform(t, i), l = e.getUniformLocation(t, s.name);
      pw(s, l, this);
    }
  }
  setValue(e, t, n, i) {
    const s = this.map[t];
    s !== void 0 && s.setValue(e, n, i);
  }
  setOptional(e, t, n) {
    const i = t[n];
    i !== void 0 && this.setValue(e, n, i);
  }
  static upload(e, t, n, i) {
    for (let s = 0, l = t.length; s !== l; ++s) {
      const c = t[s], u = n[c.id];
      u.needsUpdate !== !1 && c.setValue(e, u.value, i);
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let i = 0, s = e.length; i !== s; ++i) {
      const l = e[i];
      l.id in t && n.push(l);
    }
    return n;
  }
}
function dg(r, e, t) {
  const n = r.createShader(e);
  return r.shaderSource(n, t), r.compileShader(n), n;
}
let mw = 0;
function gw(r, e) {
  const t = r.split(`
`), n = [], i = Math.max(e - 6, 0), s = Math.min(e + 6, t.length);
  for (let l = i; l < s; l++) {
    const c = l + 1;
    n.push(`${c === e ? ">" : " "} ${c}: ${t[l]}`);
  }
  return n.join(`
`);
}
function vw(r) {
  const e = Lt.getPrimaries(Lt.workingColorSpace), t = Lt.getPrimaries(r);
  let n;
  switch (e === t ? n = "" : e === Ma && t === Sa ? n = "LinearDisplayP3ToLinearSRGB" : e === Sa && t === Ma && (n = "LinearSRGBToLinearDisplayP3"), r) {
    case Bi:
    case Oa:
      return [n, "LinearTransferOETF"];
    case hn:
    case eu:
      return [n, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space:", r), [n, "LinearTransferOETF"];
  }
}
function pg(r, e, t) {
  const n = r.getShaderParameter(e, r.COMPILE_STATUS), i = r.getShaderInfoLog(e).trim();
  if (n && i === "")
    return "";
  const s = /ERROR: 0:(\d+)/.exec(i);
  if (s) {
    const l = parseInt(s[1]);
    return t.toUpperCase() + `

` + i + `

` + gw(r.getShaderSource(e), l);
  } else
    return i;
}
function _w(r, e) {
  const t = vw(e);
  return `vec4 ${r}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`;
}
function yw(r, e) {
  let t;
  switch (e) {
    case tv:
      t = "Linear";
      break;
    case nv:
      t = "Reinhard";
      break;
    case iv:
      t = "OptimizedCineon";
      break;
    case md:
      t = "ACESFilmic";
      break;
    case rv:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + r + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function xw(r) {
  return [
    r.extensionDerivatives || r.envMapCubeUVHeight || r.bumpMap || r.normalMapTangentSpace || r.clearcoatNormalMap || r.flatShading || r.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
    (r.extensionFragDepth || r.logarithmicDepthBuffer) && r.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
    r.extensionDrawBuffers && r.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
    (r.extensionShaderTextureLOD || r.envMap || r.transmission) && r.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
  ].filter(oa).join(`
`);
}
function Sw(r) {
  const e = [];
  for (const t in r) {
    const n = r[t];
    n !== !1 && e.push("#define " + t + " " + n);
  }
  return e.join(`
`);
}
function Mw(r, e) {
  const t = {}, n = r.getProgramParameter(e, r.ACTIVE_ATTRIBUTES);
  for (let i = 0; i < n; i++) {
    const s = r.getActiveAttrib(e, i), l = s.name;
    let c = 1;
    s.type === r.FLOAT_MAT2 && (c = 2), s.type === r.FLOAT_MAT3 && (c = 3), s.type === r.FLOAT_MAT4 && (c = 4), t[l] = {
      type: s.type,
      location: r.getAttribLocation(e, l),
      locationSize: c
    };
  }
  return t;
}
function oa(r) {
  return r !== "";
}
function mg(r, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return r.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function gg(r, e) {
  return r.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const Ew = /^[ \t]*#include +<([\w\d./]+)>/gm;
function td(r) {
  return r.replace(Ew, Tw);
}
const ww = /* @__PURE__ */ new Map([
  ["encodings_fragment", "colorspace_fragment"],
  // @deprecated, r154
  ["encodings_pars_fragment", "colorspace_pars_fragment"],
  // @deprecated, r154
  ["output_fragment", "opaque_fragment"]
  // @deprecated, r154
]);
function Tw(r, e) {
  let t = ht[e];
  if (t === void 0) {
    const n = ww.get(e);
    if (n !== void 0)
      t = ht[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, n);
    else
      throw new Error("Can not resolve #include <" + e + ">");
  }
  return td(t);
}
const bw = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function vg(r) {
  return r.replace(bw, Aw);
}
function Aw(r, e, t, n) {
  let i = "";
  for (let s = parseInt(e); s < parseInt(t); s++)
    i += n.replace(/\[\s*i\s*\]/g, "[ " + s + " ]").replace(/UNROLLED_LOOP_INDEX/g, s);
  return i;
}
function _g(r) {
  let e = "precision " + r.precision + ` float;
precision ` + r.precision + " int;";
  return r.precision === "highp" ? e += `
#define HIGH_PRECISION` : r.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : r.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function Rw(r) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return r.shadowMapType === Jc ? e = "SHADOWMAP_TYPE_PCF" : r.shadowMapType === aa ? e = "SHADOWMAP_TYPE_PCF_SOFT" : r.shadowMapType === yi && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function Cw(r) {
  let e = "ENVMAP_TYPE_CUBE";
  if (r.envMap)
    switch (r.envMapMode) {
      case lr:
      case Lr:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case Mo:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function Pw(r) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (r.envMap)
    switch (r.envMapMode) {
      case Lr:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function Lw(r) {
  let e = "ENVMAP_BLENDING_NONE";
  if (r.envMap)
    switch (r.combine) {
      case Ua:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case $0:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case ev:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function Iw(r) {
  const e = r.envMapCubeUVHeight;
  if (e === null)
    return null;
  const t = Math.log2(e) - 2, n = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)), texelHeight: n, maxMip: t };
}
function Dw(r, e, t, n) {
  const i = r.getContext(), s = t.defines;
  let l = t.vertexShader, c = t.fragmentShader;
  const u = Rw(t), h = Cw(t), f = Pw(t), p = Lw(t), m = Iw(t), v = t.isWebGL2 ? "" : xw(t), y = Sw(s), E = i.createProgram();
  let x, _, w = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (x = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    y
  ].filter(oa).join(`
`), x.length > 0 && (x += `
`), _ = [
    v,
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    y
  ].filter(oa).join(`
`), _.length > 0 && (_ += `
`)) : (x = [
    _g(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    y,
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + f : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors && t.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + u : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
    "	attribute vec3 morphTarget0;",
    "	attribute vec3 morphTarget1;",
    "	attribute vec3 morphTarget2;",
    "	attribute vec3 morphTarget3;",
    "	#ifdef USE_MORPHNORMALS",
    "		attribute vec3 morphNormal0;",
    "		attribute vec3 morphNormal1;",
    "		attribute vec3 morphNormal2;",
    "		attribute vec3 morphNormal3;",
    "	#else",
    "		attribute vec3 morphTarget4;",
    "		attribute vec3 morphTarget5;",
    "		attribute vec3 morphTarget6;",
    "		attribute vec3 morphTarget7;",
    "	#endif",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(oa).join(`
`), _ = [
    v,
    _g(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    y,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + h : "",
    t.envMap ? "#define " + f : "",
    t.envMap ? "#define " + p : "",
    m ? "#define CUBEUV_TEXEL_WIDTH " + m.texelWidth : "",
    m ? "#define CUBEUV_TEXEL_HEIGHT " + m.texelHeight : "",
    m ? "#define CUBEUV_MAX_MIP " + m.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + u : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== Oi ? "#define TONE_MAPPING" : "",
    t.toneMapping !== Oi ? ht.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== Oi ? yw("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    ht.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    _w("linearToOutputTexel", t.outputColorSpace),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(oa).join(`
`)), l = td(l), l = mg(l, t), l = gg(l, t), c = td(c), c = mg(c, t), c = gg(c, t), l = vg(l), c = vg(c), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (w = `#version 300 es
`, x = [
    "precision mediump sampler2DArray;",
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + x, _ = [
    "#define varying in",
    t.glslVersion === Qf ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === Qf ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + _);
  const M = w + x + l, b = w + _ + c, A = dg(i, i.VERTEX_SHADER, M), C = dg(i, i.FRAGMENT_SHADER, b);
  if (i.attachShader(E, A), i.attachShader(E, C), t.index0AttributeName !== void 0 ? i.bindAttribLocation(E, 0, t.index0AttributeName) : t.morphTargets === !0 && i.bindAttribLocation(E, 0, "position"), i.linkProgram(E), r.debug.checkShaderErrors) {
    const R = i.getProgramInfoLog(E).trim(), L = i.getShaderInfoLog(A).trim(), H = i.getShaderInfoLog(C).trim();
    let te = !0, se = !0;
    if (i.getProgramParameter(E, i.LINK_STATUS) === !1)
      if (te = !1, typeof r.debug.onShaderError == "function")
        r.debug.onShaderError(i, E, A, C);
      else {
        const G = pg(i, A, "vertex"), $ = pg(i, C, "fragment");
        console.error(
          "THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(E, i.VALIDATE_STATUS) + `

Program Info Log: ` + R + `
` + G + `
` + $
        );
      }
    else
      R !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", R) : (L === "" || H === "") && (se = !1);
    se && (this.diagnostics = {
      runnable: te,
      programLog: R,
      vertexShader: {
        log: L,
        prefix: x
      },
      fragmentShader: {
        log: H,
        prefix: _
      }
    });
  }
  i.deleteShader(A), i.deleteShader(C);
  let I;
  this.getUniforms = function() {
    return I === void 0 && (I = new Hc(i, E)), I;
  };
  let z;
  return this.getAttributes = function() {
    return z === void 0 && (z = Mw(i, E)), z;
  }, this.destroy = function() {
    n.releaseStatesOfProgram(this), i.deleteProgram(E), this.program = void 0;
  }, this.type = t.shaderType, this.name = t.shaderName, this.id = mw++, this.cacheKey = e, this.usedTimes = 1, this.program = E, this.vertexShader = A, this.fragmentShader = C, this;
}
let Nw = 0;
class Uw {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, n = e.fragmentShader, i = this._getShaderStage(t), s = this._getShaderStage(n), l = this._getShaderCacheForMaterial(e);
    return l.has(i) === !1 && (l.add(i), i.usedTimes++), l.has(s) === !1 && (l.add(s), s.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t)
      n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    return n === void 0 && (n = /* @__PURE__ */ new Set(), t.set(e, n)), n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    return n === void 0 && (n = new Ow(e), t.set(e, n)), n;
  }
}
class Ow {
  constructor(e) {
    this.id = Nw++, this.code = e, this.usedTimes = 0;
  }
}
function Fw(r, e, t, n, i, s, l) {
  const c = new fs(), u = new Uw(), h = [], f = i.isWebGL2, p = i.logarithmicDepthBuffer, m = i.vertexTextures;
  let v = i.precision;
  const y = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function E(R) {
    return R === 0 ? "uv" : `uv${R}`;
  }
  function x(R, L, H, te, se) {
    const G = te.fog, $ = se.geometry, oe = R.isMeshStandardMaterial ? te.environment : null, ie = (R.isMeshStandardMaterial ? t : e).get(R.envMap || oe), Y = ie && ie.mapping === Mo ? ie.image.height : null, q = y[R.type];
    R.precision !== null && (v = i.getMaxPrecision(R.precision), v !== R.precision && console.warn("THREE.WebGLProgram.getParameters:", R.precision, "not supported, using", v, "instead."));
    const j = $.morphAttributes.position || $.morphAttributes.normal || $.morphAttributes.color, k = j !== void 0 ? j.length : 0;
    let Q = 0;
    $.morphAttributes.position !== void 0 && (Q = 1), $.morphAttributes.normal !== void 0 && (Q = 2), $.morphAttributes.color !== void 0 && (Q = 3);
    let fe, Te, Ae, ke;
    if (q) {
      const Mt = Mi[q];
      fe = Mt.vertexShader, Te = Mt.fragmentShader;
    } else
      fe = R.vertexShader, Te = R.fragmentShader, u.update(R), Ae = u.getVertexShaderID(R), ke = u.getFragmentShaderID(R);
    const He = r.getRenderTarget(), je = se.isInstancedMesh === !0, yt = !!R.map, Ct = !!R.matcap, Ve = !!ie, B = !!R.aoMap, ve = !!R.lightMap, he = !!R.bumpMap, Ee = !!R.normalMap, de = !!R.displacementMap, Xe = !!R.emissiveMap, Ne = !!R.metalnessMap, Oe = !!R.roughnessMap, $e = R.anisotropy > 0, mt = R.clearcoat > 0, Dt = R.iridescence > 0, O = R.sheen > 0, P = R.transmission > 0, ee = $e && !!R.anisotropyMap, Se = mt && !!R.clearcoatMap, ge = mt && !!R.clearcoatNormalMap, xe = mt && !!R.clearcoatRoughnessMap, Ge = Dt && !!R.iridescenceMap, be = Dt && !!R.iridescenceThicknessMap, Pe = O && !!R.sheenColorMap, tt = O && !!R.sheenRoughnessMap, xt = !!R.specularMap, Me = !!R.specularColorMap, St = !!R.specularIntensityMap, V = P && !!R.transmissionMap, ae = P && !!R.thicknessMap, _e = !!R.gradientMap, F = !!R.alphaMap, me = R.alphaTest > 0, ye = !!R.alphaHash, Ce = !!R.extensions, Le = !!$.attributes.uv1, pe = !!$.attributes.uv2, Ue = !!$.attributes.uv3;
    let Ze = Oi;
    return R.toneMapped && (He === null || He.isXRRenderTarget === !0) && (Ze = r.toneMapping), {
      isWebGL2: f,
      shaderID: q,
      shaderType: R.type,
      shaderName: R.name,
      vertexShader: fe,
      fragmentShader: Te,
      defines: R.defines,
      customVertexShaderID: Ae,
      customFragmentShaderID: ke,
      isRawShaderMaterial: R.isRawShaderMaterial === !0,
      glslVersion: R.glslVersion,
      precision: v,
      instancing: je,
      instancingColor: je && se.instanceColor !== null,
      supportsVertexTextures: m,
      outputColorSpace: He === null ? r.outputColorSpace : He.isXRRenderTarget === !0 ? He.texture.colorSpace : Bi,
      map: yt,
      matcap: Ct,
      envMap: Ve,
      envMapMode: Ve && ie.mapping,
      envMapCubeUVHeight: Y,
      aoMap: B,
      lightMap: ve,
      bumpMap: he,
      normalMap: Ee,
      displacementMap: m && de,
      emissiveMap: Xe,
      normalMapObjectSpace: Ee && R.normalMapType === yv,
      normalMapTangentSpace: Ee && R.normalMapType === Nr,
      metalnessMap: Ne,
      roughnessMap: Oe,
      anisotropy: $e,
      anisotropyMap: ee,
      clearcoat: mt,
      clearcoatMap: Se,
      clearcoatNormalMap: ge,
      clearcoatRoughnessMap: xe,
      iridescence: Dt,
      iridescenceMap: Ge,
      iridescenceThicknessMap: be,
      sheen: O,
      sheenColorMap: Pe,
      sheenRoughnessMap: tt,
      specularMap: xt,
      specularColorMap: Me,
      specularIntensityMap: St,
      transmission: P,
      transmissionMap: V,
      thicknessMap: ae,
      gradientMap: _e,
      opaque: R.transparent === !1 && R.blending === Ar,
      alphaMap: F,
      alphaTest: me,
      alphaHash: ye,
      combine: R.combine,
      //
      mapUv: yt && E(R.map.channel),
      aoMapUv: B && E(R.aoMap.channel),
      lightMapUv: ve && E(R.lightMap.channel),
      bumpMapUv: he && E(R.bumpMap.channel),
      normalMapUv: Ee && E(R.normalMap.channel),
      displacementMapUv: de && E(R.displacementMap.channel),
      emissiveMapUv: Xe && E(R.emissiveMap.channel),
      metalnessMapUv: Ne && E(R.metalnessMap.channel),
      roughnessMapUv: Oe && E(R.roughnessMap.channel),
      anisotropyMapUv: ee && E(R.anisotropyMap.channel),
      clearcoatMapUv: Se && E(R.clearcoatMap.channel),
      clearcoatNormalMapUv: ge && E(R.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: xe && E(R.clearcoatRoughnessMap.channel),
      iridescenceMapUv: Ge && E(R.iridescenceMap.channel),
      iridescenceThicknessMapUv: be && E(R.iridescenceThicknessMap.channel),
      sheenColorMapUv: Pe && E(R.sheenColorMap.channel),
      sheenRoughnessMapUv: tt && E(R.sheenRoughnessMap.channel),
      specularMapUv: xt && E(R.specularMap.channel),
      specularColorMapUv: Me && E(R.specularColorMap.channel),
      specularIntensityMapUv: St && E(R.specularIntensityMap.channel),
      transmissionMapUv: V && E(R.transmissionMap.channel),
      thicknessMapUv: ae && E(R.thicknessMap.channel),
      alphaMapUv: F && E(R.alphaMap.channel),
      //
      vertexTangents: !!$.attributes.tangent && (Ee || $e),
      vertexColors: R.vertexColors,
      vertexAlphas: R.vertexColors === !0 && !!$.attributes.color && $.attributes.color.itemSize === 4,
      vertexUv1s: Le,
      vertexUv2s: pe,
      vertexUv3s: Ue,
      pointsUvs: se.isPoints === !0 && !!$.attributes.uv && (yt || F),
      fog: !!G,
      useFog: R.fog === !0,
      fogExp2: G && G.isFogExp2,
      flatShading: R.flatShading === !0,
      sizeAttenuation: R.sizeAttenuation === !0,
      logarithmicDepthBuffer: p,
      skinning: se.isSkinnedMesh === !0,
      morphTargets: $.morphAttributes.position !== void 0,
      morphNormals: $.morphAttributes.normal !== void 0,
      morphColors: $.morphAttributes.color !== void 0,
      morphTargetsCount: k,
      morphTextureStride: Q,
      numDirLights: L.directional.length,
      numPointLights: L.point.length,
      numSpotLights: L.spot.length,
      numSpotLightMaps: L.spotLightMap.length,
      numRectAreaLights: L.rectArea.length,
      numHemiLights: L.hemi.length,
      numDirLightShadows: L.directionalShadowMap.length,
      numPointLightShadows: L.pointShadowMap.length,
      numSpotLightShadows: L.spotShadowMap.length,
      numSpotLightShadowsWithMaps: L.numSpotLightShadowsWithMaps,
      numLightProbes: L.numLightProbes,
      numClippingPlanes: l.numPlanes,
      numClipIntersection: l.numIntersection,
      dithering: R.dithering,
      shadowMapEnabled: r.shadowMap.enabled && H.length > 0,
      shadowMapType: r.shadowMap.type,
      toneMapping: Ze,
      useLegacyLights: r._useLegacyLights,
      decodeVideoTexture: yt && R.map.isVideoTexture === !0 && Lt.getTransfer(R.map.colorSpace) === zt,
      premultipliedAlpha: R.premultipliedAlpha,
      doubleSided: R.side === Ni,
      flipSided: R.side === On,
      useDepthPacking: R.depthPacking >= 0,
      depthPacking: R.depthPacking || 0,
      index0AttributeName: R.index0AttributeName,
      extensionDerivatives: Ce && R.extensions.derivatives === !0,
      extensionFragDepth: Ce && R.extensions.fragDepth === !0,
      extensionDrawBuffers: Ce && R.extensions.drawBuffers === !0,
      extensionShaderTextureLOD: Ce && R.extensions.shaderTextureLOD === !0,
      rendererExtensionFragDepth: f || n.has("EXT_frag_depth"),
      rendererExtensionDrawBuffers: f || n.has("WEBGL_draw_buffers"),
      rendererExtensionShaderTextureLod: f || n.has("EXT_shader_texture_lod"),
      customProgramCacheKey: R.customProgramCacheKey()
    };
  }
  function _(R) {
    const L = [];
    if (R.shaderID ? L.push(R.shaderID) : (L.push(R.customVertexShaderID), L.push(R.customFragmentShaderID)), R.defines !== void 0)
      for (const H in R.defines)
        L.push(H), L.push(R.defines[H]);
    return R.isRawShaderMaterial === !1 && (w(L, R), M(L, R), L.push(r.outputColorSpace)), L.push(R.customProgramCacheKey), L.join();
  }
  function w(R, L) {
    R.push(L.precision), R.push(L.outputColorSpace), R.push(L.envMapMode), R.push(L.envMapCubeUVHeight), R.push(L.mapUv), R.push(L.alphaMapUv), R.push(L.lightMapUv), R.push(L.aoMapUv), R.push(L.bumpMapUv), R.push(L.normalMapUv), R.push(L.displacementMapUv), R.push(L.emissiveMapUv), R.push(L.metalnessMapUv), R.push(L.roughnessMapUv), R.push(L.anisotropyMapUv), R.push(L.clearcoatMapUv), R.push(L.clearcoatNormalMapUv), R.push(L.clearcoatRoughnessMapUv), R.push(L.iridescenceMapUv), R.push(L.iridescenceThicknessMapUv), R.push(L.sheenColorMapUv), R.push(L.sheenRoughnessMapUv), R.push(L.specularMapUv), R.push(L.specularColorMapUv), R.push(L.specularIntensityMapUv), R.push(L.transmissionMapUv), R.push(L.thicknessMapUv), R.push(L.combine), R.push(L.fogExp2), R.push(L.sizeAttenuation), R.push(L.morphTargetsCount), R.push(L.morphAttributeCount), R.push(L.numDirLights), R.push(L.numPointLights), R.push(L.numSpotLights), R.push(L.numSpotLightMaps), R.push(L.numHemiLights), R.push(L.numRectAreaLights), R.push(L.numDirLightShadows), R.push(L.numPointLightShadows), R.push(L.numSpotLightShadows), R.push(L.numSpotLightShadowsWithMaps), R.push(L.numLightProbes), R.push(L.shadowMapType), R.push(L.toneMapping), R.push(L.numClippingPlanes), R.push(L.numClipIntersection), R.push(L.depthPacking);
  }
  function M(R, L) {
    c.disableAll(), L.isWebGL2 && c.enable(0), L.supportsVertexTextures && c.enable(1), L.instancing && c.enable(2), L.instancingColor && c.enable(3), L.matcap && c.enable(4), L.envMap && c.enable(5), L.normalMapObjectSpace && c.enable(6), L.normalMapTangentSpace && c.enable(7), L.clearcoat && c.enable(8), L.iridescence && c.enable(9), L.alphaTest && c.enable(10), L.vertexColors && c.enable(11), L.vertexAlphas && c.enable(12), L.vertexUv1s && c.enable(13), L.vertexUv2s && c.enable(14), L.vertexUv3s && c.enable(15), L.vertexTangents && c.enable(16), L.anisotropy && c.enable(17), R.push(c.mask), c.disableAll(), L.fog && c.enable(0), L.useFog && c.enable(1), L.flatShading && c.enable(2), L.logarithmicDepthBuffer && c.enable(3), L.skinning && c.enable(4), L.morphTargets && c.enable(5), L.morphNormals && c.enable(6), L.morphColors && c.enable(7), L.premultipliedAlpha && c.enable(8), L.shadowMapEnabled && c.enable(9), L.useLegacyLights && c.enable(10), L.doubleSided && c.enable(11), L.flipSided && c.enable(12), L.useDepthPacking && c.enable(13), L.dithering && c.enable(14), L.transmission && c.enable(15), L.sheen && c.enable(16), L.opaque && c.enable(17), L.pointsUvs && c.enable(18), L.decodeVideoTexture && c.enable(19), R.push(c.mask);
  }
  function b(R) {
    const L = y[R.type];
    let H;
    if (L) {
      const te = Mi[L];
      H = Ov.clone(te.uniforms);
    } else
      H = R.uniforms;
    return H;
  }
  function A(R, L) {
    let H;
    for (let te = 0, se = h.length; te < se; te++) {
      const G = h[te];
      if (G.cacheKey === L) {
        H = G, ++H.usedTimes;
        break;
      }
    }
    return H === void 0 && (H = new Dw(r, L, R, s), h.push(H)), H;
  }
  function C(R) {
    if (--R.usedTimes === 0) {
      const L = h.indexOf(R);
      h[L] = h[h.length - 1], h.pop(), R.destroy();
    }
  }
  function I(R) {
    u.remove(R);
  }
  function z() {
    u.dispose();
  }
  return {
    getParameters: x,
    getProgramCacheKey: _,
    getUniforms: b,
    acquireProgram: A,
    releaseProgram: C,
    releaseShaderCache: I,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: h,
    dispose: z
  };
}
function zw() {
  let r = /* @__PURE__ */ new WeakMap();
  function e(s) {
    let l = r.get(s);
    return l === void 0 && (l = {}, r.set(s, l)), l;
  }
  function t(s) {
    r.delete(s);
  }
  function n(s, l, c) {
    r.get(s)[l] = c;
  }
  function i() {
    r = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    remove: t,
    update: n,
    dispose: i
  };
}
function Bw(r, e) {
  return r.groupOrder !== e.groupOrder ? r.groupOrder - e.groupOrder : r.renderOrder !== e.renderOrder ? r.renderOrder - e.renderOrder : r.material.id !== e.material.id ? r.material.id - e.material.id : r.z !== e.z ? r.z - e.z : r.id - e.id;
}
function yg(r, e) {
  return r.groupOrder !== e.groupOrder ? r.groupOrder - e.groupOrder : r.renderOrder !== e.renderOrder ? r.renderOrder - e.renderOrder : r.z !== e.z ? e.z - r.z : r.id - e.id;
}
function xg() {
  const r = [];
  let e = 0;
  const t = [], n = [], i = [];
  function s() {
    e = 0, t.length = 0, n.length = 0, i.length = 0;
  }
  function l(p, m, v, y, E, x) {
    let _ = r[e];
    return _ === void 0 ? (_ = {
      id: p.id,
      object: p,
      geometry: m,
      material: v,
      groupOrder: y,
      renderOrder: p.renderOrder,
      z: E,
      group: x
    }, r[e] = _) : (_.id = p.id, _.object = p, _.geometry = m, _.material = v, _.groupOrder = y, _.renderOrder = p.renderOrder, _.z = E, _.group = x), e++, _;
  }
  function c(p, m, v, y, E, x) {
    const _ = l(p, m, v, y, E, x);
    v.transmission > 0 ? n.push(_) : v.transparent === !0 ? i.push(_) : t.push(_);
  }
  function u(p, m, v, y, E, x) {
    const _ = l(p, m, v, y, E, x);
    v.transmission > 0 ? n.unshift(_) : v.transparent === !0 ? i.unshift(_) : t.unshift(_);
  }
  function h(p, m) {
    t.length > 1 && t.sort(p || Bw), n.length > 1 && n.sort(m || yg), i.length > 1 && i.sort(m || yg);
  }
  function f() {
    for (let p = e, m = r.length; p < m; p++) {
      const v = r[p];
      if (v.id === null)
        break;
      v.id = null, v.object = null, v.geometry = null, v.material = null, v.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: n,
    transparent: i,
    init: s,
    push: c,
    unshift: u,
    finish: f,
    sort: h
  };
}
function kw() {
  let r = /* @__PURE__ */ new WeakMap();
  function e(n, i) {
    const s = r.get(n);
    let l;
    return s === void 0 ? (l = new xg(), r.set(n, [l])) : i >= s.length ? (l = new xg(), s.push(l)) : l = s[i], l;
  }
  function t() {
    r = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function Hw() {
  const r = {};
  return {
    get: function(e) {
      if (r[e.id] !== void 0)
        return r[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new D(),
            color: new Fe()
          };
          break;
        case "SpotLight":
          t = {
            position: new D(),
            direction: new D(),
            color: new Fe(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new D(),
            color: new Fe(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new D(),
            skyColor: new Fe(),
            groundColor: new Fe()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new Fe(),
            position: new D(),
            halfWidth: new D(),
            halfHeight: new D()
          };
          break;
      }
      return r[e.id] = t, t;
    }
  };
}
function Vw() {
  const r = {};
  return {
    get: function(e) {
      if (r[e.id] !== void 0)
        return r[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ue()
          };
          break;
        case "SpotLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ue()
          };
          break;
        case "PointLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ue(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return r[e.id] = t, t;
    }
  };
}
let Gw = 0;
function Ww(r, e) {
  return (e.castShadow ? 2 : 0) - (r.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (r.map ? 1 : 0);
}
function Xw(r, e) {
  const t = new Hw(), n = Vw(), i = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let f = 0; f < 9; f++)
    i.probe.push(new D());
  const s = new D(), l = new ut(), c = new ut();
  function u(f, p) {
    let m = 0, v = 0, y = 0;
    for (let te = 0; te < 9; te++)
      i.probe[te].set(0, 0, 0);
    let E = 0, x = 0, _ = 0, w = 0, M = 0, b = 0, A = 0, C = 0, I = 0, z = 0, R = 0;
    f.sort(Ww);
    const L = p === !0 ? Math.PI : 1;
    for (let te = 0, se = f.length; te < se; te++) {
      const G = f[te], $ = G.color, oe = G.intensity, ie = G.distance, Y = G.shadow && G.shadow.map ? G.shadow.map.texture : null;
      if (G.isAmbientLight)
        m += $.r * oe * L, v += $.g * oe * L, y += $.b * oe * L;
      else if (G.isLightProbe) {
        for (let q = 0; q < 9; q++)
          i.probe[q].addScaledVector(G.sh.coefficients[q], oe);
        R++;
      } else if (G.isDirectionalLight) {
        const q = t.get(G);
        if (q.color.copy(G.color).multiplyScalar(G.intensity * L), G.castShadow) {
          const j = G.shadow, k = n.get(G);
          k.shadowBias = j.bias, k.shadowNormalBias = j.normalBias, k.shadowRadius = j.radius, k.shadowMapSize = j.mapSize, i.directionalShadow[E] = k, i.directionalShadowMap[E] = Y, i.directionalShadowMatrix[E] = G.shadow.matrix, b++;
        }
        i.directional[E] = q, E++;
      } else if (G.isSpotLight) {
        const q = t.get(G);
        q.position.setFromMatrixPosition(G.matrixWorld), q.color.copy($).multiplyScalar(oe * L), q.distance = ie, q.coneCos = Math.cos(G.angle), q.penumbraCos = Math.cos(G.angle * (1 - G.penumbra)), q.decay = G.decay, i.spot[_] = q;
        const j = G.shadow;
        if (G.map && (i.spotLightMap[I] = G.map, I++, j.updateMatrices(G), G.castShadow && z++), i.spotLightMatrix[_] = j.matrix, G.castShadow) {
          const k = n.get(G);
          k.shadowBias = j.bias, k.shadowNormalBias = j.normalBias, k.shadowRadius = j.radius, k.shadowMapSize = j.mapSize, i.spotShadow[_] = k, i.spotShadowMap[_] = Y, C++;
        }
        _++;
      } else if (G.isRectAreaLight) {
        const q = t.get(G);
        q.color.copy($).multiplyScalar(oe), q.halfWidth.set(G.width * 0.5, 0, 0), q.halfHeight.set(0, G.height * 0.5, 0), i.rectArea[w] = q, w++;
      } else if (G.isPointLight) {
        const q = t.get(G);
        if (q.color.copy(G.color).multiplyScalar(G.intensity * L), q.distance = G.distance, q.decay = G.decay, G.castShadow) {
          const j = G.shadow, k = n.get(G);
          k.shadowBias = j.bias, k.shadowNormalBias = j.normalBias, k.shadowRadius = j.radius, k.shadowMapSize = j.mapSize, k.shadowCameraNear = j.camera.near, k.shadowCameraFar = j.camera.far, i.pointShadow[x] = k, i.pointShadowMap[x] = Y, i.pointShadowMatrix[x] = G.shadow.matrix, A++;
        }
        i.point[x] = q, x++;
      } else if (G.isHemisphereLight) {
        const q = t.get(G);
        q.skyColor.copy(G.color).multiplyScalar(oe * L), q.groundColor.copy(G.groundColor).multiplyScalar(oe * L), i.hemi[M] = q, M++;
      }
    }
    w > 0 && (e.isWebGL2 || r.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = Re.LTC_FLOAT_1, i.rectAreaLTC2 = Re.LTC_FLOAT_2) : r.has("OES_texture_half_float_linear") === !0 ? (i.rectAreaLTC1 = Re.LTC_HALF_1, i.rectAreaLTC2 = Re.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), i.ambient[0] = m, i.ambient[1] = v, i.ambient[2] = y;
    const H = i.hash;
    (H.directionalLength !== E || H.pointLength !== x || H.spotLength !== _ || H.rectAreaLength !== w || H.hemiLength !== M || H.numDirectionalShadows !== b || H.numPointShadows !== A || H.numSpotShadows !== C || H.numSpotMaps !== I || H.numLightProbes !== R) && (i.directional.length = E, i.spot.length = _, i.rectArea.length = w, i.point.length = x, i.hemi.length = M, i.directionalShadow.length = b, i.directionalShadowMap.length = b, i.pointShadow.length = A, i.pointShadowMap.length = A, i.spotShadow.length = C, i.spotShadowMap.length = C, i.directionalShadowMatrix.length = b, i.pointShadowMatrix.length = A, i.spotLightMatrix.length = C + I - z, i.spotLightMap.length = I, i.numSpotLightShadowsWithMaps = z, i.numLightProbes = R, H.directionalLength = E, H.pointLength = x, H.spotLength = _, H.rectAreaLength = w, H.hemiLength = M, H.numDirectionalShadows = b, H.numPointShadows = A, H.numSpotShadows = C, H.numSpotMaps = I, H.numLightProbes = R, i.version = Gw++);
  }
  function h(f, p) {
    let m = 0, v = 0, y = 0, E = 0, x = 0;
    const _ = p.matrixWorldInverse;
    for (let w = 0, M = f.length; w < M; w++) {
      const b = f[w];
      if (b.isDirectionalLight) {
        const A = i.directional[m];
        A.direction.setFromMatrixPosition(b.matrixWorld), s.setFromMatrixPosition(b.target.matrixWorld), A.direction.sub(s), A.direction.transformDirection(_), m++;
      } else if (b.isSpotLight) {
        const A = i.spot[y];
        A.position.setFromMatrixPosition(b.matrixWorld), A.position.applyMatrix4(_), A.direction.setFromMatrixPosition(b.matrixWorld), s.setFromMatrixPosition(b.target.matrixWorld), A.direction.sub(s), A.direction.transformDirection(_), y++;
      } else if (b.isRectAreaLight) {
        const A = i.rectArea[E];
        A.position.setFromMatrixPosition(b.matrixWorld), A.position.applyMatrix4(_), c.identity(), l.copy(b.matrixWorld), l.premultiply(_), c.extractRotation(l), A.halfWidth.set(b.width * 0.5, 0, 0), A.halfHeight.set(0, b.height * 0.5, 0), A.halfWidth.applyMatrix4(c), A.halfHeight.applyMatrix4(c), E++;
      } else if (b.isPointLight) {
        const A = i.point[v];
        A.position.setFromMatrixPosition(b.matrixWorld), A.position.applyMatrix4(_), v++;
      } else if (b.isHemisphereLight) {
        const A = i.hemi[x];
        A.direction.setFromMatrixPosition(b.matrixWorld), A.direction.transformDirection(_), x++;
      }
    }
  }
  return {
    setup: u,
    setupView: h,
    state: i
  };
}
function Sg(r, e) {
  const t = new Xw(r, e), n = [], i = [];
  function s() {
    n.length = 0, i.length = 0;
  }
  function l(p) {
    n.push(p);
  }
  function c(p) {
    i.push(p);
  }
  function u(p) {
    t.setup(n, p);
  }
  function h(p) {
    t.setupView(n, p);
  }
  return {
    init: s,
    state: {
      lightsArray: n,
      shadowsArray: i,
      lights: t
    },
    setupLights: u,
    setupLightsView: h,
    pushLight: l,
    pushShadow: c
  };
}
function Yw(r, e) {
  let t = /* @__PURE__ */ new WeakMap();
  function n(s, l = 0) {
    const c = t.get(s);
    let u;
    return c === void 0 ? (u = new Sg(r, e), t.set(s, [u])) : l >= c.length ? (u = new Sg(r, e), c.push(u)) : u = c[l], u;
  }
  function i() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: i
  };
}
class Ld extends Ln {
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = vv, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class Id extends Ln {
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
const qw = (
  /* glsl */
  `
void main() {

	gl_Position = vec4( position, 1.0 );

}
`
), jw = (
  /* glsl */
  `
uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;

#include <packing>

void main() {

	const float samples = float( VSM_SAMPLES );

	float mean = 0.0;
	float squared_mean = 0.0;

	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {

		float uvOffset = uvStart + i * uvStride;

		#ifdef HORIZONTAL_PASS

			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;

		#else

			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;

		#endif

	}

	mean = mean / samples;
	squared_mean = squared_mean / samples;

	float std_dev = sqrt( squared_mean - mean * mean );

	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );

}
`
);
function Zw(r, e, t) {
  let n = new nu();
  const i = new ue(), s = new ue(), l = new It(), c = new Ld({ depthPacking: _v }), u = new Id(), h = {}, f = t.maxTextureSize, p = { [ar]: On, [On]: ar, [Ni]: Ni }, m = new fi({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new ue() },
      radius: { value: 4 }
    },
    vertexShader: qw,
    fragmentShader: jw
  }), v = m.clone();
  v.defines.HORIZONTAL_PASS = 1;
  const y = new _t();
  y.setAttribute(
    "position",
    new Ot(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const E = new yn(y, m), x = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = Jc;
  let _ = this.type;
  this.render = function(A, C, I) {
    if (x.enabled === !1 || x.autoUpdate === !1 && x.needsUpdate === !1 || A.length === 0)
      return;
    const z = r.getRenderTarget(), R = r.getActiveCubeFace(), L = r.getActiveMipmapLevel(), H = r.state;
    H.setBlending(sr), H.buffers.color.setClear(1, 1, 1, 1), H.buffers.depth.setTest(!0), H.setScissorTest(!1);
    const te = _ !== yi && this.type === yi, se = _ === yi && this.type !== yi;
    for (let G = 0, $ = A.length; G < $; G++) {
      const oe = A[G], ie = oe.shadow;
      if (ie === void 0) {
        console.warn("THREE.WebGLShadowMap:", oe, "has no shadow.");
        continue;
      }
      if (ie.autoUpdate === !1 && ie.needsUpdate === !1)
        continue;
      i.copy(ie.mapSize);
      const Y = ie.getFrameExtents();
      if (i.multiply(Y), s.copy(ie.mapSize), (i.x > f || i.y > f) && (i.x > f && (s.x = Math.floor(f / Y.x), i.x = s.x * Y.x, ie.mapSize.x = s.x), i.y > f && (s.y = Math.floor(f / Y.y), i.y = s.y * Y.y, ie.mapSize.y = s.y)), ie.map === null || te === !0 || se === !0) {
        const j = this.type !== yi ? { minFilter: Wt, magFilter: Wt } : {};
        ie.map !== null && ie.map.dispose(), ie.map = new hi(i.x, i.y, j), ie.map.texture.name = oe.name + ".shadowMap", ie.camera.updateProjectionMatrix();
      }
      r.setRenderTarget(ie.map), r.clear();
      const q = ie.getViewportCount();
      for (let j = 0; j < q; j++) {
        const k = ie.getViewport(j);
        l.set(
          s.x * k.x,
          s.y * k.y,
          s.x * k.z,
          s.y * k.w
        ), H.viewport(l), ie.updateMatrices(oe, j), n = ie.getFrustum(), b(C, I, ie.camera, oe, this.type);
      }
      ie.isPointLightShadow !== !0 && this.type === yi && w(ie, I), ie.needsUpdate = !1;
    }
    _ = this.type, x.needsUpdate = !1, r.setRenderTarget(z, R, L);
  };
  function w(A, C) {
    const I = e.update(E);
    m.defines.VSM_SAMPLES !== A.blurSamples && (m.defines.VSM_SAMPLES = A.blurSamples, v.defines.VSM_SAMPLES = A.blurSamples, m.needsUpdate = !0, v.needsUpdate = !0), A.mapPass === null && (A.mapPass = new hi(i.x, i.y)), m.uniforms.shadow_pass.value = A.map.texture, m.uniforms.resolution.value = A.mapSize, m.uniforms.radius.value = A.radius, r.setRenderTarget(A.mapPass), r.clear(), r.renderBufferDirect(C, null, I, m, E, null), v.uniforms.shadow_pass.value = A.mapPass.texture, v.uniforms.resolution.value = A.mapSize, v.uniforms.radius.value = A.radius, r.setRenderTarget(A.map), r.clear(), r.renderBufferDirect(C, null, I, v, E, null);
  }
  function M(A, C, I, z) {
    let R = null;
    const L = I.isPointLight === !0 ? A.customDistanceMaterial : A.customDepthMaterial;
    if (L !== void 0)
      R = L;
    else if (R = I.isPointLight === !0 ? u : c, r.localClippingEnabled && C.clipShadows === !0 && Array.isArray(C.clippingPlanes) && C.clippingPlanes.length !== 0 || C.displacementMap && C.displacementScale !== 0 || C.alphaMap && C.alphaTest > 0 || C.map && C.alphaTest > 0) {
      const H = R.uuid, te = C.uuid;
      let se = h[H];
      se === void 0 && (se = {}, h[H] = se);
      let G = se[te];
      G === void 0 && (G = R.clone(), se[te] = G), R = G;
    }
    if (R.visible = C.visible, R.wireframe = C.wireframe, z === yi ? R.side = C.shadowSide !== null ? C.shadowSide : C.side : R.side = C.shadowSide !== null ? C.shadowSide : p[C.side], R.alphaMap = C.alphaMap, R.alphaTest = C.alphaTest, R.map = C.map, R.clipShadows = C.clipShadows, R.clippingPlanes = C.clippingPlanes, R.clipIntersection = C.clipIntersection, R.displacementMap = C.displacementMap, R.displacementScale = C.displacementScale, R.displacementBias = C.displacementBias, R.wireframeLinewidth = C.wireframeLinewidth, R.linewidth = C.linewidth, I.isPointLight === !0 && R.isMeshDistanceMaterial === !0) {
      const H = r.properties.get(R);
      H.light = I;
    }
    return R;
  }
  function b(A, C, I, z, R) {
    if (A.visible === !1)
      return;
    if (A.layers.test(C.layers) && (A.isMesh || A.isLine || A.isPoints) && (A.castShadow || A.receiveShadow && R === yi) && (!A.frustumCulled || n.intersectsObject(A))) {
      A.modelViewMatrix.multiplyMatrices(I.matrixWorldInverse, A.matrixWorld);
      const te = e.update(A), se = A.material;
      if (Array.isArray(se)) {
        const G = te.groups;
        for (let $ = 0, oe = G.length; $ < oe; $++) {
          const ie = G[$], Y = se[ie.materialIndex];
          if (Y && Y.visible) {
            const q = M(A, Y, z, R);
            r.renderBufferDirect(I, null, te, q, A, ie);
          }
        }
      } else if (se.visible) {
        const G = M(A, se, z, R);
        r.renderBufferDirect(I, null, te, G, A, null);
      }
    }
    const H = A.children;
    for (let te = 0, se = H.length; te < se; te++)
      b(H[te], C, I, z, R);
  }
}
function Jw(r, e, t) {
  const n = t.isWebGL2;
  function i() {
    let F = !1;
    const me = new It();
    let ye = null;
    const Ce = new It(0, 0, 0, 0);
    return {
      setMask: function(Le) {
        ye !== Le && !F && (r.colorMask(Le, Le, Le, Le), ye = Le);
      },
      setLocked: function(Le) {
        F = Le;
      },
      setClear: function(Le, pe, Ue, Ze, Ht) {
        Ht === !0 && (Le *= Ze, pe *= Ze, Ue *= Ze), me.set(Le, pe, Ue, Ze), Ce.equals(me) === !1 && (r.clearColor(Le, pe, Ue, Ze), Ce.copy(me));
      },
      reset: function() {
        F = !1, ye = null, Ce.set(-1, 0, 0, 0);
      }
    };
  }
  function s() {
    let F = !1, me = null, ye = null, Ce = null;
    return {
      setTest: function(Le) {
        Le ? He(r.DEPTH_TEST) : je(r.DEPTH_TEST);
      },
      setMask: function(Le) {
        me !== Le && !F && (r.depthMask(Le), me = Le);
      },
      setFunc: function(Le) {
        if (ye !== Le) {
          switch (Le) {
            case Y0:
              r.depthFunc(r.NEVER);
              break;
            case q0:
              r.depthFunc(r.ALWAYS);
              break;
            case j0:
              r.depthFunc(r.LESS);
              break;
            case Gc:
              r.depthFunc(r.LEQUAL);
              break;
            case Z0:
              r.depthFunc(r.EQUAL);
              break;
            case J0:
              r.depthFunc(r.GEQUAL);
              break;
            case K0:
              r.depthFunc(r.GREATER);
              break;
            case Q0:
              r.depthFunc(r.NOTEQUAL);
              break;
            default:
              r.depthFunc(r.LEQUAL);
          }
          ye = Le;
        }
      },
      setLocked: function(Le) {
        F = Le;
      },
      setClear: function(Le) {
        Ce !== Le && (r.clearDepth(Le), Ce = Le);
      },
      reset: function() {
        F = !1, me = null, ye = null, Ce = null;
      }
    };
  }
  function l() {
    let F = !1, me = null, ye = null, Ce = null, Le = null, pe = null, Ue = null, Ze = null, Ht = null;
    return {
      setTest: function(Mt) {
        F || (Mt ? He(r.STENCIL_TEST) : je(r.STENCIL_TEST));
      },
      setMask: function(Mt) {
        me !== Mt && !F && (r.stencilMask(Mt), me = Mt);
      },
      setFunc: function(Mt, ln, qt) {
        (ye !== Mt || Ce !== ln || Le !== qt) && (r.stencilFunc(Mt, ln, qt), ye = Mt, Ce = ln, Le = qt);
      },
      setOp: function(Mt, ln, qt) {
        (pe !== Mt || Ue !== ln || Ze !== qt) && (r.stencilOp(Mt, ln, qt), pe = Mt, Ue = ln, Ze = qt);
      },
      setLocked: function(Mt) {
        F = Mt;
      },
      setClear: function(Mt) {
        Ht !== Mt && (r.clearStencil(Mt), Ht = Mt);
      },
      reset: function() {
        F = !1, me = null, ye = null, Ce = null, Le = null, pe = null, Ue = null, Ze = null, Ht = null;
      }
    };
  }
  const c = new i(), u = new s(), h = new l(), f = /* @__PURE__ */ new WeakMap(), p = /* @__PURE__ */ new WeakMap();
  let m = {}, v = {}, y = /* @__PURE__ */ new WeakMap(), E = [], x = null, _ = !1, w = null, M = null, b = null, A = null, C = null, I = null, z = null, R = !1, L = null, H = null, te = null, se = null, G = null;
  const $ = r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let oe = !1, ie = 0;
  const Y = r.getParameter(r.VERSION);
  Y.indexOf("WebGL") !== -1 ? (ie = parseFloat(/^WebGL (\d)/.exec(Y)[1]), oe = ie >= 1) : Y.indexOf("OpenGL ES") !== -1 && (ie = parseFloat(/^OpenGL ES (\d)/.exec(Y)[1]), oe = ie >= 2);
  let q = null, j = {};
  const k = r.getParameter(r.SCISSOR_BOX), Q = r.getParameter(r.VIEWPORT), fe = new It().fromArray(k), Te = new It().fromArray(Q);
  function Ae(F, me, ye, Ce) {
    const Le = new Uint8Array(4), pe = r.createTexture();
    r.bindTexture(F, pe), r.texParameteri(F, r.TEXTURE_MIN_FILTER, r.NEAREST), r.texParameteri(F, r.TEXTURE_MAG_FILTER, r.NEAREST);
    for (let Ue = 0; Ue < ye; Ue++)
      n && (F === r.TEXTURE_3D || F === r.TEXTURE_2D_ARRAY) ? r.texImage3D(me, 0, r.RGBA, 1, 1, Ce, 0, r.RGBA, r.UNSIGNED_BYTE, Le) : r.texImage2D(me + Ue, 0, r.RGBA, 1, 1, 0, r.RGBA, r.UNSIGNED_BYTE, Le);
    return pe;
  }
  const ke = {};
  ke[r.TEXTURE_2D] = Ae(r.TEXTURE_2D, r.TEXTURE_2D, 1), ke[r.TEXTURE_CUBE_MAP] = Ae(r.TEXTURE_CUBE_MAP, r.TEXTURE_CUBE_MAP_POSITIVE_X, 6), n && (ke[r.TEXTURE_2D_ARRAY] = Ae(r.TEXTURE_2D_ARRAY, r.TEXTURE_2D_ARRAY, 1, 1), ke[r.TEXTURE_3D] = Ae(r.TEXTURE_3D, r.TEXTURE_3D, 1, 1)), c.setClear(0, 0, 0, 1), u.setClear(1), h.setClear(0), He(r.DEPTH_TEST), u.setFunc(Gc), de(!1), Xe(Sf), He(r.CULL_FACE), he(sr);
  function He(F) {
    m[F] !== !0 && (r.enable(F), m[F] = !0);
  }
  function je(F) {
    m[F] !== !1 && (r.disable(F), m[F] = !1);
  }
  function yt(F, me) {
    return v[F] !== me ? (r.bindFramebuffer(F, me), v[F] = me, n && (F === r.DRAW_FRAMEBUFFER && (v[r.FRAMEBUFFER] = me), F === r.FRAMEBUFFER && (v[r.DRAW_FRAMEBUFFER] = me)), !0) : !1;
  }
  function Ct(F, me) {
    let ye = E, Ce = !1;
    if (F)
      if (ye = y.get(me), ye === void 0 && (ye = [], y.set(me, ye)), F.isWebGLMultipleRenderTargets) {
        const Le = F.texture;
        if (ye.length !== Le.length || ye[0] !== r.COLOR_ATTACHMENT0) {
          for (let pe = 0, Ue = Le.length; pe < Ue; pe++)
            ye[pe] = r.COLOR_ATTACHMENT0 + pe;
          ye.length = Le.length, Ce = !0;
        }
      } else
        ye[0] !== r.COLOR_ATTACHMENT0 && (ye[0] = r.COLOR_ATTACHMENT0, Ce = !0);
    else
      ye[0] !== r.BACK && (ye[0] = r.BACK, Ce = !0);
    Ce && (t.isWebGL2 ? r.drawBuffers(ye) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(ye));
  }
  function Ve(F) {
    return x !== F ? (r.useProgram(F), x = F, !0) : !1;
  }
  const B = {
    [ss]: r.FUNC_ADD,
    [U0]: r.FUNC_SUBTRACT,
    [O0]: r.FUNC_REVERSE_SUBTRACT
  };
  if (n)
    B[Tf] = r.MIN, B[bf] = r.MAX;
  else {
    const F = e.get("EXT_blend_minmax");
    F !== null && (B[Tf] = F.MIN_EXT, B[bf] = F.MAX_EXT);
  }
  const ve = {
    [F0]: r.ZERO,
    [z0]: r.ONE,
    [B0]: r.SRC_COLOR,
    [dd]: r.SRC_ALPHA,
    [X0]: r.SRC_ALPHA_SATURATE,
    [G0]: r.DST_COLOR,
    [H0]: r.DST_ALPHA,
    [k0]: r.ONE_MINUS_SRC_COLOR,
    [pd]: r.ONE_MINUS_SRC_ALPHA,
    [W0]: r.ONE_MINUS_DST_COLOR,
    [V0]: r.ONE_MINUS_DST_ALPHA
  };
  function he(F, me, ye, Ce, Le, pe, Ue, Ze) {
    if (F === sr) {
      _ === !0 && (je(r.BLEND), _ = !1);
      return;
    }
    if (_ === !1 && (He(r.BLEND), _ = !0), F !== N0) {
      if (F !== w || Ze !== R) {
        if ((M !== ss || C !== ss) && (r.blendEquation(r.FUNC_ADD), M = ss, C = ss), Ze)
          switch (F) {
            case Ar:
              r.blendFuncSeparate(r.ONE, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case Mf:
              r.blendFunc(r.ONE, r.ONE);
              break;
            case Ef:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case wf:
              r.blendFuncSeparate(r.ZERO, r.SRC_COLOR, r.ZERO, r.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", F);
              break;
          }
        else
          switch (F) {
            case Ar:
              r.blendFuncSeparate(r.SRC_ALPHA, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case Mf:
              r.blendFunc(r.SRC_ALPHA, r.ONE);
              break;
            case Ef:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case wf:
              r.blendFunc(r.ZERO, r.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", F);
              break;
          }
        b = null, A = null, I = null, z = null, w = F, R = Ze;
      }
      return;
    }
    Le = Le || me, pe = pe || ye, Ue = Ue || Ce, (me !== M || Le !== C) && (r.blendEquationSeparate(B[me], B[Le]), M = me, C = Le), (ye !== b || Ce !== A || pe !== I || Ue !== z) && (r.blendFuncSeparate(ve[ye], ve[Ce], ve[pe], ve[Ue]), b = ye, A = Ce, I = pe, z = Ue), w = F, R = !1;
  }
  function Ee(F, me) {
    F.side === Ni ? je(r.CULL_FACE) : He(r.CULL_FACE);
    let ye = F.side === On;
    me && (ye = !ye), de(ye), F.blending === Ar && F.transparent === !1 ? he(sr) : he(F.blending, F.blendEquation, F.blendSrc, F.blendDst, F.blendEquationAlpha, F.blendSrcAlpha, F.blendDstAlpha, F.premultipliedAlpha), u.setFunc(F.depthFunc), u.setTest(F.depthTest), u.setMask(F.depthWrite), c.setMask(F.colorWrite);
    const Ce = F.stencilWrite;
    h.setTest(Ce), Ce && (h.setMask(F.stencilWriteMask), h.setFunc(F.stencilFunc, F.stencilRef, F.stencilFuncMask), h.setOp(F.stencilFail, F.stencilZFail, F.stencilZPass)), Oe(F.polygonOffset, F.polygonOffsetFactor, F.polygonOffsetUnits), F.alphaToCoverage === !0 ? He(r.SAMPLE_ALPHA_TO_COVERAGE) : je(r.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function de(F) {
    L !== F && (F ? r.frontFace(r.CW) : r.frontFace(r.CCW), L = F);
  }
  function Xe(F) {
    F !== L0 ? (He(r.CULL_FACE), F !== H && (F === Sf ? r.cullFace(r.BACK) : F === I0 ? r.cullFace(r.FRONT) : r.cullFace(r.FRONT_AND_BACK))) : je(r.CULL_FACE), H = F;
  }
  function Ne(F) {
    F !== te && (oe && r.lineWidth(F), te = F);
  }
  function Oe(F, me, ye) {
    F ? (He(r.POLYGON_OFFSET_FILL), (se !== me || G !== ye) && (r.polygonOffset(me, ye), se = me, G = ye)) : je(r.POLYGON_OFFSET_FILL);
  }
  function $e(F) {
    F ? He(r.SCISSOR_TEST) : je(r.SCISSOR_TEST);
  }
  function mt(F) {
    F === void 0 && (F = r.TEXTURE0 + $ - 1), q !== F && (r.activeTexture(F), q = F);
  }
  function Dt(F, me, ye) {
    ye === void 0 && (q === null ? ye = r.TEXTURE0 + $ - 1 : ye = q);
    let Ce = j[ye];
    Ce === void 0 && (Ce = { type: void 0, texture: void 0 }, j[ye] = Ce), (Ce.type !== F || Ce.texture !== me) && (q !== ye && (r.activeTexture(ye), q = ye), r.bindTexture(F, me || ke[F]), Ce.type = F, Ce.texture = me);
  }
  function O() {
    const F = j[q];
    F !== void 0 && F.type !== void 0 && (r.bindTexture(F.type, null), F.type = void 0, F.texture = void 0);
  }
  function P() {
    try {
      r.compressedTexImage2D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function ee() {
    try {
      r.compressedTexImage3D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function Se() {
    try {
      r.texSubImage2D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function ge() {
    try {
      r.texSubImage3D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function xe() {
    try {
      r.compressedTexSubImage2D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function Ge() {
    try {
      r.compressedTexSubImage3D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function be() {
    try {
      r.texStorage2D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function Pe() {
    try {
      r.texStorage3D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function tt() {
    try {
      r.texImage2D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function xt() {
    try {
      r.texImage3D.apply(r, arguments);
    } catch (F) {
      console.error("THREE.WebGLState:", F);
    }
  }
  function Me(F) {
    fe.equals(F) === !1 && (r.scissor(F.x, F.y, F.z, F.w), fe.copy(F));
  }
  function St(F) {
    Te.equals(F) === !1 && (r.viewport(F.x, F.y, F.z, F.w), Te.copy(F));
  }
  function V(F, me) {
    let ye = p.get(me);
    ye === void 0 && (ye = /* @__PURE__ */ new WeakMap(), p.set(me, ye));
    let Ce = ye.get(F);
    Ce === void 0 && (Ce = r.getUniformBlockIndex(me, F.name), ye.set(F, Ce));
  }
  function ae(F, me) {
    const Ce = p.get(me).get(F);
    f.get(me) !== Ce && (r.uniformBlockBinding(me, Ce, F.__bindingPointIndex), f.set(me, Ce));
  }
  function _e() {
    r.disable(r.BLEND), r.disable(r.CULL_FACE), r.disable(r.DEPTH_TEST), r.disable(r.POLYGON_OFFSET_FILL), r.disable(r.SCISSOR_TEST), r.disable(r.STENCIL_TEST), r.disable(r.SAMPLE_ALPHA_TO_COVERAGE), r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ONE, r.ZERO), r.blendFuncSeparate(r.ONE, r.ZERO, r.ONE, r.ZERO), r.colorMask(!0, !0, !0, !0), r.clearColor(0, 0, 0, 0), r.depthMask(!0), r.depthFunc(r.LESS), r.clearDepth(1), r.stencilMask(4294967295), r.stencilFunc(r.ALWAYS, 0, 4294967295), r.stencilOp(r.KEEP, r.KEEP, r.KEEP), r.clearStencil(0), r.cullFace(r.BACK), r.frontFace(r.CCW), r.polygonOffset(0, 0), r.activeTexture(r.TEXTURE0), r.bindFramebuffer(r.FRAMEBUFFER, null), n === !0 && (r.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), r.bindFramebuffer(r.READ_FRAMEBUFFER, null)), r.useProgram(null), r.lineWidth(1), r.scissor(0, 0, r.canvas.width, r.canvas.height), r.viewport(0, 0, r.canvas.width, r.canvas.height), m = {}, q = null, j = {}, v = {}, y = /* @__PURE__ */ new WeakMap(), E = [], x = null, _ = !1, w = null, M = null, b = null, A = null, C = null, I = null, z = null, R = !1, L = null, H = null, te = null, se = null, G = null, fe.set(0, 0, r.canvas.width, r.canvas.height), Te.set(0, 0, r.canvas.width, r.canvas.height), c.reset(), u.reset(), h.reset();
  }
  return {
    buffers: {
      color: c,
      depth: u,
      stencil: h
    },
    enable: He,
    disable: je,
    bindFramebuffer: yt,
    drawBuffers: Ct,
    useProgram: Ve,
    setBlending: he,
    setMaterial: Ee,
    setFlipSided: de,
    setCullFace: Xe,
    setLineWidth: Ne,
    setPolygonOffset: Oe,
    setScissorTest: $e,
    activeTexture: mt,
    bindTexture: Dt,
    unbindTexture: O,
    compressedTexImage2D: P,
    compressedTexImage3D: ee,
    texImage2D: tt,
    texImage3D: xt,
    updateUBOMapping: V,
    uniformBlockBinding: ae,
    texStorage2D: be,
    texStorage3D: Pe,
    texSubImage2D: Se,
    texSubImage3D: ge,
    compressedTexSubImage2D: xe,
    compressedTexSubImage3D: Ge,
    scissor: Me,
    viewport: St,
    reset: _e
  };
}
function Kw(r, e, t, n, i, s, l) {
  const c = i.isWebGL2, u = i.maxTextures, h = i.maxCubemapSize, f = i.maxTextureSize, p = i.maxSamples, m = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, v = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), y = /* @__PURE__ */ new WeakMap();
  let E;
  const x = /* @__PURE__ */ new WeakMap();
  let _ = !1;
  try {
    _ = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function w(O, P) {
    return _ ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(O, P)
    ) : Ta("canvas");
  }
  function M(O, P, ee, Se) {
    let ge = 1;
    if ((O.width > Se || O.height > Se) && (ge = Se / Math.max(O.width, O.height)), ge < 1 || P === !0)
      if (typeof HTMLImageElement < "u" && O instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && O instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && O instanceof ImageBitmap) {
        const xe = P ? Yc : Math.floor, Ge = xe(ge * O.width), be = xe(ge * O.height);
        E === void 0 && (E = w(Ge, be));
        const Pe = ee ? w(Ge, be) : E;
        return Pe.width = Ge, Pe.height = be, Pe.getContext("2d").drawImage(O, 0, 0, Ge, be), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + O.width + "x" + O.height + ") to (" + Ge + "x" + be + ")."), Pe;
      } else
        return "data" in O && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + O.width + "x" + O.height + ")."), O;
    return O;
  }
  function b(O) {
    return $f(O.width) && $f(O.height);
  }
  function A(O) {
    return c ? !1 : O.wrapS !== Rn || O.wrapT !== Rn || O.minFilter !== Wt && O.minFilter !== Xt;
  }
  function C(O, P) {
    return O.generateMipmaps && P && O.minFilter !== Wt && O.minFilter !== Xt;
  }
  function I(O) {
    r.generateMipmap(O);
  }
  function z(O, P, ee, Se, ge = !1) {
    if (c === !1)
      return P;
    if (O !== null) {
      if (r[O] !== void 0)
        return r[O];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + O + "'");
    }
    let xe = P;
    if (P === r.RED && (ee === r.FLOAT && (xe = r.R32F), ee === r.HALF_FLOAT && (xe = r.R16F), ee === r.UNSIGNED_BYTE && (xe = r.R8)), P === r.RED_INTEGER && (ee === r.UNSIGNED_BYTE && (xe = r.R8UI), ee === r.UNSIGNED_SHORT && (xe = r.R16UI), ee === r.UNSIGNED_INT && (xe = r.R32UI), ee === r.BYTE && (xe = r.R8I), ee === r.SHORT && (xe = r.R16I), ee === r.INT && (xe = r.R32I)), P === r.RG && (ee === r.FLOAT && (xe = r.RG32F), ee === r.HALF_FLOAT && (xe = r.RG16F), ee === r.UNSIGNED_BYTE && (xe = r.RG8)), P === r.RGBA) {
      const Ge = ge ? xa : Lt.getTransfer(Se);
      ee === r.FLOAT && (xe = r.RGBA32F), ee === r.HALF_FLOAT && (xe = r.RGBA16F), ee === r.UNSIGNED_BYTE && (xe = Ge === zt ? r.SRGB8_ALPHA8 : r.RGBA8), ee === r.UNSIGNED_SHORT_4_4_4_4 && (xe = r.RGBA4), ee === r.UNSIGNED_SHORT_5_5_5_1 && (xe = r.RGB5_A1);
    }
    return (xe === r.R16F || xe === r.R32F || xe === r.RG16F || xe === r.RG32F || xe === r.RGBA16F || xe === r.RGBA32F) && e.get("EXT_color_buffer_float"), xe;
  }
  function R(O, P, ee) {
    return C(O, ee) === !0 || O.isFramebufferTexture && O.minFilter !== Wt && O.minFilter !== Xt ? Math.log2(Math.max(P.width, P.height)) + 1 : O.mipmaps !== void 0 && O.mipmaps.length > 0 ? O.mipmaps.length : O.isCompressedTexture && Array.isArray(O.image) ? P.mipmaps.length : 1;
  }
  function L(O) {
    return O === Wt || O === Wc || O === la ? r.NEAREST : r.LINEAR;
  }
  function H(O) {
    const P = O.target;
    P.removeEventListener("dispose", H), se(P), P.isVideoTexture && y.delete(P);
  }
  function te(O) {
    const P = O.target;
    P.removeEventListener("dispose", te), $(P);
  }
  function se(O) {
    const P = n.get(O);
    if (P.__webglInit === void 0)
      return;
    const ee = O.source, Se = x.get(ee);
    if (Se) {
      const ge = Se[P.__cacheKey];
      ge.usedTimes--, ge.usedTimes === 0 && G(O), Object.keys(Se).length === 0 && x.delete(ee);
    }
    n.remove(O);
  }
  function G(O) {
    const P = n.get(O);
    r.deleteTexture(P.__webglTexture);
    const ee = O.source, Se = x.get(ee);
    delete Se[P.__cacheKey], l.memory.textures--;
  }
  function $(O) {
    const P = O.texture, ee = n.get(O), Se = n.get(P);
    if (Se.__webglTexture !== void 0 && (r.deleteTexture(Se.__webglTexture), l.memory.textures--), O.depthTexture && O.depthTexture.dispose(), O.isWebGLCubeRenderTarget)
      for (let ge = 0; ge < 6; ge++) {
        if (Array.isArray(ee.__webglFramebuffer[ge]))
          for (let xe = 0; xe < ee.__webglFramebuffer[ge].length; xe++)
            r.deleteFramebuffer(ee.__webglFramebuffer[ge][xe]);
        else
          r.deleteFramebuffer(ee.__webglFramebuffer[ge]);
        ee.__webglDepthbuffer && r.deleteRenderbuffer(ee.__webglDepthbuffer[ge]);
      }
    else {
      if (Array.isArray(ee.__webglFramebuffer))
        for (let ge = 0; ge < ee.__webglFramebuffer.length; ge++)
          r.deleteFramebuffer(ee.__webglFramebuffer[ge]);
      else
        r.deleteFramebuffer(ee.__webglFramebuffer);
      if (ee.__webglDepthbuffer && r.deleteRenderbuffer(ee.__webglDepthbuffer), ee.__webglMultisampledFramebuffer && r.deleteFramebuffer(ee.__webglMultisampledFramebuffer), ee.__webglColorRenderbuffer)
        for (let ge = 0; ge < ee.__webglColorRenderbuffer.length; ge++)
          ee.__webglColorRenderbuffer[ge] && r.deleteRenderbuffer(ee.__webglColorRenderbuffer[ge]);
      ee.__webglDepthRenderbuffer && r.deleteRenderbuffer(ee.__webglDepthRenderbuffer);
    }
    if (O.isWebGLMultipleRenderTargets)
      for (let ge = 0, xe = P.length; ge < xe; ge++) {
        const Ge = n.get(P[ge]);
        Ge.__webglTexture && (r.deleteTexture(Ge.__webglTexture), l.memory.textures--), n.remove(P[ge]);
      }
    n.remove(P), n.remove(O);
  }
  let oe = 0;
  function ie() {
    oe = 0;
  }
  function Y() {
    const O = oe;
    return O >= u && console.warn("THREE.WebGLTextures: Trying to use " + O + " texture units while this GPU supports only " + u), oe += 1, O;
  }
  function q(O) {
    const P = [];
    return P.push(O.wrapS), P.push(O.wrapT), P.push(O.wrapR || 0), P.push(O.magFilter), P.push(O.minFilter), P.push(O.anisotropy), P.push(O.internalFormat), P.push(O.format), P.push(O.type), P.push(O.generateMipmaps), P.push(O.premultiplyAlpha), P.push(O.flipY), P.push(O.unpackAlignment), P.push(O.colorSpace), P.join();
  }
  function j(O, P) {
    const ee = n.get(O);
    if (O.isVideoTexture && mt(O), O.isRenderTargetTexture === !1 && O.version > 0 && ee.__version !== O.version) {
      const Se = O.image;
      if (Se === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (Se.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        yt(ee, O, P);
        return;
      }
    }
    t.bindTexture(r.TEXTURE_2D, ee.__webglTexture, r.TEXTURE0 + P);
  }
  function k(O, P) {
    const ee = n.get(O);
    if (O.version > 0 && ee.__version !== O.version) {
      yt(ee, O, P);
      return;
    }
    t.bindTexture(r.TEXTURE_2D_ARRAY, ee.__webglTexture, r.TEXTURE0 + P);
  }
  function Q(O, P) {
    const ee = n.get(O);
    if (O.version > 0 && ee.__version !== O.version) {
      yt(ee, O, P);
      return;
    }
    t.bindTexture(r.TEXTURE_3D, ee.__webglTexture, r.TEXTURE0 + P);
  }
  function fe(O, P) {
    const ee = n.get(O);
    if (O.version > 0 && ee.__version !== O.version) {
      Ct(ee, O, P);
      return;
    }
    t.bindTexture(r.TEXTURE_CUBE_MAP, ee.__webglTexture, r.TEXTURE0 + P);
  }
  const Te = {
    [ma]: r.REPEAT,
    [Rn]: r.CLAMP_TO_EDGE,
    [ga]: r.MIRRORED_REPEAT
  }, Ae = {
    [Wt]: r.NEAREST,
    [Wc]: r.NEAREST_MIPMAP_NEAREST,
    [la]: r.NEAREST_MIPMAP_LINEAR,
    [Xt]: r.LINEAR,
    [gd]: r.LINEAR_MIPMAP_NEAREST,
    [Ir]: r.LINEAR_MIPMAP_LINEAR
  }, ke = {
    [Sv]: r.NEVER,
    [Rv]: r.ALWAYS,
    [Mv]: r.LESS,
    [wv]: r.LEQUAL,
    [Ev]: r.EQUAL,
    [Av]: r.GEQUAL,
    [Tv]: r.GREATER,
    [bv]: r.NOTEQUAL
  };
  function He(O, P, ee) {
    if (ee ? (r.texParameteri(O, r.TEXTURE_WRAP_S, Te[P.wrapS]), r.texParameteri(O, r.TEXTURE_WRAP_T, Te[P.wrapT]), (O === r.TEXTURE_3D || O === r.TEXTURE_2D_ARRAY) && r.texParameteri(O, r.TEXTURE_WRAP_R, Te[P.wrapR]), r.texParameteri(O, r.TEXTURE_MAG_FILTER, Ae[P.magFilter]), r.texParameteri(O, r.TEXTURE_MIN_FILTER, Ae[P.minFilter])) : (r.texParameteri(O, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE), r.texParameteri(O, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE), (O === r.TEXTURE_3D || O === r.TEXTURE_2D_ARRAY) && r.texParameteri(O, r.TEXTURE_WRAP_R, r.CLAMP_TO_EDGE), (P.wrapS !== Rn || P.wrapT !== Rn) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), r.texParameteri(O, r.TEXTURE_MAG_FILTER, L(P.magFilter)), r.texParameteri(O, r.TEXTURE_MIN_FILTER, L(P.minFilter)), P.minFilter !== Wt && P.minFilter !== Xt && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), P.compareFunction && (r.texParameteri(O, r.TEXTURE_COMPARE_MODE, r.COMPARE_REF_TO_TEXTURE), r.texParameteri(O, r.TEXTURE_COMPARE_FUNC, ke[P.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
      const Se = e.get("EXT_texture_filter_anisotropic");
      if (P.magFilter === Wt || P.minFilter !== la && P.minFilter !== Ir || P.type === ei && e.has("OES_texture_float_linear") === !1 || c === !1 && P.type === ms && e.has("OES_texture_half_float_linear") === !1)
        return;
      (P.anisotropy > 1 || n.get(P).__currentAnisotropy) && (r.texParameterf(O, Se.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(P.anisotropy, i.getMaxAnisotropy())), n.get(P).__currentAnisotropy = P.anisotropy);
    }
  }
  function je(O, P) {
    let ee = !1;
    O.__webglInit === void 0 && (O.__webglInit = !0, P.addEventListener("dispose", H));
    const Se = P.source;
    let ge = x.get(Se);
    ge === void 0 && (ge = {}, x.set(Se, ge));
    const xe = q(P);
    if (xe !== O.__cacheKey) {
      ge[xe] === void 0 && (ge[xe] = {
        texture: r.createTexture(),
        usedTimes: 0
      }, l.memory.textures++, ee = !0), ge[xe].usedTimes++;
      const Ge = ge[O.__cacheKey];
      Ge !== void 0 && (ge[O.__cacheKey].usedTimes--, Ge.usedTimes === 0 && G(P)), O.__cacheKey = xe, O.__webglTexture = ge[xe].texture;
    }
    return ee;
  }
  function yt(O, P, ee) {
    let Se = r.TEXTURE_2D;
    (P.isDataArrayTexture || P.isCompressedArrayTexture) && (Se = r.TEXTURE_2D_ARRAY), P.isData3DTexture && (Se = r.TEXTURE_3D);
    const ge = je(O, P), xe = P.source;
    t.bindTexture(Se, O.__webglTexture, r.TEXTURE0 + ee);
    const Ge = n.get(xe);
    if (xe.version !== Ge.__version || ge === !0) {
      t.activeTexture(r.TEXTURE0 + ee);
      const be = Lt.getPrimaries(Lt.workingColorSpace), Pe = P.colorSpace === $n ? null : Lt.getPrimaries(P.colorSpace), tt = P.colorSpace === $n || be === Pe ? r.NONE : r.BROWSER_DEFAULT_WEBGL;
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, P.flipY), r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, P.premultiplyAlpha), r.pixelStorei(r.UNPACK_ALIGNMENT, P.unpackAlignment), r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, tt);
      const xt = A(P) && b(P.image) === !1;
      let Me = M(P.image, xt, !1, f);
      Me = Dt(P, Me);
      const St = b(Me) || c, V = s.convert(P.format, P.colorSpace);
      let ae = s.convert(P.type), _e = z(P.internalFormat, V, ae, P.colorSpace, P.isVideoTexture);
      He(Se, P, St);
      let F;
      const me = P.mipmaps, ye = c && P.isVideoTexture !== !0, Ce = Ge.__version === void 0 || ge === !0, Le = R(P, Me, St);
      if (P.isDepthTexture)
        _e = r.DEPTH_COMPONENT, c ? P.type === ei ? _e = r.DEPTH_COMPONENT32F : P.type === ir ? _e = r.DEPTH_COMPONENT24 : P.type === Rr ? _e = r.DEPTH24_STENCIL8 : _e = r.DEPTH_COMPONENT16 : P.type === ei && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), P.format === Cr && _e === r.DEPTH_COMPONENT && P.type !== Qc && P.type !== ir && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), P.type = ir, ae = s.convert(P.type)), P.format === gs && _e === r.DEPTH_COMPONENT && (_e = r.DEPTH_STENCIL, P.type !== Rr && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), P.type = Rr, ae = s.convert(P.type))), Ce && (ye ? t.texStorage2D(r.TEXTURE_2D, 1, _e, Me.width, Me.height) : t.texImage2D(r.TEXTURE_2D, 0, _e, Me.width, Me.height, 0, V, ae, null));
      else if (P.isDataTexture)
        if (me.length > 0 && St) {
          ye && Ce && t.texStorage2D(r.TEXTURE_2D, Le, _e, me[0].width, me[0].height);
          for (let pe = 0, Ue = me.length; pe < Ue; pe++)
            F = me[pe], ye ? t.texSubImage2D(r.TEXTURE_2D, pe, 0, 0, F.width, F.height, V, ae, F.data) : t.texImage2D(r.TEXTURE_2D, pe, _e, F.width, F.height, 0, V, ae, F.data);
          P.generateMipmaps = !1;
        } else
          ye ? (Ce && t.texStorage2D(r.TEXTURE_2D, Le, _e, Me.width, Me.height), t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, Me.width, Me.height, V, ae, Me.data)) : t.texImage2D(r.TEXTURE_2D, 0, _e, Me.width, Me.height, 0, V, ae, Me.data);
      else if (P.isCompressedTexture)
        if (P.isCompressedArrayTexture) {
          ye && Ce && t.texStorage3D(r.TEXTURE_2D_ARRAY, Le, _e, me[0].width, me[0].height, Me.depth);
          for (let pe = 0, Ue = me.length; pe < Ue; pe++)
            F = me[pe], P.format !== Cn ? V !== null ? ye ? t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, pe, 0, 0, 0, F.width, F.height, Me.depth, V, F.data, 0, 0) : t.compressedTexImage3D(r.TEXTURE_2D_ARRAY, pe, _e, F.width, F.height, Me.depth, 0, F.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ye ? t.texSubImage3D(r.TEXTURE_2D_ARRAY, pe, 0, 0, 0, F.width, F.height, Me.depth, V, ae, F.data) : t.texImage3D(r.TEXTURE_2D_ARRAY, pe, _e, F.width, F.height, Me.depth, 0, V, ae, F.data);
        } else {
          ye && Ce && t.texStorage2D(r.TEXTURE_2D, Le, _e, me[0].width, me[0].height);
          for (let pe = 0, Ue = me.length; pe < Ue; pe++)
            F = me[pe], P.format !== Cn ? V !== null ? ye ? t.compressedTexSubImage2D(r.TEXTURE_2D, pe, 0, 0, F.width, F.height, V, F.data) : t.compressedTexImage2D(r.TEXTURE_2D, pe, _e, F.width, F.height, 0, F.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ye ? t.texSubImage2D(r.TEXTURE_2D, pe, 0, 0, F.width, F.height, V, ae, F.data) : t.texImage2D(r.TEXTURE_2D, pe, _e, F.width, F.height, 0, V, ae, F.data);
        }
      else if (P.isDataArrayTexture)
        ye ? (Ce && t.texStorage3D(r.TEXTURE_2D_ARRAY, Le, _e, Me.width, Me.height, Me.depth), t.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, 0, Me.width, Me.height, Me.depth, V, ae, Me.data)) : t.texImage3D(r.TEXTURE_2D_ARRAY, 0, _e, Me.width, Me.height, Me.depth, 0, V, ae, Me.data);
      else if (P.isData3DTexture)
        ye ? (Ce && t.texStorage3D(r.TEXTURE_3D, Le, _e, Me.width, Me.height, Me.depth), t.texSubImage3D(r.TEXTURE_3D, 0, 0, 0, 0, Me.width, Me.height, Me.depth, V, ae, Me.data)) : t.texImage3D(r.TEXTURE_3D, 0, _e, Me.width, Me.height, Me.depth, 0, V, ae, Me.data);
      else if (P.isFramebufferTexture) {
        if (Ce)
          if (ye)
            t.texStorage2D(r.TEXTURE_2D, Le, _e, Me.width, Me.height);
          else {
            let pe = Me.width, Ue = Me.height;
            for (let Ze = 0; Ze < Le; Ze++)
              t.texImage2D(r.TEXTURE_2D, Ze, _e, pe, Ue, 0, V, ae, null), pe >>= 1, Ue >>= 1;
          }
      } else if (me.length > 0 && St) {
        ye && Ce && t.texStorage2D(r.TEXTURE_2D, Le, _e, me[0].width, me[0].height);
        for (let pe = 0, Ue = me.length; pe < Ue; pe++)
          F = me[pe], ye ? t.texSubImage2D(r.TEXTURE_2D, pe, 0, 0, V, ae, F) : t.texImage2D(r.TEXTURE_2D, pe, _e, V, ae, F);
        P.generateMipmaps = !1;
      } else
        ye ? (Ce && t.texStorage2D(r.TEXTURE_2D, Le, _e, Me.width, Me.height), t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, V, ae, Me)) : t.texImage2D(r.TEXTURE_2D, 0, _e, V, ae, Me);
      C(P, St) && I(Se), Ge.__version = xe.version, P.onUpdate && P.onUpdate(P);
    }
    O.__version = P.version;
  }
  function Ct(O, P, ee) {
    if (P.image.length !== 6)
      return;
    const Se = je(O, P), ge = P.source;
    t.bindTexture(r.TEXTURE_CUBE_MAP, O.__webglTexture, r.TEXTURE0 + ee);
    const xe = n.get(ge);
    if (ge.version !== xe.__version || Se === !0) {
      t.activeTexture(r.TEXTURE0 + ee);
      const Ge = Lt.getPrimaries(Lt.workingColorSpace), be = P.colorSpace === $n ? null : Lt.getPrimaries(P.colorSpace), Pe = P.colorSpace === $n || Ge === be ? r.NONE : r.BROWSER_DEFAULT_WEBGL;
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, P.flipY), r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, P.premultiplyAlpha), r.pixelStorei(r.UNPACK_ALIGNMENT, P.unpackAlignment), r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, Pe);
      const tt = P.isCompressedTexture || P.image[0].isCompressedTexture, xt = P.image[0] && P.image[0].isDataTexture, Me = [];
      for (let pe = 0; pe < 6; pe++)
        !tt && !xt ? Me[pe] = M(P.image[pe], !1, !0, h) : Me[pe] = xt ? P.image[pe].image : P.image[pe], Me[pe] = Dt(P, Me[pe]);
      const St = Me[0], V = b(St) || c, ae = s.convert(P.format, P.colorSpace), _e = s.convert(P.type), F = z(P.internalFormat, ae, _e, P.colorSpace), me = c && P.isVideoTexture !== !0, ye = xe.__version === void 0 || Se === !0;
      let Ce = R(P, St, V);
      He(r.TEXTURE_CUBE_MAP, P, V);
      let Le;
      if (tt) {
        me && ye && t.texStorage2D(r.TEXTURE_CUBE_MAP, Ce, F, St.width, St.height);
        for (let pe = 0; pe < 6; pe++) {
          Le = Me[pe].mipmaps;
          for (let Ue = 0; Ue < Le.length; Ue++) {
            const Ze = Le[Ue];
            P.format !== Cn ? ae !== null ? me ? t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, Ue, 0, 0, Ze.width, Ze.height, ae, Ze.data) : t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, Ue, F, Ze.width, Ze.height, 0, Ze.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : me ? t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, Ue, 0, 0, Ze.width, Ze.height, ae, _e, Ze.data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, Ue, F, Ze.width, Ze.height, 0, ae, _e, Ze.data);
          }
        }
      } else {
        Le = P.mipmaps, me && ye && (Le.length > 0 && Ce++, t.texStorage2D(r.TEXTURE_CUBE_MAP, Ce, F, Me[0].width, Me[0].height));
        for (let pe = 0; pe < 6; pe++)
          if (xt) {
            me ? t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, 0, 0, 0, Me[pe].width, Me[pe].height, ae, _e, Me[pe].data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, 0, F, Me[pe].width, Me[pe].height, 0, ae, _e, Me[pe].data);
            for (let Ue = 0; Ue < Le.length; Ue++) {
              const Ht = Le[Ue].image[pe].image;
              me ? t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, Ue + 1, 0, 0, Ht.width, Ht.height, ae, _e, Ht.data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, Ue + 1, F, Ht.width, Ht.height, 0, ae, _e, Ht.data);
            }
          } else {
            me ? t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, 0, 0, 0, ae, _e, Me[pe]) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, 0, F, ae, _e, Me[pe]);
            for (let Ue = 0; Ue < Le.length; Ue++) {
              const Ze = Le[Ue];
              me ? t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, Ue + 1, 0, 0, ae, _e, Ze.image[pe]) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + pe, Ue + 1, F, ae, _e, Ze.image[pe]);
            }
          }
      }
      C(P, V) && I(r.TEXTURE_CUBE_MAP), xe.__version = ge.version, P.onUpdate && P.onUpdate(P);
    }
    O.__version = P.version;
  }
  function Ve(O, P, ee, Se, ge, xe) {
    const Ge = s.convert(ee.format, ee.colorSpace), be = s.convert(ee.type), Pe = z(ee.internalFormat, Ge, be, ee.colorSpace);
    if (!n.get(P).__hasExternalTextures) {
      const xt = Math.max(1, P.width >> xe), Me = Math.max(1, P.height >> xe);
      ge === r.TEXTURE_3D || ge === r.TEXTURE_2D_ARRAY ? t.texImage3D(ge, xe, Pe, xt, Me, P.depth, 0, Ge, be, null) : t.texImage2D(ge, xe, Pe, xt, Me, 0, Ge, be, null);
    }
    t.bindFramebuffer(r.FRAMEBUFFER, O), $e(P) ? m.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, Se, ge, n.get(ee).__webglTexture, 0, Oe(P)) : (ge === r.TEXTURE_2D || ge >= r.TEXTURE_CUBE_MAP_POSITIVE_X && ge <= r.TEXTURE_CUBE_MAP_NEGATIVE_Z) && r.framebufferTexture2D(r.FRAMEBUFFER, Se, ge, n.get(ee).__webglTexture, xe), t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function B(O, P, ee) {
    if (r.bindRenderbuffer(r.RENDERBUFFER, O), P.depthBuffer && !P.stencilBuffer) {
      let Se = c === !0 ? r.DEPTH_COMPONENT24 : r.DEPTH_COMPONENT16;
      if (ee || $e(P)) {
        const ge = P.depthTexture;
        ge && ge.isDepthTexture && (ge.type === ei ? Se = r.DEPTH_COMPONENT32F : ge.type === ir && (Se = r.DEPTH_COMPONENT24));
        const xe = Oe(P);
        $e(P) ? m.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, xe, Se, P.width, P.height) : r.renderbufferStorageMultisample(r.RENDERBUFFER, xe, Se, P.width, P.height);
      } else
        r.renderbufferStorage(r.RENDERBUFFER, Se, P.width, P.height);
      r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.RENDERBUFFER, O);
    } else if (P.depthBuffer && P.stencilBuffer) {
      const Se = Oe(P);
      ee && $e(P) === !1 ? r.renderbufferStorageMultisample(r.RENDERBUFFER, Se, r.DEPTH24_STENCIL8, P.width, P.height) : $e(P) ? m.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, Se, r.DEPTH24_STENCIL8, P.width, P.height) : r.renderbufferStorage(r.RENDERBUFFER, r.DEPTH_STENCIL, P.width, P.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.RENDERBUFFER, O);
    } else {
      const Se = P.isWebGLMultipleRenderTargets === !0 ? P.texture : [P.texture];
      for (let ge = 0; ge < Se.length; ge++) {
        const xe = Se[ge], Ge = s.convert(xe.format, xe.colorSpace), be = s.convert(xe.type), Pe = z(xe.internalFormat, Ge, be, xe.colorSpace), tt = Oe(P);
        ee && $e(P) === !1 ? r.renderbufferStorageMultisample(r.RENDERBUFFER, tt, Pe, P.width, P.height) : $e(P) ? m.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, tt, Pe, P.width, P.height) : r.renderbufferStorage(r.RENDERBUFFER, Pe, P.width, P.height);
      }
    }
    r.bindRenderbuffer(r.RENDERBUFFER, null);
  }
  function ve(O, P) {
    if (P && P.isWebGLCubeRenderTarget)
      throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(r.FRAMEBUFFER, O), !(P.depthTexture && P.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    (!n.get(P.depthTexture).__webglTexture || P.depthTexture.image.width !== P.width || P.depthTexture.image.height !== P.height) && (P.depthTexture.image.width = P.width, P.depthTexture.image.height = P.height, P.depthTexture.needsUpdate = !0), j(P.depthTexture, 0);
    const Se = n.get(P.depthTexture).__webglTexture, ge = Oe(P);
    if (P.depthTexture.format === Cr)
      $e(P) ? m.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, Se, 0, ge) : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, Se, 0);
    else if (P.depthTexture.format === gs)
      $e(P) ? m.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, Se, 0, ge) : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, Se, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function he(O) {
    const P = n.get(O), ee = O.isWebGLCubeRenderTarget === !0;
    if (O.depthTexture && !P.__autoAllocateDepthBuffer) {
      if (ee)
        throw new Error("target.depthTexture not supported in Cube render targets");
      ve(P.__webglFramebuffer, O);
    } else if (ee) {
      P.__webglDepthbuffer = [];
      for (let Se = 0; Se < 6; Se++)
        t.bindFramebuffer(r.FRAMEBUFFER, P.__webglFramebuffer[Se]), P.__webglDepthbuffer[Se] = r.createRenderbuffer(), B(P.__webglDepthbuffer[Se], O, !1);
    } else
      t.bindFramebuffer(r.FRAMEBUFFER, P.__webglFramebuffer), P.__webglDepthbuffer = r.createRenderbuffer(), B(P.__webglDepthbuffer, O, !1);
    t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function Ee(O, P, ee) {
    const Se = n.get(O);
    P !== void 0 && Ve(Se.__webglFramebuffer, O, O.texture, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, 0), ee !== void 0 && he(O);
  }
  function de(O) {
    const P = O.texture, ee = n.get(O), Se = n.get(P);
    O.addEventListener("dispose", te), O.isWebGLMultipleRenderTargets !== !0 && (Se.__webglTexture === void 0 && (Se.__webglTexture = r.createTexture()), Se.__version = P.version, l.memory.textures++);
    const ge = O.isWebGLCubeRenderTarget === !0, xe = O.isWebGLMultipleRenderTargets === !0, Ge = b(O) || c;
    if (ge) {
      ee.__webglFramebuffer = [];
      for (let be = 0; be < 6; be++)
        if (c && P.mipmaps && P.mipmaps.length > 0) {
          ee.__webglFramebuffer[be] = [];
          for (let Pe = 0; Pe < P.mipmaps.length; Pe++)
            ee.__webglFramebuffer[be][Pe] = r.createFramebuffer();
        } else
          ee.__webglFramebuffer[be] = r.createFramebuffer();
    } else {
      if (c && P.mipmaps && P.mipmaps.length > 0) {
        ee.__webglFramebuffer = [];
        for (let be = 0; be < P.mipmaps.length; be++)
          ee.__webglFramebuffer[be] = r.createFramebuffer();
      } else
        ee.__webglFramebuffer = r.createFramebuffer();
      if (xe)
        if (i.drawBuffers) {
          const be = O.texture;
          for (let Pe = 0, tt = be.length; Pe < tt; Pe++) {
            const xt = n.get(be[Pe]);
            xt.__webglTexture === void 0 && (xt.__webglTexture = r.createTexture(), l.memory.textures++);
          }
        } else
          console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
      if (c && O.samples > 0 && $e(O) === !1) {
        const be = xe ? P : [P];
        ee.__webglMultisampledFramebuffer = r.createFramebuffer(), ee.__webglColorRenderbuffer = [], t.bindFramebuffer(r.FRAMEBUFFER, ee.__webglMultisampledFramebuffer);
        for (let Pe = 0; Pe < be.length; Pe++) {
          const tt = be[Pe];
          ee.__webglColorRenderbuffer[Pe] = r.createRenderbuffer(), r.bindRenderbuffer(r.RENDERBUFFER, ee.__webglColorRenderbuffer[Pe]);
          const xt = s.convert(tt.format, tt.colorSpace), Me = s.convert(tt.type), St = z(tt.internalFormat, xt, Me, tt.colorSpace, O.isXRRenderTarget === !0), V = Oe(O);
          r.renderbufferStorageMultisample(r.RENDERBUFFER, V, St, O.width, O.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + Pe, r.RENDERBUFFER, ee.__webglColorRenderbuffer[Pe]);
        }
        r.bindRenderbuffer(r.RENDERBUFFER, null), O.depthBuffer && (ee.__webglDepthRenderbuffer = r.createRenderbuffer(), B(ee.__webglDepthRenderbuffer, O, !0)), t.bindFramebuffer(r.FRAMEBUFFER, null);
      }
    }
    if (ge) {
      t.bindTexture(r.TEXTURE_CUBE_MAP, Se.__webglTexture), He(r.TEXTURE_CUBE_MAP, P, Ge);
      for (let be = 0; be < 6; be++)
        if (c && P.mipmaps && P.mipmaps.length > 0)
          for (let Pe = 0; Pe < P.mipmaps.length; Pe++)
            Ve(ee.__webglFramebuffer[be][Pe], O, P, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + be, Pe);
        else
          Ve(ee.__webglFramebuffer[be], O, P, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + be, 0);
      C(P, Ge) && I(r.TEXTURE_CUBE_MAP), t.unbindTexture();
    } else if (xe) {
      const be = O.texture;
      for (let Pe = 0, tt = be.length; Pe < tt; Pe++) {
        const xt = be[Pe], Me = n.get(xt);
        t.bindTexture(r.TEXTURE_2D, Me.__webglTexture), He(r.TEXTURE_2D, xt, Ge), Ve(ee.__webglFramebuffer, O, xt, r.COLOR_ATTACHMENT0 + Pe, r.TEXTURE_2D, 0), C(xt, Ge) && I(r.TEXTURE_2D);
      }
      t.unbindTexture();
    } else {
      let be = r.TEXTURE_2D;
      if ((O.isWebGL3DRenderTarget || O.isWebGLArrayRenderTarget) && (c ? be = O.isWebGL3DRenderTarget ? r.TEXTURE_3D : r.TEXTURE_2D_ARRAY : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), t.bindTexture(be, Se.__webglTexture), He(be, P, Ge), c && P.mipmaps && P.mipmaps.length > 0)
        for (let Pe = 0; Pe < P.mipmaps.length; Pe++)
          Ve(ee.__webglFramebuffer[Pe], O, P, r.COLOR_ATTACHMENT0, be, Pe);
      else
        Ve(ee.__webglFramebuffer, O, P, r.COLOR_ATTACHMENT0, be, 0);
      C(P, Ge) && I(be), t.unbindTexture();
    }
    O.depthBuffer && he(O);
  }
  function Xe(O) {
    const P = b(O) || c, ee = O.isWebGLMultipleRenderTargets === !0 ? O.texture : [O.texture];
    for (let Se = 0, ge = ee.length; Se < ge; Se++) {
      const xe = ee[Se];
      if (C(xe, P)) {
        const Ge = O.isWebGLCubeRenderTarget ? r.TEXTURE_CUBE_MAP : r.TEXTURE_2D, be = n.get(xe).__webglTexture;
        t.bindTexture(Ge, be), I(Ge), t.unbindTexture();
      }
    }
  }
  function Ne(O) {
    if (c && O.samples > 0 && $e(O) === !1) {
      const P = O.isWebGLMultipleRenderTargets ? O.texture : [O.texture], ee = O.width, Se = O.height;
      let ge = r.COLOR_BUFFER_BIT;
      const xe = [], Ge = O.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, be = n.get(O), Pe = O.isWebGLMultipleRenderTargets === !0;
      if (Pe)
        for (let tt = 0; tt < P.length; tt++)
          t.bindFramebuffer(r.FRAMEBUFFER, be.__webglMultisampledFramebuffer), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + tt, r.RENDERBUFFER, null), t.bindFramebuffer(r.FRAMEBUFFER, be.__webglFramebuffer), r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + tt, r.TEXTURE_2D, null, 0);
      t.bindFramebuffer(r.READ_FRAMEBUFFER, be.__webglMultisampledFramebuffer), t.bindFramebuffer(r.DRAW_FRAMEBUFFER, be.__webglFramebuffer);
      for (let tt = 0; tt < P.length; tt++) {
        xe.push(r.COLOR_ATTACHMENT0 + tt), O.depthBuffer && xe.push(Ge);
        const xt = be.__ignoreDepthValues !== void 0 ? be.__ignoreDepthValues : !1;
        if (xt === !1 && (O.depthBuffer && (ge |= r.DEPTH_BUFFER_BIT), O.stencilBuffer && (ge |= r.STENCIL_BUFFER_BIT)), Pe && r.framebufferRenderbuffer(r.READ_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.RENDERBUFFER, be.__webglColorRenderbuffer[tt]), xt === !0 && (r.invalidateFramebuffer(r.READ_FRAMEBUFFER, [Ge]), r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, [Ge])), Pe) {
          const Me = n.get(P[tt]).__webglTexture;
          r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, Me, 0);
        }
        r.blitFramebuffer(0, 0, ee, Se, 0, 0, ee, Se, ge, r.NEAREST), v && r.invalidateFramebuffer(r.READ_FRAMEBUFFER, xe);
      }
      if (t.bindFramebuffer(r.READ_FRAMEBUFFER, null), t.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), Pe)
        for (let tt = 0; tt < P.length; tt++) {
          t.bindFramebuffer(r.FRAMEBUFFER, be.__webglMultisampledFramebuffer), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + tt, r.RENDERBUFFER, be.__webglColorRenderbuffer[tt]);
          const xt = n.get(P[tt]).__webglTexture;
          t.bindFramebuffer(r.FRAMEBUFFER, be.__webglFramebuffer), r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + tt, r.TEXTURE_2D, xt, 0);
        }
      t.bindFramebuffer(r.DRAW_FRAMEBUFFER, be.__webglMultisampledFramebuffer);
    }
  }
  function Oe(O) {
    return Math.min(p, O.samples);
  }
  function $e(O) {
    const P = n.get(O);
    return c && O.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && P.__useRenderToTexture !== !1;
  }
  function mt(O) {
    const P = l.render.frame;
    y.get(O) !== P && (y.set(O, P), O.update());
  }
  function Dt(O, P) {
    const ee = O.colorSpace, Se = O.format, ge = O.type;
    return O.isCompressedTexture === !0 || O.isVideoTexture === !0 || O.format === Xc || ee !== Bi && ee !== $n && (Lt.getTransfer(ee) === zt ? c === !1 ? e.has("EXT_sRGB") === !0 && Se === Cn ? (O.format = Xc, O.minFilter = Xt, O.generateMipmaps = !1) : P = bd.sRGBToLinear(P) : (Se !== Cn || ge !== Fi) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", ee)), P;
  }
  this.allocateTextureUnit = Y, this.resetTextureUnits = ie, this.setTexture2D = j, this.setTexture2DArray = k, this.setTexture3D = Q, this.setTextureCube = fe, this.rebindTextures = Ee, this.setupRenderTarget = de, this.updateRenderTargetMipmap = Xe, this.updateMultisampleRenderTarget = Ne, this.setupDepthRenderbuffer = he, this.setupFrameBufferTexture = Ve, this.useMultisampledRTT = $e;
}
function Wv(r, e, t) {
  const n = t.isWebGL2;
  function i(s, l = $n) {
    let c;
    const u = Lt.getTransfer(l);
    if (s === Fi)
      return r.UNSIGNED_BYTE;
    if (s === _d)
      return r.UNSIGNED_SHORT_4_4_4_4;
    if (s === yd)
      return r.UNSIGNED_SHORT_5_5_5_1;
    if (s === sv)
      return r.BYTE;
    if (s === ov)
      return r.SHORT;
    if (s === Qc)
      return r.UNSIGNED_SHORT;
    if (s === vd)
      return r.INT;
    if (s === ir)
      return r.UNSIGNED_INT;
    if (s === ei)
      return r.FLOAT;
    if (s === ms)
      return n ? r.HALF_FLOAT : (c = e.get("OES_texture_half_float"), c !== null ? c.HALF_FLOAT_OES : null);
    if (s === av)
      return r.ALPHA;
    if (s === Cn)
      return r.RGBA;
    if (s === lv)
      return r.LUMINANCE;
    if (s === cv)
      return r.LUMINANCE_ALPHA;
    if (s === Cr)
      return r.DEPTH_COMPONENT;
    if (s === gs)
      return r.DEPTH_STENCIL;
    if (s === Xc)
      return c = e.get("EXT_sRGB"), c !== null ? c.SRGB_ALPHA_EXT : null;
    if (s === uv)
      return r.RED;
    if (s === xd)
      return r.RED_INTEGER;
    if (s === hv)
      return r.RG;
    if (s === Sd)
      return r.RG_INTEGER;
    if (s === Md)
      return r.RGBA_INTEGER;
    if (s === Nc || s === Uc || s === Oc || s === Fc)
      if (u === zt)
        if (c = e.get("WEBGL_compressed_texture_s3tc_srgb"), c !== null) {
          if (s === Nc)
            return c.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (s === Uc)
            return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (s === Oc)
            return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (s === Fc)
            return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (c = e.get("WEBGL_compressed_texture_s3tc"), c !== null) {
        if (s === Nc)
          return c.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (s === Uc)
          return c.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (s === Oc)
          return c.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (s === Fc)
          return c.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (s === Af || s === Rf || s === Cf || s === Pf)
      if (c = e.get("WEBGL_compressed_texture_pvrtc"), c !== null) {
        if (s === Af)
          return c.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (s === Rf)
          return c.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (s === Cf)
          return c.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (s === Pf)
          return c.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (s === fv)
      return c = e.get("WEBGL_compressed_texture_etc1"), c !== null ? c.COMPRESSED_RGB_ETC1_WEBGL : null;
    if (s === Lf || s === If)
      if (c = e.get("WEBGL_compressed_texture_etc"), c !== null) {
        if (s === Lf)
          return u === zt ? c.COMPRESSED_SRGB8_ETC2 : c.COMPRESSED_RGB8_ETC2;
        if (s === If)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : c.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (s === Df || s === Nf || s === Uf || s === Of || s === Ff || s === zf || s === Bf || s === kf || s === Hf || s === Vf || s === Gf || s === Wf || s === Xf || s === Yf)
      if (c = e.get("WEBGL_compressed_texture_astc"), c !== null) {
        if (s === Df)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : c.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (s === Nf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : c.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (s === Uf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : c.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (s === Of)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : c.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (s === Ff)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : c.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (s === zf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : c.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (s === Bf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : c.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (s === kf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : c.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (s === Hf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : c.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (s === Vf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : c.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (s === Gf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : c.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (s === Wf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : c.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (s === Xf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : c.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (s === Yf)
          return u === zt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : c.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (s === zc || s === qf || s === jf)
      if (c = e.get("EXT_texture_compression_bptc"), c !== null) {
        if (s === zc)
          return u === zt ? c.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : c.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (s === qf)
          return c.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (s === jf)
          return c.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (s === dv || s === Zf || s === Jf || s === Kf)
      if (c = e.get("EXT_texture_compression_rgtc"), c !== null) {
        if (s === zc)
          return c.COMPRESSED_RED_RGTC1_EXT;
        if (s === Zf)
          return c.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (s === Jf)
          return c.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (s === Kf)
          return c.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return s === Rr ? n ? r.UNSIGNED_INT_24_8 : (c = e.get("WEBGL_depth_texture"), c !== null ? c.UNSIGNED_INT_24_8_WEBGL : null) : r[s] !== void 0 ? r[s] : null;
  }
  return { convert: i };
}
class Xv extends tn {
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.cameras = e;
  }
}
class po extends Rt {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const Qw = { type: "move" };
class Qh {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new po(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new po(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new D(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new D()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new po(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new D(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new D()), this._grip;
  }
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const n of e.hand.values())
          this._getHandJoint(t, n);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  update(e, t, n) {
    let i = null, s = null, l = null;
    const c = this._targetRay, u = this._grip, h = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (h && e.hand) {
        l = !0;
        for (const E of e.hand.values()) {
          const x = t.getJointPose(E, n), _ = this._getHandJoint(h, E);
          x !== null && (_.matrix.fromArray(x.transform.matrix), _.matrix.decompose(_.position, _.rotation, _.scale), _.matrixWorldNeedsUpdate = !0, _.jointRadius = x.radius), _.visible = x !== null;
        }
        const f = h.joints["index-finger-tip"], p = h.joints["thumb-tip"], m = f.position.distanceTo(p.position), v = 0.02, y = 5e-3;
        h.inputState.pinching && m > v + y ? (h.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !h.inputState.pinching && m <= v - y && (h.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        u !== null && e.gripSpace && (s = t.getPose(e.gripSpace, n), s !== null && (u.matrix.fromArray(s.transform.matrix), u.matrix.decompose(u.position, u.rotation, u.scale), u.matrixWorldNeedsUpdate = !0, s.linearVelocity ? (u.hasLinearVelocity = !0, u.linearVelocity.copy(s.linearVelocity)) : u.hasLinearVelocity = !1, s.angularVelocity ? (u.hasAngularVelocity = !0, u.angularVelocity.copy(s.angularVelocity)) : u.hasAngularVelocity = !1));
      c !== null && (i = t.getPose(e.targetRaySpace, n), i === null && s !== null && (i = s), i !== null && (c.matrix.fromArray(i.transform.matrix), c.matrix.decompose(c.position, c.rotation, c.scale), c.matrixWorldNeedsUpdate = !0, i.linearVelocity ? (c.hasLinearVelocity = !0, c.linearVelocity.copy(i.linearVelocity)) : c.hasLinearVelocity = !1, i.angularVelocity ? (c.hasAngularVelocity = !0, c.angularVelocity.copy(i.angularVelocity)) : c.hasAngularVelocity = !1, this.dispatchEvent(Qw)));
    }
    return c !== null && (c.visible = i !== null), u !== null && (u.visible = s !== null), h !== null && (h.visible = l !== null), this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new po();
      n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
    }
    return e.joints[t.jointName];
  }
}
class Dd extends nn {
  constructor(e, t, n, i, s, l, c, u, h, f) {
    if (f = f !== void 0 ? f : Cr, f !== Cr && f !== gs)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && f === Cr && (n = ir), n === void 0 && f === gs && (n = Rr), super(null, i, s, l, c, u, f, n, h), this.isDepthTexture = !0, this.image = { width: e, height: t }, this.magFilter = c !== void 0 ? c : Wt, this.minFilter = u !== void 0 ? u : Wt, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(e) {
    return super.copy(e), this.compareFunction = e.compareFunction, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
  }
}
class $w extends ur {
  constructor(e, t) {
    super();
    const n = this;
    let i = null, s = 1, l = null, c = "local-floor", u = 1, h = null, f = null, p = null, m = null, v = null, y = null;
    const E = t.getContextAttributes();
    let x = null, _ = null;
    const w = [], M = [], b = new tn();
    b.layers.enable(1), b.viewport = new It();
    const A = new tn();
    A.layers.enable(2), A.viewport = new It();
    const C = [b, A], I = new Xv();
    I.layers.enable(1), I.layers.enable(2);
    let z = null, R = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(k) {
      let Q = w[k];
      return Q === void 0 && (Q = new Qh(), w[k] = Q), Q.getTargetRaySpace();
    }, this.getControllerGrip = function(k) {
      let Q = w[k];
      return Q === void 0 && (Q = new Qh(), w[k] = Q), Q.getGripSpace();
    }, this.getHand = function(k) {
      let Q = w[k];
      return Q === void 0 && (Q = new Qh(), w[k] = Q), Q.getHandSpace();
    };
    function L(k) {
      const Q = M.indexOf(k.inputSource);
      if (Q === -1)
        return;
      const fe = w[Q];
      fe !== void 0 && (fe.update(k.inputSource, k.frame, h || l), fe.dispatchEvent({ type: k.type, data: k.inputSource }));
    }
    function H() {
      i.removeEventListener("select", L), i.removeEventListener("selectstart", L), i.removeEventListener("selectend", L), i.removeEventListener("squeeze", L), i.removeEventListener("squeezestart", L), i.removeEventListener("squeezeend", L), i.removeEventListener("end", H), i.removeEventListener("inputsourceschange", te);
      for (let k = 0; k < w.length; k++) {
        const Q = M[k];
        Q !== null && (M[k] = null, w[k].disconnect(Q));
      }
      z = null, R = null, e.setRenderTarget(x), v = null, m = null, p = null, i = null, _ = null, j.stop(), n.isPresenting = !1, n.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(k) {
      s = k, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(k) {
      c = k, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return h || l;
    }, this.setReferenceSpace = function(k) {
      h = k;
    }, this.getBaseLayer = function() {
      return m !== null ? m : v;
    }, this.getBinding = function() {
      return p;
    }, this.getFrame = function() {
      return y;
    }, this.getSession = function() {
      return i;
    }, this.setSession = async function(k) {
      if (i = k, i !== null) {
        if (x = e.getRenderTarget(), i.addEventListener("select", L), i.addEventListener("selectstart", L), i.addEventListener("selectend", L), i.addEventListener("squeeze", L), i.addEventListener("squeezestart", L), i.addEventListener("squeezeend", L), i.addEventListener("end", H), i.addEventListener("inputsourceschange", te), E.xrCompatible !== !0 && await t.makeXRCompatible(), i.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1) {
          const Q = {
            antialias: i.renderState.layers === void 0 ? E.antialias : !0,
            alpha: !0,
            depth: E.depth,
            stencil: E.stencil,
            framebufferScaleFactor: s
          };
          v = new XRWebGLLayer(i, t, Q), i.updateRenderState({ baseLayer: v }), _ = new hi(
            v.framebufferWidth,
            v.framebufferHeight,
            {
              format: Cn,
              type: Fi,
              colorSpace: e.outputColorSpace,
              stencilBuffer: E.stencil
            }
          );
        } else {
          let Q = null, fe = null, Te = null;
          E.depth && (Te = E.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, Q = E.stencil ? gs : Cr, fe = E.stencil ? Rr : ir);
          const Ae = {
            colorFormat: t.RGBA8,
            depthFormat: Te,
            scaleFactor: s
          };
          p = new XRWebGLBinding(i, t), m = p.createProjectionLayer(Ae), i.updateRenderState({ layers: [m] }), _ = new hi(
            m.textureWidth,
            m.textureHeight,
            {
              format: Cn,
              type: Fi,
              depthTexture: new Dd(m.textureWidth, m.textureHeight, fe, void 0, void 0, void 0, void 0, void 0, void 0, Q),
              stencilBuffer: E.stencil,
              colorSpace: e.outputColorSpace,
              samples: E.antialias ? 4 : 0
            }
          );
          const ke = e.properties.get(_);
          ke.__ignoreDepthValues = m.ignoreDepthValues;
        }
        _.isXRRenderTarget = !0, this.setFoveation(u), h = null, l = await i.requestReferenceSpace(c), j.setContext(i), j.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (i !== null)
        return i.environmentBlendMode;
    };
    function te(k) {
      for (let Q = 0; Q < k.removed.length; Q++) {
        const fe = k.removed[Q], Te = M.indexOf(fe);
        Te >= 0 && (M[Te] = null, w[Te].disconnect(fe));
      }
      for (let Q = 0; Q < k.added.length; Q++) {
        const fe = k.added[Q];
        let Te = M.indexOf(fe);
        if (Te === -1) {
          for (let ke = 0; ke < w.length; ke++)
            if (ke >= M.length) {
              M.push(fe), Te = ke;
              break;
            } else if (M[ke] === null) {
              M[ke] = fe, Te = ke;
              break;
            }
          if (Te === -1)
            break;
        }
        const Ae = w[Te];
        Ae && Ae.connect(fe);
      }
    }
    const se = new D(), G = new D();
    function $(k, Q, fe) {
      se.setFromMatrixPosition(Q.matrixWorld), G.setFromMatrixPosition(fe.matrixWorld);
      const Te = se.distanceTo(G), Ae = Q.projectionMatrix.elements, ke = fe.projectionMatrix.elements, He = Ae[14] / (Ae[10] - 1), je = Ae[14] / (Ae[10] + 1), yt = (Ae[9] + 1) / Ae[5], Ct = (Ae[9] - 1) / Ae[5], Ve = (Ae[8] - 1) / Ae[0], B = (ke[8] + 1) / ke[0], ve = He * Ve, he = He * B, Ee = Te / (-Ve + B), de = Ee * -Ve;
      Q.matrixWorld.decompose(k.position, k.quaternion, k.scale), k.translateX(de), k.translateZ(Ee), k.matrixWorld.compose(k.position, k.quaternion, k.scale), k.matrixWorldInverse.copy(k.matrixWorld).invert();
      const Xe = He + Ee, Ne = je + Ee, Oe = ve - de, $e = he + (Te - de), mt = yt * je / Ne * Xe, Dt = Ct * je / Ne * Xe;
      k.projectionMatrix.makePerspective(Oe, $e, mt, Dt, Xe, Ne), k.projectionMatrixInverse.copy(k.projectionMatrix).invert();
    }
    function oe(k, Q) {
      Q === null ? k.matrixWorld.copy(k.matrix) : k.matrixWorld.multiplyMatrices(Q.matrixWorld, k.matrix), k.matrixWorldInverse.copy(k.matrixWorld).invert();
    }
    this.updateCamera = function(k) {
      if (i === null)
        return;
      I.near = A.near = b.near = k.near, I.far = A.far = b.far = k.far, (z !== I.near || R !== I.far) && (i.updateRenderState({
        depthNear: I.near,
        depthFar: I.far
      }), z = I.near, R = I.far);
      const Q = k.parent, fe = I.cameras;
      oe(I, Q);
      for (let Te = 0; Te < fe.length; Te++)
        oe(fe[Te], Q);
      fe.length === 2 ? $(I, b, A) : I.projectionMatrix.copy(b.projectionMatrix), ie(k, I, Q);
    };
    function ie(k, Q, fe) {
      fe === null ? k.matrix.copy(Q.matrixWorld) : (k.matrix.copy(fe.matrixWorld), k.matrix.invert(), k.matrix.multiply(Q.matrixWorld)), k.matrix.decompose(k.position, k.quaternion, k.scale), k.updateMatrixWorld(!0), k.projectionMatrix.copy(Q.projectionMatrix), k.projectionMatrixInverse.copy(Q.projectionMatrixInverse), k.isPerspectiveCamera && (k.fov = _o * 2 * Math.atan(1 / k.projectionMatrix.elements[5]), k.zoom = 1);
    }
    this.getCamera = function() {
      return I;
    }, this.getFoveation = function() {
      if (!(m === null && v === null))
        return u;
    }, this.setFoveation = function(k) {
      u = k, m !== null && (m.fixedFoveation = k), v !== null && v.fixedFoveation !== void 0 && (v.fixedFoveation = k);
    };
    let Y = null;
    function q(k, Q) {
      if (f = Q.getViewerPose(h || l), y = Q, f !== null) {
        const fe = f.views;
        v !== null && (e.setRenderTargetFramebuffer(_, v.framebuffer), e.setRenderTarget(_));
        let Te = !1;
        fe.length !== I.cameras.length && (I.cameras.length = 0, Te = !0);
        for (let Ae = 0; Ae < fe.length; Ae++) {
          const ke = fe[Ae];
          let He = null;
          if (v !== null)
            He = v.getViewport(ke);
          else {
            const yt = p.getViewSubImage(m, ke);
            He = yt.viewport, Ae === 0 && (e.setRenderTargetTextures(
              _,
              yt.colorTexture,
              m.ignoreDepthValues ? void 0 : yt.depthStencilTexture
            ), e.setRenderTarget(_));
          }
          let je = C[Ae];
          je === void 0 && (je = new tn(), je.layers.enable(Ae), je.viewport = new It(), C[Ae] = je), je.matrix.fromArray(ke.transform.matrix), je.matrix.decompose(je.position, je.quaternion, je.scale), je.projectionMatrix.fromArray(ke.projectionMatrix), je.projectionMatrixInverse.copy(je.projectionMatrix).invert(), je.viewport.set(He.x, He.y, He.width, He.height), Ae === 0 && (I.matrix.copy(je.matrix), I.matrix.decompose(I.position, I.quaternion, I.scale)), Te === !0 && I.cameras.push(je);
        }
      }
      for (let fe = 0; fe < w.length; fe++) {
        const Te = M[fe], Ae = w[fe];
        Te !== null && Ae !== void 0 && Ae.update(Te, Q, h || l);
      }
      Y && Y(k, Q), Q.detectedPlanes && n.dispatchEvent({ type: "planesdetected", data: Q }), y = null;
    }
    const j = new Bv();
    j.setAnimationLoop(q), this.setAnimationLoop = function(k) {
      Y = k;
    }, this.dispose = function() {
    };
  }
}
function eT(r, e) {
  function t(x, _) {
    x.matrixAutoUpdate === !0 && x.updateMatrix(), _.value.copy(x.matrix);
  }
  function n(x, _) {
    _.color.getRGB(x.fogColor.value, Uv(r)), _.isFog ? (x.fogNear.value = _.near, x.fogFar.value = _.far) : _.isFogExp2 && (x.fogDensity.value = _.density);
  }
  function i(x, _, w, M, b) {
    _.isMeshBasicMaterial || _.isMeshLambertMaterial ? s(x, _) : _.isMeshToonMaterial ? (s(x, _), p(x, _)) : _.isMeshPhongMaterial ? (s(x, _), f(x, _)) : _.isMeshStandardMaterial ? (s(x, _), m(x, _), _.isMeshPhysicalMaterial && v(x, _, b)) : _.isMeshMatcapMaterial ? (s(x, _), y(x, _)) : _.isMeshDepthMaterial ? s(x, _) : _.isMeshDistanceMaterial ? (s(x, _), E(x, _)) : _.isMeshNormalMaterial ? s(x, _) : _.isLineBasicMaterial ? (l(x, _), _.isLineDashedMaterial && c(x, _)) : _.isPointsMaterial ? u(x, _, w, M) : _.isSpriteMaterial ? h(x, _) : _.isShadowMaterial ? (x.color.value.copy(_.color), x.opacity.value = _.opacity) : _.isShaderMaterial && (_.uniformsNeedUpdate = !1);
  }
  function s(x, _) {
    x.opacity.value = _.opacity, _.color && x.diffuse.value.copy(_.color), _.emissive && x.emissive.value.copy(_.emissive).multiplyScalar(_.emissiveIntensity), _.map && (x.map.value = _.map, t(_.map, x.mapTransform)), _.alphaMap && (x.alphaMap.value = _.alphaMap, t(_.alphaMap, x.alphaMapTransform)), _.bumpMap && (x.bumpMap.value = _.bumpMap, t(_.bumpMap, x.bumpMapTransform), x.bumpScale.value = _.bumpScale, _.side === On && (x.bumpScale.value *= -1)), _.normalMap && (x.normalMap.value = _.normalMap, t(_.normalMap, x.normalMapTransform), x.normalScale.value.copy(_.normalScale), _.side === On && x.normalScale.value.negate()), _.displacementMap && (x.displacementMap.value = _.displacementMap, t(_.displacementMap, x.displacementMapTransform), x.displacementScale.value = _.displacementScale, x.displacementBias.value = _.displacementBias), _.emissiveMap && (x.emissiveMap.value = _.emissiveMap, t(_.emissiveMap, x.emissiveMapTransform)), _.specularMap && (x.specularMap.value = _.specularMap, t(_.specularMap, x.specularMapTransform)), _.alphaTest > 0 && (x.alphaTest.value = _.alphaTest);
    const w = e.get(_).envMap;
    if (w && (x.envMap.value = w, x.flipEnvMap.value = w.isCubeTexture && w.isRenderTargetTexture === !1 ? -1 : 1, x.reflectivity.value = _.reflectivity, x.ior.value = _.ior, x.refractionRatio.value = _.refractionRatio), _.lightMap) {
      x.lightMap.value = _.lightMap;
      const M = r._useLegacyLights === !0 ? Math.PI : 1;
      x.lightMapIntensity.value = _.lightMapIntensity * M, t(_.lightMap, x.lightMapTransform);
    }
    _.aoMap && (x.aoMap.value = _.aoMap, x.aoMapIntensity.value = _.aoMapIntensity, t(_.aoMap, x.aoMapTransform));
  }
  function l(x, _) {
    x.diffuse.value.copy(_.color), x.opacity.value = _.opacity, _.map && (x.map.value = _.map, t(_.map, x.mapTransform));
  }
  function c(x, _) {
    x.dashSize.value = _.dashSize, x.totalSize.value = _.dashSize + _.gapSize, x.scale.value = _.scale;
  }
  function u(x, _, w, M) {
    x.diffuse.value.copy(_.color), x.opacity.value = _.opacity, x.size.value = _.size * w, x.scale.value = M * 0.5, _.map && (x.map.value = _.map, t(_.map, x.uvTransform)), _.alphaMap && (x.alphaMap.value = _.alphaMap, t(_.alphaMap, x.alphaMapTransform)), _.alphaTest > 0 && (x.alphaTest.value = _.alphaTest);
  }
  function h(x, _) {
    x.diffuse.value.copy(_.color), x.opacity.value = _.opacity, x.rotation.value = _.rotation, _.map && (x.map.value = _.map, t(_.map, x.mapTransform)), _.alphaMap && (x.alphaMap.value = _.alphaMap, t(_.alphaMap, x.alphaMapTransform)), _.alphaTest > 0 && (x.alphaTest.value = _.alphaTest);
  }
  function f(x, _) {
    x.specular.value.copy(_.specular), x.shininess.value = Math.max(_.shininess, 1e-4);
  }
  function p(x, _) {
    _.gradientMap && (x.gradientMap.value = _.gradientMap);
  }
  function m(x, _) {
    x.metalness.value = _.metalness, _.metalnessMap && (x.metalnessMap.value = _.metalnessMap, t(_.metalnessMap, x.metalnessMapTransform)), x.roughness.value = _.roughness, _.roughnessMap && (x.roughnessMap.value = _.roughnessMap, t(_.roughnessMap, x.roughnessMapTransform)), e.get(_).envMap && (x.envMapIntensity.value = _.envMapIntensity);
  }
  function v(x, _, w) {
    x.ior.value = _.ior, _.sheen > 0 && (x.sheenColor.value.copy(_.sheenColor).multiplyScalar(_.sheen), x.sheenRoughness.value = _.sheenRoughness, _.sheenColorMap && (x.sheenColorMap.value = _.sheenColorMap, t(_.sheenColorMap, x.sheenColorMapTransform)), _.sheenRoughnessMap && (x.sheenRoughnessMap.value = _.sheenRoughnessMap, t(_.sheenRoughnessMap, x.sheenRoughnessMapTransform))), _.clearcoat > 0 && (x.clearcoat.value = _.clearcoat, x.clearcoatRoughness.value = _.clearcoatRoughness, _.clearcoatMap && (x.clearcoatMap.value = _.clearcoatMap, t(_.clearcoatMap, x.clearcoatMapTransform)), _.clearcoatRoughnessMap && (x.clearcoatRoughnessMap.value = _.clearcoatRoughnessMap, t(_.clearcoatRoughnessMap, x.clearcoatRoughnessMapTransform)), _.clearcoatNormalMap && (x.clearcoatNormalMap.value = _.clearcoatNormalMap, t(_.clearcoatNormalMap, x.clearcoatNormalMapTransform), x.clearcoatNormalScale.value.copy(_.clearcoatNormalScale), _.side === On && x.clearcoatNormalScale.value.negate())), _.iridescence > 0 && (x.iridescence.value = _.iridescence, x.iridescenceIOR.value = _.iridescenceIOR, x.iridescenceThicknessMinimum.value = _.iridescenceThicknessRange[0], x.iridescenceThicknessMaximum.value = _.iridescenceThicknessRange[1], _.iridescenceMap && (x.iridescenceMap.value = _.iridescenceMap, t(_.iridescenceMap, x.iridescenceMapTransform)), _.iridescenceThicknessMap && (x.iridescenceThicknessMap.value = _.iridescenceThicknessMap, t(_.iridescenceThicknessMap, x.iridescenceThicknessMapTransform))), _.transmission > 0 && (x.transmission.value = _.transmission, x.transmissionSamplerMap.value = w.texture, x.transmissionSamplerSize.value.set(w.width, w.height), _.transmissionMap && (x.transmissionMap.value = _.transmissionMap, t(_.transmissionMap, x.transmissionMapTransform)), x.thickness.value = _.thickness, _.thicknessMap && (x.thicknessMap.value = _.thicknessMap, t(_.thicknessMap, x.thicknessMapTransform)), x.attenuationDistance.value = _.attenuationDistance, x.attenuationColor.value.copy(_.attenuationColor)), _.anisotropy > 0 && (x.anisotropyVector.value.set(_.anisotropy * Math.cos(_.anisotropyRotation), _.anisotropy * Math.sin(_.anisotropyRotation)), _.anisotropyMap && (x.anisotropyMap.value = _.anisotropyMap, t(_.anisotropyMap, x.anisotropyMapTransform))), x.specularIntensity.value = _.specularIntensity, x.specularColor.value.copy(_.specularColor), _.specularColorMap && (x.specularColorMap.value = _.specularColorMap, t(_.specularColorMap, x.specularColorMapTransform)), _.specularIntensityMap && (x.specularIntensityMap.value = _.specularIntensityMap, t(_.specularIntensityMap, x.specularIntensityMapTransform));
  }
  function y(x, _) {
    _.matcap && (x.matcap.value = _.matcap);
  }
  function E(x, _) {
    const w = e.get(_).light;
    x.referencePosition.value.setFromMatrixPosition(w.matrixWorld), x.nearDistance.value = w.shadow.camera.near, x.farDistance.value = w.shadow.camera.far;
  }
  return {
    refreshFogUniforms: n,
    refreshMaterialUniforms: i
  };
}
function tT(r, e, t, n) {
  let i = {}, s = {}, l = [];
  const c = t.isWebGL2 ? r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
  function u(w, M) {
    const b = M.program;
    n.uniformBlockBinding(w, b);
  }
  function h(w, M) {
    let b = i[w.id];
    b === void 0 && (y(w), b = f(w), i[w.id] = b, w.addEventListener("dispose", x));
    const A = M.program;
    n.updateUBOMapping(w, A);
    const C = e.render.frame;
    s[w.id] !== C && (m(w), s[w.id] = C);
  }
  function f(w) {
    const M = p();
    w.__bindingPointIndex = M;
    const b = r.createBuffer(), A = w.__size, C = w.usage;
    return r.bindBuffer(r.UNIFORM_BUFFER, b), r.bufferData(r.UNIFORM_BUFFER, A, C), r.bindBuffer(r.UNIFORM_BUFFER, null), r.bindBufferBase(r.UNIFORM_BUFFER, M, b), b;
  }
  function p() {
    for (let w = 0; w < c; w++)
      if (l.indexOf(w) === -1)
        return l.push(w), w;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function m(w) {
    const M = i[w.id], b = w.uniforms, A = w.__cache;
    r.bindBuffer(r.UNIFORM_BUFFER, M);
    for (let C = 0, I = b.length; C < I; C++) {
      const z = b[C];
      if (v(z, C, A) === !0) {
        const R = z.__offset, L = Array.isArray(z.value) ? z.value : [z.value];
        let H = 0;
        for (let te = 0; te < L.length; te++) {
          const se = L[te], G = E(se);
          typeof se == "number" ? (z.__data[0] = se, r.bufferSubData(r.UNIFORM_BUFFER, R + H, z.__data)) : se.isMatrix3 ? (z.__data[0] = se.elements[0], z.__data[1] = se.elements[1], z.__data[2] = se.elements[2], z.__data[3] = se.elements[0], z.__data[4] = se.elements[3], z.__data[5] = se.elements[4], z.__data[6] = se.elements[5], z.__data[7] = se.elements[0], z.__data[8] = se.elements[6], z.__data[9] = se.elements[7], z.__data[10] = se.elements[8], z.__data[11] = se.elements[0]) : (se.toArray(z.__data, H), H += G.storage / Float32Array.BYTES_PER_ELEMENT);
        }
        r.bufferSubData(r.UNIFORM_BUFFER, R, z.__data);
      }
    }
    r.bindBuffer(r.UNIFORM_BUFFER, null);
  }
  function v(w, M, b) {
    const A = w.value;
    if (b[M] === void 0) {
      if (typeof A == "number")
        b[M] = A;
      else {
        const C = Array.isArray(A) ? A : [A], I = [];
        for (let z = 0; z < C.length; z++)
          I.push(C[z].clone());
        b[M] = I;
      }
      return !0;
    } else if (typeof A == "number") {
      if (b[M] !== A)
        return b[M] = A, !0;
    } else {
      const C = Array.isArray(b[M]) ? b[M] : [b[M]], I = Array.isArray(A) ? A : [A];
      for (let z = 0; z < C.length; z++) {
        const R = C[z];
        if (R.equals(I[z]) === !1)
          return R.copy(I[z]), !0;
      }
    }
    return !1;
  }
  function y(w) {
    const M = w.uniforms;
    let b = 0;
    const A = 16;
    let C = 0;
    for (let I = 0, z = M.length; I < z; I++) {
      const R = M[I], L = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      }, H = Array.isArray(R.value) ? R.value : [R.value];
      for (let te = 0, se = H.length; te < se; te++) {
        const G = H[te], $ = E(G);
        L.boundary += $.boundary, L.storage += $.storage;
      }
      if (R.__data = new Float32Array(L.storage / Float32Array.BYTES_PER_ELEMENT), R.__offset = b, I > 0) {
        C = b % A;
        const te = A - C;
        C !== 0 && te - L.boundary < 0 && (b += A - C, R.__offset = b);
      }
      b += L.storage;
    }
    return C = b % A, C > 0 && (b += A - C), w.__size = b, w.__cache = {}, this;
  }
  function E(w) {
    const M = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof w == "number" ? (M.boundary = 4, M.storage = 4) : w.isVector2 ? (M.boundary = 8, M.storage = 8) : w.isVector3 || w.isColor ? (M.boundary = 16, M.storage = 12) : w.isVector4 ? (M.boundary = 16, M.storage = 16) : w.isMatrix3 ? (M.boundary = 48, M.storage = 48) : w.isMatrix4 ? (M.boundary = 64, M.storage = 64) : w.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", w), M;
  }
  function x(w) {
    const M = w.target;
    M.removeEventListener("dispose", x);
    const b = l.indexOf(M.__bindingPointIndex);
    l.splice(b, 1), r.deleteBuffer(i[M.id]), delete i[M.id], delete s[M.id];
  }
  function _() {
    for (const w in i)
      r.deleteBuffer(i[w]);
    l = [], i = {}, s = {};
  }
  return {
    bind: u,
    update: h,
    dispose: _
  };
}
class Nd {
  constructor(e = {}) {
    const {
      canvas: t = Iv(),
      context: n = null,
      depth: i = !0,
      stencil: s = !0,
      alpha: l = !1,
      antialias: c = !1,
      premultipliedAlpha: u = !0,
      preserveDrawingBuffer: h = !1,
      powerPreference: f = "default",
      failIfMajorPerformanceCaveat: p = !1
    } = e;
    this.isWebGLRenderer = !0;
    let m;
    n !== null ? m = n.getContextAttributes().alpha : m = l;
    const v = new Uint32Array(4), y = new Int32Array(4);
    let E = null, x = null;
    const _ = [], w = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = hn, this._useLegacyLights = !1, this.toneMapping = Oi, this.toneMappingExposure = 1;
    const M = this;
    let b = !1, A = 0, C = 0, I = null, z = -1, R = null;
    const L = new It(), H = new It();
    let te = null;
    const se = new Fe(0);
    let G = 0, $ = t.width, oe = t.height, ie = 1, Y = null, q = null;
    const j = new It(0, 0, $, oe), k = new It(0, 0, $, oe);
    let Q = !1;
    const fe = new nu();
    let Te = !1, Ae = !1, ke = null;
    const He = new ut(), je = new ue(), yt = new D(), Ct = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    function Ve() {
      return I === null ? ie : 1;
    }
    let B = n;
    function ve(N, Z) {
      for (let le = 0; le < N.length; le++) {
        const K = N[le], ce = t.getContext(K, Z);
        if (ce !== null)
          return ce;
      }
      return null;
    }
    try {
      const N = {
        alpha: !0,
        depth: i,
        stencil: s,
        antialias: c,
        premultipliedAlpha: u,
        preserveDrawingBuffer: h,
        powerPreference: f,
        failIfMajorPerformanceCaveat: p
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${Zc}`), t.addEventListener("webglcontextlost", me, !1), t.addEventListener("webglcontextrestored", ye, !1), t.addEventListener("webglcontextcreationerror", Ce, !1), B === null) {
        const Z = ["webgl2", "webgl", "experimental-webgl"];
        if (M.isWebGL1Renderer === !0 && Z.shift(), B = ve(Z, N), B === null)
          throw ve(Z) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
      typeof WebGLRenderingContext < "u" && B instanceof WebGLRenderingContext && console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."), B.getShaderPrecisionFormat === void 0 && (B.getShaderPrecisionFormat = function() {
        return { rangeMin: 1, rangeMax: 1, precision: 1 };
      });
    } catch (N) {
      throw console.error("THREE.WebGLRenderer: " + N.message), N;
    }
    let he, Ee, de, Xe, Ne, Oe, $e, mt, Dt, O, P, ee, Se, ge, xe, Ge, be, Pe, tt, xt, Me, St, V, ae;
    function _e() {
      he = new vE(B), Ee = new hE(B, he, e), he.init(Ee), St = new Wv(B, he, Ee), de = new Jw(B, he, Ee), Xe = new xE(B), Ne = new zw(), Oe = new Kw(B, he, de, Ne, Ee, St, Xe), $e = new dE(M), mt = new gE(M), Dt = new PS(B, Ee), V = new cE(B, he, Dt, Ee), O = new _E(B, Dt, Xe, V), P = new wE(B, O, Dt, Xe), tt = new EE(B, Ee, Oe), Ge = new fE(Ne), ee = new Fw(M, $e, mt, he, Ee, V, Ge), Se = new eT(M, Ne), ge = new kw(), xe = new Yw(he, Ee), Pe = new lE(M, $e, mt, de, P, m, u), be = new Zw(M, P, Ee), ae = new tT(B, Xe, Ee, de), xt = new uE(B, he, Xe, Ee), Me = new yE(B, he, Xe, Ee), Xe.programs = ee.programs, M.capabilities = Ee, M.extensions = he, M.properties = Ne, M.renderLists = ge, M.shadowMap = be, M.state = de, M.info = Xe;
    }
    _e();
    const F = new $w(M, B);
    this.xr = F, this.getContext = function() {
      return B;
    }, this.getContextAttributes = function() {
      return B.getContextAttributes();
    }, this.forceContextLoss = function() {
      const N = he.get("WEBGL_lose_context");
      N && N.loseContext();
    }, this.forceContextRestore = function() {
      const N = he.get("WEBGL_lose_context");
      N && N.restoreContext();
    }, this.getPixelRatio = function() {
      return ie;
    }, this.setPixelRatio = function(N) {
      N !== void 0 && (ie = N, this.setSize($, oe, !1));
    }, this.getSize = function(N) {
      return N.set($, oe);
    }, this.setSize = function(N, Z, le = !0) {
      if (F.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      $ = N, oe = Z, t.width = Math.floor(N * ie), t.height = Math.floor(Z * ie), le === !0 && (t.style.width = N + "px", t.style.height = Z + "px"), this.setViewport(0, 0, N, Z);
    }, this.getDrawingBufferSize = function(N) {
      return N.set($ * ie, oe * ie).floor();
    }, this.setDrawingBufferSize = function(N, Z, le) {
      $ = N, oe = Z, ie = le, t.width = Math.floor(N * le), t.height = Math.floor(Z * le), this.setViewport(0, 0, N, Z);
    }, this.getCurrentViewport = function(N) {
      return N.copy(L);
    }, this.getViewport = function(N) {
      return N.copy(j);
    }, this.setViewport = function(N, Z, le, K) {
      N.isVector4 ? j.set(N.x, N.y, N.z, N.w) : j.set(N, Z, le, K), de.viewport(L.copy(j).multiplyScalar(ie).floor());
    }, this.getScissor = function(N) {
      return N.copy(k);
    }, this.setScissor = function(N, Z, le, K) {
      N.isVector4 ? k.set(N.x, N.y, N.z, N.w) : k.set(N, Z, le, K), de.scissor(H.copy(k).multiplyScalar(ie).floor());
    }, this.getScissorTest = function() {
      return Q;
    }, this.setScissorTest = function(N) {
      de.setScissorTest(Q = N);
    }, this.setOpaqueSort = function(N) {
      Y = N;
    }, this.setTransparentSort = function(N) {
      q = N;
    }, this.getClearColor = function(N) {
      return N.copy(Pe.getClearColor());
    }, this.setClearColor = function() {
      Pe.setClearColor.apply(Pe, arguments);
    }, this.getClearAlpha = function() {
      return Pe.getClearAlpha();
    }, this.setClearAlpha = function() {
      Pe.setClearAlpha.apply(Pe, arguments);
    }, this.clear = function(N = !0, Z = !0, le = !0) {
      let K = 0;
      if (N) {
        let ce = !1;
        if (I !== null) {
          const ze = I.texture.format;
          ce = ze === Md || ze === Sd || ze === xd;
        }
        if (ce) {
          const ze = I.texture.type, Je = ze === Fi || ze === ir || ze === Qc || ze === Rr || ze === _d || ze === yd, it = Pe.getClearColor(), rt = Pe.getClearAlpha(), gt = it.r, et = it.g, ot = it.b;
          Je ? (v[0] = gt, v[1] = et, v[2] = ot, v[3] = rt, B.clearBufferuiv(B.COLOR, 0, v)) : (y[0] = gt, y[1] = et, y[2] = ot, y[3] = rt, B.clearBufferiv(B.COLOR, 0, y));
        } else
          K |= B.COLOR_BUFFER_BIT;
      }
      Z && (K |= B.DEPTH_BUFFER_BIT), le && (K |= B.STENCIL_BUFFER_BIT), B.clear(K);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", me, !1), t.removeEventListener("webglcontextrestored", ye, !1), t.removeEventListener("webglcontextcreationerror", Ce, !1), ge.dispose(), xe.dispose(), Ne.dispose(), $e.dispose(), mt.dispose(), P.dispose(), V.dispose(), ae.dispose(), ee.dispose(), F.dispose(), F.removeEventListener("sessionstart", Mt), F.removeEventListener("sessionend", ln), ke && (ke.dispose(), ke = null), qt.stop();
    };
    function me(N) {
      N.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), b = !0;
    }
    function ye() {
      console.log("THREE.WebGLRenderer: Context Restored."), b = !1;
      const N = Xe.autoReset, Z = be.enabled, le = be.autoUpdate, K = be.needsUpdate, ce = be.type;
      _e(), Xe.autoReset = N, be.enabled = Z, be.autoUpdate = le, be.needsUpdate = K, be.type = ce;
    }
    function Ce(N) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", N.statusMessage);
    }
    function Le(N) {
      const Z = N.target;
      Z.removeEventListener("dispose", Le), pe(Z);
    }
    function pe(N) {
      Ue(N), Ne.remove(N);
    }
    function Ue(N) {
      const Z = Ne.get(N).programs;
      Z !== void 0 && (Z.forEach(function(le) {
        ee.releaseProgram(le);
      }), N.isShaderMaterial && ee.releaseShaderCache(N));
    }
    this.renderBufferDirect = function(N, Z, le, K, ce, ze) {
      Z === null && (Z = Ct);
      const Je = ce.isMesh && ce.matrixWorld.determinant() < 0, it = Tu(N, Z, le, K, ce);
      de.setMaterial(K, Je);
      let rt = le.index, gt = 1;
      if (K.wireframe === !0) {
        if (rt = O.getWireframeAttribute(le), rt === void 0)
          return;
        gt = 2;
      }
      const et = le.drawRange, ot = le.attributes.position;
      let Ft = et.start * gt, Bt = (et.start + et.count) * gt;
      ze !== null && (Ft = Math.max(Ft, ze.start * gt), Bt = Math.min(Bt, (ze.start + ze.count) * gt)), rt !== null ? (Ft = Math.max(Ft, 0), Bt = Math.min(Bt, rt.count)) : ot != null && (Ft = Math.max(Ft, 0), Bt = Math.min(Bt, ot.count));
      const zn = Bt - Ft;
      if (zn < 0 || zn === 1 / 0)
        return;
      V.setup(ce, K, it, le, rt);
      let Yn, Nt = xt;
      if (rt !== null && (Yn = Dt.get(rt), Nt = Me, Nt.setIndex(Yn)), ce.isMesh)
        K.wireframe === !0 ? (de.setLineWidth(K.wireframeLinewidth * Ve()), Nt.setMode(B.LINES)) : Nt.setMode(B.TRIANGLES);
      else if (ce.isLine) {
        let at = K.linewidth;
        at === void 0 && (at = 1), de.setLineWidth(at * Ve()), ce.isLineSegments ? Nt.setMode(B.LINES) : ce.isLineLoop ? Nt.setMode(B.LINE_LOOP) : Nt.setMode(B.LINE_STRIP);
      } else
        ce.isPoints ? Nt.setMode(B.POINTS) : ce.isSprite && Nt.setMode(B.TRIANGLES);
      if (ce.isInstancedMesh)
        Nt.renderInstances(Ft, zn, ce.count);
      else if (le.isInstancedBufferGeometry) {
        const at = le._maxInstanceCount !== void 0 ? le._maxInstanceCount : 1 / 0, Pt = Math.min(le.instanceCount, at);
        Nt.renderInstances(Ft, zn, Pt);
      } else
        Nt.render(Ft, zn);
    }, this.compile = function(N, Z) {
      function le(K, ce, ze) {
        K.transparent === !0 && K.side === Ni && K.forceSinglePass === !1 ? (K.side = On, K.needsUpdate = !0, bi(K, ce, ze), K.side = ar, K.needsUpdate = !0, bi(K, ce, ze), K.side = Ni) : bi(K, ce, ze);
      }
      x = xe.get(N), x.init(), w.push(x), N.traverseVisible(function(K) {
        K.isLight && K.layers.test(Z.layers) && (x.pushLight(K), K.castShadow && x.pushShadow(K));
      }), x.setupLights(M._useLegacyLights), N.traverse(function(K) {
        const ce = K.material;
        if (ce)
          if (Array.isArray(ce))
            for (let ze = 0; ze < ce.length; ze++) {
              const Je = ce[ze];
              le(Je, N, K);
            }
          else
            le(ce, N, K);
      }), w.pop(), x = null;
    };
    let Ze = null;
    function Ht(N) {
      Ze && Ze(N);
    }
    function Mt() {
      qt.stop();
    }
    function ln() {
      qt.start();
    }
    const qt = new Bv();
    qt.setAnimationLoop(Ht), typeof self < "u" && qt.setContext(self), this.setAnimationLoop = function(N) {
      Ze = N, F.setAnimationLoop(N), N === null ? qt.stop() : qt.start();
    }, F.addEventListener("sessionstart", Mt), F.addEventListener("sessionend", ln), this.render = function(N, Z) {
      if (Z !== void 0 && Z.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (b === !0)
        return;
      N.matrixWorldAutoUpdate === !0 && N.updateMatrixWorld(), Z.parent === null && Z.matrixWorldAutoUpdate === !0 && Z.updateMatrixWorld(), F.enabled === !0 && F.isPresenting === !0 && (F.cameraAutoUpdate === !0 && F.updateCamera(Z), Z = F.getCamera()), N.isScene === !0 && N.onBeforeRender(M, N, Z, I), x = xe.get(N, w.length), x.init(), w.push(x), He.multiplyMatrices(Z.projectionMatrix, Z.matrixWorldInverse), fe.setFromProjectionMatrix(He), Ae = this.localClippingEnabled, Te = Ge.init(this.clippingPlanes, Ae), E = ge.get(N, _.length), E.init(), _.push(E), Ya(N, Z, 0, M.sortObjects), E.finish(), M.sortObjects === !0 && E.sort(Y, q), this.info.render.frame++, Te === !0 && Ge.beginShadows();
      const le = x.state.shadowsArray;
      if (be.render(le, N, Z), Te === !0 && Ge.endShadows(), this.info.autoReset === !0 && this.info.reset(), Pe.render(E, N), x.setupLights(M._useLegacyLights), Z.isArrayCamera) {
        const K = Z.cameras;
        for (let ce = 0, ze = K.length; ce < ze; ce++) {
          const Je = K[ce];
          qa(E, N, Je, Je.viewport);
        }
      } else
        qa(E, N, Z);
      I !== null && (Oe.updateMultisampleRenderTarget(I), Oe.updateRenderTargetMipmap(I)), N.isScene === !0 && N.onAfterRender(M, N, Z), V.resetDefaultState(), z = -1, R = null, w.pop(), w.length > 0 ? x = w[w.length - 1] : x = null, _.pop(), _.length > 0 ? E = _[_.length - 1] : E = null;
    };
    function Ya(N, Z, le, K) {
      if (N.visible === !1)
        return;
      if (N.layers.test(Z.layers)) {
        if (N.isGroup)
          le = N.renderOrder;
        else if (N.isLOD)
          N.autoUpdate === !0 && N.update(Z);
        else if (N.isLight)
          x.pushLight(N), N.castShadow && x.pushShadow(N);
        else if (N.isSprite) {
          if (!N.frustumCulled || fe.intersectsSprite(N)) {
            K && yt.setFromMatrixPosition(N.matrixWorld).applyMatrix4(He);
            const Je = P.update(N), it = N.material;
            it.visible && E.push(N, Je, it, le, yt.z, null);
          }
        } else if ((N.isMesh || N.isLine || N.isPoints) && (!N.frustumCulled || fe.intersectsObject(N))) {
          const Je = P.update(N), it = N.material;
          if (K && (N.boundingSphere !== void 0 ? (N.boundingSphere === null && N.computeBoundingSphere(), yt.copy(N.boundingSphere.center)) : (Je.boundingSphere === null && Je.computeBoundingSphere(), yt.copy(Je.boundingSphere.center)), yt.applyMatrix4(N.matrixWorld).applyMatrix4(He)), Array.isArray(it)) {
            const rt = Je.groups;
            for (let gt = 0, et = rt.length; gt < et; gt++) {
              const ot = rt[gt], Ft = it[ot.materialIndex];
              Ft && Ft.visible && E.push(N, Je, Ft, le, yt.z, ot);
            }
          } else
            it.visible && E.push(N, Je, it, le, yt.z, null);
        }
      }
      const ze = N.children;
      for (let Je = 0, it = ze.length; Je < it; Je++)
        Ya(ze[Je], Z, le, K);
    }
    function qa(N, Z, le, K) {
      const ce = N.opaque, ze = N.transmissive, Je = N.transparent;
      x.setupLightsView(le), Te === !0 && Ge.setGlobalState(M.clippingPlanes, le), ze.length > 0 && ja(ce, ze, Z, le), K && de.viewport(L.copy(K)), ce.length > 0 && hr(ce, Z, le), ze.length > 0 && hr(ze, Z, le), Je.length > 0 && hr(Je, Z, le), de.buffers.depth.setTest(!0), de.buffers.depth.setMask(!0), de.buffers.color.setMask(!0), de.setPolygonOffset(!1);
    }
    function ja(N, Z, le, K) {
      const ce = Ee.isWebGL2;
      ke === null && (ke = new hi(1, 1, {
        generateMipmaps: !0,
        type: he.has("EXT_color_buffer_half_float") ? ms : Fi,
        minFilter: Ir,
        samples: ce ? 4 : 0
      })), M.getDrawingBufferSize(je), ce ? ke.setSize(je.x, je.y) : ke.setSize(Yc(je.x), Yc(je.y));
      const ze = M.getRenderTarget();
      M.setRenderTarget(ke), M.getClearColor(se), G = M.getClearAlpha(), G < 1 && M.setClearColor(16777215, 0.5), M.clear();
      const Je = M.toneMapping;
      M.toneMapping = Oi, hr(N, le, K), Oe.updateMultisampleRenderTarget(ke), Oe.updateRenderTargetMipmap(ke);
      let it = !1;
      for (let rt = 0, gt = Z.length; rt < gt; rt++) {
        const et = Z[rt], ot = et.object, Ft = et.geometry, Bt = et.material, zn = et.group;
        if (Bt.side === Ni && ot.layers.test(K.layers)) {
          const Yn = Bt.side;
          Bt.side = On, Bt.needsUpdate = !0, Za(ot, le, K, Ft, Bt, zn), Bt.side = Yn, Bt.needsUpdate = !0, it = !0;
        }
      }
      it === !0 && (Oe.updateMultisampleRenderTarget(ke), Oe.updateRenderTargetMipmap(ke)), M.setRenderTarget(ze), M.setClearColor(se, G), M.toneMapping = Je;
    }
    function hr(N, Z, le) {
      const K = Z.isScene === !0 ? Z.overrideMaterial : null;
      for (let ce = 0, ze = N.length; ce < ze; ce++) {
        const Je = N[ce], it = Je.object, rt = Je.geometry, gt = K === null ? Je.material : K, et = Je.group;
        it.layers.test(le.layers) && Za(it, Z, le, rt, gt, et);
      }
    }
    function Za(N, Z, le, K, ce, ze) {
      N.onBeforeRender(M, Z, le, K, ce, ze), N.modelViewMatrix.multiplyMatrices(le.matrixWorldInverse, N.matrixWorld), N.normalMatrix.getNormalMatrix(N.modelViewMatrix), ce.onBeforeRender(M, Z, le, K, N, ze), ce.transparent === !0 && ce.side === Ni && ce.forceSinglePass === !1 ? (ce.side = On, ce.needsUpdate = !0, M.renderBufferDirect(le, Z, K, ce, N, ze), ce.side = ar, ce.needsUpdate = !0, M.renderBufferDirect(le, Z, K, ce, N, ze), ce.side = Ni) : M.renderBufferDirect(le, Z, K, ce, N, ze), N.onAfterRender(M, Z, le, K, ce, ze);
    }
    function bi(N, Z, le) {
      Z.isScene !== !0 && (Z = Ct);
      const K = Ne.get(N), ce = x.state.lights, ze = x.state.shadowsArray, Je = ce.state.version, it = ee.getParameters(N, ce.state, ze, Z, le), rt = ee.getProgramCacheKey(it);
      let gt = K.programs;
      K.environment = N.isMeshStandardMaterial ? Z.environment : null, K.fog = Z.fog, K.envMap = (N.isMeshStandardMaterial ? mt : $e).get(N.envMap || K.environment), gt === void 0 && (N.addEventListener("dispose", Le), gt = /* @__PURE__ */ new Map(), K.programs = gt);
      let et = gt.get(rt);
      if (et !== void 0) {
        if (K.currentProgram === et && K.lightsStateVersion === Je)
          return Ja(N, it), et;
      } else
        it.uniforms = ee.getUniforms(N), N.onBuild(le, it, M), N.onBeforeCompile(it, M), et = ee.acquireProgram(it, rt), gt.set(rt, et), K.uniforms = it.uniforms;
      const ot = K.uniforms;
      (!N.isShaderMaterial && !N.isRawShaderMaterial || N.clipping === !0) && (ot.clippingPlanes = Ge.uniform), Ja(N, it), K.needsLights = Au(N), K.lightsStateVersion = Je, K.needsLights && (ot.ambientLightColor.value = ce.state.ambient, ot.lightProbe.value = ce.state.probe, ot.directionalLights.value = ce.state.directional, ot.directionalLightShadows.value = ce.state.directionalShadow, ot.spotLights.value = ce.state.spot, ot.spotLightShadows.value = ce.state.spotShadow, ot.rectAreaLights.value = ce.state.rectArea, ot.ltc_1.value = ce.state.rectAreaLTC1, ot.ltc_2.value = ce.state.rectAreaLTC2, ot.pointLights.value = ce.state.point, ot.pointLightShadows.value = ce.state.pointShadow, ot.hemisphereLights.value = ce.state.hemi, ot.directionalShadowMap.value = ce.state.directionalShadowMap, ot.directionalShadowMatrix.value = ce.state.directionalShadowMatrix, ot.spotShadowMap.value = ce.state.spotShadowMap, ot.spotLightMatrix.value = ce.state.spotLightMatrix, ot.spotLightMap.value = ce.state.spotLightMap, ot.pointShadowMap.value = ce.state.pointShadowMap, ot.pointShadowMatrix.value = ce.state.pointShadowMatrix);
      const Ft = et.getUniforms(), Bt = Hc.seqWithValue(Ft.seq, ot);
      return K.currentProgram = et, K.uniformsList = Bt, et;
    }
    function Ja(N, Z) {
      const le = Ne.get(N);
      le.outputColorSpace = Z.outputColorSpace, le.instancing = Z.instancing, le.instancingColor = Z.instancingColor, le.skinning = Z.skinning, le.morphTargets = Z.morphTargets, le.morphNormals = Z.morphNormals, le.morphColors = Z.morphColors, le.morphTargetsCount = Z.morphTargetsCount, le.numClippingPlanes = Z.numClippingPlanes, le.numIntersection = Z.numClipIntersection, le.vertexAlphas = Z.vertexAlphas, le.vertexTangents = Z.vertexTangents, le.toneMapping = Z.toneMapping;
    }
    function Tu(N, Z, le, K, ce) {
      Z.isScene !== !0 && (Z = Ct), Oe.resetTextureUnits();
      const ze = Z.fog, Je = K.isMeshStandardMaterial ? Z.environment : null, it = I === null ? M.outputColorSpace : I.isXRRenderTarget === !0 ? I.texture.colorSpace : Bi, rt = (K.isMeshStandardMaterial ? mt : $e).get(K.envMap || Je), gt = K.vertexColors === !0 && !!le.attributes.color && le.attributes.color.itemSize === 4, et = !!le.attributes.tangent && (!!K.normalMap || K.anisotropy > 0), ot = !!le.morphAttributes.position, Ft = !!le.morphAttributes.normal, Bt = !!le.morphAttributes.color;
      let zn = Oi;
      K.toneMapped && (I === null || I.isXRRenderTarget === !0) && (zn = M.toneMapping);
      const Yn = le.morphAttributes.position || le.morphAttributes.normal || le.morphAttributes.color, Nt = Yn !== void 0 ? Yn.length : 0, at = Ne.get(K), Pt = x.state.lights;
      if (Te === !0 && (Ae === !0 || N !== R)) {
        const Sn = N === R && K.id === z;
        Ge.setState(K, N, Sn);
      }
      let st = !1;
      K.version === at.__version ? (at.needsLights && at.lightsStateVersion !== Pt.state.version || at.outputColorSpace !== it || ce.isInstancedMesh && at.instancing === !1 || !ce.isInstancedMesh && at.instancing === !0 || ce.isSkinnedMesh && at.skinning === !1 || !ce.isSkinnedMesh && at.skinning === !0 || ce.isInstancedMesh && at.instancingColor === !0 && ce.instanceColor === null || ce.isInstancedMesh && at.instancingColor === !1 && ce.instanceColor !== null || at.envMap !== rt || K.fog === !0 && at.fog !== ze || at.numClippingPlanes !== void 0 && (at.numClippingPlanes !== Ge.numPlanes || at.numIntersection !== Ge.numIntersection) || at.vertexAlphas !== gt || at.vertexTangents !== et || at.morphTargets !== ot || at.morphNormals !== Ft || at.morphColors !== Bt || at.toneMapping !== zn || Ee.isWebGL2 === !0 && at.morphTargetsCount !== Nt) && (st = !0) : (st = !0, at.__version = K.version);
      let xn = at.currentProgram;
      st === !0 && (xn = bi(K, Z, ce));
      let cn = !1, rn = !1, di = !1;
      const jt = xn.getUniforms(), Zt = at.uniforms;
      if (de.useProgram(xn.program) && (cn = !0, rn = !0, di = !0), K.id !== z && (z = K.id, rn = !0), cn || R !== N) {
        jt.setValue(B, "projectionMatrix", N.projectionMatrix), jt.setValue(B, "viewMatrix", N.matrixWorldInverse);
        const Sn = jt.map.cameraPosition;
        Sn !== void 0 && Sn.setValue(B, yt.setFromMatrixPosition(N.matrixWorld)), Ee.logarithmicDepthBuffer && jt.setValue(
          B,
          "logDepthBufFC",
          2 / (Math.log(N.far + 1) / Math.LN2)
        ), (K.isMeshPhongMaterial || K.isMeshToonMaterial || K.isMeshLambertMaterial || K.isMeshBasicMaterial || K.isMeshStandardMaterial || K.isShaderMaterial) && jt.setValue(B, "isOrthographic", N.isOrthographicCamera === !0), R !== N && (R = N, rn = !0, di = !0);
      }
      if (ce.isSkinnedMesh) {
        jt.setOptional(B, ce, "bindMatrix"), jt.setOptional(B, ce, "bindMatrixInverse");
        const Sn = ce.skeleton;
        Sn && (Ee.floatVertexTextures ? (Sn.boneTexture === null && Sn.computeBoneTexture(), jt.setValue(B, "boneTexture", Sn.boneTexture, Oe), jt.setValue(B, "boneTextureSize", Sn.boneTextureSize)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
      }
      const fr = le.morphAttributes;
      if ((fr.position !== void 0 || fr.normal !== void 0 || fr.color !== void 0 && Ee.isWebGL2 === !0) && tt.update(ce, le, xn), (rn || at.receiveShadow !== ce.receiveShadow) && (at.receiveShadow = ce.receiveShadow, jt.setValue(B, "receiveShadow", ce.receiveShadow)), K.isMeshGouraudMaterial && K.envMap !== null && (Zt.envMap.value = rt, Zt.flipEnvMap.value = rt.isCubeTexture && rt.isRenderTargetTexture === !1 ? -1 : 1), rn && (jt.setValue(B, "toneMappingExposure", M.toneMappingExposure), at.needsLights && bu(Zt, di), ze && K.fog === !0 && Se.refreshFogUniforms(Zt, ze), Se.refreshMaterialUniforms(Zt, K, ie, oe, ke), Hc.upload(B, at.uniformsList, Zt, Oe)), K.isShaderMaterial && K.uniformsNeedUpdate === !0 && (Hc.upload(B, at.uniformsList, Zt, Oe), K.uniformsNeedUpdate = !1), K.isSpriteMaterial && jt.setValue(B, "center", ce.center), jt.setValue(B, "modelViewMatrix", ce.modelViewMatrix), jt.setValue(B, "normalMatrix", ce.normalMatrix), jt.setValue(B, "modelMatrix", ce.matrixWorld), K.isShaderMaterial || K.isRawShaderMaterial) {
        const Sn = K.uniformsGroups;
        for (let Ts = 0, bs = Sn.length; Ts < bs; Ts++)
          if (Ee.isWebGL2) {
            const bo = Sn[Ts];
            ae.update(bo, xn), ae.bind(bo, xn);
          } else
            console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
      }
      return xn;
    }
    function bu(N, Z) {
      N.ambientLightColor.needsUpdate = Z, N.lightProbe.needsUpdate = Z, N.directionalLights.needsUpdate = Z, N.directionalLightShadows.needsUpdate = Z, N.pointLights.needsUpdate = Z, N.pointLightShadows.needsUpdate = Z, N.spotLights.needsUpdate = Z, N.spotLightShadows.needsUpdate = Z, N.rectAreaLights.needsUpdate = Z, N.hemisphereLights.needsUpdate = Z;
    }
    function Au(N) {
      return N.isMeshLambertMaterial || N.isMeshToonMaterial || N.isMeshPhongMaterial || N.isMeshStandardMaterial || N.isShadowMaterial || N.isShaderMaterial && N.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return A;
    }, this.getActiveMipmapLevel = function() {
      return C;
    }, this.getRenderTarget = function() {
      return I;
    }, this.setRenderTargetTextures = function(N, Z, le) {
      Ne.get(N.texture).__webglTexture = Z, Ne.get(N.depthTexture).__webglTexture = le;
      const K = Ne.get(N);
      K.__hasExternalTextures = !0, K.__hasExternalTextures && (K.__autoAllocateDepthBuffer = le === void 0, K.__autoAllocateDepthBuffer || he.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), K.__useRenderToTexture = !1));
    }, this.setRenderTargetFramebuffer = function(N, Z) {
      const le = Ne.get(N);
      le.__webglFramebuffer = Z, le.__useDefaultFramebuffer = Z === void 0;
    }, this.setRenderTarget = function(N, Z = 0, le = 0) {
      I = N, A = Z, C = le;
      let K = !0, ce = null, ze = !1, Je = !1;
      if (N) {
        const rt = Ne.get(N);
        rt.__useDefaultFramebuffer !== void 0 ? (de.bindFramebuffer(B.FRAMEBUFFER, null), K = !1) : rt.__webglFramebuffer === void 0 ? Oe.setupRenderTarget(N) : rt.__hasExternalTextures && Oe.rebindTextures(N, Ne.get(N.texture).__webglTexture, Ne.get(N.depthTexture).__webglTexture);
        const gt = N.texture;
        (gt.isData3DTexture || gt.isDataArrayTexture || gt.isCompressedArrayTexture) && (Je = !0);
        const et = Ne.get(N).__webglFramebuffer;
        N.isWebGLCubeRenderTarget ? (Array.isArray(et[Z]) ? ce = et[Z][le] : ce = et[Z], ze = !0) : Ee.isWebGL2 && N.samples > 0 && Oe.useMultisampledRTT(N) === !1 ? ce = Ne.get(N).__webglMultisampledFramebuffer : Array.isArray(et) ? ce = et[le] : ce = et, L.copy(N.viewport), H.copy(N.scissor), te = N.scissorTest;
      } else
        L.copy(j).multiplyScalar(ie).floor(), H.copy(k).multiplyScalar(ie).floor(), te = Q;
      if (de.bindFramebuffer(B.FRAMEBUFFER, ce) && Ee.drawBuffers && K && de.drawBuffers(N, ce), de.viewport(L), de.scissor(H), de.setScissorTest(te), ze) {
        const rt = Ne.get(N.texture);
        B.framebufferTexture2D(B.FRAMEBUFFER, B.COLOR_ATTACHMENT0, B.TEXTURE_CUBE_MAP_POSITIVE_X + Z, rt.__webglTexture, le);
      } else if (Je) {
        const rt = Ne.get(N.texture), gt = Z || 0;
        B.framebufferTextureLayer(B.FRAMEBUFFER, B.COLOR_ATTACHMENT0, rt.__webglTexture, le || 0, gt);
      }
      z = -1;
    }, this.readRenderTargetPixels = function(N, Z, le, K, ce, ze, Je) {
      if (!(N && N.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let it = Ne.get(N).__webglFramebuffer;
      if (N.isWebGLCubeRenderTarget && Je !== void 0 && (it = it[Je]), it) {
        de.bindFramebuffer(B.FRAMEBUFFER, it);
        try {
          const rt = N.texture, gt = rt.format, et = rt.type;
          if (gt !== Cn && St.convert(gt) !== B.getParameter(B.IMPLEMENTATION_COLOR_READ_FORMAT)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          const ot = et === ms && (he.has("EXT_color_buffer_half_float") || Ee.isWebGL2 && he.has("EXT_color_buffer_float"));
          if (et !== Fi && St.convert(et) !== B.getParameter(B.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
          !(et === ei && (Ee.isWebGL2 || he.has("OES_texture_float") || he.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
          !ot) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          Z >= 0 && Z <= N.width - K && le >= 0 && le <= N.height - ce && B.readPixels(Z, le, K, ce, St.convert(gt), St.convert(et), ze);
        } finally {
          const rt = I !== null ? Ne.get(I).__webglFramebuffer : null;
          de.bindFramebuffer(B.FRAMEBUFFER, rt);
        }
      }
    }, this.copyFramebufferToTexture = function(N, Z, le = 0) {
      const K = Math.pow(2, -le), ce = Math.floor(Z.image.width * K), ze = Math.floor(Z.image.height * K);
      Oe.setTexture2D(Z, 0), B.copyTexSubImage2D(B.TEXTURE_2D, le, 0, 0, N.x, N.y, ce, ze), de.unbindTexture();
    }, this.copyTextureToTexture = function(N, Z, le, K = 0) {
      const ce = Z.image.width, ze = Z.image.height, Je = St.convert(le.format), it = St.convert(le.type);
      Oe.setTexture2D(le, 0), B.pixelStorei(B.UNPACK_FLIP_Y_WEBGL, le.flipY), B.pixelStorei(B.UNPACK_PREMULTIPLY_ALPHA_WEBGL, le.premultiplyAlpha), B.pixelStorei(B.UNPACK_ALIGNMENT, le.unpackAlignment), Z.isDataTexture ? B.texSubImage2D(B.TEXTURE_2D, K, N.x, N.y, ce, ze, Je, it, Z.image.data) : Z.isCompressedTexture ? B.compressedTexSubImage2D(B.TEXTURE_2D, K, N.x, N.y, Z.mipmaps[0].width, Z.mipmaps[0].height, Je, Z.mipmaps[0].data) : B.texSubImage2D(B.TEXTURE_2D, K, N.x, N.y, Je, it, Z.image), K === 0 && le.generateMipmaps && B.generateMipmap(B.TEXTURE_2D), de.unbindTexture();
    }, this.copyTextureToTexture3D = function(N, Z, le, K, ce = 0) {
      if (M.isWebGL1Renderer) {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        return;
      }
      const ze = N.max.x - N.min.x + 1, Je = N.max.y - N.min.y + 1, it = N.max.z - N.min.z + 1, rt = St.convert(K.format), gt = St.convert(K.type);
      let et;
      if (K.isData3DTexture)
        Oe.setTexture3D(K, 0), et = B.TEXTURE_3D;
      else if (K.isDataArrayTexture)
        Oe.setTexture2DArray(K, 0), et = B.TEXTURE_2D_ARRAY;
      else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      B.pixelStorei(B.UNPACK_FLIP_Y_WEBGL, K.flipY), B.pixelStorei(B.UNPACK_PREMULTIPLY_ALPHA_WEBGL, K.premultiplyAlpha), B.pixelStorei(B.UNPACK_ALIGNMENT, K.unpackAlignment);
      const ot = B.getParameter(B.UNPACK_ROW_LENGTH), Ft = B.getParameter(B.UNPACK_IMAGE_HEIGHT), Bt = B.getParameter(B.UNPACK_SKIP_PIXELS), zn = B.getParameter(B.UNPACK_SKIP_ROWS), Yn = B.getParameter(B.UNPACK_SKIP_IMAGES), Nt = le.isCompressedTexture ? le.mipmaps[0] : le.image;
      B.pixelStorei(B.UNPACK_ROW_LENGTH, Nt.width), B.pixelStorei(B.UNPACK_IMAGE_HEIGHT, Nt.height), B.pixelStorei(B.UNPACK_SKIP_PIXELS, N.min.x), B.pixelStorei(B.UNPACK_SKIP_ROWS, N.min.y), B.pixelStorei(B.UNPACK_SKIP_IMAGES, N.min.z), le.isDataTexture || le.isData3DTexture ? B.texSubImage3D(et, ce, Z.x, Z.y, Z.z, ze, Je, it, rt, gt, Nt.data) : le.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), B.compressedTexSubImage3D(et, ce, Z.x, Z.y, Z.z, ze, Je, it, rt, Nt.data)) : B.texSubImage3D(et, ce, Z.x, Z.y, Z.z, ze, Je, it, rt, gt, Nt), B.pixelStorei(B.UNPACK_ROW_LENGTH, ot), B.pixelStorei(B.UNPACK_IMAGE_HEIGHT, Ft), B.pixelStorei(B.UNPACK_SKIP_PIXELS, Bt), B.pixelStorei(B.UNPACK_SKIP_ROWS, zn), B.pixelStorei(B.UNPACK_SKIP_IMAGES, Yn), ce === 0 && K.generateMipmaps && B.generateMipmap(et), de.unbindTexture();
    }, this.initTexture = function(N) {
      N.isCubeTexture ? Oe.setTextureCube(N, 0) : N.isData3DTexture ? Oe.setTexture3D(N, 0) : N.isDataArrayTexture || N.isCompressedArrayTexture ? Oe.setTexture2DArray(N, 0) : Oe.setTexture2D(N, 0), de.unbindTexture();
    }, this.resetState = function() {
      A = 0, C = 0, I = null, de.reset(), V.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get coordinateSystem() {
    return Ui;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const t = this.getContext();
    t.drawingBufferColorSpace = e === eu ? "display-p3" : "srgb", t.unpackColorSpace = Lt.workingColorSpace === Oa ? "display-p3" : "srgb";
  }
  get physicallyCorrectLights() {
    return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), !this.useLegacyLights;
  }
  set physicallyCorrectLights(e) {
    console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), this.useLegacyLights = !e;
  }
  get outputEncoding() {
    return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace === hn ? Pr : wd;
  }
  set outputEncoding(e) {
    console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace = e === Pr ? hn : Bi;
  }
  get useLegacyLights() {
    return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights;
  }
  set useLegacyLights(e) {
    console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights = e;
  }
}
class Yv extends Nd {
}
Yv.prototype.isWebGL1Renderer = !0;
class ru {
  constructor(e, t = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new Fe(e), this.density = t;
  }
  clone() {
    return new ru(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      name: this.name,
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class su {
  constructor(e, t = 1, n = 1e3) {
    this.isFog = !0, this.name = "", this.color = new Fe(e), this.near = t, this.far = n;
  }
  clone() {
    return new su(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      name: this.name,
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class ou extends Rt {
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t;
  }
}
class au {
  constructor(e, t) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = Ea, this.updateRange = { offset: 0, count: -1 }, this.version = 0, this.uuid = ti();
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  copyAt(e, t, n) {
    e *= this.stride, n *= t.stride;
    for (let i = 0, s = this.stride; i < s; i++)
      this.array[e + i] = t.array[n + i];
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = ti()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
    return n.setUsage(this.usage), n;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = ti()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const Nn = /* @__PURE__ */ new D();
class vs {
  constructor(e, t, n, i = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = i;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.data.count; t < n; t++)
      Nn.fromBufferAttribute(this, t), Nn.applyMatrix4(e), this.setXYZ(t, Nn.x, Nn.y, Nn.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Nn.fromBufferAttribute(this, t), Nn.applyNormalMatrix(e), this.setXYZ(t, Nn.x, Nn.y, Nn.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Nn.fromBufferAttribute(this, t), Nn.transformDirection(e), this.setXYZ(t, Nn.x, Nn.y, Nn.z);
    return this;
  }
  setX(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
  }
  setY(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
  }
  setZ(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
  }
  setW(e, t) {
    return this.normalized && (t = ft(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = Wn(t, this.array)), t;
  }
  setXY(e, t, n) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = ft(t, this.array), n = ft(n, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, i) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = ft(t, this.array), n = ft(n, this.array), i = ft(i, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this;
  }
  setXYZW(e, t, n, i, s) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = ft(t, this.array), n = ft(n, this.array), i = ft(i, this.array), s = ft(s, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this.data.array[e + 3] = s, this;
  }
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const i = n * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++)
          t.push(this.data.array[i + s]);
      }
      return new Ot(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new vs(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const i = n * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++)
          t.push(this.data.array[i + s]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class Ud extends Ln {
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new Fe(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let to;
const Jo = /* @__PURE__ */ new D(), no = /* @__PURE__ */ new D(), io = /* @__PURE__ */ new D(), ro = /* @__PURE__ */ new ue(), Ko = /* @__PURE__ */ new ue(), qv = /* @__PURE__ */ new ut(), uc = /* @__PURE__ */ new D(), Qo = /* @__PURE__ */ new D(), hc = /* @__PURE__ */ new D(), Mg = /* @__PURE__ */ new ue(), $h = /* @__PURE__ */ new ue(), Eg = /* @__PURE__ */ new ue();
class jv extends Rt {
  constructor(e = new Ud()) {
    if (super(), this.isSprite = !0, this.type = "Sprite", to === void 0) {
      to = new _t();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), n = new au(t, 5);
      to.setIndex([0, 1, 2, 0, 2, 3]), to.setAttribute("position", new vs(n, 3, 0, !1)), to.setAttribute("uv", new vs(n, 2, 3, !1));
    }
    this.geometry = to, this.material = e, this.center = new ue(0.5, 0.5);
  }
  raycast(e, t) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), no.setFromMatrixScale(this.matrixWorld), qv.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), io.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && no.multiplyScalar(-io.z);
    const n = this.material.rotation;
    let i, s;
    n !== 0 && (s = Math.cos(n), i = Math.sin(n));
    const l = this.center;
    fc(uc.set(-0.5, -0.5, 0), io, l, no, i, s), fc(Qo.set(0.5, -0.5, 0), io, l, no, i, s), fc(hc.set(0.5, 0.5, 0), io, l, no, i, s), Mg.set(0, 0), $h.set(1, 0), Eg.set(1, 1);
    let c = e.ray.intersectTriangle(uc, Qo, hc, !1, Jo);
    if (c === null && (fc(Qo.set(-0.5, 0.5, 0), io, l, no, i, s), $h.set(0, 1), c = e.ray.intersectTriangle(uc, hc, Qo, !1, Jo), c === null))
      return;
    const u = e.ray.origin.distanceTo(Jo);
    u < e.near || u > e.far || t.push({
      distance: u,
      point: Jo.clone(),
      uv: Gn.getInterpolation(Jo, uc, Qo, hc, Mg, $h, Eg, new ue()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function fc(r, e, t, n, i, s) {
  ro.subVectors(r, t).addScalar(0.5).multiply(n), i !== void 0 ? (Ko.x = s * ro.x - i * ro.y, Ko.y = i * ro.x + s * ro.y) : Ko.copy(ro), r.copy(e), r.x += Ko.x, r.y += Ko.y, r.applyMatrix4(qv);
}
const dc = /* @__PURE__ */ new D(), wg = /* @__PURE__ */ new D();
class Zv extends Rt {
  constructor() {
    super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      levels: {
        enumerable: !0,
        value: []
      },
      isLOD: {
        value: !0
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let n = 0, i = t.length; n < i; n++) {
      const s = t[n];
      this.addLevel(s.object.clone(), s.distance, s.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  addLevel(e, t = 0, n = 0) {
    t = Math.abs(t);
    const i = this.levels;
    let s;
    for (s = 0; s < i.length && !(t < i[s].distance); s++)
      ;
    return i.splice(s, 0, { distance: t, hysteresis: n, object: e }), this.add(e), this;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let n, i;
      for (n = 1, i = t.length; n < i; n++) {
        let s = t[n].distance;
        if (t[n].object.visible && (s -= s * t[n].hysteresis), e < s)
          break;
      }
      return t[n - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    if (this.levels.length > 0) {
      dc.setFromMatrixPosition(this.matrixWorld);
      const i = e.ray.origin.distanceTo(dc);
      this.getObjectForDistance(i).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      dc.setFromMatrixPosition(e.matrixWorld), wg.setFromMatrixPosition(this.matrixWorld);
      const n = dc.distanceTo(wg) / e.zoom;
      t[0].object.visible = !0;
      let i, s;
      for (i = 1, s = t.length; i < s; i++) {
        let l = t[i].distance;
        if (t[i].object.visible && (l -= l * t[i].hysteresis), n >= l)
          t[i - 1].object.visible = !1, t[i].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = i - 1; i < s; i++)
        t[i].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
    const n = this.levels;
    for (let i = 0, s = n.length; i < s; i++) {
      const l = n[i];
      t.object.levels.push({
        object: l.object.uuid,
        distance: l.distance,
        hysteresis: l.hysteresis
      });
    }
    return t;
  }
}
const Tg = /* @__PURE__ */ new D(), bg = /* @__PURE__ */ new It(), Ag = /* @__PURE__ */ new It(), nT = /* @__PURE__ */ new D(), Rg = /* @__PURE__ */ new ut(), so = /* @__PURE__ */ new D(), ef = /* @__PURE__ */ new Ei(), Cg = /* @__PURE__ */ new ut(), tf = /* @__PURE__ */ new xs();
class Jv extends yn {
  constructor(e, t) {
    super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new ut(), this.bindMatrixInverse = new ut(), this.boundingBox = null, this.boundingSphere = null;
  }
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new ki()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      so.fromBufferAttribute(t, n), this.applyBoneTransform(n, so), this.boundingBox.expandByPoint(so);
  }
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new Ei()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      so.fromBufferAttribute(t, n), this.applyBoneTransform(n, so), this.boundingSphere.expandByPoint(so);
  }
  copy(e, t) {
    return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  raycast(e, t) {
    const n = this.material, i = this.matrixWorld;
    n !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), ef.copy(this.boundingSphere), ef.applyMatrix4(i), e.ray.intersectsSphere(ef) !== !1 && (Cg.copy(i).invert(), tf.copy(e.ray).applyMatrix4(Cg), !(this.boundingBox !== null && tf.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, t, tf)));
  }
  getVertexPosition(e, t) {
    return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
  }
  bind(e, t) {
    this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new It(), t = this.geometry.attributes.skinWeight;
    for (let n = 0, i = t.count; n < i; n++) {
      e.fromBufferAttribute(t, n);
      const s = 1 / e.manhattanLength();
      s !== 1 / 0 ? e.multiplyScalar(s) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === "attached" ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === "detached" ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(e, t) {
    const n = this.skeleton, i = this.geometry;
    bg.fromBufferAttribute(i.attributes.skinIndex, e), Ag.fromBufferAttribute(i.attributes.skinWeight, e), Tg.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
    for (let s = 0; s < 4; s++) {
      const l = Ag.getComponent(s);
      if (l !== 0) {
        const c = bg.getComponent(s);
        Rg.multiplyMatrices(n.bones[c].matrixWorld, n.boneInverses[c]), t.addScaledVector(nT.copy(Tg).applyMatrix4(Rg), l);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
  boneTransform(e, t) {
    return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."), this.applyBoneTransform(e, t);
  }
}
class Od extends Rt {
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class ds extends nn {
  constructor(e = null, t = 1, n = 1, i, s, l, c, u, h = Wt, f = Wt, p, m) {
    super(null, l, c, u, h, f, i, s, p, m), this.isDataTexture = !0, this.image = { data: e, width: t, height: n }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const Pg = /* @__PURE__ */ new ut(), iT = /* @__PURE__ */ new ut();
class lu {
  constructor(e = [], t = []) {
    this.uuid = ti(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.init();
  }
  init() {
    const e = this.bones, t = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0)
      this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let n = 0, i = this.bones.length; n < i; n++)
        this.boneInverses.push(new ut());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = new ut();
      this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && n.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
    }
  }
  update() {
    const e = this.bones, t = this.boneInverses, n = this.boneMatrices, i = this.boneTexture;
    for (let s = 0, l = e.length; s < l; s++) {
      const c = e[s] ? e[s].matrixWorld : iT;
      Pg.multiplyMatrices(c, t[s]), Pg.toArray(n, s * 16);
    }
    i !== null && (i.needsUpdate = !0);
  }
  clone() {
    return new lu(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = Cv(e), e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const n = new ds(t, e, e, Cn, ei);
    return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this.boneTextureSize = e, this;
  }
  getBoneByName(e) {
    for (let t = 0, n = this.bones.length; t < n; t++) {
      const i = this.bones[t];
      if (i.name === e)
        return i;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let n = 0, i = e.bones.length; n < i; n++) {
      const s = e.bones[n];
      let l = t[s];
      l === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", s), l = new Od()), this.bones.push(l), this.boneInverses.push(new ut().fromArray(e.boneInverses[n]));
    }
    return this.init(), this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones, n = this.boneInverses;
    for (let i = 0, s = t.length; i < s; i++) {
      const l = t[i];
      e.bones.push(l.uuid);
      const c = n[i];
      e.boneInverses.push(c.toArray());
    }
    return e;
  }
}
class xo extends Ot {
  constructor(e, t, n, i = 1) {
    super(e, t, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = i;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const oo = /* @__PURE__ */ new ut(), Lg = /* @__PURE__ */ new ut(), pc = [], Ig = /* @__PURE__ */ new ki(), rT = /* @__PURE__ */ new ut(), $o = /* @__PURE__ */ new yn(), ea = /* @__PURE__ */ new Ei();
class Kv extends yn {
  constructor(e, t, n) {
    super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new xo(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
    for (let i = 0; i < n; i++)
      this.setMatrixAt(i, rT);
  }
  computeBoundingBox() {
    const e = this.geometry, t = this.count;
    this.boundingBox === null && (this.boundingBox = new ki()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, oo), Ig.copy(e.boundingBox).applyMatrix4(oo), this.boundingBox.union(Ig);
  }
  computeBoundingSphere() {
    const e = this.geometry, t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new Ei()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, oo), ea.copy(e.boundingSphere).applyMatrix4(oo), this.boundingSphere.union(ea);
  }
  copy(e, t) {
    return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  raycast(e, t) {
    const n = this.matrixWorld, i = this.count;
    if ($o.geometry = this.geometry, $o.material = this.material, $o.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), ea.copy(this.boundingSphere), ea.applyMatrix4(n), e.ray.intersectsSphere(ea) !== !1))
      for (let s = 0; s < i; s++) {
        this.getMatrixAt(s, oo), Lg.multiplyMatrices(n, oo), $o.matrixWorld = Lg, $o.raycast(e, pc);
        for (let l = 0, c = pc.length; l < c; l++) {
          const u = pc[l];
          u.instanceId = s, u.object = this, t.push(u);
        }
        pc.length = 0;
      }
  }
  setColorAt(e, t) {
    this.instanceColor === null && (this.instanceColor = new xo(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  updateMorphTargets() {
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class Fn extends Ln {
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new Fe(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const Dg = /* @__PURE__ */ new D(), Ng = /* @__PURE__ */ new D(), Ug = /* @__PURE__ */ new ut(), nf = /* @__PURE__ */ new xs(), mc = /* @__PURE__ */ new Ei();
class Dr extends Rt {
  constructor(e = new _t(), t = new Fn()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [0];
      for (let i = 1, s = t.count; i < s; i++)
        Dg.fromBufferAttribute(t, i - 1), Ng.fromBufferAttribute(t, i), n[i] = n[i - 1], n[i] += Dg.distanceTo(Ng);
      e.setAttribute("lineDistance", new We(n, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(e, t) {
    const n = this.geometry, i = this.matrixWorld, s = e.params.Line.threshold, l = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), mc.copy(n.boundingSphere), mc.applyMatrix4(i), mc.radius += s, e.ray.intersectsSphere(mc) === !1)
      return;
    Ug.copy(i).invert(), nf.copy(e.ray).applyMatrix4(Ug);
    const c = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), u = c * c, h = new D(), f = new D(), p = new D(), m = new D(), v = this.isLineSegments ? 2 : 1, y = n.index, x = n.attributes.position;
    if (y !== null) {
      const _ = Math.max(0, l.start), w = Math.min(y.count, l.start + l.count);
      for (let M = _, b = w - 1; M < b; M += v) {
        const A = y.getX(M), C = y.getX(M + 1);
        if (h.fromBufferAttribute(x, A), f.fromBufferAttribute(x, C), nf.distanceSqToSegment(h, f, m, p) > u)
          continue;
        m.applyMatrix4(this.matrixWorld);
        const z = e.ray.origin.distanceTo(m);
        z < e.near || z > e.far || t.push({
          distance: z,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: p.clone().applyMatrix4(this.matrixWorld),
          index: M,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    } else {
      const _ = Math.max(0, l.start), w = Math.min(x.count, l.start + l.count);
      for (let M = _, b = w - 1; M < b; M += v) {
        if (h.fromBufferAttribute(x, M), f.fromBufferAttribute(x, M + 1), nf.distanceSqToSegment(h, f, m, p) > u)
          continue;
        m.applyMatrix4(this.matrixWorld);
        const C = e.ray.origin.distanceTo(m);
        C < e.near || C > e.far || t.push({
          distance: C,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: p.clone().applyMatrix4(this.matrixWorld),
          index: M,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, l = i.length; s < l; s++) {
          const c = i[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[c] = s;
        }
      }
    }
  }
}
const Og = /* @__PURE__ */ new D(), Fg = /* @__PURE__ */ new D();
class Hi extends Dr {
  constructor(e, t) {
    super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [];
      for (let i = 0, s = t.count; i < s; i += 2)
        Og.fromBufferAttribute(t, i), Fg.fromBufferAttribute(t, i + 1), n[i] = i === 0 ? 0 : n[i - 1], n[i + 1] = n[i] + Og.distanceTo(Fg);
      e.setAttribute("lineDistance", new We(n, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class Qv extends Dr {
  constructor(e, t) {
    super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class Fd extends Ln {
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new Fe(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const zg = /* @__PURE__ */ new ut(), nd = /* @__PURE__ */ new xs(), gc = /* @__PURE__ */ new Ei(), vc = /* @__PURE__ */ new D();
class $v extends Rt {
  constructor(e = new _t(), t = new Fd()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  raycast(e, t) {
    const n = this.geometry, i = this.matrixWorld, s = e.params.Points.threshold, l = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), gc.copy(n.boundingSphere), gc.applyMatrix4(i), gc.radius += s, e.ray.intersectsSphere(gc) === !1)
      return;
    zg.copy(i).invert(), nd.copy(e.ray).applyMatrix4(zg);
    const c = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), u = c * c, h = n.index, p = n.attributes.position;
    if (h !== null) {
      const m = Math.max(0, l.start), v = Math.min(h.count, l.start + l.count);
      for (let y = m, E = v; y < E; y++) {
        const x = h.getX(y);
        vc.fromBufferAttribute(p, x), Bg(vc, x, u, i, e, t, this);
      }
    } else {
      const m = Math.max(0, l.start), v = Math.min(p.count, l.start + l.count);
      for (let y = m, E = v; y < E; y++)
        vc.fromBufferAttribute(p, y), Bg(vc, y, u, i, e, t, this);
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, l = i.length; s < l; s++) {
          const c = i[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[c] = s;
        }
      }
    }
  }
}
function Bg(r, e, t, n, i, s, l) {
  const c = nd.distanceSqToPoint(r);
  if (c < t) {
    const u = new D();
    nd.closestPointToPoint(r, u), u.applyMatrix4(n);
    const h = i.ray.origin.distanceTo(u);
    if (h < i.near || h > i.far)
      return;
    s.push({
      distance: h,
      distanceToRay: Math.sqrt(c),
      point: u,
      index: e,
      face: null,
      object: l
    });
  }
}
class sT extends nn {
  constructor(e, t, n, i, s, l, c, u, h) {
    super(e, t, n, i, s, l, c, u, h), this.isVideoTexture = !0, this.minFilter = l !== void 0 ? l : Xt, this.magFilter = s !== void 0 ? s : Xt, this.generateMipmaps = !1;
    const f = this;
    function p() {
      f.needsUpdate = !0, e.requestVideoFrameCallback(p);
    }
    "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(p);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class oT extends nn {
  constructor(e, t) {
    super({ width: e, height: t }), this.isFramebufferTexture = !0, this.magFilter = Wt, this.minFilter = Wt, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class cu extends nn {
  constructor(e, t, n, i, s, l, c, u, h, f, p, m) {
    super(null, l, c, u, h, f, i, s, p, m), this.isCompressedTexture = !0, this.image = { width: t, height: n }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class aT extends cu {
  constructor(e, t, n, i, s, l) {
    super(e, t, n, s, l), this.isCompressedArrayTexture = !0, this.image.depth = i, this.wrapR = Rn;
  }
}
class lT extends cu {
  constructor(e, t, n) {
    super(void 0, e[0].width, e[0].height, t, n, lr), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
  }
}
class cT extends nn {
  constructor(e, t, n, i, s, l, c, u, h) {
    super(e, t, n, i, s, l, c, u, h), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class wi {
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getPoint(n, t);
  }
  // Get sequence of points using getPoint( t )
  getPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return t;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPointAt(n / e));
    return t;
  }
  // Get total curve arc length
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let n, i = this.getPoint(0), s = 0;
    t.push(0);
    for (let l = 1; l <= e; l++)
      n = this.getPoint(l / e), s += n.distanceTo(i), t.push(s), i = n;
    return this.cacheArcLengths = t, t;
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(e, t) {
    const n = this.getLengths();
    let i = 0;
    const s = n.length;
    let l;
    t ? l = t : l = e * n[s - 1];
    let c = 0, u = s - 1, h;
    for (; c <= u; )
      if (i = Math.floor(c + (u - c) / 2), h = n[i] - l, h < 0)
        c = i + 1;
      else if (h > 0)
        u = i - 1;
      else {
        u = i;
        break;
      }
    if (i = u, n[i] === l)
      return i / (s - 1);
    const f = n[i], m = n[i + 1] - f, v = (l - f) / m;
    return (i + v) / (s - 1);
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(e, t) {
    let i = e - 1e-4, s = e + 1e-4;
    i < 0 && (i = 0), s > 1 && (s = 1);
    const l = this.getPoint(i), c = this.getPoint(s), u = t || (l.isVector2 ? new ue() : new D());
    return u.copy(c).sub(l).normalize(), u;
  }
  getTangentAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getTangent(n, t);
  }
  computeFrenetFrames(e, t) {
    const n = new D(), i = [], s = [], l = [], c = new D(), u = new ut();
    for (let v = 0; v <= e; v++) {
      const y = v / e;
      i[v] = this.getTangentAt(y, new D());
    }
    s[0] = new D(), l[0] = new D();
    let h = Number.MAX_VALUE;
    const f = Math.abs(i[0].x), p = Math.abs(i[0].y), m = Math.abs(i[0].z);
    f <= h && (h = f, n.set(1, 0, 0)), p <= h && (h = p, n.set(0, 1, 0)), m <= h && n.set(0, 0, 1), c.crossVectors(i[0], n).normalize(), s[0].crossVectors(i[0], c), l[0].crossVectors(i[0], s[0]);
    for (let v = 1; v <= e; v++) {
      if (s[v] = s[v - 1].clone(), l[v] = l[v - 1].clone(), c.crossVectors(i[v - 1], i[v]), c.length() > Number.EPSILON) {
        c.normalize();
        const y = Math.acos(Qt(i[v - 1].dot(i[v]), -1, 1));
        s[v].applyMatrix4(u.makeRotationAxis(c, y));
      }
      l[v].crossVectors(i[v], s[v]);
    }
    if (t === !0) {
      let v = Math.acos(Qt(s[0].dot(s[e]), -1, 1));
      v /= e, i[0].dot(c.crossVectors(s[0], s[e])) > 0 && (v = -v);
      for (let y = 1; y <= e; y++)
        s[y].applyMatrix4(u.makeRotationAxis(i[y], v * y)), l[y].crossVectors(i[y], s[y]);
    }
    return {
      tangents: i,
      normals: s,
      binormals: l
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class uu extends wi {
  constructor(e = 0, t = 0, n = 1, i = 1, s = 0, l = Math.PI * 2, c = !1, u = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = i, this.aStartAngle = s, this.aEndAngle = l, this.aClockwise = c, this.aRotation = u;
  }
  getPoint(e, t) {
    const n = t || new ue(), i = Math.PI * 2;
    let s = this.aEndAngle - this.aStartAngle;
    const l = Math.abs(s) < Number.EPSILON;
    for (; s < 0; )
      s += i;
    for (; s > i; )
      s -= i;
    s < Number.EPSILON && (l ? s = 0 : s = i), this.aClockwise === !0 && !l && (s === i ? s = -i : s = s - i);
    const c = this.aStartAngle + e * s;
    let u = this.aX + this.xRadius * Math.cos(c), h = this.aY + this.yRadius * Math.sin(c);
    if (this.aRotation !== 0) {
      const f = Math.cos(this.aRotation), p = Math.sin(this.aRotation), m = u - this.aX, v = h - this.aY;
      u = m * f - v * p + this.aX, h = m * p + v * f + this.aY;
    }
    return n.set(u, h);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class e_ extends uu {
  constructor(e, t, n, i, s, l) {
    super(e, t, n, n, i, s, l), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function zd() {
  let r = 0, e = 0, t = 0, n = 0;
  function i(s, l, c, u) {
    r = s, e = c, t = -3 * s + 3 * l - 2 * c - u, n = 2 * s - 2 * l + c + u;
  }
  return {
    initCatmullRom: function(s, l, c, u, h) {
      i(l, c, h * (c - s), h * (u - l));
    },
    initNonuniformCatmullRom: function(s, l, c, u, h, f, p) {
      let m = (l - s) / h - (c - s) / (h + f) + (c - l) / f, v = (c - l) / f - (u - l) / (f + p) + (u - c) / p;
      m *= f, v *= f, i(l, c, m, v);
    },
    calc: function(s) {
      const l = s * s, c = l * s;
      return r + e * s + t * l + n * c;
    }
  };
}
const _c = /* @__PURE__ */ new D(), rf = /* @__PURE__ */ new zd(), sf = /* @__PURE__ */ new zd(), of = /* @__PURE__ */ new zd();
class t_ extends wi {
  constructor(e = [], t = !1, n = "centripetal", i = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = i;
  }
  getPoint(e, t = new D()) {
    const n = t, i = this.points, s = i.length, l = (s - (this.closed ? 0 : 1)) * e;
    let c = Math.floor(l), u = l - c;
    this.closed ? c += c > 0 ? 0 : (Math.floor(Math.abs(c) / s) + 1) * s : u === 0 && c === s - 1 && (c = s - 2, u = 1);
    let h, f;
    this.closed || c > 0 ? h = i[(c - 1) % s] : (_c.subVectors(i[0], i[1]).add(i[0]), h = _c);
    const p = i[c % s], m = i[(c + 1) % s];
    if (this.closed || c + 2 < s ? f = i[(c + 2) % s] : (_c.subVectors(i[s - 1], i[s - 2]).add(i[s - 1]), f = _c), this.curveType === "centripetal" || this.curveType === "chordal") {
      const v = this.curveType === "chordal" ? 0.5 : 0.25;
      let y = Math.pow(h.distanceToSquared(p), v), E = Math.pow(p.distanceToSquared(m), v), x = Math.pow(m.distanceToSquared(f), v);
      E < 1e-4 && (E = 1), y < 1e-4 && (y = E), x < 1e-4 && (x = E), rf.initNonuniformCatmullRom(h.x, p.x, m.x, f.x, y, E, x), sf.initNonuniformCatmullRom(h.y, p.y, m.y, f.y, y, E, x), of.initNonuniformCatmullRom(h.z, p.z, m.z, f.z, y, E, x);
    } else
      this.curveType === "catmullrom" && (rf.initCatmullRom(h.x, p.x, m.x, f.x, this.tension), sf.initCatmullRom(h.y, p.y, m.y, f.y, this.tension), of.initCatmullRom(h.z, p.z, m.z, f.z, this.tension));
    return n.set(
      rf.calc(u),
      sf.calc(u),
      of.calc(u)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(i.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const i = this.points[t];
      e.points.push(i.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(new D().fromArray(i));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function kg(r, e, t, n, i) {
  const s = (n - e) * 0.5, l = (i - t) * 0.5, c = r * r, u = r * c;
  return (2 * t - 2 * n + s + l) * u + (-3 * t + 3 * n - 2 * s - l) * c + s * r + t;
}
function uT(r, e) {
  const t = 1 - r;
  return t * t * e;
}
function hT(r, e) {
  return 2 * (1 - r) * r * e;
}
function fT(r, e) {
  return r * r * e;
}
function ha(r, e, t, n) {
  return uT(r, e) + hT(r, t) + fT(r, n);
}
function dT(r, e) {
  const t = 1 - r;
  return t * t * t * e;
}
function pT(r, e) {
  const t = 1 - r;
  return 3 * t * t * r * e;
}
function mT(r, e) {
  return 3 * (1 - r) * r * r * e;
}
function gT(r, e) {
  return r * r * r * e;
}
function fa(r, e, t, n, i) {
  return dT(r, e) + pT(r, t) + mT(r, n) + gT(r, i);
}
class Bd extends wi {
  constructor(e = new ue(), t = new ue(), n = new ue(), i = new ue()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
  }
  getPoint(e, t = new ue()) {
    const n = t, i = this.v0, s = this.v1, l = this.v2, c = this.v3;
    return n.set(
      fa(e, i.x, s.x, l.x, c.x),
      fa(e, i.y, s.y, l.y, c.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class n_ extends wi {
  constructor(e = new D(), t = new D(), n = new D(), i = new D()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
  }
  getPoint(e, t = new D()) {
    const n = t, i = this.v0, s = this.v1, l = this.v2, c = this.v3;
    return n.set(
      fa(e, i.x, s.x, l.x, c.x),
      fa(e, i.y, s.y, l.y, c.y),
      fa(e, i.z, s.z, l.z, c.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class kd extends wi {
  constructor(e = new ue(), t = new ue()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new ue()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new ue()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class i_ extends wi {
  constructor(e = new D(), t = new D()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new D()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new D()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class Hd extends wi {
  constructor(e = new ue(), t = new ue(), n = new ue()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new ue()) {
    const n = t, i = this.v0, s = this.v1, l = this.v2;
    return n.set(
      ha(e, i.x, s.x, l.x),
      ha(e, i.y, s.y, l.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class Vd extends wi {
  constructor(e = new D(), t = new D(), n = new D()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new D()) {
    const n = t, i = this.v0, s = this.v1, l = this.v2;
    return n.set(
      ha(e, i.x, s.x, l.x),
      ha(e, i.y, s.y, l.y),
      ha(e, i.z, s.z, l.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class Gd extends wi {
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  getPoint(e, t = new ue()) {
    const n = t, i = this.points, s = (i.length - 1) * e, l = Math.floor(s), c = s - l, u = i[l === 0 ? l : l - 1], h = i[l], f = i[l > i.length - 2 ? i.length - 1 : l + 1], p = i[l > i.length - 3 ? i.length - 1 : l + 2];
    return n.set(
      kg(c, u.x, h.x, f.x, p.x),
      kg(c, u.y, h.y, f.y, p.y)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(i.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const i = this.points[t];
      e.points.push(i.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(new ue().fromArray(i));
    }
    return this;
  }
}
const qc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ArcCurve: e_,
  CatmullRomCurve3: t_,
  CubicBezierCurve: Bd,
  CubicBezierCurve3: n_,
  EllipseCurve: uu,
  LineCurve: kd,
  LineCurve3: i_,
  QuadraticBezierCurve: Hd,
  QuadraticBezierCurve3: Vd,
  SplineCurve: Gd
}, Symbol.toStringTag, { value: "Module" }));
class r_ extends wi {
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(t)) {
      const n = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new qc[n](t, e));
    }
    return this;
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(e, t) {
    const n = e * this.getLength(), i = this.getCurveLengths();
    let s = 0;
    for (; s < i.length; ) {
      if (i[s] >= n) {
        const l = i[s] - n, c = this.curves[s], u = c.getLength(), h = u === 0 ? 0 : 1 - l / u;
        return c.getPointAt(h, t);
      }
      s++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let n = 0, i = this.curves.length; n < i; n++)
      t += this.curves[n].getLength(), e.push(t);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let n;
    for (let i = 0, s = this.curves; i < s.length; i++) {
      const l = s[i], c = l.isEllipseCurve ? e * 2 : l.isLineCurve || l.isLineCurve3 ? 1 : l.isSplineCurve ? e * l.points.length : e, u = l.getPoints(c);
      for (let h = 0; h < u.length; h++) {
        const f = u[h];
        n && n.equals(f) || (t.push(f), n = f);
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const i = e.curves[t];
      this.curves.push(i.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let t = 0, n = this.curves.length; t < n; t++) {
      const i = this.curves[t];
      e.curves.push(i.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const i = e.curves[t];
      this.curves.push(new qc[i.type]().fromJSON(i));
    }
    return this;
  }
}
class ba extends r_ {
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new ue(), e && this.setFromPoints(e);
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, n = e.length; t < n; t++)
      this.lineTo(e[t].x, e[t].y);
    return this;
  }
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  lineTo(e, t) {
    const n = new kd(this.currentPoint.clone(), new ue(e, t));
    return this.curves.push(n), this.currentPoint.set(e, t), this;
  }
  quadraticCurveTo(e, t, n, i) {
    const s = new Hd(
      this.currentPoint.clone(),
      new ue(e, t),
      new ue(n, i)
    );
    return this.curves.push(s), this.currentPoint.set(n, i), this;
  }
  bezierCurveTo(e, t, n, i, s, l) {
    const c = new Bd(
      this.currentPoint.clone(),
      new ue(e, t),
      new ue(n, i),
      new ue(s, l)
    );
    return this.curves.push(c), this.currentPoint.set(s, l), this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e), n = new Gd(t);
    return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
  }
  arc(e, t, n, i, s, l) {
    const c = this.currentPoint.x, u = this.currentPoint.y;
    return this.absarc(
      e + c,
      t + u,
      n,
      i,
      s,
      l
    ), this;
  }
  absarc(e, t, n, i, s, l) {
    return this.absellipse(e, t, n, n, i, s, l), this;
  }
  ellipse(e, t, n, i, s, l, c, u) {
    const h = this.currentPoint.x, f = this.currentPoint.y;
    return this.absellipse(e + h, t + f, n, i, s, l, c, u), this;
  }
  absellipse(e, t, n, i, s, l, c, u) {
    const h = new uu(e, t, n, i, s, l, c, u);
    if (this.curves.length > 0) {
      const p = h.getPoint(0);
      p.equals(this.currentPoint) || this.lineTo(p.x, p.y);
    }
    this.curves.push(h);
    const f = h.getPoint(1);
    return this.currentPoint.copy(f), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class Ha extends _t {
  constructor(e = [new ue(0, -0.5), new ue(0.5, 0), new ue(0, 0.5)], t = 12, n = 0, i = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: t,
      phiStart: n,
      phiLength: i
    }, t = Math.floor(t), i = Qt(i, 0, Math.PI * 2);
    const s = [], l = [], c = [], u = [], h = [], f = 1 / t, p = new D(), m = new ue(), v = new D(), y = new D(), E = new D();
    let x = 0, _ = 0;
    for (let w = 0; w <= e.length - 1; w++)
      switch (w) {
        case 0:
          x = e[w + 1].x - e[w].x, _ = e[w + 1].y - e[w].y, v.x = _ * 1, v.y = -x, v.z = _ * 0, E.copy(v), v.normalize(), u.push(v.x, v.y, v.z);
          break;
        case e.length - 1:
          u.push(E.x, E.y, E.z);
          break;
        default:
          x = e[w + 1].x - e[w].x, _ = e[w + 1].y - e[w].y, v.x = _ * 1, v.y = -x, v.z = _ * 0, y.copy(v), v.x += E.x, v.y += E.y, v.z += E.z, v.normalize(), u.push(v.x, v.y, v.z), E.copy(y);
      }
    for (let w = 0; w <= t; w++) {
      const M = n + w * f * i, b = Math.sin(M), A = Math.cos(M);
      for (let C = 0; C <= e.length - 1; C++) {
        p.x = e[C].x * b, p.y = e[C].y, p.z = e[C].x * A, l.push(p.x, p.y, p.z), m.x = w / t, m.y = C / (e.length - 1), c.push(m.x, m.y);
        const I = u[3 * C + 0] * b, z = u[3 * C + 1], R = u[3 * C + 0] * A;
        h.push(I, z, R);
      }
    }
    for (let w = 0; w < t; w++)
      for (let M = 0; M < e.length - 1; M++) {
        const b = M + w * e.length, A = b, C = b + e.length, I = b + e.length + 1, z = b + 1;
        s.push(A, C, z), s.push(I, z, C);
      }
    this.setIndex(s), this.setAttribute("position", new We(l, 3)), this.setAttribute("uv", new We(c, 2)), this.setAttribute("normal", new We(h, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Ha(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class hu extends Ha {
  constructor(e = 1, t = 1, n = 4, i = 8) {
    const s = new ba();
    s.absarc(0, -t / 2, e, Math.PI * 1.5, 0), s.absarc(0, t / 2, e, 0, Math.PI * 0.5), super(s.getPoints(n), i), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      length: t,
      capSegments: n,
      radialSegments: i
    };
  }
  static fromJSON(e) {
    return new hu(e.radius, e.length, e.capSegments, e.radialSegments);
  }
}
class fu extends _t {
  constructor(e = 1, t = 32, n = 0, i = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: t,
      thetaStart: n,
      thetaLength: i
    }, t = Math.max(3, t);
    const s = [], l = [], c = [], u = [], h = new D(), f = new ue();
    l.push(0, 0, 0), c.push(0, 0, 1), u.push(0.5, 0.5);
    for (let p = 0, m = 3; p <= t; p++, m += 3) {
      const v = n + p / t * i;
      h.x = e * Math.cos(v), h.y = e * Math.sin(v), l.push(h.x, h.y, h.z), c.push(0, 0, 1), f.x = (l[m] / e + 1) / 2, f.y = (l[m + 1] / e + 1) / 2, u.push(f.x, f.y);
    }
    for (let p = 1; p <= t; p++)
      s.push(p, p + 1, 0);
    this.setIndex(s), this.setAttribute("position", new We(l, 3)), this.setAttribute("normal", new We(c, 3)), this.setAttribute("uv", new We(u, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new fu(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class wo extends _t {
  constructor(e = 1, t = 1, n = 1, i = 32, s = 1, l = !1, c = 0, u = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: n,
      radialSegments: i,
      heightSegments: s,
      openEnded: l,
      thetaStart: c,
      thetaLength: u
    };
    const h = this;
    i = Math.floor(i), s = Math.floor(s);
    const f = [], p = [], m = [], v = [];
    let y = 0;
    const E = [], x = n / 2;
    let _ = 0;
    w(), l === !1 && (e > 0 && M(!0), t > 0 && M(!1)), this.setIndex(f), this.setAttribute("position", new We(p, 3)), this.setAttribute("normal", new We(m, 3)), this.setAttribute("uv", new We(v, 2));
    function w() {
      const b = new D(), A = new D();
      let C = 0;
      const I = (t - e) / n;
      for (let z = 0; z <= s; z++) {
        const R = [], L = z / s, H = L * (t - e) + e;
        for (let te = 0; te <= i; te++) {
          const se = te / i, G = se * u + c, $ = Math.sin(G), oe = Math.cos(G);
          A.x = H * $, A.y = -L * n + x, A.z = H * oe, p.push(A.x, A.y, A.z), b.set($, I, oe).normalize(), m.push(b.x, b.y, b.z), v.push(se, 1 - L), R.push(y++);
        }
        E.push(R);
      }
      for (let z = 0; z < i; z++)
        for (let R = 0; R < s; R++) {
          const L = E[R][z], H = E[R + 1][z], te = E[R + 1][z + 1], se = E[R][z + 1];
          f.push(L, H, se), f.push(H, te, se), C += 6;
        }
      h.addGroup(_, C, 0), _ += C;
    }
    function M(b) {
      const A = y, C = new ue(), I = new D();
      let z = 0;
      const R = b === !0 ? e : t, L = b === !0 ? 1 : -1;
      for (let te = 1; te <= i; te++)
        p.push(0, x * L, 0), m.push(0, L, 0), v.push(0.5, 0.5), y++;
      const H = y;
      for (let te = 0; te <= i; te++) {
        const G = te / i * u + c, $ = Math.cos(G), oe = Math.sin(G);
        I.x = R * oe, I.y = x * L, I.z = R * $, p.push(I.x, I.y, I.z), m.push(0, L, 0), C.x = $ * 0.5 + 0.5, C.y = oe * 0.5 * L + 0.5, v.push(C.x, C.y), y++;
      }
      for (let te = 0; te < i; te++) {
        const se = A + te, G = H + te;
        b === !0 ? f.push(G, G + 1, se) : f.push(G + 1, G, se), z += 3;
      }
      h.addGroup(_, z, b === !0 ? 1 : 2), _ += z;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new wo(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class du extends wo {
  constructor(e = 1, t = 1, n = 32, i = 1, s = !1, l = 0, c = Math.PI * 2) {
    super(0, e, t, n, i, s, l, c), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: t,
      radialSegments: n,
      heightSegments: i,
      openEnded: s,
      thetaStart: l,
      thetaLength: c
    };
  }
  static fromJSON(e) {
    return new du(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Or extends _t {
  constructor(e = [], t = [], n = 1, i = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: n,
      detail: i
    };
    const s = [], l = [];
    c(i), h(n), f(), this.setAttribute("position", new We(s, 3)), this.setAttribute("normal", new We(s.slice(), 3)), this.setAttribute("uv", new We(l, 2)), i === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function c(w) {
      const M = new D(), b = new D(), A = new D();
      for (let C = 0; C < t.length; C += 3)
        v(t[C + 0], M), v(t[C + 1], b), v(t[C + 2], A), u(M, b, A, w);
    }
    function u(w, M, b, A) {
      const C = A + 1, I = [];
      for (let z = 0; z <= C; z++) {
        I[z] = [];
        const R = w.clone().lerp(b, z / C), L = M.clone().lerp(b, z / C), H = C - z;
        for (let te = 0; te <= H; te++)
          te === 0 && z === C ? I[z][te] = R : I[z][te] = R.clone().lerp(L, te / H);
      }
      for (let z = 0; z < C; z++)
        for (let R = 0; R < 2 * (C - z) - 1; R++) {
          const L = Math.floor(R / 2);
          R % 2 === 0 ? (m(I[z][L + 1]), m(I[z + 1][L]), m(I[z][L])) : (m(I[z][L + 1]), m(I[z + 1][L + 1]), m(I[z + 1][L]));
        }
    }
    function h(w) {
      const M = new D();
      for (let b = 0; b < s.length; b += 3)
        M.x = s[b + 0], M.y = s[b + 1], M.z = s[b + 2], M.normalize().multiplyScalar(w), s[b + 0] = M.x, s[b + 1] = M.y, s[b + 2] = M.z;
    }
    function f() {
      const w = new D();
      for (let M = 0; M < s.length; M += 3) {
        w.x = s[M + 0], w.y = s[M + 1], w.z = s[M + 2];
        const b = x(w) / 2 / Math.PI + 0.5, A = _(w) / Math.PI + 0.5;
        l.push(b, 1 - A);
      }
      y(), p();
    }
    function p() {
      for (let w = 0; w < l.length; w += 6) {
        const M = l[w + 0], b = l[w + 2], A = l[w + 4], C = Math.max(M, b, A), I = Math.min(M, b, A);
        C > 0.9 && I < 0.1 && (M < 0.2 && (l[w + 0] += 1), b < 0.2 && (l[w + 2] += 1), A < 0.2 && (l[w + 4] += 1));
      }
    }
    function m(w) {
      s.push(w.x, w.y, w.z);
    }
    function v(w, M) {
      const b = w * 3;
      M.x = e[b + 0], M.y = e[b + 1], M.z = e[b + 2];
    }
    function y() {
      const w = new D(), M = new D(), b = new D(), A = new D(), C = new ue(), I = new ue(), z = new ue();
      for (let R = 0, L = 0; R < s.length; R += 9, L += 6) {
        w.set(s[R + 0], s[R + 1], s[R + 2]), M.set(s[R + 3], s[R + 4], s[R + 5]), b.set(s[R + 6], s[R + 7], s[R + 8]), C.set(l[L + 0], l[L + 1]), I.set(l[L + 2], l[L + 3]), z.set(l[L + 4], l[L + 5]), A.copy(w).add(M).add(b).divideScalar(3);
        const H = x(A);
        E(C, L + 0, w, H), E(I, L + 2, M, H), E(z, L + 4, b, H);
      }
    }
    function E(w, M, b, A) {
      A < 0 && w.x === 1 && (l[M] = w.x - 1), b.x === 0 && b.z === 0 && (l[M] = A / 2 / Math.PI + 0.5);
    }
    function x(w) {
      return Math.atan2(w.z, -w.x);
    }
    function _(w) {
      return Math.atan2(-w.y, Math.sqrt(w.x * w.x + w.z * w.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Or(e.vertices, e.indices, e.radius, e.details);
  }
}
class pu extends Or {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, i = 1 / n, s = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -i,
      -n,
      0,
      -i,
      n,
      0,
      i,
      -n,
      0,
      i,
      n,
      // (±1/φ, ±φ, 0)
      -i,
      -n,
      0,
      -i,
      n,
      0,
      i,
      -n,
      0,
      i,
      n,
      0,
      // (±φ, 0, ±1/φ)
      -n,
      0,
      -i,
      n,
      0,
      -i,
      -n,
      0,
      i,
      n,
      0,
      i
    ], l = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(s, l, e, t), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new pu(e.radius, e.detail);
  }
}
const yc = /* @__PURE__ */ new D(), xc = /* @__PURE__ */ new D(), af = /* @__PURE__ */ new D(), Sc = /* @__PURE__ */ new Gn();
class s_ extends _t {
  constructor(e = null, t = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: t
    }, e !== null) {
      const i = Math.pow(10, 4), s = Math.cos(hs * t), l = e.getIndex(), c = e.getAttribute("position"), u = l ? l.count : c.count, h = [0, 0, 0], f = ["a", "b", "c"], p = new Array(3), m = {}, v = [];
      for (let y = 0; y < u; y += 3) {
        l ? (h[0] = l.getX(y), h[1] = l.getX(y + 1), h[2] = l.getX(y + 2)) : (h[0] = y, h[1] = y + 1, h[2] = y + 2);
        const { a: E, b: x, c: _ } = Sc;
        if (E.fromBufferAttribute(c, h[0]), x.fromBufferAttribute(c, h[1]), _.fromBufferAttribute(c, h[2]), Sc.getNormal(af), p[0] = `${Math.round(E.x * i)},${Math.round(E.y * i)},${Math.round(E.z * i)}`, p[1] = `${Math.round(x.x * i)},${Math.round(x.y * i)},${Math.round(x.z * i)}`, p[2] = `${Math.round(_.x * i)},${Math.round(_.y * i)},${Math.round(_.z * i)}`, !(p[0] === p[1] || p[1] === p[2] || p[2] === p[0]))
          for (let w = 0; w < 3; w++) {
            const M = (w + 1) % 3, b = p[w], A = p[M], C = Sc[f[w]], I = Sc[f[M]], z = `${b}_${A}`, R = `${A}_${b}`;
            R in m && m[R] ? (af.dot(m[R].normal) <= s && (v.push(C.x, C.y, C.z), v.push(I.x, I.y, I.z)), m[R] = null) : z in m || (m[z] = {
              index0: h[w],
              index1: h[M],
              normal: af.clone()
            });
          }
      }
      for (const y in m)
        if (m[y]) {
          const { index0: E, index1: x } = m[y];
          yc.fromBufferAttribute(c, E), xc.fromBufferAttribute(c, x), v.push(yc.x, yc.y, yc.z), v.push(xc.x, xc.y, xc.z);
        }
      this.setAttribute("position", new We(v, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class ps extends ba {
  constructor(e) {
    super(e), this.uuid = ti(), this.type = "Shape", this.holes = [];
  }
  getPointsHoles(e) {
    const t = [];
    for (let n = 0, i = this.holes.length; n < i; n++)
      t[n] = this.holes[n].getPoints(e);
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const i = e.holes[t];
      this.holes.push(i.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let t = 0, n = this.holes.length; t < n; t++) {
      const i = this.holes[t];
      e.holes.push(i.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const i = e.holes[t];
      this.holes.push(new ba().fromJSON(i));
    }
    return this;
  }
}
const vT = {
  triangulate: function(r, e, t = 2) {
    const n = e && e.length, i = n ? e[0] * t : r.length;
    let s = o_(r, 0, i, t, !0);
    const l = [];
    if (!s || s.next === s.prev)
      return l;
    let c, u, h, f, p, m, v;
    if (n && (s = MT(r, e, s, t)), r.length > 80 * t) {
      c = h = r[0], u = f = r[1];
      for (let y = t; y < i; y += t)
        p = r[y], m = r[y + 1], p < c && (c = p), m < u && (u = m), p > h && (h = p), m > f && (f = m);
      v = Math.max(h - c, f - u), v = v !== 0 ? 32767 / v : 0;
    }
    return Aa(s, l, t, c, u, v, 0), l;
  }
};
function o_(r, e, t, n, i) {
  let s, l;
  if (i === DT(r, e, t, n) > 0)
    for (s = e; s < t; s += n)
      l = Hg(s, r[s], r[s + 1], l);
  else
    for (s = t - n; s >= e; s -= n)
      l = Hg(s, r[s], r[s + 1], l);
  return l && mu(l, l.next) && (Ca(l), l = l.next), l;
}
function _s(r, e) {
  if (!r)
    return r;
  e || (e = r);
  let t = r, n;
  do
    if (n = !1, !t.steiner && (mu(t, t.next) || Yt(t.prev, t, t.next) === 0)) {
      if (Ca(t), t = e = t.prev, t === t.next)
        break;
      n = !0;
    } else
      t = t.next;
  while (n || t !== e);
  return e;
}
function Aa(r, e, t, n, i, s, l) {
  if (!r)
    return;
  !l && s && AT(r, n, i, s);
  let c = r, u, h;
  for (; r.prev !== r.next; ) {
    if (u = r.prev, h = r.next, s ? yT(r, n, i, s) : _T(r)) {
      e.push(u.i / t | 0), e.push(r.i / t | 0), e.push(h.i / t | 0), Ca(r), r = h.next, c = h.next;
      continue;
    }
    if (r = h, r === c) {
      l ? l === 1 ? (r = xT(_s(r), e, t), Aa(r, e, t, n, i, s, 2)) : l === 2 && ST(r, e, t, n, i, s) : Aa(_s(r), e, t, n, i, s, 1);
      break;
    }
  }
}
function _T(r) {
  const e = r.prev, t = r, n = r.next;
  if (Yt(e, t, n) >= 0)
    return !1;
  const i = e.x, s = t.x, l = n.x, c = e.y, u = t.y, h = n.y, f = i < s ? i < l ? i : l : s < l ? s : l, p = c < u ? c < h ? c : h : u < h ? u : h, m = i > s ? i > l ? i : l : s > l ? s : l, v = c > u ? c > h ? c : h : u > h ? u : h;
  let y = n.next;
  for (; y !== e; ) {
    if (y.x >= f && y.x <= m && y.y >= p && y.y <= v && mo(i, c, s, u, l, h, y.x, y.y) && Yt(y.prev, y, y.next) >= 0)
      return !1;
    y = y.next;
  }
  return !0;
}
function yT(r, e, t, n) {
  const i = r.prev, s = r, l = r.next;
  if (Yt(i, s, l) >= 0)
    return !1;
  const c = i.x, u = s.x, h = l.x, f = i.y, p = s.y, m = l.y, v = c < u ? c < h ? c : h : u < h ? u : h, y = f < p ? f < m ? f : m : p < m ? p : m, E = c > u ? c > h ? c : h : u > h ? u : h, x = f > p ? f > m ? f : m : p > m ? p : m, _ = id(v, y, e, t, n), w = id(E, x, e, t, n);
  let M = r.prevZ, b = r.nextZ;
  for (; M && M.z >= _ && b && b.z <= w; ) {
    if (M.x >= v && M.x <= E && M.y >= y && M.y <= x && M !== i && M !== l && mo(c, f, u, p, h, m, M.x, M.y) && Yt(M.prev, M, M.next) >= 0 || (M = M.prevZ, b.x >= v && b.x <= E && b.y >= y && b.y <= x && b !== i && b !== l && mo(c, f, u, p, h, m, b.x, b.y) && Yt(b.prev, b, b.next) >= 0))
      return !1;
    b = b.nextZ;
  }
  for (; M && M.z >= _; ) {
    if (M.x >= v && M.x <= E && M.y >= y && M.y <= x && M !== i && M !== l && mo(c, f, u, p, h, m, M.x, M.y) && Yt(M.prev, M, M.next) >= 0)
      return !1;
    M = M.prevZ;
  }
  for (; b && b.z <= w; ) {
    if (b.x >= v && b.x <= E && b.y >= y && b.y <= x && b !== i && b !== l && mo(c, f, u, p, h, m, b.x, b.y) && Yt(b.prev, b, b.next) >= 0)
      return !1;
    b = b.nextZ;
  }
  return !0;
}
function xT(r, e, t) {
  let n = r;
  do {
    const i = n.prev, s = n.next.next;
    !mu(i, s) && a_(i, n, n.next, s) && Ra(i, s) && Ra(s, i) && (e.push(i.i / t | 0), e.push(n.i / t | 0), e.push(s.i / t | 0), Ca(n), Ca(n.next), n = r = s), n = n.next;
  } while (n !== r);
  return _s(n);
}
function ST(r, e, t, n, i, s) {
  let l = r;
  do {
    let c = l.next.next;
    for (; c !== l.prev; ) {
      if (l.i !== c.i && PT(l, c)) {
        let u = l_(l, c);
        l = _s(l, l.next), u = _s(u, u.next), Aa(l, e, t, n, i, s, 0), Aa(u, e, t, n, i, s, 0);
        return;
      }
      c = c.next;
    }
    l = l.next;
  } while (l !== r);
}
function MT(r, e, t, n) {
  const i = [];
  let s, l, c, u, h;
  for (s = 0, l = e.length; s < l; s++)
    c = e[s] * n, u = s < l - 1 ? e[s + 1] * n : r.length, h = o_(r, c, u, n, !1), h === h.next && (h.steiner = !0), i.push(CT(h));
  for (i.sort(ET), s = 0; s < i.length; s++)
    t = wT(i[s], t);
  return t;
}
function ET(r, e) {
  return r.x - e.x;
}
function wT(r, e) {
  const t = TT(r, e);
  if (!t)
    return e;
  const n = l_(t, r);
  return _s(n, n.next), _s(t, t.next);
}
function TT(r, e) {
  let t = e, n = -1 / 0, i;
  const s = r.x, l = r.y;
  do {
    if (l <= t.y && l >= t.next.y && t.next.y !== t.y) {
      const m = t.x + (l - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (m <= s && m > n && (n = m, i = t.x < t.next.x ? t : t.next, m === s))
        return i;
    }
    t = t.next;
  } while (t !== e);
  if (!i)
    return null;
  const c = i, u = i.x, h = i.y;
  let f = 1 / 0, p;
  t = i;
  do
    s >= t.x && t.x >= u && s !== t.x && mo(l < h ? s : n, l, u, h, l < h ? n : s, l, t.x, t.y) && (p = Math.abs(l - t.y) / (s - t.x), Ra(t, r) && (p < f || p === f && (t.x > i.x || t.x === i.x && bT(i, t))) && (i = t, f = p)), t = t.next;
  while (t !== c);
  return i;
}
function bT(r, e) {
  return Yt(r.prev, r, e.prev) < 0 && Yt(e.next, r, r.next) < 0;
}
function AT(r, e, t, n) {
  let i = r;
  do
    i.z === 0 && (i.z = id(i.x, i.y, e, t, n)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next;
  while (i !== r);
  i.prevZ.nextZ = null, i.prevZ = null, RT(i);
}
function RT(r) {
  let e, t, n, i, s, l, c, u, h = 1;
  do {
    for (t = r, r = null, s = null, l = 0; t; ) {
      for (l++, n = t, c = 0, e = 0; e < h && (c++, n = n.nextZ, !!n); e++)
        ;
      for (u = h; c > 0 || u > 0 && n; )
        c !== 0 && (u === 0 || !n || t.z <= n.z) ? (i = t, t = t.nextZ, c--) : (i = n, n = n.nextZ, u--), s ? s.nextZ = i : r = i, i.prevZ = s, s = i;
      t = n;
    }
    s.nextZ = null, h *= 2;
  } while (l > 1);
  return r;
}
function id(r, e, t, n, i) {
  return r = (r - t) * i | 0, e = (e - n) * i | 0, r = (r | r << 8) & 16711935, r = (r | r << 4) & 252645135, r = (r | r << 2) & 858993459, r = (r | r << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, r | e << 1;
}
function CT(r) {
  let e = r, t = r;
  do
    (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
  while (e !== r);
  return t;
}
function mo(r, e, t, n, i, s, l, c) {
  return (i - l) * (e - c) >= (r - l) * (s - c) && (r - l) * (n - c) >= (t - l) * (e - c) && (t - l) * (s - c) >= (i - l) * (n - c);
}
function PT(r, e) {
  return r.next.i !== e.i && r.prev.i !== e.i && !LT(r, e) && // dones't intersect other edges
  (Ra(r, e) && Ra(e, r) && IT(r, e) && // locally visible
  (Yt(r.prev, r, e.prev) || Yt(r, e.prev, e)) || // does not create opposite-facing sectors
  mu(r, e) && Yt(r.prev, r, r.next) > 0 && Yt(e.prev, e, e.next) > 0);
}
function Yt(r, e, t) {
  return (e.y - r.y) * (t.x - e.x) - (e.x - r.x) * (t.y - e.y);
}
function mu(r, e) {
  return r.x === e.x && r.y === e.y;
}
function a_(r, e, t, n) {
  const i = Ec(Yt(r, e, t)), s = Ec(Yt(r, e, n)), l = Ec(Yt(t, n, r)), c = Ec(Yt(t, n, e));
  return !!(i !== s && l !== c || i === 0 && Mc(r, t, e) || s === 0 && Mc(r, n, e) || l === 0 && Mc(t, r, n) || c === 0 && Mc(t, e, n));
}
function Mc(r, e, t) {
  return e.x <= Math.max(r.x, t.x) && e.x >= Math.min(r.x, t.x) && e.y <= Math.max(r.y, t.y) && e.y >= Math.min(r.y, t.y);
}
function Ec(r) {
  return r > 0 ? 1 : r < 0 ? -1 : 0;
}
function LT(r, e) {
  let t = r;
  do {
    if (t.i !== r.i && t.next.i !== r.i && t.i !== e.i && t.next.i !== e.i && a_(t, t.next, r, e))
      return !0;
    t = t.next;
  } while (t !== r);
  return !1;
}
function Ra(r, e) {
  return Yt(r.prev, r, r.next) < 0 ? Yt(r, e, r.next) >= 0 && Yt(r, r.prev, e) >= 0 : Yt(r, e, r.prev) < 0 || Yt(r, r.next, e) < 0;
}
function IT(r, e) {
  let t = r, n = !1;
  const i = (r.x + e.x) / 2, s = (r.y + e.y) / 2;
  do
    t.y > s != t.next.y > s && t.next.y !== t.y && i < (t.next.x - t.x) * (s - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
  while (t !== r);
  return n;
}
function l_(r, e) {
  const t = new rd(r.i, r.x, r.y), n = new rd(e.i, e.x, e.y), i = r.next, s = e.prev;
  return r.next = e, e.prev = r, t.next = i, i.prev = t, n.next = t, t.prev = n, s.next = n, n.prev = s, n;
}
function Hg(r, e, t, n) {
  const i = new rd(r, e, t);
  return n ? (i.next = n.next, i.prev = n, n.next.prev = i, n.next = i) : (i.prev = i, i.next = i), i;
}
function Ca(r) {
  r.next.prev = r.prev, r.prev.next = r.next, r.prevZ && (r.prevZ.nextZ = r.nextZ), r.nextZ && (r.nextZ.prevZ = r.prevZ);
}
function rd(r, e, t) {
  this.i = r, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function DT(r, e, t, n) {
  let i = 0;
  for (let s = e, l = t - n; s < t; s += n)
    i += (r[l] - r[s]) * (r[s + 1] + r[l + 1]), l = s;
  return i;
}
class zi {
  // calculate area of the contour polygon
  static area(e) {
    const t = e.length;
    let n = 0;
    for (let i = t - 1, s = 0; s < t; i = s++)
      n += e[i].x * e[s].y - e[s].x * e[i].y;
    return n * 0.5;
  }
  static isClockWise(e) {
    return zi.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const n = [], i = [], s = [];
    Vg(e), Gg(n, e);
    let l = e.length;
    t.forEach(Vg);
    for (let u = 0; u < t.length; u++)
      i.push(l), l += t[u].length, Gg(n, t[u]);
    const c = vT.triangulate(n, i);
    for (let u = 0; u < c.length; u += 3)
      s.push(c.slice(u, u + 3));
    return s;
  }
}
function Vg(r) {
  const e = r.length;
  e > 2 && r[e - 1].equals(r[0]) && r.pop();
}
function Gg(r, e) {
  for (let t = 0; t < e.length; t++)
    r.push(e[t].x), r.push(e[t].y);
}
class gu extends _t {
  constructor(e = new ps([new ue(0.5, 0.5), new ue(-0.5, 0.5), new ue(-0.5, -0.5), new ue(0.5, -0.5)]), t = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: t
    }, e = Array.isArray(e) ? e : [e];
    const n = this, i = [], s = [];
    for (let c = 0, u = e.length; c < u; c++) {
      const h = e[c];
      l(h);
    }
    this.setAttribute("position", new We(i, 3)), this.setAttribute("uv", new We(s, 2)), this.computeVertexNormals();
    function l(c) {
      const u = [], h = t.curveSegments !== void 0 ? t.curveSegments : 12, f = t.steps !== void 0 ? t.steps : 1, p = t.depth !== void 0 ? t.depth : 1;
      let m = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, v = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2, y = t.bevelSize !== void 0 ? t.bevelSize : v - 0.1, E = t.bevelOffset !== void 0 ? t.bevelOffset : 0, x = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const _ = t.extrudePath, w = t.UVGenerator !== void 0 ? t.UVGenerator : NT;
      let M, b = !1, A, C, I, z;
      _ && (M = _.getSpacedPoints(f), b = !0, m = !1, A = _.computeFrenetFrames(f, !1), C = new D(), I = new D(), z = new D()), m || (x = 0, v = 0, y = 0, E = 0);
      const R = c.extractPoints(h);
      let L = R.shape;
      const H = R.holes;
      if (!zi.isClockWise(L)) {
        L = L.reverse();
        for (let B = 0, ve = H.length; B < ve; B++) {
          const he = H[B];
          zi.isClockWise(he) && (H[B] = he.reverse());
        }
      }
      const se = zi.triangulateShape(L, H), G = L;
      for (let B = 0, ve = H.length; B < ve; B++) {
        const he = H[B];
        L = L.concat(he);
      }
      function $(B, ve, he) {
        return ve || console.error("THREE.ExtrudeGeometry: vec does not exist"), B.clone().addScaledVector(ve, he);
      }
      const oe = L.length, ie = se.length;
      function Y(B, ve, he) {
        let Ee, de, Xe;
        const Ne = B.x - ve.x, Oe = B.y - ve.y, $e = he.x - B.x, mt = he.y - B.y, Dt = Ne * Ne + Oe * Oe, O = Ne * mt - Oe * $e;
        if (Math.abs(O) > Number.EPSILON) {
          const P = Math.sqrt(Dt), ee = Math.sqrt($e * $e + mt * mt), Se = ve.x - Oe / P, ge = ve.y + Ne / P, xe = he.x - mt / ee, Ge = he.y + $e / ee, be = ((xe - Se) * mt - (Ge - ge) * $e) / (Ne * mt - Oe * $e);
          Ee = Se + Ne * be - B.x, de = ge + Oe * be - B.y;
          const Pe = Ee * Ee + de * de;
          if (Pe <= 2)
            return new ue(Ee, de);
          Xe = Math.sqrt(Pe / 2);
        } else {
          let P = !1;
          Ne > Number.EPSILON ? $e > Number.EPSILON && (P = !0) : Ne < -Number.EPSILON ? $e < -Number.EPSILON && (P = !0) : Math.sign(Oe) === Math.sign(mt) && (P = !0), P ? (Ee = -Oe, de = Ne, Xe = Math.sqrt(Dt)) : (Ee = Ne, de = Oe, Xe = Math.sqrt(Dt / 2));
        }
        return new ue(Ee / Xe, de / Xe);
      }
      const q = [];
      for (let B = 0, ve = G.length, he = ve - 1, Ee = B + 1; B < ve; B++, he++, Ee++)
        he === ve && (he = 0), Ee === ve && (Ee = 0), q[B] = Y(G[B], G[he], G[Ee]);
      const j = [];
      let k, Q = q.concat();
      for (let B = 0, ve = H.length; B < ve; B++) {
        const he = H[B];
        k = [];
        for (let Ee = 0, de = he.length, Xe = de - 1, Ne = Ee + 1; Ee < de; Ee++, Xe++, Ne++)
          Xe === de && (Xe = 0), Ne === de && (Ne = 0), k[Ee] = Y(he[Ee], he[Xe], he[Ne]);
        j.push(k), Q = Q.concat(k);
      }
      for (let B = 0; B < x; B++) {
        const ve = B / x, he = v * Math.cos(ve * Math.PI / 2), Ee = y * Math.sin(ve * Math.PI / 2) + E;
        for (let de = 0, Xe = G.length; de < Xe; de++) {
          const Ne = $(G[de], q[de], Ee);
          He(Ne.x, Ne.y, -he);
        }
        for (let de = 0, Xe = H.length; de < Xe; de++) {
          const Ne = H[de];
          k = j[de];
          for (let Oe = 0, $e = Ne.length; Oe < $e; Oe++) {
            const mt = $(Ne[Oe], k[Oe], Ee);
            He(mt.x, mt.y, -he);
          }
        }
      }
      const fe = y + E;
      for (let B = 0; B < oe; B++) {
        const ve = m ? $(L[B], Q[B], fe) : L[B];
        b ? (I.copy(A.normals[0]).multiplyScalar(ve.x), C.copy(A.binormals[0]).multiplyScalar(ve.y), z.copy(M[0]).add(I).add(C), He(z.x, z.y, z.z)) : He(ve.x, ve.y, 0);
      }
      for (let B = 1; B <= f; B++)
        for (let ve = 0; ve < oe; ve++) {
          const he = m ? $(L[ve], Q[ve], fe) : L[ve];
          b ? (I.copy(A.normals[B]).multiplyScalar(he.x), C.copy(A.binormals[B]).multiplyScalar(he.y), z.copy(M[B]).add(I).add(C), He(z.x, z.y, z.z)) : He(he.x, he.y, p / f * B);
        }
      for (let B = x - 1; B >= 0; B--) {
        const ve = B / x, he = v * Math.cos(ve * Math.PI / 2), Ee = y * Math.sin(ve * Math.PI / 2) + E;
        for (let de = 0, Xe = G.length; de < Xe; de++) {
          const Ne = $(G[de], q[de], Ee);
          He(Ne.x, Ne.y, p + he);
        }
        for (let de = 0, Xe = H.length; de < Xe; de++) {
          const Ne = H[de];
          k = j[de];
          for (let Oe = 0, $e = Ne.length; Oe < $e; Oe++) {
            const mt = $(Ne[Oe], k[Oe], Ee);
            b ? He(mt.x, mt.y + M[f - 1].y, M[f - 1].x + he) : He(mt.x, mt.y, p + he);
          }
        }
      }
      Te(), Ae();
      function Te() {
        const B = i.length / 3;
        if (m) {
          let ve = 0, he = oe * ve;
          for (let Ee = 0; Ee < ie; Ee++) {
            const de = se[Ee];
            je(de[2] + he, de[1] + he, de[0] + he);
          }
          ve = f + x * 2, he = oe * ve;
          for (let Ee = 0; Ee < ie; Ee++) {
            const de = se[Ee];
            je(de[0] + he, de[1] + he, de[2] + he);
          }
        } else {
          for (let ve = 0; ve < ie; ve++) {
            const he = se[ve];
            je(he[2], he[1], he[0]);
          }
          for (let ve = 0; ve < ie; ve++) {
            const he = se[ve];
            je(he[0] + oe * f, he[1] + oe * f, he[2] + oe * f);
          }
        }
        n.addGroup(B, i.length / 3 - B, 0);
      }
      function Ae() {
        const B = i.length / 3;
        let ve = 0;
        ke(G, ve), ve += G.length;
        for (let he = 0, Ee = H.length; he < Ee; he++) {
          const de = H[he];
          ke(de, ve), ve += de.length;
        }
        n.addGroup(B, i.length / 3 - B, 1);
      }
      function ke(B, ve) {
        let he = B.length;
        for (; --he >= 0; ) {
          const Ee = he;
          let de = he - 1;
          de < 0 && (de = B.length - 1);
          for (let Xe = 0, Ne = f + x * 2; Xe < Ne; Xe++) {
            const Oe = oe * Xe, $e = oe * (Xe + 1), mt = ve + Ee + Oe, Dt = ve + de + Oe, O = ve + de + $e, P = ve + Ee + $e;
            yt(mt, Dt, O, P);
          }
        }
      }
      function He(B, ve, he) {
        u.push(B), u.push(ve), u.push(he);
      }
      function je(B, ve, he) {
        Ct(B), Ct(ve), Ct(he);
        const Ee = i.length / 3, de = w.generateTopUV(n, i, Ee - 3, Ee - 2, Ee - 1);
        Ve(de[0]), Ve(de[1]), Ve(de[2]);
      }
      function yt(B, ve, he, Ee) {
        Ct(B), Ct(ve), Ct(Ee), Ct(ve), Ct(he), Ct(Ee);
        const de = i.length / 3, Xe = w.generateSideWallUV(n, i, de - 6, de - 3, de - 2, de - 1);
        Ve(Xe[0]), Ve(Xe[1]), Ve(Xe[3]), Ve(Xe[1]), Ve(Xe[2]), Ve(Xe[3]);
      }
      function Ct(B) {
        i.push(u[B * 3 + 0]), i.push(u[B * 3 + 1]), i.push(u[B * 3 + 2]);
      }
      function Ve(B) {
        s.push(B.x), s.push(B.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
    return UT(t, n, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let s = 0, l = e.shapes.length; s < l; s++) {
      const c = t[e.shapes[s]];
      n.push(c);
    }
    const i = e.options.extrudePath;
    return i !== void 0 && (e.options.extrudePath = new qc[i.type]().fromJSON(i)), new gu(n, e.options);
  }
}
const NT = {
  generateTopUV: function(r, e, t, n, i) {
    const s = e[t * 3], l = e[t * 3 + 1], c = e[n * 3], u = e[n * 3 + 1], h = e[i * 3], f = e[i * 3 + 1];
    return [
      new ue(s, l),
      new ue(c, u),
      new ue(h, f)
    ];
  },
  generateSideWallUV: function(r, e, t, n, i, s) {
    const l = e[t * 3], c = e[t * 3 + 1], u = e[t * 3 + 2], h = e[n * 3], f = e[n * 3 + 1], p = e[n * 3 + 2], m = e[i * 3], v = e[i * 3 + 1], y = e[i * 3 + 2], E = e[s * 3], x = e[s * 3 + 1], _ = e[s * 3 + 2];
    return Math.abs(c - f) < Math.abs(l - h) ? [
      new ue(l, 1 - u),
      new ue(h, 1 - p),
      new ue(m, 1 - y),
      new ue(E, 1 - _)
    ] : [
      new ue(c, 1 - u),
      new ue(f, 1 - p),
      new ue(v, 1 - y),
      new ue(x, 1 - _)
    ];
  }
};
function UT(r, e, t) {
  if (t.shapes = [], Array.isArray(r))
    for (let n = 0, i = r.length; n < i; n++) {
      const s = r[n];
      t.shapes.push(s.uuid);
    }
  else
    t.shapes.push(r.uuid);
  return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
class vu extends Or {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, i = [
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      0,
      0,
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      n,
      0,
      -1,
      n,
      0,
      1,
      -n,
      0,
      -1,
      -n,
      0,
      1
    ], s = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(i, s, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new vu(e.radius, e.detail);
  }
}
class Va extends Or {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], i = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(n, i, e, t), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Va(e.radius, e.detail);
  }
}
class _u extends _t {
  constructor(e = 0.5, t = 1, n = 32, i = 1, s = 0, l = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: n,
      phiSegments: i,
      thetaStart: s,
      thetaLength: l
    }, n = Math.max(3, n), i = Math.max(1, i);
    const c = [], u = [], h = [], f = [];
    let p = e;
    const m = (t - e) / i, v = new D(), y = new ue();
    for (let E = 0; E <= i; E++) {
      for (let x = 0; x <= n; x++) {
        const _ = s + x / n * l;
        v.x = p * Math.cos(_), v.y = p * Math.sin(_), u.push(v.x, v.y, v.z), h.push(0, 0, 1), y.x = (v.x / t + 1) / 2, y.y = (v.y / t + 1) / 2, f.push(y.x, y.y);
      }
      p += m;
    }
    for (let E = 0; E < i; E++) {
      const x = E * (n + 1);
      for (let _ = 0; _ < n; _++) {
        const w = _ + x, M = w, b = w + n + 1, A = w + n + 2, C = w + 1;
        c.push(M, b, C), c.push(b, A, C);
      }
    }
    this.setIndex(c), this.setAttribute("position", new We(u, 3)), this.setAttribute("normal", new We(h, 3)), this.setAttribute("uv", new We(f, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new _u(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class yu extends _t {
  constructor(e = new ps([new ue(0, 0.5), new ue(-0.5, -0.5), new ue(0.5, -0.5)]), t = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const n = [], i = [], s = [], l = [];
    let c = 0, u = 0;
    if (Array.isArray(e) === !1)
      h(e);
    else
      for (let f = 0; f < e.length; f++)
        h(e[f]), this.addGroup(c, u, f), c += u, u = 0;
    this.setIndex(n), this.setAttribute("position", new We(i, 3)), this.setAttribute("normal", new We(s, 3)), this.setAttribute("uv", new We(l, 2));
    function h(f) {
      const p = i.length / 3, m = f.extractPoints(t);
      let v = m.shape;
      const y = m.holes;
      zi.isClockWise(v) === !1 && (v = v.reverse());
      for (let x = 0, _ = y.length; x < _; x++) {
        const w = y[x];
        zi.isClockWise(w) === !0 && (y[x] = w.reverse());
      }
      const E = zi.triangulateShape(v, y);
      for (let x = 0, _ = y.length; x < _; x++) {
        const w = y[x];
        v = v.concat(w);
      }
      for (let x = 0, _ = v.length; x < _; x++) {
        const w = v[x];
        i.push(w.x, w.y, 0), s.push(0, 0, 1), l.push(w.x, w.y);
      }
      for (let x = 0, _ = E.length; x < _; x++) {
        const w = E[x], M = w[0] + p, b = w[1] + p, A = w[2] + p;
        n.push(M, b, A), u += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes;
    return OT(t, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let i = 0, s = e.shapes.length; i < s; i++) {
      const l = t[e.shapes[i]];
      n.push(l);
    }
    return new yu(n, e.curveSegments);
  }
}
function OT(r, e) {
  if (e.shapes = [], Array.isArray(r))
    for (let t = 0, n = r.length; t < n; t++) {
      const i = r[t];
      e.shapes.push(i.uuid);
    }
  else
    e.shapes.push(r.uuid);
  return e;
}
class Ga extends _t {
  constructor(e = 1, t = 32, n = 16, i = 0, s = Math.PI * 2, l = 0, c = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: n,
      phiStart: i,
      phiLength: s,
      thetaStart: l,
      thetaLength: c
    }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
    const u = Math.min(l + c, Math.PI);
    let h = 0;
    const f = [], p = new D(), m = new D(), v = [], y = [], E = [], x = [];
    for (let _ = 0; _ <= n; _++) {
      const w = [], M = _ / n;
      let b = 0;
      _ === 0 && l === 0 ? b = 0.5 / t : _ === n && u === Math.PI && (b = -0.5 / t);
      for (let A = 0; A <= t; A++) {
        const C = A / t;
        p.x = -e * Math.cos(i + C * s) * Math.sin(l + M * c), p.y = e * Math.cos(l + M * c), p.z = e * Math.sin(i + C * s) * Math.sin(l + M * c), y.push(p.x, p.y, p.z), m.copy(p).normalize(), E.push(m.x, m.y, m.z), x.push(C + b, 1 - M), w.push(h++);
      }
      f.push(w);
    }
    for (let _ = 0; _ < n; _++)
      for (let w = 0; w < t; w++) {
        const M = f[_][w + 1], b = f[_][w], A = f[_ + 1][w], C = f[_ + 1][w + 1];
        (_ !== 0 || l > 0) && v.push(M, b, C), (_ !== n - 1 || u < Math.PI) && v.push(b, A, C);
      }
    this.setIndex(v), this.setAttribute("position", new We(y, 3)), this.setAttribute("normal", new We(E, 3)), this.setAttribute("uv", new We(x, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Ga(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class xu extends Or {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], i = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(n, i, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new xu(e.radius, e.detail);
  }
}
class Su extends _t {
  constructor(e = 1, t = 0.4, n = 12, i = 48, s = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: n,
      tubularSegments: i,
      arc: s
    }, n = Math.floor(n), i = Math.floor(i);
    const l = [], c = [], u = [], h = [], f = new D(), p = new D(), m = new D();
    for (let v = 0; v <= n; v++)
      for (let y = 0; y <= i; y++) {
        const E = y / i * s, x = v / n * Math.PI * 2;
        p.x = (e + t * Math.cos(x)) * Math.cos(E), p.y = (e + t * Math.cos(x)) * Math.sin(E), p.z = t * Math.sin(x), c.push(p.x, p.y, p.z), f.x = e * Math.cos(E), f.y = e * Math.sin(E), m.subVectors(p, f).normalize(), u.push(m.x, m.y, m.z), h.push(y / i), h.push(v / n);
      }
    for (let v = 1; v <= n; v++)
      for (let y = 1; y <= i; y++) {
        const E = (i + 1) * v + y - 1, x = (i + 1) * (v - 1) + y - 1, _ = (i + 1) * (v - 1) + y, w = (i + 1) * v + y;
        l.push(E, x, w), l.push(x, _, w);
      }
    this.setIndex(l), this.setAttribute("position", new We(c, 3)), this.setAttribute("normal", new We(u, 3)), this.setAttribute("uv", new We(h, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Su(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class Mu extends _t {
  constructor(e = 1, t = 0.4, n = 64, i = 8, s = 2, l = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: n,
      radialSegments: i,
      p: s,
      q: l
    }, n = Math.floor(n), i = Math.floor(i);
    const c = [], u = [], h = [], f = [], p = new D(), m = new D(), v = new D(), y = new D(), E = new D(), x = new D(), _ = new D();
    for (let M = 0; M <= n; ++M) {
      const b = M / n * s * Math.PI * 2;
      w(b, s, l, e, v), w(b + 0.01, s, l, e, y), x.subVectors(y, v), _.addVectors(y, v), E.crossVectors(x, _), _.crossVectors(E, x), E.normalize(), _.normalize();
      for (let A = 0; A <= i; ++A) {
        const C = A / i * Math.PI * 2, I = -t * Math.cos(C), z = t * Math.sin(C);
        p.x = v.x + (I * _.x + z * E.x), p.y = v.y + (I * _.y + z * E.y), p.z = v.z + (I * _.z + z * E.z), u.push(p.x, p.y, p.z), m.subVectors(p, v).normalize(), h.push(m.x, m.y, m.z), f.push(M / n), f.push(A / i);
      }
    }
    for (let M = 1; M <= n; M++)
      for (let b = 1; b <= i; b++) {
        const A = (i + 1) * (M - 1) + (b - 1), C = (i + 1) * M + (b - 1), I = (i + 1) * M + b, z = (i + 1) * (M - 1) + b;
        c.push(A, C, z), c.push(C, I, z);
      }
    this.setIndex(c), this.setAttribute("position", new We(u, 3)), this.setAttribute("normal", new We(h, 3)), this.setAttribute("uv", new We(f, 2));
    function w(M, b, A, C, I) {
      const z = Math.cos(M), R = Math.sin(M), L = A / b * M, H = Math.cos(L);
      I.x = C * (2 + H) * 0.5 * z, I.y = C * (2 + H) * R * 0.5, I.z = C * Math.sin(L) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Mu(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class Eu extends _t {
  constructor(e = new Vd(new D(-1, -1, 0), new D(-1, 1, 0), new D(1, 1, 0)), t = 64, n = 1, i = 8, s = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: t,
      radius: n,
      radialSegments: i,
      closed: s
    };
    const l = e.computeFrenetFrames(t, s);
    this.tangents = l.tangents, this.normals = l.normals, this.binormals = l.binormals;
    const c = new D(), u = new D(), h = new ue();
    let f = new D();
    const p = [], m = [], v = [], y = [];
    E(), this.setIndex(y), this.setAttribute("position", new We(p, 3)), this.setAttribute("normal", new We(m, 3)), this.setAttribute("uv", new We(v, 2));
    function E() {
      for (let M = 0; M < t; M++)
        x(M);
      x(s === !1 ? t : 0), w(), _();
    }
    function x(M) {
      f = e.getPointAt(M / t, f);
      const b = l.normals[M], A = l.binormals[M];
      for (let C = 0; C <= i; C++) {
        const I = C / i * Math.PI * 2, z = Math.sin(I), R = -Math.cos(I);
        u.x = R * b.x + z * A.x, u.y = R * b.y + z * A.y, u.z = R * b.z + z * A.z, u.normalize(), m.push(u.x, u.y, u.z), c.x = f.x + n * u.x, c.y = f.y + n * u.y, c.z = f.z + n * u.z, p.push(c.x, c.y, c.z);
      }
    }
    function _() {
      for (let M = 1; M <= t; M++)
        for (let b = 1; b <= i; b++) {
          const A = (i + 1) * (M - 1) + (b - 1), C = (i + 1) * M + (b - 1), I = (i + 1) * M + b, z = (i + 1) * (M - 1) + b;
          y.push(A, C, z), y.push(C, I, z);
        }
    }
    function w() {
      for (let M = 0; M <= t; M++)
        for (let b = 0; b <= i; b++)
          h.x = M / t, h.y = b / i, v.push(h.x, h.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  static fromJSON(e) {
    return new Eu(
      new qc[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class c_ extends _t {
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const t = [], n = /* @__PURE__ */ new Set(), i = new D(), s = new D();
      if (e.index !== null) {
        const l = e.attributes.position, c = e.index;
        let u = e.groups;
        u.length === 0 && (u = [{ start: 0, count: c.count, materialIndex: 0 }]);
        for (let h = 0, f = u.length; h < f; ++h) {
          const p = u[h], m = p.start, v = p.count;
          for (let y = m, E = m + v; y < E; y += 3)
            for (let x = 0; x < 3; x++) {
              const _ = c.getX(y + x), w = c.getX(y + (x + 1) % 3);
              i.fromBufferAttribute(l, _), s.fromBufferAttribute(l, w), Wg(i, s, n) === !0 && (t.push(i.x, i.y, i.z), t.push(s.x, s.y, s.z));
            }
        }
      } else {
        const l = e.attributes.position;
        for (let c = 0, u = l.count / 3; c < u; c++)
          for (let h = 0; h < 3; h++) {
            const f = 3 * c + h, p = 3 * c + (h + 1) % 3;
            i.fromBufferAttribute(l, f), s.fromBufferAttribute(l, p), Wg(i, s, n) === !0 && (t.push(i.x, i.y, i.z), t.push(s.x, s.y, s.z));
          }
      }
      this.setAttribute("position", new We(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function Wg(r, e, t) {
  const n = `${r.x},${r.y},${r.z}-${e.x},${e.y},${e.z}`, i = `${e.x},${e.y},${e.z}-${r.x},${r.y},${r.z}`;
  return t.has(n) === !0 || t.has(i) === !0 ? !1 : (t.add(n), t.add(i), !0);
}
const Xg = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  BoxGeometry: Ss,
  CapsuleGeometry: hu,
  CircleGeometry: fu,
  ConeGeometry: du,
  CylinderGeometry: wo,
  DodecahedronGeometry: pu,
  EdgesGeometry: s_,
  ExtrudeGeometry: gu,
  IcosahedronGeometry: vu,
  LatheGeometry: Ha,
  OctahedronGeometry: Va,
  PlaneGeometry: ka,
  PolyhedronGeometry: Or,
  RingGeometry: _u,
  ShapeGeometry: yu,
  SphereGeometry: Ga,
  TetrahedronGeometry: xu,
  TorusGeometry: Su,
  TorusKnotGeometry: Mu,
  TubeGeometry: Eu,
  WireframeGeometry: c_
}, Symbol.toStringTag, { value: "Module" }));
class u_ extends Ln {
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new Fe(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class h_ extends fi {
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class Wd extends Ln {
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new Fe(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Fe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Nr, this.normalScale = new ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class f_ extends Wd {
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new ue(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return Qt(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new Fe(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new Fe(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new Fe(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
  }
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(e) {
    this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class d_ extends Ln {
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new Fe(16777215), this.specular = new Fe(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Fe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Nr, this.normalScale = new ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Ua, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class p_ extends Ln {
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new Fe(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Fe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Nr, this.normalScale = new ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class m_ extends Ln {
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Nr, this.normalScale = new ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class g_ extends Ln {
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new Fe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Fe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Nr, this.normalScale = new ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Ua, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class v_ extends Ln {
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new Fe(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Nr, this.normalScale = new ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class __ extends Fn {
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function us(r, e, t) {
  return !r || // let 'undefined' and 'null' pass
  !t && r.constructor === e ? r : typeof e.BYTES_PER_ELEMENT == "number" ? new e(r) : Array.prototype.slice.call(r);
}
function y_(r) {
  return ArrayBuffer.isView(r) && !(r instanceof DataView);
}
function x_(r) {
  function e(i, s) {
    return r[i] - r[s];
  }
  const t = r.length, n = new Array(t);
  for (let i = 0; i !== t; ++i)
    n[i] = i;
  return n.sort(e), n;
}
function sd(r, e, t) {
  const n = r.length, i = new r.constructor(n);
  for (let s = 0, l = 0; l !== n; ++s) {
    const c = t[s] * e;
    for (let u = 0; u !== e; ++u)
      i[l++] = r[c + u];
  }
  return i;
}
function Xd(r, e, t, n) {
  let i = 1, s = r[0];
  for (; s !== void 0 && s[n] === void 0; )
    s = r[i++];
  if (s === void 0)
    return;
  let l = s[n];
  if (l !== void 0)
    if (Array.isArray(l))
      do
        l = s[n], l !== void 0 && (e.push(s.time), t.push.apply(t, l)), s = r[i++];
      while (s !== void 0);
    else if (l.toArray !== void 0)
      do
        l = s[n], l !== void 0 && (e.push(s.time), l.toArray(t, t.length)), s = r[i++];
      while (s !== void 0);
    else
      do
        l = s[n], l !== void 0 && (e.push(s.time), t.push(l)), s = r[i++];
      while (s !== void 0);
}
function FT(r, e, t, n, i = 30) {
  const s = r.clone();
  s.name = e;
  const l = [];
  for (let u = 0; u < s.tracks.length; ++u) {
    const h = s.tracks[u], f = h.getValueSize(), p = [], m = [];
    for (let v = 0; v < h.times.length; ++v) {
      const y = h.times[v] * i;
      if (!(y < t || y >= n)) {
        p.push(h.times[v]);
        for (let E = 0; E < f; ++E)
          m.push(h.values[v * f + E]);
      }
    }
    p.length !== 0 && (h.times = us(p, h.times.constructor), h.values = us(m, h.values.constructor), l.push(h));
  }
  s.tracks = l;
  let c = 1 / 0;
  for (let u = 0; u < s.tracks.length; ++u)
    c > s.tracks[u].times[0] && (c = s.tracks[u].times[0]);
  for (let u = 0; u < s.tracks.length; ++u)
    s.tracks[u].shift(-1 * c);
  return s.resetDuration(), s;
}
function zT(r, e = 0, t = r, n = 30) {
  n <= 0 && (n = 30);
  const i = t.tracks.length, s = e / n;
  for (let l = 0; l < i; ++l) {
    const c = t.tracks[l], u = c.ValueTypeName;
    if (u === "bool" || u === "string")
      continue;
    const h = r.tracks.find(function(_) {
      return _.name === c.name && _.ValueTypeName === u;
    });
    if (h === void 0)
      continue;
    let f = 0;
    const p = c.getValueSize();
    c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (f = p / 3);
    let m = 0;
    const v = h.getValueSize();
    h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (m = v / 3);
    const y = c.times.length - 1;
    let E;
    if (s <= c.times[0]) {
      const _ = f, w = p - f;
      E = c.values.slice(_, w);
    } else if (s >= c.times[y]) {
      const _ = y * p + f, w = _ + p - f;
      E = c.values.slice(_, w);
    } else {
      const _ = c.createInterpolant(), w = f, M = p - f;
      _.evaluate(s), E = _.resultBuffer.slice(w, M);
    }
    u === "quaternion" && new Pn().fromArray(E).normalize().conjugate().toArray(E);
    const x = h.times.length;
    for (let _ = 0; _ < x; ++_) {
      const w = _ * v + m;
      if (u === "quaternion")
        Pn.multiplyQuaternionsFlat(
          h.values,
          w,
          E,
          0,
          h.values,
          w
        );
      else {
        const M = v - m * 2;
        for (let b = 0; b < M; ++b)
          h.values[w + b] -= E[b];
      }
    }
  }
  return r.blendMode = Ed, r;
}
const BT = {
  convertArray: us,
  isTypedArray: y_,
  getKeyframeOrder: x_,
  sortedArray: sd,
  flattenJSON: Xd,
  subclip: FT,
  makeClipAdditive: zT
};
class Wa {
  constructor(e, t, n, i) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = i !== void 0 ? i : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let n = this._cachedIndex, i = t[n], s = t[n - 1];
    e: {
      t: {
        let l;
        n: {
          i:
            if (!(e < i)) {
              for (let c = n + 2; ; ) {
                if (i === void 0) {
                  if (e < s)
                    break i;
                  return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
                }
                if (n === c)
                  break;
                if (s = i, i = t[++n], e < i)
                  break t;
              }
              l = t.length;
              break n;
            }
          if (!(e >= s)) {
            const c = t[1];
            e < c && (n = 2, s = c);
            for (let u = n - 2; ; ) {
              if (s === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (n === u)
                break;
              if (i = s, s = t[--n - 1], e >= s)
                break t;
            }
            l = n, n = 0;
            break n;
          }
          break e;
        }
        for (; n < l; ) {
          const c = n + l >>> 1;
          e < t[c] ? l = c : n = c + 1;
        }
        if (i = t[n], s = t[n - 1], s === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (i === void 0)
          return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
      }
      this._cachedIndex = n, this.intervalChanged_(n, s, i);
    }
    return this.interpolate_(n, s, e, i);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer, n = this.sampleValues, i = this.valueSize, s = e * i;
    for (let l = 0; l !== i; ++l)
      t[l] = n[s + l];
    return t;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
}
class S_ extends Wa {
  constructor(e, t, n, i) {
    super(e, t, n, i), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: as,
      endingEnd: as
    };
  }
  intervalChanged_(e, t, n) {
    const i = this.parameterPositions;
    let s = e - 2, l = e + 1, c = i[s], u = i[l];
    if (c === void 0)
      switch (this.getSettings_().endingStart) {
        case ls:
          s = e, c = 2 * t - n;
          break;
        case ya:
          s = i.length - 2, c = t + i[s] - i[s + 1];
          break;
        default:
          s = e, c = n;
      }
    if (u === void 0)
      switch (this.getSettings_().endingEnd) {
        case ls:
          l = e, u = 2 * n - t;
          break;
        case ya:
          l = 1, u = n + i[1] - i[0];
          break;
        default:
          l = e - 1, u = t;
      }
    const h = (n - t) * 0.5, f = this.valueSize;
    this._weightPrev = h / (t - c), this._weightNext = h / (u - n), this._offsetPrev = s * f, this._offsetNext = l * f;
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer, l = this.sampleValues, c = this.valueSize, u = e * c, h = u - c, f = this._offsetPrev, p = this._offsetNext, m = this._weightPrev, v = this._weightNext, y = (n - t) / (i - t), E = y * y, x = E * y, _ = -m * x + 2 * m * E - m * y, w = (1 + m) * x + (-1.5 - 2 * m) * E + (-0.5 + m) * y + 1, M = (-1 - v) * x + (1.5 + v) * E + 0.5 * y, b = v * x - v * E;
    for (let A = 0; A !== c; ++A)
      s[A] = _ * l[f + A] + w * l[h + A] + M * l[u + A] + b * l[p + A];
    return s;
  }
}
class Yd extends Wa {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer, l = this.sampleValues, c = this.valueSize, u = e * c, h = u - c, f = (n - t) / (i - t), p = 1 - f;
    for (let m = 0; m !== c; ++m)
      s[m] = l[h + m] * p + l[u + m] * f;
    return s;
  }
}
class M_ extends Wa {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class Ti {
  constructor(e, t, n, i) {
    if (e === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = us(t, this.TimeBufferType), this.values = us(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(e) {
    const t = e.constructor;
    let n;
    if (t.toJSON !== this.toJSON)
      n = t.toJSON(e);
    else {
      n = {
        name: e.name,
        times: us(e.times, Array),
        values: us(e.values, Array)
      };
      const i = e.getInterpolation();
      i !== e.DefaultInterpolation && (n.interpolation = i);
    }
    return n.type = e.ValueTypeName, n;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new M_(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new Yd(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new S_(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case va:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case _a:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case Bc:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(n);
      return console.warn("THREE.KeyframeTrack:", n), this;
    }
    return this.createInterpolant = t, this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return va;
      case this.InterpolantFactoryMethodLinear:
        return _a;
      case this.InterpolantFactoryMethodSmooth:
        return Bc;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let n = 0, i = t.length; n !== i; ++n)
        t[n] += e;
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let n = 0, i = t.length; n !== i; ++n)
        t[n] *= e;
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(e, t) {
    const n = this.times, i = n.length;
    let s = 0, l = i - 1;
    for (; s !== i && n[s] < e; )
      ++s;
    for (; l !== -1 && n[l] > t; )
      --l;
    if (++l, s !== 0 || l !== i) {
      s >= l && (l = Math.max(l, 1), s = l - 1);
      const c = this.getValueSize();
      this.times = n.slice(s, l), this.values = this.values.slice(s * c, l * c);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const n = this.times, i = this.values, s = n.length;
    s === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let l = null;
    for (let c = 0; c !== s; c++) {
      const u = n[c];
      if (typeof u == "number" && isNaN(u)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, c, u), e = !1;
        break;
      }
      if (l !== null && l > u) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, c, u, l), e = !1;
        break;
      }
      l = u;
    }
    if (i !== void 0 && y_(i))
      for (let c = 0, u = i.length; c !== u; ++c) {
        const h = i[c];
        if (isNaN(h)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, c, h), e = !1;
          break;
        }
      }
    return e;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const e = this.times.slice(), t = this.values.slice(), n = this.getValueSize(), i = this.getInterpolation() === Bc, s = e.length - 1;
    let l = 1;
    for (let c = 1; c < s; ++c) {
      let u = !1;
      const h = e[c], f = e[c + 1];
      if (h !== f && (c !== 1 || h !== e[0]))
        if (i)
          u = !0;
        else {
          const p = c * n, m = p - n, v = p + n;
          for (let y = 0; y !== n; ++y) {
            const E = t[p + y];
            if (E !== t[m + y] || E !== t[v + y]) {
              u = !0;
              break;
            }
          }
        }
      if (u) {
        if (c !== l) {
          e[l] = e[c];
          const p = c * n, m = l * n;
          for (let v = 0; v !== n; ++v)
            t[m + v] = t[p + v];
        }
        ++l;
      }
    }
    if (s > 0) {
      e[l] = e[s];
      for (let c = s * n, u = l * n, h = 0; h !== n; ++h)
        t[u + h] = t[c + h];
      ++l;
    }
    return l !== e.length ? (this.times = e.slice(0, l), this.values = t.slice(0, l * n)) : (this.times = e, this.values = t), this;
  }
  clone() {
    const e = this.times.slice(), t = this.values.slice(), n = this.constructor, i = new n(this.name, e, t);
    return i.createInterpolant = this.createInterpolant, i;
  }
}
Ti.prototype.TimeBufferType = Float32Array;
Ti.prototype.ValueBufferType = Float32Array;
Ti.prototype.DefaultInterpolation = _a;
class Ms extends Ti {
}
Ms.prototype.ValueTypeName = "bool";
Ms.prototype.ValueBufferType = Array;
Ms.prototype.DefaultInterpolation = va;
Ms.prototype.InterpolantFactoryMethodLinear = void 0;
Ms.prototype.InterpolantFactoryMethodSmooth = void 0;
class qd extends Ti {
}
qd.prototype.ValueTypeName = "color";
class Pa extends Ti {
}
Pa.prototype.ValueTypeName = "number";
class E_ extends Wa {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer, l = this.sampleValues, c = this.valueSize, u = (n - t) / (i - t);
    let h = e * c;
    for (let f = h + c; h !== f; h += 4)
      Pn.slerpFlat(s, 0, l, h - c, l, h, u);
    return s;
  }
}
class To extends Ti {
  InterpolantFactoryMethodLinear(e) {
    return new E_(this.times, this.values, this.getValueSize(), e);
  }
}
To.prototype.ValueTypeName = "quaternion";
To.prototype.DefaultInterpolation = _a;
To.prototype.InterpolantFactoryMethodSmooth = void 0;
class Es extends Ti {
}
Es.prototype.ValueTypeName = "string";
Es.prototype.ValueBufferType = Array;
Es.prototype.DefaultInterpolation = va;
Es.prototype.InterpolantFactoryMethodLinear = void 0;
Es.prototype.InterpolantFactoryMethodSmooth = void 0;
class La extends Ti {
}
La.prototype.ValueTypeName = "vector";
class Ia {
  constructor(e, t = -1, n, i = $c) {
    this.name = e, this.tracks = n, this.duration = t, this.blendMode = i, this.uuid = ti(), this.duration < 0 && this.resetDuration();
  }
  static parse(e) {
    const t = [], n = e.tracks, i = 1 / (e.fps || 1);
    for (let l = 0, c = n.length; l !== c; ++l)
      t.push(HT(n[l]).scale(i));
    const s = new this(e.name, e.duration, t, e.blendMode);
    return s.uuid = e.uuid, s;
  }
  static toJSON(e) {
    const t = [], n = e.tracks, i = {
      name: e.name,
      duration: e.duration,
      tracks: t,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let s = 0, l = n.length; s !== l; ++s)
      t.push(Ti.toJSON(n[s]));
    return i;
  }
  static CreateFromMorphTargetSequence(e, t, n, i) {
    const s = t.length, l = [];
    for (let c = 0; c < s; c++) {
      let u = [], h = [];
      u.push(
        (c + s - 1) % s,
        c,
        (c + 1) % s
      ), h.push(0, 1, 0);
      const f = x_(u);
      u = sd(u, 1, f), h = sd(h, 1, f), !i && u[0] === 0 && (u.push(s), h.push(h[0])), l.push(
        new Pa(
          ".morphTargetInfluences[" + t[c].name + "]",
          u,
          h
        ).scale(1 / n)
      );
    }
    return new this(e, -1, l);
  }
  static findByName(e, t) {
    let n = e;
    if (!Array.isArray(e)) {
      const i = e;
      n = i.geometry && i.geometry.animations || i.animations;
    }
    for (let i = 0; i < n.length; i++)
      if (n[i].name === t)
        return n[i];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, n) {
    const i = {}, s = /^([\w-]*?)([\d]+)$/;
    for (let c = 0, u = e.length; c < u; c++) {
      const h = e[c], f = h.name.match(s);
      if (f && f.length > 1) {
        const p = f[1];
        let m = i[p];
        m || (i[p] = m = []), m.push(h);
      }
    }
    const l = [];
    for (const c in i)
      l.push(this.CreateFromMorphTargetSequence(c, i[c], t, n));
    return l;
  }
  // parse the animation.hierarchy format
  static parseAnimation(e, t) {
    if (!e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const n = function(p, m, v, y, E) {
      if (v.length !== 0) {
        const x = [], _ = [];
        Xd(v, x, _, y), x.length !== 0 && E.push(new p(m, x, _));
      }
    }, i = [], s = e.name || "default", l = e.fps || 30, c = e.blendMode;
    let u = e.length || -1;
    const h = e.hierarchy || [];
    for (let p = 0; p < h.length; p++) {
      const m = h[p].keys;
      if (!(!m || m.length === 0))
        if (m[0].morphTargets) {
          const v = {};
          let y;
          for (y = 0; y < m.length; y++)
            if (m[y].morphTargets)
              for (let E = 0; E < m[y].morphTargets.length; E++)
                v[m[y].morphTargets[E]] = -1;
          for (const E in v) {
            const x = [], _ = [];
            for (let w = 0; w !== m[y].morphTargets.length; ++w) {
              const M = m[y];
              x.push(M.time), _.push(M.morphTarget === E ? 1 : 0);
            }
            i.push(new Pa(".morphTargetInfluence[" + E + "]", x, _));
          }
          u = v.length * l;
        } else {
          const v = ".bones[" + t[p].name + "]";
          n(
            La,
            v + ".position",
            m,
            "pos",
            i
          ), n(
            To,
            v + ".quaternion",
            m,
            "rot",
            i
          ), n(
            La,
            v + ".scale",
            m,
            "scl",
            i
          );
        }
    }
    return i.length === 0 ? null : new this(s, u, i, c);
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let n = 0, i = e.length; n !== i; ++n) {
      const s = this.tracks[n];
      t = Math.max(t, s.times[s.times.length - 1]);
    }
    return this.duration = t, this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++)
      e = e && this.tracks[t].validate();
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++)
      e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function kT(r) {
  switch (r.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return Pa;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return La;
    case "color":
      return qd;
    case "quaternion":
      return To;
    case "bool":
    case "boolean":
      return Ms;
    case "string":
      return Es;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + r);
}
function HT(r) {
  if (r.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = kT(r.type);
  if (r.times === void 0) {
    const t = [], n = [];
    Xd(r.keys, t, n, "value"), r.times = t, r.values = n;
  }
  return e.parse !== void 0 ? e.parse(r) : new e(r.name, r.times, r.values, r.interpolation);
}
const ys = {
  enabled: !1,
  files: {},
  add: function(r, e) {
    this.enabled !== !1 && (this.files[r] = e);
  },
  get: function(r) {
    if (this.enabled !== !1)
      return this.files[r];
  },
  remove: function(r) {
    delete this.files[r];
  },
  clear: function() {
    this.files = {};
  }
};
class jd {
  constructor(e, t, n) {
    const i = this;
    let s = !1, l = 0, c = 0, u;
    const h = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(f) {
      c++, s === !1 && i.onStart !== void 0 && i.onStart(f, l, c), s = !0;
    }, this.itemEnd = function(f) {
      l++, i.onProgress !== void 0 && i.onProgress(f, l, c), l === c && (s = !1, i.onLoad !== void 0 && i.onLoad());
    }, this.itemError = function(f) {
      i.onError !== void 0 && i.onError(f);
    }, this.resolveURL = function(f) {
      return u ? u(f) : f;
    }, this.setURLModifier = function(f) {
      return u = f, this;
    }, this.addHandler = function(f, p) {
      return h.push(f, p), this;
    }, this.removeHandler = function(f) {
      const p = h.indexOf(f);
      return p !== -1 && h.splice(p, 2), this;
    }, this.getHandler = function(f) {
      for (let p = 0, m = h.length; p < m; p += 2) {
        const v = h[p], y = h[p + 1];
        if (v.global && (v.lastIndex = 0), v.test(f))
          return y;
      }
      return null;
    };
  }
}
const w_ = /* @__PURE__ */ new jd();
class Xn {
  constructor(e) {
    this.manager = e !== void 0 ? e : w_, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  load() {
  }
  loadAsync(e, t) {
    const n = this;
    return new Promise(function(i, s) {
      n.load(e, i, t, s);
    });
  }
  parse() {
  }
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  setPath(e) {
    return this.path = e, this;
  }
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
}
Xn.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const er = {};
class VT extends Error {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
class cr extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = ys.get(e);
    if (s !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        t && t(s), this.manager.itemEnd(e);
      }, 0), s;
    if (er[e] !== void 0) {
      er[e].push({
        onLoad: t,
        onProgress: n,
        onError: i
      });
      return;
    }
    er[e] = [], er[e].push({
      onLoad: t,
      onProgress: n,
      onError: i
    });
    const l = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    }), c = this.mimeType, u = this.responseType;
    fetch(l).then((h) => {
      if (h.status === 200 || h.status === 0) {
        if (h.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || h.body === void 0 || h.body.getReader === void 0)
          return h;
        const f = er[e], p = h.body.getReader(), m = h.headers.get("Content-Length") || h.headers.get("X-File-Size"), v = m ? parseInt(m) : 0, y = v !== 0;
        let E = 0;
        const x = new ReadableStream({
          start(_) {
            w();
            function w() {
              p.read().then(({ done: M, value: b }) => {
                if (M)
                  _.close();
                else {
                  E += b.byteLength;
                  const A = new ProgressEvent("progress", { lengthComputable: y, loaded: E, total: v });
                  for (let C = 0, I = f.length; C < I; C++) {
                    const z = f[C];
                    z.onProgress && z.onProgress(A);
                  }
                  _.enqueue(b), w();
                }
              });
            }
          }
        });
        return new Response(x);
      } else
        throw new VT(`fetch for "${h.url}" responded with ${h.status}: ${h.statusText}`, h);
    }).then((h) => {
      switch (u) {
        case "arraybuffer":
          return h.arrayBuffer();
        case "blob":
          return h.blob();
        case "document":
          return h.text().then((f) => new DOMParser().parseFromString(f, c));
        case "json":
          return h.json();
        default:
          if (c === void 0)
            return h.text();
          {
            const p = /charset="?([^;"\s]*)"?/i.exec(c), m = p && p[1] ? p[1].toLowerCase() : void 0, v = new TextDecoder(m);
            return h.arrayBuffer().then((y) => v.decode(y));
          }
      }
    }).then((h) => {
      ys.add(e, h);
      const f = er[e];
      delete er[e];
      for (let p = 0, m = f.length; p < m; p++) {
        const v = f[p];
        v.onLoad && v.onLoad(h);
      }
    }).catch((h) => {
      const f = er[e];
      if (f === void 0)
        throw this.manager.itemError(e), h;
      delete er[e];
      for (let p = 0, m = f.length; p < m; p++) {
        const v = f[p];
        v.onError && v.onError(h);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  setResponseType(e) {
    return this.responseType = e, this;
  }
  setMimeType(e) {
    return this.mimeType = e, this;
  }
}
class GT extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this, l = new cr(this.manager);
    l.setPath(this.path), l.setRequestHeader(this.requestHeader), l.setWithCredentials(this.withCredentials), l.load(e, function(c) {
      try {
        t(s.parse(JSON.parse(c)));
      } catch (u) {
        i ? i(u) : console.error(u), s.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const i = Ia.parse(e[n]);
      t.push(i);
    }
    return t;
  }
}
class WT extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this, l = [], c = new cu(), u = new cr(this.manager);
    u.setPath(this.path), u.setResponseType("arraybuffer"), u.setRequestHeader(this.requestHeader), u.setWithCredentials(s.withCredentials);
    let h = 0;
    function f(p) {
      u.load(e[p], function(m) {
        const v = s.parse(m, !0);
        l[p] = {
          width: v.width,
          height: v.height,
          format: v.format,
          mipmaps: v.mipmaps
        }, h += 1, h === 6 && (v.mipmapCount === 1 && (c.minFilter = Xt), c.image = l, c.format = v.format, c.needsUpdate = !0, t && t(c));
      }, n, i);
    }
    if (Array.isArray(e))
      for (let p = 0, m = e.length; p < m; ++p)
        f(p);
    else
      u.load(e, function(p) {
        const m = s.parse(p, !0);
        if (m.isCubemap) {
          const v = m.mipmaps.length / m.mipmapCount;
          for (let y = 0; y < v; y++) {
            l[y] = { mipmaps: [] };
            for (let E = 0; E < m.mipmapCount; E++)
              l[y].mipmaps.push(m.mipmaps[y * m.mipmapCount + E]), l[y].format = m.format, l[y].width = m.width, l[y].height = m.height;
          }
          c.image = l;
        } else
          c.image.width = m.width, c.image.height = m.height, c.mipmaps = m.mipmaps;
        m.mipmapCount === 1 && (c.minFilter = Xt), c.format = m.format, c.needsUpdate = !0, t && t(c);
      }, n, i);
    return c;
  }
}
class Da extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = this, l = ys.get(e);
    if (l !== void 0)
      return s.manager.itemStart(e), setTimeout(function() {
        t && t(l), s.manager.itemEnd(e);
      }, 0), l;
    const c = Ta("img");
    function u() {
      f(), ys.add(e, this), t && t(this), s.manager.itemEnd(e);
    }
    function h(p) {
      f(), i && i(p), s.manager.itemError(e), s.manager.itemEnd(e);
    }
    function f() {
      c.removeEventListener("load", u, !1), c.removeEventListener("error", h, !1);
    }
    return c.addEventListener("load", u, !1), c.addEventListener("error", h, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (c.crossOrigin = this.crossOrigin), s.manager.itemStart(e), c.src = e, c;
  }
}
class XT extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = new Ba();
    s.colorSpace = hn;
    const l = new Da(this.manager);
    l.setCrossOrigin(this.crossOrigin), l.setPath(this.path);
    let c = 0;
    function u(h) {
      l.load(e[h], function(f) {
        s.images[h] = f, c++, c === 6 && (s.needsUpdate = !0, t && t(s));
      }, void 0, i);
    }
    for (let h = 0; h < e.length; ++h)
      u(h);
    return s;
  }
}
class YT extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this, l = new ds(), c = new cr(this.manager);
    return c.setResponseType("arraybuffer"), c.setRequestHeader(this.requestHeader), c.setPath(this.path), c.setWithCredentials(s.withCredentials), c.load(e, function(u) {
      let h;
      try {
        h = s.parse(u);
      } catch (f) {
        if (i !== void 0)
          i(f);
        else {
          console.error(f);
          return;
        }
      }
      h.image !== void 0 ? l.image = h.image : h.data !== void 0 && (l.image.width = h.width, l.image.height = h.height, l.image.data = h.data), l.wrapS = h.wrapS !== void 0 ? h.wrapS : Rn, l.wrapT = h.wrapT !== void 0 ? h.wrapT : Rn, l.magFilter = h.magFilter !== void 0 ? h.magFilter : Xt, l.minFilter = h.minFilter !== void 0 ? h.minFilter : Xt, l.anisotropy = h.anisotropy !== void 0 ? h.anisotropy : 1, h.colorSpace !== void 0 ? l.colorSpace = h.colorSpace : h.encoding !== void 0 && (l.encoding = h.encoding), h.flipY !== void 0 && (l.flipY = h.flipY), h.format !== void 0 && (l.format = h.format), h.type !== void 0 && (l.type = h.type), h.mipmaps !== void 0 && (l.mipmaps = h.mipmaps, l.minFilter = Ir), h.mipmapCount === 1 && (l.minFilter = Xt), h.generateMipmaps !== void 0 && (l.generateMipmaps = h.generateMipmaps), l.needsUpdate = !0, t && t(l, h);
    }, n, i), l;
  }
}
class qT extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = new nn(), l = new Da(this.manager);
    return l.setCrossOrigin(this.crossOrigin), l.setPath(this.path), l.load(e, function(c) {
      s.image = c, s.needsUpdate = !0, t !== void 0 && t(s);
    }, n, i), s;
  }
}
class Fr extends Rt {
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new Fe(e), this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
  }
}
class T_ extends Fr {
  constructor(e, t, n) {
    super(e, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Rt.DEFAULT_UP), this.updateMatrix(), this.groundColor = new Fe(t);
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const lf = /* @__PURE__ */ new ut(), Yg = /* @__PURE__ */ new D(), qg = /* @__PURE__ */ new D();
class Zd {
  constructor(e) {
    this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new ue(512, 512), this.map = null, this.mapPass = null, this.matrix = new ut(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new nu(), this._frameExtents = new ue(1, 1), this._viewportCount = 1, this._viewports = [
      new It(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera, n = this.matrix;
    Yg.setFromMatrixPosition(e.matrixWorld), t.position.copy(Yg), qg.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(qg), t.updateMatrixWorld(), lf.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(lf), n.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), n.multiply(lf);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class jT extends Zd {
  constructor() {
    super(new tn(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera, n = _o * 2 * e.angle * this.focus, i = this.mapSize.width / this.mapSize.height, s = e.distance || t.far;
    (n !== t.fov || i !== t.aspect || s !== t.far) && (t.fov = n, t.aspect = i, t.far = s, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class b_ extends Fr {
  constructor(e, t, n = 0, i = Math.PI / 3, s = 0, l = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Rt.DEFAULT_UP), this.updateMatrix(), this.target = new Rt(), this.distance = n, this.angle = i, this.penumbra = s, this.decay = l, this.map = null, this.shadow = new jT();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const jg = /* @__PURE__ */ new ut(), ta = /* @__PURE__ */ new D(), cf = /* @__PURE__ */ new D();
class ZT extends Zd {
  constructor() {
    super(new tn(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new ue(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new It(2, 1, 1, 1),
      // negative X
      new It(0, 1, 1, 1),
      // positive Z
      new It(3, 1, 1, 1),
      // negative Z
      new It(1, 1, 1, 1),
      // positive Y
      new It(3, 0, 1, 1),
      // negative Y
      new It(1, 0, 1, 1)
    ], this._cubeDirections = [
      new D(1, 0, 0),
      new D(-1, 0, 0),
      new D(0, 0, 1),
      new D(0, 0, -1),
      new D(0, 1, 0),
      new D(0, -1, 0)
    ], this._cubeUps = [
      new D(0, 1, 0),
      new D(0, 1, 0),
      new D(0, 1, 0),
      new D(0, 1, 0),
      new D(0, 0, 1),
      new D(0, 0, -1)
    ];
  }
  updateMatrices(e, t = 0) {
    const n = this.camera, i = this.matrix, s = e.distance || n.far;
    s !== n.far && (n.far = s, n.updateProjectionMatrix()), ta.setFromMatrixPosition(e.matrixWorld), n.position.copy(ta), cf.copy(n.position), cf.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(cf), n.updateMatrixWorld(), i.makeTranslation(-ta.x, -ta.y, -ta.z), jg.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(jg);
  }
}
class A_ extends Fr {
  constructor(e, t, n = 0, i = 2) {
    super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = i, this.shadow = new ZT();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class JT extends Zd {
  constructor() {
    super(new or(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class R_ extends Fr {
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Rt.DEFAULT_UP), this.updateMatrix(), this.target = new Rt(), this.shadow = new JT();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class C_ extends Fr {
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class P_ extends Fr {
  constructor(e, t, n = 10, i = 10) {
    super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = i;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.width = this.width, t.object.height = this.height, t;
  }
}
class L_ {
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new D());
  }
  set(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].copy(e[t]);
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(e, t) {
    const n = e.x, i = e.y, s = e.z, l = this.coefficients;
    return t.copy(l[0]).multiplyScalar(0.282095), t.addScaledVector(l[1], 0.488603 * i), t.addScaledVector(l[2], 0.488603 * s), t.addScaledVector(l[3], 0.488603 * n), t.addScaledVector(l[4], 1.092548 * (n * i)), t.addScaledVector(l[5], 1.092548 * (i * s)), t.addScaledVector(l[6], 0.315392 * (3 * s * s - 1)), t.addScaledVector(l[7], 1.092548 * (n * s)), t.addScaledVector(l[8], 0.546274 * (n * n - i * i)), t;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(e, t) {
    const n = e.x, i = e.y, s = e.z, l = this.coefficients;
    return t.copy(l[0]).multiplyScalar(0.886227), t.addScaledVector(l[1], 2 * 0.511664 * i), t.addScaledVector(l[2], 2 * 0.511664 * s), t.addScaledVector(l[3], 2 * 0.511664 * n), t.addScaledVector(l[4], 2 * 0.429043 * n * i), t.addScaledVector(l[5], 2 * 0.429043 * i * s), t.addScaledVector(l[6], 0.743125 * s * s - 0.247708), t.addScaledVector(l[7], 2 * 0.429043 * n * s), t.addScaledVector(l[8], 0.429043 * (n * n - i * i)), t;
  }
  add(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  addScaledSH(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].addScaledVector(e.coefficients[n], t);
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].multiplyScalar(e);
    return this;
  }
  lerp(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].lerp(e.coefficients[n], t);
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++)
      if (!this.coefficients[t].equals(e.coefficients[t]))
        return !1;
    return !0;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const n = this.coefficients;
    for (let i = 0; i < 9; i++)
      n[i].fromArray(e, t + i * 3);
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.coefficients;
    for (let i = 0; i < 9; i++)
      n[i].toArray(e, t + i * 3);
    return e;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(e, t) {
    const n = e.x, i = e.y, s = e.z;
    t[0] = 0.282095, t[1] = 0.488603 * i, t[2] = 0.488603 * s, t[3] = 0.488603 * n, t[4] = 1.092548 * n * i, t[5] = 1.092548 * i * s, t[6] = 0.315392 * (3 * s * s - 1), t[7] = 1.092548 * n * s, t[8] = 0.546274 * (n * n - i * i);
  }
}
class I_ extends Fr {
  constructor(e = new L_(), t = 1) {
    super(void 0, t), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.sh = this.sh.toArray(), t;
  }
}
class wu extends Xn {
  constructor(e) {
    super(e), this.textures = {};
  }
  load(e, t, n, i) {
    const s = this, l = new cr(s.manager);
    l.setPath(s.path), l.setRequestHeader(s.requestHeader), l.setWithCredentials(s.withCredentials), l.load(e, function(c) {
      try {
        t(s.parse(JSON.parse(c)));
      } catch (u) {
        i ? i(u) : console.error(u), s.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = this.textures;
    function n(s) {
      return t[s] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", s), t[s];
    }
    const i = wu.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (i.uuid = e.uuid), e.name !== void 0 && (i.name = e.name), e.color !== void 0 && i.color !== void 0 && i.color.setHex(e.color), e.roughness !== void 0 && (i.roughness = e.roughness), e.metalness !== void 0 && (i.metalness = e.metalness), e.sheen !== void 0 && (i.sheen = e.sheen), e.sheenColor !== void 0 && (i.sheenColor = new Fe().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (i.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && i.emissive !== void 0 && i.emissive.setHex(e.emissive), e.specular !== void 0 && i.specular !== void 0 && i.specular.setHex(e.specular), e.specularIntensity !== void 0 && (i.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && i.specularColor !== void 0 && i.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (i.shininess = e.shininess), e.clearcoat !== void 0 && (i.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = e.clearcoatRoughness), e.iridescence !== void 0 && (i.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (i.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (i.transmission = e.transmission), e.thickness !== void 0 && (i.thickness = e.thickness), e.attenuationDistance !== void 0 && (i.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && i.attenuationColor !== void 0 && i.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (i.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (i.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (i.fog = e.fog), e.flatShading !== void 0 && (i.flatShading = e.flatShading), e.blending !== void 0 && (i.blending = e.blending), e.combine !== void 0 && (i.combine = e.combine), e.side !== void 0 && (i.side = e.side), e.shadowSide !== void 0 && (i.shadowSide = e.shadowSide), e.opacity !== void 0 && (i.opacity = e.opacity), e.transparent !== void 0 && (i.transparent = e.transparent), e.alphaTest !== void 0 && (i.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (i.alphaHash = e.alphaHash), e.depthTest !== void 0 && (i.depthTest = e.depthTest), e.depthWrite !== void 0 && (i.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (i.colorWrite = e.colorWrite), e.stencilWrite !== void 0 && (i.stencilWrite = e.stencilWrite), e.stencilWriteMask !== void 0 && (i.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (i.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (i.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (i.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (i.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (i.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (i.stencilZPass = e.stencilZPass), e.wireframe !== void 0 && (i.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (i.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (i.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (i.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (i.rotation = e.rotation), e.linewidth !== void 0 && (i.linewidth = e.linewidth), e.dashSize !== void 0 && (i.dashSize = e.dashSize), e.gapSize !== void 0 && (i.gapSize = e.gapSize), e.scale !== void 0 && (i.scale = e.scale), e.polygonOffset !== void 0 && (i.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (i.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (i.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (i.dithering = e.dithering), e.alphaToCoverage !== void 0 && (i.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (i.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (i.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (i.visible = e.visible), e.toneMapped !== void 0 && (i.toneMapped = e.toneMapped), e.userData !== void 0 && (i.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? i.vertexColors = e.vertexColors > 0 : i.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const s in e.uniforms) {
        const l = e.uniforms[s];
        switch (i.uniforms[s] = {}, l.type) {
          case "t":
            i.uniforms[s].value = n(l.value);
            break;
          case "c":
            i.uniforms[s].value = new Fe().setHex(l.value);
            break;
          case "v2":
            i.uniforms[s].value = new ue().fromArray(l.value);
            break;
          case "v3":
            i.uniforms[s].value = new D().fromArray(l.value);
            break;
          case "v4":
            i.uniforms[s].value = new It().fromArray(l.value);
            break;
          case "m3":
            i.uniforms[s].value = new pt().fromArray(l.value);
            break;
          case "m4":
            i.uniforms[s].value = new ut().fromArray(l.value);
            break;
          default:
            i.uniforms[s].value = l.value;
        }
      }
    if (e.defines !== void 0 && (i.defines = e.defines), e.vertexShader !== void 0 && (i.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (i.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (i.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const s in e.extensions)
        i.extensions[s] = e.extensions[s];
    if (e.lights !== void 0 && (i.lights = e.lights), e.clipping !== void 0 && (i.clipping = e.clipping), e.size !== void 0 && (i.size = e.size), e.sizeAttenuation !== void 0 && (i.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (i.map = n(e.map)), e.matcap !== void 0 && (i.matcap = n(e.matcap)), e.alphaMap !== void 0 && (i.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (i.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (i.bumpScale = e.bumpScale), e.normalMap !== void 0 && (i.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (i.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let s = e.normalScale;
      Array.isArray(s) === !1 && (s = [s, s]), i.normalScale = new ue().fromArray(s);
    }
    return e.displacementMap !== void 0 && (i.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (i.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (i.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (i.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (i.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (i.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (i.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (i.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (i.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (i.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (i.envMap = n(e.envMap)), e.envMapIntensity !== void 0 && (i.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (i.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (i.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (i.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (i.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (i.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (i.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (i.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (i.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (i.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (i.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (i.clearcoatNormalScale = new ue().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (i.iridescenceMap = n(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (i.iridescenceThicknessMap = n(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (i.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (i.thicknessMap = n(e.thicknessMap)), e.anisotropyMap !== void 0 && (i.anisotropyMap = n(e.anisotropyMap)), e.sheenColorMap !== void 0 && (i.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (i.sheenRoughnessMap = n(e.sheenRoughnessMap)), i;
  }
  setTextures(e) {
    return this.textures = e, this;
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: u_,
      SpriteMaterial: Ud,
      RawShaderMaterial: h_,
      ShaderMaterial: fi,
      PointsMaterial: Fd,
      MeshPhysicalMaterial: f_,
      MeshStandardMaterial: Wd,
      MeshPhongMaterial: d_,
      MeshToonMaterial: p_,
      MeshNormalMaterial: m_,
      MeshLambertMaterial: g_,
      MeshDepthMaterial: Ld,
      MeshDistanceMaterial: Id,
      MeshBasicMaterial: Ur,
      MeshMatcapMaterial: v_,
      LineDashedMaterial: __,
      LineBasicMaterial: Fn,
      Material: Ln
    };
    return new t[e]();
  }
}
class od {
  static decodeText(e) {
    if (typeof TextDecoder < "u")
      return new TextDecoder().decode(e);
    let t = "";
    for (let n = 0, i = e.length; n < i; n++)
      t += String.fromCharCode(e[n]);
    try {
      return decodeURIComponent(escape(t));
    } catch {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class D_ extends _t {
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class N_ extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this, l = new cr(s.manager);
    l.setPath(s.path), l.setRequestHeader(s.requestHeader), l.setWithCredentials(s.withCredentials), l.load(e, function(c) {
      try {
        t(s.parse(JSON.parse(c)));
      } catch (u) {
        i ? i(u) : console.error(u), s.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = {}, n = {};
    function i(v, y) {
      if (t[y] !== void 0)
        return t[y];
      const x = v.interleavedBuffers[y], _ = s(v, x.buffer), w = ho(x.type, _), M = new au(w, x.stride);
      return M.uuid = x.uuid, t[y] = M, M;
    }
    function s(v, y) {
      if (n[y] !== void 0)
        return n[y];
      const x = v.arrayBuffers[y], _ = new Uint32Array(x).buffer;
      return n[y] = _, _;
    }
    const l = e.isInstancedBufferGeometry ? new D_() : new _t(), c = e.data.index;
    if (c !== void 0) {
      const v = ho(c.type, c.array);
      l.setIndex(new Ot(v, 1));
    }
    const u = e.data.attributes;
    for (const v in u) {
      const y = u[v];
      let E;
      if (y.isInterleavedBufferAttribute) {
        const x = i(e.data, y.data);
        E = new vs(x, y.itemSize, y.offset, y.normalized);
      } else {
        const x = ho(y.type, y.array), _ = y.isInstancedBufferAttribute ? xo : Ot;
        E = new _(x, y.itemSize, y.normalized);
      }
      y.name !== void 0 && (E.name = y.name), y.usage !== void 0 && E.setUsage(y.usage), y.updateRange !== void 0 && (E.updateRange.offset = y.updateRange.offset, E.updateRange.count = y.updateRange.count), l.setAttribute(v, E);
    }
    const h = e.data.morphAttributes;
    if (h)
      for (const v in h) {
        const y = h[v], E = [];
        for (let x = 0, _ = y.length; x < _; x++) {
          const w = y[x];
          let M;
          if (w.isInterleavedBufferAttribute) {
            const b = i(e.data, w.data);
            M = new vs(b, w.itemSize, w.offset, w.normalized);
          } else {
            const b = ho(w.type, w.array);
            M = new Ot(b, w.itemSize, w.normalized);
          }
          w.name !== void 0 && (M.name = w.name), E.push(M);
        }
        l.morphAttributes[v] = E;
      }
    e.data.morphTargetsRelative && (l.morphTargetsRelative = !0);
    const p = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (p !== void 0)
      for (let v = 0, y = p.length; v !== y; ++v) {
        const E = p[v];
        l.addGroup(E.start, E.count, E.materialIndex);
      }
    const m = e.data.boundingSphere;
    if (m !== void 0) {
      const v = new D();
      m.center !== void 0 && v.fromArray(m.center), l.boundingSphere = new Ei(v, m.radius);
    }
    return e.name && (l.name = e.name), e.userData && (l.userData = e.userData), l;
  }
}
class KT extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this, l = this.path === "" ? od.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || l;
    const c = new cr(this.manager);
    c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials), c.load(e, function(u) {
      let h = null;
      try {
        h = JSON.parse(u);
      } catch (p) {
        i !== void 0 && i(p), console.error("THREE:ObjectLoader: Can't parse " + e + ".", p.message);
        return;
      }
      const f = h.metadata;
      if (f === void 0 || f.type === void 0 || f.type.toLowerCase() === "geometry") {
        i !== void 0 && i(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      s.parse(h, t);
    }, n, i);
  }
  async loadAsync(e, t) {
    const n = this, i = this.path === "" ? od.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || i;
    const s = new cr(this.manager);
    s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials);
    const l = await s.loadAsync(e, t), c = JSON.parse(l), u = c.metadata;
    if (u === void 0 || u.type === void 0 || u.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await n.parseAsync(c);
  }
  parse(e, t) {
    const n = this.parseAnimations(e.animations), i = this.parseShapes(e.shapes), s = this.parseGeometries(e.geometries, i), l = this.parseImages(e.images, function() {
      t !== void 0 && t(h);
    }), c = this.parseTextures(e.textures, l), u = this.parseMaterials(e.materials, c), h = this.parseObject(e.object, s, u, c, n), f = this.parseSkeletons(e.skeletons, h);
    if (this.bindSkeletons(h, f), t !== void 0) {
      let p = !1;
      for (const m in l)
        if (l[m].data instanceof HTMLImageElement) {
          p = !0;
          break;
        }
      p === !1 && t(h);
    }
    return h;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), i = this.parseGeometries(e.geometries, n), s = await this.parseImagesAsync(e.images), l = this.parseTextures(e.textures, s), c = this.parseMaterials(e.materials, l), u = this.parseObject(e.object, i, c, l, t), h = this.parseSkeletons(e.skeletons, u);
    return this.bindSkeletons(u, h), u;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0, i = e.length; n < i; n++) {
        const s = new ps().fromJSON(e[n]);
        t[s.uuid] = s;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const n = {}, i = {};
    if (t.traverse(function(s) {
      s.isBone && (i[s.uuid] = s);
    }), e !== void 0)
      for (let s = 0, l = e.length; s < l; s++) {
        const c = new lu().fromJSON(e[s], i);
        n[c.uuid] = c;
      }
    return n;
  }
  parseGeometries(e, t) {
    const n = {};
    if (e !== void 0) {
      const i = new N_();
      for (let s = 0, l = e.length; s < l; s++) {
        let c;
        const u = e[s];
        switch (u.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            c = i.parse(u);
            break;
          default:
            u.type in Xg ? c = Xg[u.type].fromJSON(u, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${u.type}"`);
        }
        c.uuid = u.uuid, u.name !== void 0 && (c.name = u.name), u.userData !== void 0 && (c.userData = u.userData), n[u.uuid] = c;
      }
    }
    return n;
  }
  parseMaterials(e, t) {
    const n = {}, i = {};
    if (e !== void 0) {
      const s = new wu();
      s.setTextures(t);
      for (let l = 0, c = e.length; l < c; l++) {
        const u = e[l];
        n[u.uuid] === void 0 && (n[u.uuid] = s.parse(u)), i[u.uuid] = n[u.uuid];
      }
    }
    return i;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0; n < e.length; n++) {
        const i = e[n], s = Ia.parse(i);
        t[s.uuid] = s;
      }
    return t;
  }
  parseImages(e, t) {
    const n = this, i = {};
    let s;
    function l(u) {
      return n.manager.itemStart(u), s.load(u, function() {
        n.manager.itemEnd(u);
      }, void 0, function() {
        n.manager.itemError(u), n.manager.itemEnd(u);
      });
    }
    function c(u) {
      if (typeof u == "string") {
        const h = u, f = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h) ? h : n.resourcePath + h;
        return l(f);
      } else
        return u.data ? {
          data: ho(u.type, u.data),
          width: u.width,
          height: u.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const u = new jd(t);
      s = new Da(u), s.setCrossOrigin(this.crossOrigin);
      for (let h = 0, f = e.length; h < f; h++) {
        const p = e[h], m = p.url;
        if (Array.isArray(m)) {
          const v = [];
          for (let y = 0, E = m.length; y < E; y++) {
            const x = m[y], _ = c(x);
            _ !== null && (_ instanceof HTMLImageElement ? v.push(_) : v.push(new ds(_.data, _.width, _.height)));
          }
          i[p.uuid] = new cs(v);
        } else {
          const v = c(p.url);
          i[p.uuid] = new cs(v);
        }
      }
    }
    return i;
  }
  async parseImagesAsync(e) {
    const t = this, n = {};
    let i;
    async function s(l) {
      if (typeof l == "string") {
        const c = l, u = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c) ? c : t.resourcePath + c;
        return await i.loadAsync(u);
      } else
        return l.data ? {
          data: ho(l.type, l.data),
          width: l.width,
          height: l.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      i = new Da(this.manager), i.setCrossOrigin(this.crossOrigin);
      for (let l = 0, c = e.length; l < c; l++) {
        const u = e[l], h = u.url;
        if (Array.isArray(h)) {
          const f = [];
          for (let p = 0, m = h.length; p < m; p++) {
            const v = h[p], y = await s(v);
            y !== null && (y instanceof HTMLImageElement ? f.push(y) : f.push(new ds(y.data, y.width, y.height)));
          }
          n[u.uuid] = new cs(f);
        } else {
          const f = await s(u.url);
          n[u.uuid] = new cs(f);
        }
      }
    }
    return n;
  }
  parseTextures(e, t) {
    function n(s, l) {
      return typeof s == "number" ? s : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", s), l[s]);
    }
    const i = {};
    if (e !== void 0)
      for (let s = 0, l = e.length; s < l; s++) {
        const c = e[s];
        c.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', c.uuid), t[c.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", c.image);
        const u = t[c.image], h = u.data;
        let f;
        Array.isArray(h) ? (f = new Ba(), h.length === 6 && (f.needsUpdate = !0)) : (h && h.data ? f = new ds() : f = new nn(), h && (f.needsUpdate = !0)), f.source = u, f.uuid = c.uuid, c.name !== void 0 && (f.name = c.name), c.mapping !== void 0 && (f.mapping = n(c.mapping, QT)), c.channel !== void 0 && (f.channel = c.channel), c.offset !== void 0 && f.offset.fromArray(c.offset), c.repeat !== void 0 && f.repeat.fromArray(c.repeat), c.center !== void 0 && f.center.fromArray(c.center), c.rotation !== void 0 && (f.rotation = c.rotation), c.wrap !== void 0 && (f.wrapS = n(c.wrap[0], Zg), f.wrapT = n(c.wrap[1], Zg)), c.format !== void 0 && (f.format = c.format), c.internalFormat !== void 0 && (f.internalFormat = c.internalFormat), c.type !== void 0 && (f.type = c.type), c.colorSpace !== void 0 && (f.colorSpace = c.colorSpace), c.encoding !== void 0 && (f.encoding = c.encoding), c.minFilter !== void 0 && (f.minFilter = n(c.minFilter, Jg)), c.magFilter !== void 0 && (f.magFilter = n(c.magFilter, Jg)), c.anisotropy !== void 0 && (f.anisotropy = c.anisotropy), c.flipY !== void 0 && (f.flipY = c.flipY), c.generateMipmaps !== void 0 && (f.generateMipmaps = c.generateMipmaps), c.premultiplyAlpha !== void 0 && (f.premultiplyAlpha = c.premultiplyAlpha), c.unpackAlignment !== void 0 && (f.unpackAlignment = c.unpackAlignment), c.compareFunction !== void 0 && (f.compareFunction = c.compareFunction), c.userData !== void 0 && (f.userData = c.userData), i[c.uuid] = f;
      }
    return i;
  }
  parseObject(e, t, n, i, s) {
    let l;
    function c(m) {
      return t[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", m), t[m];
    }
    function u(m) {
      if (m !== void 0) {
        if (Array.isArray(m)) {
          const v = [];
          for (let y = 0, E = m.length; y < E; y++) {
            const x = m[y];
            n[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", x), v.push(n[x]);
          }
          return v;
        }
        return n[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", m), n[m];
      }
    }
    function h(m) {
      return i[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", m), i[m];
    }
    let f, p;
    switch (e.type) {
      case "Scene":
        l = new ou(), e.background !== void 0 && (Number.isInteger(e.background) ? l.background = new Fe(e.background) : l.background = h(e.background)), e.environment !== void 0 && (l.environment = h(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? l.fog = new su(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (l.fog = new ru(e.fog.color, e.fog.density)), e.fog.name !== "" && (l.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (l.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (l.backgroundIntensity = e.backgroundIntensity);
        break;
      case "PerspectiveCamera":
        l = new tn(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (l.focus = e.focus), e.zoom !== void 0 && (l.zoom = e.zoom), e.filmGauge !== void 0 && (l.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (l.filmOffset = e.filmOffset), e.view !== void 0 && (l.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        l = new or(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (l.zoom = e.zoom), e.view !== void 0 && (l.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        l = new C_(e.color, e.intensity);
        break;
      case "DirectionalLight":
        l = new R_(e.color, e.intensity);
        break;
      case "PointLight":
        l = new A_(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        l = new P_(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        l = new b_(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
        break;
      case "HemisphereLight":
        l = new T_(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        l = new I_().fromJSON(e);
        break;
      case "SkinnedMesh":
        f = c(e.geometry), p = u(e.material), l = new Jv(f, p), e.bindMode !== void 0 && (l.bindMode = e.bindMode), e.bindMatrix !== void 0 && l.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (l.skeleton = e.skeleton);
        break;
      case "Mesh":
        f = c(e.geometry), p = u(e.material), l = new yn(f, p);
        break;
      case "InstancedMesh":
        f = c(e.geometry), p = u(e.material);
        const m = e.count, v = e.instanceMatrix, y = e.instanceColor;
        l = new Kv(f, p, m), l.instanceMatrix = new xo(new Float32Array(v.array), 16), y !== void 0 && (l.instanceColor = new xo(new Float32Array(y.array), y.itemSize));
        break;
      case "LOD":
        l = new Zv();
        break;
      case "Line":
        l = new Dr(c(e.geometry), u(e.material));
        break;
      case "LineLoop":
        l = new Qv(c(e.geometry), u(e.material));
        break;
      case "LineSegments":
        l = new Hi(c(e.geometry), u(e.material));
        break;
      case "PointCloud":
      case "Points":
        l = new $v(c(e.geometry), u(e.material));
        break;
      case "Sprite":
        l = new jv(u(e.material));
        break;
      case "Group":
        l = new po();
        break;
      case "Bone":
        l = new Od();
        break;
      default:
        l = new Rt();
    }
    if (l.uuid = e.uuid, e.name !== void 0 && (l.name = e.name), e.matrix !== void 0 ? (l.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (l.matrixAutoUpdate = e.matrixAutoUpdate), l.matrixAutoUpdate && l.matrix.decompose(l.position, l.quaternion, l.scale)) : (e.position !== void 0 && l.position.fromArray(e.position), e.rotation !== void 0 && l.rotation.fromArray(e.rotation), e.quaternion !== void 0 && l.quaternion.fromArray(e.quaternion), e.scale !== void 0 && l.scale.fromArray(e.scale)), e.up !== void 0 && l.up.fromArray(e.up), e.castShadow !== void 0 && (l.castShadow = e.castShadow), e.receiveShadow !== void 0 && (l.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (l.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (l.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (l.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && l.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (l.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (l.visible = e.visible), e.frustumCulled !== void 0 && (l.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (l.renderOrder = e.renderOrder), e.userData !== void 0 && (l.userData = e.userData), e.layers !== void 0 && (l.layers.mask = e.layers), e.children !== void 0) {
      const m = e.children;
      for (let v = 0; v < m.length; v++)
        l.add(this.parseObject(m[v], t, n, i, s));
    }
    if (e.animations !== void 0) {
      const m = e.animations;
      for (let v = 0; v < m.length; v++) {
        const y = m[v];
        l.animations.push(s[y]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (l.autoUpdate = e.autoUpdate);
      const m = e.levels;
      for (let v = 0; v < m.length; v++) {
        const y = m[v], E = l.getObjectByProperty("uuid", y.object);
        E !== void 0 && l.addLevel(E, y.distance, y.hysteresis);
      }
    }
    return l;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 && e.traverse(function(n) {
      if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
        const i = t[n.skeleton];
        i === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(i, n.bindMatrix);
      }
    });
  }
}
const QT = {
  UVMapping: Kc,
  CubeReflectionMapping: lr,
  CubeRefractionMapping: Lr,
  EquirectangularReflectionMapping: da,
  EquirectangularRefractionMapping: pa,
  CubeUVReflectionMapping: Mo
}, Zg = {
  RepeatWrapping: ma,
  ClampToEdgeWrapping: Rn,
  MirroredRepeatWrapping: ga
}, Jg = {
  NearestFilter: Wt,
  NearestMipmapNearestFilter: Wc,
  NearestMipmapLinearFilter: la,
  LinearFilter: Xt,
  LinearMipmapNearestFilter: gd,
  LinearMipmapLinearFilter: Ir
};
class $T extends Xn {
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  setOptions(e) {
    return this.options = e, this;
  }
  load(e, t, n, i) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = this, l = ys.get(e);
    if (l !== void 0)
      return s.manager.itemStart(e), setTimeout(function() {
        t && t(l), s.manager.itemEnd(e);
      }, 0), l;
    const c = {};
    c.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", c.headers = this.requestHeader, fetch(e, c).then(function(u) {
      return u.blob();
    }).then(function(u) {
      return createImageBitmap(u, Object.assign(s.options, { colorSpaceConversion: "none" }));
    }).then(function(u) {
      ys.add(e, u), t && t(u), s.manager.itemEnd(e);
    }).catch(function(u) {
      i && i(u), s.manager.itemError(e), s.manager.itemEnd(e);
    }), s.manager.itemStart(e);
  }
}
let wc;
class Jd {
  static getContext() {
    return wc === void 0 && (wc = new (window.AudioContext || window.webkitAudioContext)()), wc;
  }
  static setContext(e) {
    wc = e;
  }
}
class eb extends Xn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this, l = new cr(this.manager);
    l.setResponseType("arraybuffer"), l.setPath(this.path), l.setRequestHeader(this.requestHeader), l.setWithCredentials(this.withCredentials), l.load(e, function(u) {
      try {
        const h = u.slice(0);
        Jd.getContext().decodeAudioData(h, function(p) {
          t(p);
        }, c);
      } catch (h) {
        c(h);
      }
    }, n, i);
    function c(u) {
      i ? i(u) : console.error(u), s.manager.itemError(e);
    }
  }
}
const Kg = /* @__PURE__ */ new ut(), Qg = /* @__PURE__ */ new ut(), Kr = /* @__PURE__ */ new ut();
class tb {
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new tn(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new tn(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(e) {
    const t = this._cache;
    if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
      t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, Kr.copy(e.projectionMatrix);
      const i = t.eyeSep / 2, s = i * t.near / t.focus, l = t.near * Math.tan(hs * t.fov * 0.5) / t.zoom;
      let c, u;
      Qg.elements[12] = -i, Kg.elements[12] = i, c = -l * t.aspect + s, u = l * t.aspect + s, Kr.elements[0] = 2 * t.near / (u - c), Kr.elements[8] = (u + c) / (u - c), this.cameraL.projectionMatrix.copy(Kr), c = -l * t.aspect - s, u = l * t.aspect - s, Kr.elements[0] = 2 * t.near / (u - c), Kr.elements[8] = (u + c) / (u - c), this.cameraR.projectionMatrix.copy(Kr);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Qg), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(Kg);
  }
}
class Kd {
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  start() {
    this.startTime = $g(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const t = $g();
      e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
    }
    return e;
  }
}
function $g() {
  return (typeof performance > "u" ? Date : performance).now();
}
const Qr = /* @__PURE__ */ new D(), e0 = /* @__PURE__ */ new Pn(), nb = /* @__PURE__ */ new D(), $r = /* @__PURE__ */ new D();
class ib extends Rt {
  constructor() {
    super(), this.type = "AudioListener", this.context = Jd.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new Kd();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener, n = this.up;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Qr, e0, nb), $r.set(0, 0, -1).applyQuaternion(e0), t.positionX) {
      const i = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(Qr.x, i), t.positionY.linearRampToValueAtTime(Qr.y, i), t.positionZ.linearRampToValueAtTime(Qr.z, i), t.forwardX.linearRampToValueAtTime($r.x, i), t.forwardY.linearRampToValueAtTime($r.y, i), t.forwardZ.linearRampToValueAtTime($r.z, i), t.upX.linearRampToValueAtTime(n.x, i), t.upY.linearRampToValueAtTime(n.y, i), t.upZ.linearRampToValueAtTime(n.z, i);
    } else
      t.setPosition(Qr.x, Qr.y, Qr.z), t.setOrientation($r.x, $r.y, $r.z, n.x, n.y, n.z);
  }
}
class U_ extends Rt {
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  stop() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let e = 1, t = this.filters.length; e < t; e++)
          this.filters[e - 1].disconnect(this.filters[e]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else
        this.source.disconnect(this.getOutput());
      return this._connected = !1, this;
    }
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  setDetune(e) {
    if (this.detune = e, this.source.detune !== void 0)
      return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = !1;
  }
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
}
const es = /* @__PURE__ */ new D(), t0 = /* @__PURE__ */ new Pn(), rb = /* @__PURE__ */ new D(), ts = /* @__PURE__ */ new D();
class sb extends U_ {
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  connect() {
    super.connect(), this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect(), this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  setDirectionalCone(e, t, n) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1)
      return;
    this.matrixWorld.decompose(es, t0, rb), ts.set(0, 0, 1).applyQuaternion(t0);
    const t = this.panner;
    if (t.positionX) {
      const n = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(es.x, n), t.positionY.linearRampToValueAtTime(es.y, n), t.positionZ.linearRampToValueAtTime(es.z, n), t.orientationX.linearRampToValueAtTime(ts.x, n), t.orientationY.linearRampToValueAtTime(ts.y, n), t.orientationZ.linearRampToValueAtTime(ts.z, n);
    } else
      t.setPosition(es.x, es.y, es.z), t.setOrientation(ts.x, ts.y, ts.z);
  }
}
class ob {
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let n = 0; n < t.length; n++)
      e += t[n];
    return e / t.length;
  }
}
class O_ {
  constructor(e, t, n) {
    this.binding = e, this.valueSize = n;
    let i, s, l;
    switch (t) {
      case "quaternion":
        i = this._slerp, s = this._slerpAdditive, l = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        i = this._select, s = this._select, l = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
        break;
      default:
        i = this._lerp, s = this._lerpAdditive, l = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
    }
    this._mixBufferRegion = i, this._mixBufferRegionAdditive = s, this._setIdentity = l, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate(e, t) {
    const n = this.buffer, i = this.valueSize, s = e * i + i;
    let l = this.cumulativeWeight;
    if (l === 0) {
      for (let c = 0; c !== i; ++c)
        n[s + c] = n[c];
      l = t;
    } else {
      l += t;
      const c = t / l;
      this._mixBufferRegion(n, s, 0, c, i);
    }
    this.cumulativeWeight = l;
  }
  // accumulate data in the 'incoming' region into 'add'
  accumulateAdditive(e) {
    const t = this.buffer, n = this.valueSize, i = n * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, i, 0, e, n), this.cumulativeWeightAdditive += e;
  }
  // apply the state of 'accu<i>' to the binding when accus differ
  apply(e) {
    const t = this.valueSize, n = this.buffer, i = e * t + t, s = this.cumulativeWeight, l = this.cumulativeWeightAdditive, c = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, s < 1) {
      const u = t * this._origIndex;
      this._mixBufferRegion(
        n,
        i,
        u,
        1 - s,
        t
      );
    }
    l > 0 && this._mixBufferRegionAdditive(n, i, this._addIndex * t, 1, t);
    for (let u = t, h = t + t; u !== h; ++u)
      if (n[u] !== n[u + t]) {
        c.setValue(n, i);
        break;
      }
  }
  // remember the state of the bound property and copy it to both accus
  saveOriginalState() {
    const e = this.binding, t = this.buffer, n = this.valueSize, i = n * this._origIndex;
    e.getValue(t, i);
    for (let s = n, l = i; s !== l; ++s)
      t[s] = t[i + s % n];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, t = e + this.valueSize;
    for (let n = e; n < t; n++)
      this.buffer[n] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
    for (let n = 0; n < this.valueSize; n++)
      this.buffer[t + n] = this.buffer[e + n];
  }
  // mix functions
  _select(e, t, n, i, s) {
    if (i >= 0.5)
      for (let l = 0; l !== s; ++l)
        e[t + l] = e[n + l];
  }
  _slerp(e, t, n, i) {
    Pn.slerpFlat(e, t, e, t, e, n, i);
  }
  _slerpAdditive(e, t, n, i, s) {
    const l = this._workIndex * s;
    Pn.multiplyQuaternionsFlat(e, l, e, t, e, n), Pn.slerpFlat(e, t, e, t, e, l, i);
  }
  _lerp(e, t, n, i, s) {
    const l = 1 - i;
    for (let c = 0; c !== s; ++c) {
      const u = t + c;
      e[u] = e[u] * l + e[n + c] * i;
    }
  }
  _lerpAdditive(e, t, n, i, s) {
    for (let l = 0; l !== s; ++l) {
      const c = t + l;
      e[c] = e[c] + e[n + l] * i;
    }
  }
}
const Qd = "\\[\\]\\.:\\/", ab = new RegExp("[" + Qd + "]", "g"), $d = "[^" + Qd + "]", lb = "[^" + Qd.replace("\\.", "") + "]", cb = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", $d), ub = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", lb), hb = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", $d), fb = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", $d), db = new RegExp(
  "^" + cb + ub + hb + fb + "$"
), pb = ["material", "materials", "bones", "map"];
class mb {
  constructor(e, t, n) {
    const i = n || wt.parseTrackName(t);
    this._targetGroup = e, this._bindings = e.subscribe_(t, i);
  }
  getValue(e, t) {
    this.bind();
    const n = this._targetGroup.nCachedObjects_, i = this._bindings[n];
    i !== void 0 && i.getValue(e, t);
  }
  setValue(e, t) {
    const n = this._bindings;
    for (let i = this._targetGroup.nCachedObjects_, s = n.length; i !== s; ++i)
      n[i].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].unbind();
  }
}
class wt {
  constructor(e, t, n) {
    this.path = t, this.parsedPath = n || wt.parseTrackName(t), this.node = wt.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  static create(e, t, n) {
    return e && e.isAnimationObjectGroup ? new wt.Composite(e, t, n) : new wt(e, t, n);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(ab, "");
  }
  static parseTrackName(e) {
    const t = db.exec(e);
    if (t === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const n = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    }, i = n.nodeName && n.nodeName.lastIndexOf(".");
    if (i !== void 0 && i !== -1) {
      const s = n.nodeName.substring(i + 1);
      pb.indexOf(s) !== -1 && (n.nodeName = n.nodeName.substring(0, i), n.objectName = s);
    }
    if (n.propertyName === null || n.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return n;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid)
      return e;
    if (e.skeleton) {
      const n = e.skeleton.getBoneByName(t);
      if (n !== void 0)
        return n;
    }
    if (e.children) {
      const n = function(s) {
        for (let l = 0; l < s.length; l++) {
          const c = s[l];
          if (c.name === t || c.uuid === t)
            return c;
          const u = n(c.children);
          if (u)
            return u;
        }
        return null;
      }, i = n(e.children);
      if (i)
        return i;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i)
      e[t++] = n[i];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i)
      n[i] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i)
      n[i] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i)
      n[i] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let e = this.node;
    const t = this.parsedPath, n = t.objectName, i = t.propertyName;
    let s = t.propertyIndex;
    if (e || (e = wt.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (n) {
      let h = t.objectIndex;
      switch (n) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let f = 0; f < e.length; f++)
            if (e[f].name === h) {
              h = f;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[n];
      }
      if (h !== void 0) {
        if (e[h] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[h];
      }
    }
    const l = e[i];
    if (l === void 0) {
      const h = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + h + "." + i + " but it wasn't found.", e);
      return;
    }
    let c = this.Versioning.None;
    this.targetObject = e, e.needsUpdate !== void 0 ? c = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (c = this.Versioning.MatrixWorldNeedsUpdate);
    let u = this.BindingType.Direct;
    if (s !== void 0) {
      if (i === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[s] !== void 0 && (s = e.morphTargetDictionary[s]);
      }
      u = this.BindingType.ArrayElement, this.resolvedProperty = l, this.propertyIndex = s;
    } else
      l.fromArray !== void 0 && l.toArray !== void 0 ? (u = this.BindingType.HasFromToArray, this.resolvedProperty = l) : Array.isArray(l) ? (u = this.BindingType.EntireArray, this.resolvedProperty = l) : this.propertyName = i;
    this.getValue = this.GetterByBindingType[u], this.setValue = this.SetterByBindingTypeAndVersioning[u][c];
  }
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
wt.Composite = mb;
wt.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
wt.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
wt.prototype.GetterByBindingType = [
  wt.prototype._getValue_direct,
  wt.prototype._getValue_array,
  wt.prototype._getValue_arrayElement,
  wt.prototype._getValue_toArray
];
wt.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    wt.prototype._setValue_direct,
    wt.prototype._setValue_direct_setNeedsUpdate,
    wt.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    wt.prototype._setValue_array,
    wt.prototype._setValue_array_setNeedsUpdate,
    wt.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    wt.prototype._setValue_arrayElement,
    wt.prototype._setValue_arrayElement_setNeedsUpdate,
    wt.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    wt.prototype._setValue_fromArray,
    wt.prototype._setValue_fromArray_setNeedsUpdate,
    wt.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class gb {
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = ti(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let n = 0, i = arguments.length; n !== i; ++n)
      e[arguments[n].uuid] = n;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  add() {
    const e = this._objects, t = this._indicesByUUID, n = this._paths, i = this._parsedPaths, s = this._bindings, l = s.length;
    let c, u = e.length, h = this.nCachedObjects_;
    for (let f = 0, p = arguments.length; f !== p; ++f) {
      const m = arguments[f], v = m.uuid;
      let y = t[v];
      if (y === void 0) {
        y = u++, t[v] = y, e.push(m);
        for (let E = 0, x = l; E !== x; ++E)
          s[E].push(new wt(m, n[E], i[E]));
      } else if (y < h) {
        c = e[y];
        const E = --h, x = e[E];
        t[x.uuid] = y, e[y] = x, t[v] = E, e[E] = m;
        for (let _ = 0, w = l; _ !== w; ++_) {
          const M = s[_], b = M[E];
          let A = M[y];
          M[y] = b, A === void 0 && (A = new wt(m, n[_], i[_])), M[E] = A;
        }
      } else
        e[y] !== c && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = h;
  }
  remove() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length;
    let s = this.nCachedObjects_;
    for (let l = 0, c = arguments.length; l !== c; ++l) {
      const u = arguments[l], h = u.uuid, f = t[h];
      if (f !== void 0 && f >= s) {
        const p = s++, m = e[p];
        t[m.uuid] = f, e[f] = m, t[h] = p, e[p] = u;
        for (let v = 0, y = i; v !== y; ++v) {
          const E = n[v], x = E[p], _ = E[f];
          E[f] = x, E[p] = _;
        }
      }
    }
    this.nCachedObjects_ = s;
  }
  // remove & forget
  uncache() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length;
    let s = this.nCachedObjects_, l = e.length;
    for (let c = 0, u = arguments.length; c !== u; ++c) {
      const h = arguments[c], f = h.uuid, p = t[f];
      if (p !== void 0)
        if (delete t[f], p < s) {
          const m = --s, v = e[m], y = --l, E = e[y];
          t[v.uuid] = p, e[p] = v, t[E.uuid] = m, e[m] = E, e.pop();
          for (let x = 0, _ = i; x !== _; ++x) {
            const w = n[x], M = w[m], b = w[y];
            w[p] = M, w[m] = b, w.pop();
          }
        } else {
          const m = --l, v = e[m];
          m > 0 && (t[v.uuid] = p), e[p] = v, e.pop();
          for (let y = 0, E = i; y !== E; ++y) {
            const x = n[y];
            x[p] = x[m], x.pop();
          }
        }
    }
    this.nCachedObjects_ = s;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const n = this._bindingsIndicesByPath;
    let i = n[e];
    const s = this._bindings;
    if (i !== void 0)
      return s[i];
    const l = this._paths, c = this._parsedPaths, u = this._objects, h = u.length, f = this.nCachedObjects_, p = new Array(h);
    i = s.length, n[e] = i, l.push(e), c.push(t), s.push(p);
    for (let m = f, v = u.length; m !== v; ++m) {
      const y = u[m];
      p[m] = new wt(y, e, t);
    }
    return p;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, n = t[e];
    if (n !== void 0) {
      const i = this._paths, s = this._parsedPaths, l = this._bindings, c = l.length - 1, u = l[c], h = e[c];
      t[h] = n, l[n] = u, l.pop(), s[n] = s[c], s.pop(), i[n] = i[c], i.pop();
    }
  }
}
class F_ {
  constructor(e, t, n = null, i = t.blendMode) {
    this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = i;
    const s = t.tracks, l = s.length, c = new Array(l), u = {
      endingStart: as,
      endingEnd: as
    };
    for (let h = 0; h !== l; ++h) {
      const f = s[h].createInterpolant(null);
      c[h] = f, f.settings = u;
    }
    this._interpolantSettings = u, this._interpolants = c, this._propertyBindings = new Array(l), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = mv, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  // State & Scheduling
  play() {
    return this._mixer._activateAction(this), this;
  }
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  // return true when play has been called
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    return this._startTime = e, this;
  }
  setLoop(e, t) {
    return this.loop = e, this.repetitions = t, this;
  }
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  // return the weight considering fading and .enabled
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, n) {
    if (e.fadeOut(t), this.fadeIn(t), n) {
      const i = this._clip.duration, s = e._clip.duration, l = s / i, c = i / s;
      e.warp(1, l, t), this.warp(c, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, n) {
    return e.crossFadeFrom(this, t, n);
  }
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  // return the time scale considering warping and .paused
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, n) {
    const i = this._mixer, s = i.time, l = this.timeScale;
    let c = this._timeScaleInterpolant;
    c === null && (c = i._lendControlInterpolant(), this._timeScaleInterpolant = c);
    const u = c.parameterPositions, h = c.sampleValues;
    return u[0] = s, u[1] = s + n, h[0] = e / l, h[1] = t / l, this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Object Accessors
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, n, i) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const s = this._startTime;
    if (s !== null) {
      const u = (e - s) * n;
      u < 0 || n === 0 ? t = 0 : (this._startTime = null, t = n * u);
    }
    t *= this._updateTimeScale(e);
    const l = this._updateTime(t), c = this._updateWeight(e);
    if (c > 0) {
      const u = this._interpolants, h = this._propertyBindings;
      switch (this.blendMode) {
        case Ed:
          for (let f = 0, p = u.length; f !== p; ++f)
            u[f].evaluate(l), h[f].accumulateAdditive(c);
          break;
        case $c:
        default:
          for (let f = 0, p = u.length; f !== p; ++f)
            u[f].evaluate(l), h[f].accumulate(i, c);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const n = this._weightInterpolant;
      if (n !== null) {
        const i = n.evaluate(e)[0];
        t *= i, e > n.parameterPositions[1] && (this.stopFading(), i === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = t, t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const n = this._timeScaleInterpolant;
      if (n !== null) {
        const i = n.evaluate(e)[0];
        t *= i, e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
      }
    }
    return this._effectiveTimeScale = t, t;
  }
  _updateTime(e) {
    const t = this._clip.duration, n = this.loop;
    let i = this.time + e, s = this._loopCount;
    const l = n === gv;
    if (e === 0)
      return s === -1 ? i : l && (s & 1) === 1 ? t - i : i;
    if (n === pv) {
      s === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (i >= t)
          i = t;
        else if (i < 0)
          i = 0;
        else {
          this.time = i;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = i, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (s === -1 && (e >= 0 ? (s = 0, this._setEndings(!0, this.repetitions === 0, l)) : this._setEndings(this.repetitions === 0, !0, l)), i >= t || i < 0) {
        const c = Math.floor(i / t);
        i -= t * c, s += Math.abs(c);
        const u = this.repetitions - s;
        if (u <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, i = e > 0 ? t : 0, this.time = i, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (u === 1) {
            const h = e < 0;
            this._setEndings(h, !h, l);
          } else
            this._setEndings(!1, !1, l);
          this._loopCount = s, this.time = i, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: c
          });
        }
      } else
        this.time = i;
      if (l && (s & 1) === 1)
        return t - i;
    }
    return i;
  }
  _setEndings(e, t, n) {
    const i = this._interpolantSettings;
    n ? (i.endingStart = ls, i.endingEnd = ls) : (e ? i.endingStart = this.zeroSlopeAtStart ? ls : as : i.endingStart = ya, t ? i.endingEnd = this.zeroSlopeAtEnd ? ls : as : i.endingEnd = ya);
  }
  _scheduleFading(e, t, n) {
    const i = this._mixer, s = i.time;
    let l = this._weightInterpolant;
    l === null && (l = i._lendControlInterpolant(), this._weightInterpolant = l);
    const c = l.parameterPositions, u = l.sampleValues;
    return c[0] = s, u[0] = t, c[1] = s + e, u[1] = n, this;
  }
}
const vb = new Float32Array(1);
class _b extends ur {
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, t) {
    const n = e._localRoot || this._root, i = e._clip.tracks, s = i.length, l = e._propertyBindings, c = e._interpolants, u = n.uuid, h = this._bindingsByRootAndName;
    let f = h[u];
    f === void 0 && (f = {}, h[u] = f);
    for (let p = 0; p !== s; ++p) {
      const m = i[p], v = m.name;
      let y = f[v];
      if (y !== void 0)
        ++y.referenceCount, l[p] = y;
      else {
        if (y = l[p], y !== void 0) {
          y._cacheIndex === null && (++y.referenceCount, this._addInactiveBinding(y, u, v));
          continue;
        }
        const E = t && t._propertyBindings[p].binding.parsedPath;
        y = new O_(
          wt.create(n, v, E),
          m.ValueTypeName,
          m.getValueSize()
        ), ++y.referenceCount, this._addInactiveBinding(y, u, v), l[p] = y;
      }
      c[p].resultBuffer = y.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const n = (e._localRoot || this._root).uuid, i = e._clip.uuid, s = this._actionsByClip[i];
        this._bindAction(
          e,
          s && s.knownActions[0]
        ), this._addInactiveAction(e, i, n);
      }
      const t = e._propertyBindings;
      for (let n = 0, i = t.length; n !== i; ++n) {
        const s = t[n];
        s.useCount++ === 0 && (this._lendBinding(s), s.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let n = 0, i = t.length; n !== i; ++n) {
        const s = t[n];
        --s.useCount === 0 && (s.restoreOriginalState(), this._takeBackBinding(s));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, n) {
    const i = this._actions, s = this._actionsByClip;
    let l = s[t];
    if (l === void 0)
      l = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, s[t] = l;
    else {
      const c = l.knownActions;
      e._byClipCacheIndex = c.length, c.push(e);
    }
    e._cacheIndex = i.length, i.push(e), l.actionByRoot[n] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, n = t[t.length - 1], i = e._cacheIndex;
    n._cacheIndex = i, t[i] = n, t.pop(), e._cacheIndex = null;
    const s = e._clip.uuid, l = this._actionsByClip, c = l[s], u = c.knownActions, h = u[u.length - 1], f = e._byClipCacheIndex;
    h._byClipCacheIndex = f, u[f] = h, u.pop(), e._byClipCacheIndex = null;
    const p = c.actionByRoot, m = (e._localRoot || this._root).uuid;
    delete p[m], u.length === 0 && delete l[s], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let n = 0, i = t.length; n !== i; ++n) {
      const s = t[n];
      --s.referenceCount === 0 && this._removeInactiveBinding(s);
    }
  }
  _lendAction(e) {
    const t = this._actions, n = e._cacheIndex, i = this._nActiveActions++, s = t[i];
    e._cacheIndex = i, t[i] = e, s._cacheIndex = n, t[n] = s;
  }
  _takeBackAction(e) {
    const t = this._actions, n = e._cacheIndex, i = --this._nActiveActions, s = t[i];
    e._cacheIndex = i, t[i] = e, s._cacheIndex = n, t[n] = s;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, n) {
    const i = this._bindingsByRootAndName, s = this._bindings;
    let l = i[t];
    l === void 0 && (l = {}, i[t] = l), l[n] = e, e._cacheIndex = s.length, s.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, n = e.binding, i = n.rootNode.uuid, s = n.path, l = this._bindingsByRootAndName, c = l[i], u = t[t.length - 1], h = e._cacheIndex;
    u._cacheIndex = h, t[h] = u, t.pop(), delete c[s], Object.keys(c).length === 0 && delete l[i];
  }
  _lendBinding(e) {
    const t = this._bindings, n = e._cacheIndex, i = this._nActiveBindings++, s = t[i];
    e._cacheIndex = i, t[i] = e, s._cacheIndex = n, t[n] = s;
  }
  _takeBackBinding(e) {
    const t = this._bindings, n = e._cacheIndex, i = --this._nActiveBindings, s = t[i];
    e._cacheIndex = i, t[i] = e, s._cacheIndex = n, t[n] = s;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let n = e[t];
    return n === void 0 && (n = new Yd(
      new Float32Array(2),
      new Float32Array(2),
      1,
      vb
    ), n.__cacheIndex = t, e[t] = n), n;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, n = e.__cacheIndex, i = --this._nActiveControlInterpolants, s = t[i];
    e.__cacheIndex = i, t[i] = e, s.__cacheIndex = n, t[n] = s;
  }
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction(e, t, n) {
    const i = t || this._root, s = i.uuid;
    let l = typeof e == "string" ? Ia.findByName(i, e) : e;
    const c = l !== null ? l.uuid : e, u = this._actionsByClip[c];
    let h = null;
    if (n === void 0 && (l !== null ? n = l.blendMode : n = $c), u !== void 0) {
      const p = u.actionByRoot[s];
      if (p !== void 0 && p.blendMode === n)
        return p;
      h = u.knownActions[0], l === null && (l = h._clip);
    }
    if (l === null)
      return null;
    const f = new F_(this, l, t, n);
    return this._bindAction(f, h), this._addInactiveAction(f, c, s), f;
  }
  // get an existing action
  existingAction(e, t) {
    const n = t || this._root, i = n.uuid, s = typeof e == "string" ? Ia.findByName(n, e) : e, l = s ? s.uuid : e, c = this._actionsByClip[l];
    return c !== void 0 && c.actionByRoot[i] || null;
  }
  // deactivates all previously scheduled actions
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let n = t - 1; n >= 0; --n)
      e[n].stop();
    return this;
  }
  // advance the time and update apply the animation
  update(e) {
    e *= this.timeScale;
    const t = this._actions, n = this._nActiveActions, i = this.time += e, s = Math.sign(e), l = this._accuIndex ^= 1;
    for (let h = 0; h !== n; ++h)
      t[h]._update(i, e, s, l);
    const c = this._bindings, u = this._nActiveBindings;
    for (let h = 0; h !== u; ++h)
      c[h].apply(l);
    return this;
  }
  // Allows you to seek to a specific time in an animation.
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++)
      this._actions[t].time = 0;
    return this.update(e);
  }
  // return this mixer's root target object
  getRoot() {
    return this._root;
  }
  // free all resources specific to a particular clip
  uncacheClip(e) {
    const t = this._actions, n = e.uuid, i = this._actionsByClip, s = i[n];
    if (s !== void 0) {
      const l = s.knownActions;
      for (let c = 0, u = l.length; c !== u; ++c) {
        const h = l[c];
        this._deactivateAction(h);
        const f = h._cacheIndex, p = t[t.length - 1];
        h._cacheIndex = null, h._byClipCacheIndex = null, p._cacheIndex = f, t[f] = p, t.pop(), this._removeInactiveBindingsForAction(h);
      }
      delete i[n];
    }
  }
  // free all resources specific to a particular root target object
  uncacheRoot(e) {
    const t = e.uuid, n = this._actionsByClip;
    for (const l in n) {
      const c = n[l].actionByRoot, u = c[t];
      u !== void 0 && (this._deactivateAction(u), this._removeInactiveAction(u));
    }
    const i = this._bindingsByRootAndName, s = i[t];
    if (s !== void 0)
      for (const l in s) {
        const c = s[l];
        c.restoreOriginalState(), this._removeInactiveBinding(c);
      }
  }
  // remove a targeted clip from the cache
  uncacheAction(e, t) {
    const n = this.existingAction(e, t);
    n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
  }
}
class ep {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new ep(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let yb = 0;
class xb extends ur {
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: yb++ }), this.name = "", this.usage = Ea, this.uniforms = [];
  }
  add(e) {
    return this.uniforms.push(e), this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  setName(e) {
    return this.name = e, this;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this;
  }
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let n = 0, i = t.length; n < i; n++)
      this.uniforms.push(t[n].clone());
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class Sb extends au {
  constructor(e, t, n = 1) {
    super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const t = super.clone(e);
    return t.meshPerAttribute = this.meshPerAttribute, t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
  }
}
class Mb {
  constructor(e, t, n, i, s) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = i, this.count = s, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setBuffer(e) {
    return this.buffer = e, this;
  }
  setType(e, t) {
    return this.type = e, this.elementSize = t, this;
  }
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  setCount(e) {
    return this.count = e, this;
  }
}
class tp {
  constructor(e, t, n = 0, i = 1 / 0) {
    this.ray = new xs(e, t), this.near = n, this.far = i, this.camera = null, this.layers = new fs(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  intersectObject(e, t = !0, n = []) {
    return ad(e, this, n, t), n.sort(n0), n;
  }
  intersectObjects(e, t = !0, n = []) {
    for (let i = 0, s = e.length; i < s; i++)
      ad(e[i], this, n, t);
    return n.sort(n0), n;
  }
}
function n0(r, e) {
  return r.distance - e.distance;
}
function ad(r, e, t, n) {
  if (r.layers.test(e.layers) && r.raycast(e, t), n === !0) {
    const i = r.children;
    for (let s = 0, l = i.length; s < l; s++)
      ad(i[s], e, t, !0);
  }
}
class ld {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(Qt(t / this.radius, -1, 1))), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class Eb {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const i0 = /* @__PURE__ */ new ue();
class wb {
  constructor(e = new ue(1 / 0, 1 / 0), t = new ue(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = i0.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, i0).distanceTo(e);
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const r0 = /* @__PURE__ */ new D(), Tc = /* @__PURE__ */ new D();
class Tb {
  constructor(e = new D(), t = new D()) {
    this.start = e, this.end = t;
  }
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    r0.subVectors(e, this.start), Tc.subVectors(this.end, this.start);
    const n = Tc.dot(Tc);
    let s = Tc.dot(r0) / n;
    return t && (s = Qt(s, 0, 1)), s;
  }
  closestPointToPoint(e, t, n) {
    const i = this.closestPointToPointParameter(e, t);
    return this.delta(n).multiplyScalar(i).add(this.start);
  }
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const s0 = /* @__PURE__ */ new D();
class bb extends Rt {
  constructor(e, t) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
    const n = new _t(), i = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let l = 0, c = 1, u = 32; l < u; l++, c++) {
      const h = l / u * Math.PI * 2, f = c / u * Math.PI * 2;
      i.push(
        Math.cos(h),
        Math.sin(h),
        1,
        Math.cos(f),
        Math.sin(f),
        1
      );
    }
    n.setAttribute("position", new We(i, 3));
    const s = new Fn({ fog: !1, toneMapped: !1 });
    this.cone = new Hi(n, s), this.add(this.cone), this.update();
  }
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1);
    const e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e), s0.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(s0), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const br = /* @__PURE__ */ new D(), bc = /* @__PURE__ */ new ut(), uf = /* @__PURE__ */ new ut();
class Ab extends Hi {
  constructor(e) {
    const t = z_(e), n = new _t(), i = [], s = [], l = new Fe(0, 0, 1), c = new Fe(0, 1, 0);
    for (let h = 0; h < t.length; h++) {
      const f = t[h];
      f.parent && f.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), s.push(l.r, l.g, l.b), s.push(c.r, c.g, c.b));
    }
    n.setAttribute("position", new We(i, 3)), n.setAttribute("color", new We(s, 3));
    const u = new Fn({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(n, u), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
  }
  updateMatrixWorld(e) {
    const t = this.bones, n = this.geometry, i = n.getAttribute("position");
    uf.copy(this.root.matrixWorld).invert();
    for (let s = 0, l = 0; s < t.length; s++) {
      const c = t[s];
      c.parent && c.parent.isBone && (bc.multiplyMatrices(uf, c.matrixWorld), br.setFromMatrixPosition(bc), i.setXYZ(l, br.x, br.y, br.z), bc.multiplyMatrices(uf, c.parent.matrixWorld), br.setFromMatrixPosition(bc), i.setXYZ(l + 1, br.x, br.y, br.z), l += 2);
    }
    n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function z_(r) {
  const e = [];
  r.isBone === !0 && e.push(r);
  for (let t = 0; t < r.children.length; t++)
    e.push.apply(e, z_(r.children[t]));
  return e;
}
class Rb extends yn {
  constructor(e, t, n) {
    const i = new Ga(t, 4, 2), s = new Ur({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(i, s), this.light = e, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const Cb = /* @__PURE__ */ new D(), o0 = /* @__PURE__ */ new Fe(), a0 = /* @__PURE__ */ new Fe();
class Pb extends Rt {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper";
    const i = new Va(t);
    i.rotateY(Math.PI * 0.5), this.material = new Ur({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const s = i.getAttribute("position"), l = new Float32Array(s.count * 3);
    i.setAttribute("color", new Ot(l, 3)), this.add(new yn(i, this.material)), this.update();
  }
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      o0.copy(this.light.color), a0.copy(this.light.groundColor);
      for (let n = 0, i = t.count; n < i; n++) {
        const s = n < i / 2 ? o0 : a0;
        t.setXYZ(n, s.r, s.g, s.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(Cb.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class Lb extends Hi {
  constructor(e = 10, t = 10, n = 4473924, i = 8947848) {
    n = new Fe(n), i = new Fe(i);
    const s = t / 2, l = e / t, c = e / 2, u = [], h = [];
    for (let m = 0, v = 0, y = -c; m <= t; m++, y += l) {
      u.push(-c, 0, y, c, 0, y), u.push(y, 0, -c, y, 0, c);
      const E = m === s ? n : i;
      E.toArray(h, v), v += 3, E.toArray(h, v), v += 3, E.toArray(h, v), v += 3, E.toArray(h, v), v += 3;
    }
    const f = new _t();
    f.setAttribute("position", new We(u, 3)), f.setAttribute("color", new We(h, 3));
    const p = new Fn({ vertexColors: !0, toneMapped: !1 });
    super(f, p), this.type = "GridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Ib extends Hi {
  constructor(e = 10, t = 16, n = 8, i = 64, s = 4473924, l = 8947848) {
    s = new Fe(s), l = new Fe(l);
    const c = [], u = [];
    if (t > 1)
      for (let p = 0; p < t; p++) {
        const m = p / t * (Math.PI * 2), v = Math.sin(m) * e, y = Math.cos(m) * e;
        c.push(0, 0, 0), c.push(v, 0, y);
        const E = p & 1 ? s : l;
        u.push(E.r, E.g, E.b), u.push(E.r, E.g, E.b);
      }
    for (let p = 0; p < n; p++) {
      const m = p & 1 ? s : l, v = e - e / n * p;
      for (let y = 0; y < i; y++) {
        let E = y / i * (Math.PI * 2), x = Math.sin(E) * v, _ = Math.cos(E) * v;
        c.push(x, 0, _), u.push(m.r, m.g, m.b), E = (y + 1) / i * (Math.PI * 2), x = Math.sin(E) * v, _ = Math.cos(E) * v, c.push(x, 0, _), u.push(m.r, m.g, m.b);
      }
    }
    const h = new _t();
    h.setAttribute("position", new We(c, 3)), h.setAttribute("color", new We(u, 3));
    const f = new Fn({ vertexColors: !0, toneMapped: !1 });
    super(h, f), this.type = "PolarGridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const l0 = /* @__PURE__ */ new D(), Ac = /* @__PURE__ */ new D(), c0 = /* @__PURE__ */ new D();
class Db extends Rt {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
    let i = new _t();
    i.setAttribute("position", new We([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const s = new Fn({ fog: !1, toneMapped: !1 });
    this.lightPlane = new Dr(i, s), this.add(this.lightPlane), i = new _t(), i.setAttribute("position", new We([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new Dr(i, s), this.add(this.targetLine), this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), l0.setFromMatrixPosition(this.light.matrixWorld), Ac.setFromMatrixPosition(this.light.target.matrixWorld), c0.subVectors(Ac, l0), this.lightPlane.lookAt(Ac), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(Ac), this.targetLine.scale.z = c0.length();
  }
}
const Rc = /* @__PURE__ */ new D(), Kt = /* @__PURE__ */ new za();
class Nb extends Hi {
  constructor(e) {
    const t = new _t(), n = new Fn({ color: 16777215, vertexColors: !0, toneMapped: !1 }), i = [], s = [], l = {};
    c("n1", "n2"), c("n2", "n4"), c("n4", "n3"), c("n3", "n1"), c("f1", "f2"), c("f2", "f4"), c("f4", "f3"), c("f3", "f1"), c("n1", "f1"), c("n2", "f2"), c("n3", "f3"), c("n4", "f4"), c("p", "n1"), c("p", "n2"), c("p", "n3"), c("p", "n4"), c("u1", "u2"), c("u2", "u3"), c("u3", "u1"), c("c", "t"), c("p", "c"), c("cn1", "cn2"), c("cn3", "cn4"), c("cf1", "cf2"), c("cf3", "cf4");
    function c(y, E) {
      u(y), u(E);
    }
    function u(y) {
      i.push(0, 0, 0), s.push(0, 0, 0), l[y] === void 0 && (l[y] = []), l[y].push(i.length / 3 - 1);
    }
    t.setAttribute("position", new We(i, 3)), t.setAttribute("color", new We(s, 3)), super(t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = l, this.update();
    const h = new Fe(16755200), f = new Fe(16711680), p = new Fe(43775), m = new Fe(16777215), v = new Fe(3355443);
    this.setColors(h, f, p, m, v);
  }
  setColors(e, t, n, i, s) {
    const c = this.geometry.getAttribute("color");
    c.setXYZ(0, e.r, e.g, e.b), c.setXYZ(1, e.r, e.g, e.b), c.setXYZ(2, e.r, e.g, e.b), c.setXYZ(3, e.r, e.g, e.b), c.setXYZ(4, e.r, e.g, e.b), c.setXYZ(5, e.r, e.g, e.b), c.setXYZ(6, e.r, e.g, e.b), c.setXYZ(7, e.r, e.g, e.b), c.setXYZ(8, e.r, e.g, e.b), c.setXYZ(9, e.r, e.g, e.b), c.setXYZ(10, e.r, e.g, e.b), c.setXYZ(11, e.r, e.g, e.b), c.setXYZ(12, e.r, e.g, e.b), c.setXYZ(13, e.r, e.g, e.b), c.setXYZ(14, e.r, e.g, e.b), c.setXYZ(15, e.r, e.g, e.b), c.setXYZ(16, e.r, e.g, e.b), c.setXYZ(17, e.r, e.g, e.b), c.setXYZ(18, e.r, e.g, e.b), c.setXYZ(19, e.r, e.g, e.b), c.setXYZ(20, e.r, e.g, e.b), c.setXYZ(21, e.r, e.g, e.b), c.setXYZ(22, e.r, e.g, e.b), c.setXYZ(23, e.r, e.g, e.b), c.setXYZ(24, t.r, t.g, t.b), c.setXYZ(25, t.r, t.g, t.b), c.setXYZ(26, t.r, t.g, t.b), c.setXYZ(27, t.r, t.g, t.b), c.setXYZ(28, t.r, t.g, t.b), c.setXYZ(29, t.r, t.g, t.b), c.setXYZ(30, t.r, t.g, t.b), c.setXYZ(31, t.r, t.g, t.b), c.setXYZ(32, n.r, n.g, n.b), c.setXYZ(33, n.r, n.g, n.b), c.setXYZ(34, n.r, n.g, n.b), c.setXYZ(35, n.r, n.g, n.b), c.setXYZ(36, n.r, n.g, n.b), c.setXYZ(37, n.r, n.g, n.b), c.setXYZ(38, i.r, i.g, i.b), c.setXYZ(39, i.r, i.g, i.b), c.setXYZ(40, s.r, s.g, s.b), c.setXYZ(41, s.r, s.g, s.b), c.setXYZ(42, s.r, s.g, s.b), c.setXYZ(43, s.r, s.g, s.b), c.setXYZ(44, s.r, s.g, s.b), c.setXYZ(45, s.r, s.g, s.b), c.setXYZ(46, s.r, s.g, s.b), c.setXYZ(47, s.r, s.g, s.b), c.setXYZ(48, s.r, s.g, s.b), c.setXYZ(49, s.r, s.g, s.b), c.needsUpdate = !0;
  }
  update() {
    const e = this.geometry, t = this.pointMap, n = 1, i = 1;
    Kt.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), en("c", t, e, Kt, 0, 0, -1), en("t", t, e, Kt, 0, 0, 1), en("n1", t, e, Kt, -n, -i, -1), en("n2", t, e, Kt, n, -i, -1), en("n3", t, e, Kt, -n, i, -1), en("n4", t, e, Kt, n, i, -1), en("f1", t, e, Kt, -n, -i, 1), en("f2", t, e, Kt, n, -i, 1), en("f3", t, e, Kt, -n, i, 1), en("f4", t, e, Kt, n, i, 1), en("u1", t, e, Kt, n * 0.7, i * 1.1, -1), en("u2", t, e, Kt, -n * 0.7, i * 1.1, -1), en("u3", t, e, Kt, 0, i * 2, -1), en("cf1", t, e, Kt, -n, 0, 1), en("cf2", t, e, Kt, n, 0, 1), en("cf3", t, e, Kt, 0, -i, 1), en("cf4", t, e, Kt, 0, i, 1), en("cn1", t, e, Kt, -n, 0, -1), en("cn2", t, e, Kt, n, 0, -1), en("cn3", t, e, Kt, 0, -i, -1), en("cn4", t, e, Kt, 0, i, -1), e.getAttribute("position").needsUpdate = !0;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function en(r, e, t, n, i, s, l) {
  Rc.set(i, s, l).unproject(n);
  const c = e[r];
  if (c !== void 0) {
    const u = t.getAttribute("position");
    for (let h = 0, f = c.length; h < f; h++)
      u.setXYZ(c[h], Rc.x, Rc.y, Rc.z);
  }
}
const Cc = /* @__PURE__ */ new ki();
class Ub extends Hi {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), i = new Float32Array(8 * 3), s = new _t();
    s.setIndex(new Ot(n, 1)), s.setAttribute("position", new Ot(i, 3)), super(s, new Fn({ color: t, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  update(e) {
    if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && Cc.setFromObject(this.object), Cc.isEmpty())
      return;
    const t = Cc.min, n = Cc.max, i = this.geometry.attributes.position, s = i.array;
    s[0] = n.x, s[1] = n.y, s[2] = n.z, s[3] = t.x, s[4] = n.y, s[5] = n.z, s[6] = t.x, s[7] = t.y, s[8] = n.z, s[9] = n.x, s[10] = t.y, s[11] = n.z, s[12] = n.x, s[13] = n.y, s[14] = t.z, s[15] = t.x, s[16] = n.y, s[17] = t.z, s[18] = t.x, s[19] = t.y, s[20] = t.z, s[21] = n.x, s[22] = t.y, s[23] = t.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), this.object = e.object, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Ob extends Hi {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), i = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], s = new _t();
    s.setIndex(new Ot(n, 1)), s.setAttribute("position", new We(i, 3)), super(s, new Fn({ color: t, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Fb extends Dr {
  constructor(e, t = 1, n = 16776960) {
    const i = n, s = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], l = new _t();
    l.setAttribute("position", new We(s, 3)), l.computeBoundingSphere(), super(l, new Fn({ color: i, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = t;
    const c = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], u = new _t();
    u.setAttribute("position", new We(c, 3)), u.computeBoundingSphere(), this.add(new yn(u, new Ur({ color: i, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const u0 = /* @__PURE__ */ new D();
let Pc, hf;
class zb extends Rt {
  // dir is assumed to be normalized
  constructor(e = new D(0, 0, 1), t = new D(0, 0, 0), n = 1, i = 16776960, s = n * 0.2, l = s * 0.2) {
    super(), this.type = "ArrowHelper", Pc === void 0 && (Pc = new _t(), Pc.setAttribute("position", new We([0, 0, 0, 0, 1, 0], 3)), hf = new wo(0, 0.5, 1, 5, 1), hf.translate(0, -0.5, 0)), this.position.copy(t), this.line = new Dr(Pc, new Fn({ color: i, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new yn(hf, new Ur({ color: i, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, s, l);
  }
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      u0.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(u0, t);
    }
  }
  setLength(e, t = e * 0.2, n = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class Bb extends Hi {
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], n = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], i = new _t();
    i.setAttribute("position", new We(t, 3)), i.setAttribute("color", new We(n, 3));
    const s = new Fn({ vertexColors: !0, toneMapped: !1 });
    super(i, s), this.type = "AxesHelper";
  }
  setColors(e, t, n) {
    const i = new Fe(), s = this.geometry.attributes.color.array;
    return i.set(e), i.toArray(s, 0), i.toArray(s, 3), i.set(t), i.toArray(s, 6), i.toArray(s, 9), i.set(n), i.toArray(s, 12), i.toArray(s, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class kb {
  constructor() {
    this.type = "ShapePath", this.color = new Fe(), this.subPaths = [], this.currentPath = null;
  }
  moveTo(e, t) {
    return this.currentPath = new ba(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  quadraticCurveTo(e, t, n, i) {
    return this.currentPath.quadraticCurveTo(e, t, n, i), this;
  }
  bezierCurveTo(e, t, n, i, s, l) {
    return this.currentPath.bezierCurveTo(e, t, n, i, s, l), this;
  }
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  toShapes(e) {
    function t(_) {
      const w = [];
      for (let M = 0, b = _.length; M < b; M++) {
        const A = _[M], C = new ps();
        C.curves = A.curves, w.push(C);
      }
      return w;
    }
    function n(_, w) {
      const M = w.length;
      let b = !1;
      for (let A = M - 1, C = 0; C < M; A = C++) {
        let I = w[A], z = w[C], R = z.x - I.x, L = z.y - I.y;
        if (Math.abs(L) > Number.EPSILON) {
          if (L < 0 && (I = w[C], R = -R, z = w[A], L = -L), _.y < I.y || _.y > z.y)
            continue;
          if (_.y === I.y) {
            if (_.x === I.x)
              return !0;
          } else {
            const H = L * (_.x - I.x) - R * (_.y - I.y);
            if (H === 0)
              return !0;
            if (H < 0)
              continue;
            b = !b;
          }
        } else {
          if (_.y !== I.y)
            continue;
          if (z.x <= _.x && _.x <= I.x || I.x <= _.x && _.x <= z.x)
            return !0;
        }
      }
      return b;
    }
    const i = zi.isClockWise, s = this.subPaths;
    if (s.length === 0)
      return [];
    let l, c, u;
    const h = [];
    if (s.length === 1)
      return c = s[0], u = new ps(), u.curves = c.curves, h.push(u), h;
    let f = !i(s[0].getPoints());
    f = e ? !f : f;
    const p = [], m = [];
    let v = [], y = 0, E;
    m[y] = void 0, v[y] = [];
    for (let _ = 0, w = s.length; _ < w; _++)
      c = s[_], E = c.getPoints(), l = i(E), l = e ? !l : l, l ? (!f && m[y] && y++, m[y] = { s: new ps(), p: E }, m[y].s.curves = c.curves, f && y++, v[y] = []) : v[y].push({ h: c, p: E[0] });
    if (!m[0])
      return t(s);
    if (m.length > 1) {
      let _ = !1, w = 0;
      for (let M = 0, b = m.length; M < b; M++)
        p[M] = [];
      for (let M = 0, b = m.length; M < b; M++) {
        const A = v[M];
        for (let C = 0; C < A.length; C++) {
          const I = A[C];
          let z = !0;
          for (let R = 0; R < m.length; R++)
            n(I.p, m[R].p) && (M !== R && w++, z ? (z = !1, p[R].push(I)) : _ = !0);
          z && p[M].push(I);
        }
      }
      w > 0 && _ === !1 && (v = p);
    }
    let x;
    for (let _ = 0, w = m.length; _ < w; _++) {
      u = m[_].s, h.push(u), x = v[_];
      for (let M = 0, b = x.length; M < b; M++)
        u.holes.push(x[M].h);
    }
    return h;
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: Zc
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = Zc);
const Hb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: md,
  AddEquation: ss,
  AddOperation: ev,
  AdditiveAnimationBlendMode: Ed,
  AdditiveBlending: Mf,
  AlphaFormat: av,
  AlwaysCompare: Rv,
  AlwaysDepth: q0,
  AlwaysStencilFunc: xv,
  AmbientLight: C_,
  AnimationAction: F_,
  AnimationClip: Ia,
  AnimationLoader: GT,
  AnimationMixer: _b,
  AnimationObjectGroup: gb,
  AnimationUtils: BT,
  ArcCurve: e_,
  ArrayCamera: Xv,
  ArrowHelper: zb,
  Audio: U_,
  AudioAnalyser: ob,
  AudioContext: Jd,
  AudioListener: ib,
  AudioLoader: eb,
  AxesHelper: Bb,
  BackSide: On,
  BasicDepthPacking: vv,
  BasicShadowMap: D0,
  Bone: Od,
  BooleanKeyframeTrack: Ms,
  Box2: wb,
  Box3: ki,
  Box3Helper: Ob,
  BoxGeometry: Ss,
  BoxHelper: Ub,
  BufferAttribute: Ot,
  BufferGeometry: _t,
  BufferGeometryLoader: N_,
  ByteType: sv,
  Cache: ys,
  Camera: za,
  CameraHelper: Nb,
  CanvasTexture: cT,
  CapsuleGeometry: hu,
  CatmullRomCurve3: t_,
  CineonToneMapping: iv,
  CircleGeometry: fu,
  ClampToEdgeWrapping: Rn,
  Clock: Kd,
  Color: Fe,
  ColorKeyframeTrack: qd,
  ColorManagement: Lt,
  CompressedArrayTexture: aT,
  CompressedCubeTexture: lT,
  CompressedTexture: cu,
  CompressedTextureLoader: WT,
  ConeGeometry: du,
  CubeCamera: Fv,
  CubeReflectionMapping: lr,
  CubeRefractionMapping: Lr,
  CubeTexture: Ba,
  CubeTextureLoader: XT,
  CubeUVReflectionMapping: Mo,
  CubicBezierCurve: Bd,
  CubicBezierCurve3: n_,
  CubicInterpolant: S_,
  CullFaceBack: Sf,
  CullFaceFront: I0,
  CullFaceFrontBack: ax,
  CullFaceNone: L0,
  Curve: wi,
  CurvePath: r_,
  CustomBlending: N0,
  CustomToneMapping: rv,
  CylinderGeometry: wo,
  Cylindrical: Eb,
  Data3DTexture: Ad,
  DataArrayTexture: tu,
  DataTexture: ds,
  DataTextureLoader: YT,
  DataUtils: mS,
  DecrementStencilOp: yx,
  DecrementWrapStencilOp: Sx,
  DefaultLoadingManager: w_,
  DepthFormat: Cr,
  DepthStencilFormat: gs,
  DepthTexture: Dd,
  DirectionalLight: R_,
  DirectionalLightHelper: Db,
  DiscreteInterpolant: M_,
  DisplayP3ColorSpace: eu,
  DodecahedronGeometry: pu,
  DoubleSide: Ni,
  DstAlphaFactor: H0,
  DstColorFactor: G0,
  DynamicCopyUsage: Ox,
  DynamicDrawUsage: Px,
  DynamicReadUsage: Dx,
  EdgesGeometry: s_,
  EllipseCurve: uu,
  EqualCompare: Ev,
  EqualDepth: Z0,
  EqualStencilFunc: Tx,
  EquirectangularReflectionMapping: da,
  EquirectangularRefractionMapping: pa,
  Euler: Fa,
  EventDispatcher: ur,
  ExtrudeGeometry: gu,
  FileLoader: cr,
  Float16BufferAttribute: SS,
  Float32BufferAttribute: We,
  Float64BufferAttribute: MS,
  FloatType: ei,
  Fog: su,
  FogExp2: ru,
  FramebufferTexture: oT,
  FrontSide: ar,
  Frustum: nu,
  GLBufferAttribute: Mb,
  GLSL1: zx,
  GLSL3: Qf,
  GreaterCompare: Tv,
  GreaterDepth: K0,
  GreaterEqualCompare: Av,
  GreaterEqualDepth: J0,
  GreaterEqualStencilFunc: Cx,
  GreaterStencilFunc: Ax,
  GridHelper: Lb,
  Group: po,
  HalfFloatType: ms,
  HemisphereLight: T_,
  HemisphereLightHelper: Pb,
  IcosahedronGeometry: vu,
  ImageBitmapLoader: $T,
  ImageLoader: Da,
  ImageUtils: bd,
  IncrementStencilOp: _x,
  IncrementWrapStencilOp: xx,
  InstancedBufferAttribute: xo,
  InstancedBufferGeometry: D_,
  InstancedInterleavedBuffer: Sb,
  InstancedMesh: Kv,
  Int16BufferAttribute: yS,
  Int32BufferAttribute: xS,
  Int8BufferAttribute: gS,
  IntType: vd,
  InterleavedBuffer: au,
  InterleavedBufferAttribute: vs,
  Interpolant: Wa,
  InterpolateDiscrete: va,
  InterpolateLinear: _a,
  InterpolateSmooth: Bc,
  InvertStencilOp: Mx,
  KeepStencilOp: kc,
  KeyframeTrack: Ti,
  LOD: Zv,
  LatheGeometry: Ha,
  Layers: fs,
  LessCompare: Mv,
  LessDepth: j0,
  LessEqualCompare: wv,
  LessEqualDepth: Gc,
  LessEqualStencilFunc: bx,
  LessStencilFunc: wx,
  Light: Fr,
  LightProbe: I_,
  Line: Dr,
  Line3: Tb,
  LineBasicMaterial: Fn,
  LineCurve: kd,
  LineCurve3: i_,
  LineDashedMaterial: __,
  LineLoop: Qv,
  LineSegments: Hi,
  LinearDisplayP3ColorSpace: Oa,
  LinearEncoding: wd,
  LinearFilter: Xt,
  LinearInterpolant: Yd,
  LinearMipMapLinearFilter: fx,
  LinearMipMapNearestFilter: hx,
  LinearMipmapLinearFilter: Ir,
  LinearMipmapNearestFilter: gd,
  LinearSRGBColorSpace: Bi,
  LinearToneMapping: tv,
  LinearTransfer: xa,
  Loader: Xn,
  LoaderUtils: od,
  LoadingManager: jd,
  LoopOnce: pv,
  LoopPingPong: gv,
  LoopRepeat: mv,
  LuminanceAlphaFormat: cv,
  LuminanceFormat: lv,
  MOUSE: ns,
  Material: Ln,
  MaterialLoader: wu,
  MathUtils: Pv,
  Matrix3: pt,
  Matrix4: ut,
  MaxEquation: bf,
  Mesh: yn,
  MeshBasicMaterial: Ur,
  MeshDepthMaterial: Ld,
  MeshDistanceMaterial: Id,
  MeshLambertMaterial: g_,
  MeshMatcapMaterial: v_,
  MeshNormalMaterial: m_,
  MeshPhongMaterial: d_,
  MeshPhysicalMaterial: f_,
  MeshStandardMaterial: Wd,
  MeshToonMaterial: p_,
  MinEquation: Tf,
  MirroredRepeatWrapping: ga,
  MixOperation: $0,
  MultiplyBlending: wf,
  MultiplyOperation: Ua,
  NearestFilter: Wt,
  NearestMipMapLinearFilter: ux,
  NearestMipMapNearestFilter: cx,
  NearestMipmapLinearFilter: la,
  NearestMipmapNearestFilter: Wc,
  NeverCompare: Sv,
  NeverDepth: Y0,
  NeverStencilFunc: Ex,
  NoBlending: sr,
  NoColorSpace: $n,
  NoToneMapping: Oi,
  NormalAnimationBlendMode: $c,
  NormalBlending: Ar,
  NotEqualCompare: bv,
  NotEqualDepth: Q0,
  NotEqualStencilFunc: Rx,
  NumberKeyframeTrack: Pa,
  Object3D: Rt,
  ObjectLoader: KT,
  ObjectSpaceNormalMap: yv,
  OctahedronGeometry: Va,
  OneFactor: z0,
  OneMinusDstAlphaFactor: V0,
  OneMinusDstColorFactor: W0,
  OneMinusSrcAlphaFactor: pd,
  OneMinusSrcColorFactor: k0,
  OrthographicCamera: or,
  P3Primaries: Ma,
  PCFShadowMap: Jc,
  PCFSoftShadowMap: aa,
  PMREMGenerator: ed,
  Path: ba,
  PerspectiveCamera: tn,
  Plane: tr,
  PlaneGeometry: ka,
  PlaneHelper: Fb,
  PointLight: A_,
  PointLightHelper: Rb,
  Points: $v,
  PointsMaterial: Fd,
  PolarGridHelper: Ib,
  PolyhedronGeometry: Or,
  PositionalAudio: sb,
  PropertyBinding: wt,
  PropertyMixer: O_,
  QuadraticBezierCurve: Hd,
  QuadraticBezierCurve3: Vd,
  Quaternion: Pn,
  QuaternionKeyframeTrack: To,
  QuaternionLinearInterpolant: E_,
  RED_GREEN_RGTC2_Format: Jf,
  RED_RGTC1_Format: dv,
  REVISION: Zc,
  RGBADepthPacking: _v,
  RGBAFormat: Cn,
  RGBAIntegerFormat: Md,
  RGBA_ASTC_10x10_Format: Wf,
  RGBA_ASTC_10x5_Format: Hf,
  RGBA_ASTC_10x6_Format: Vf,
  RGBA_ASTC_10x8_Format: Gf,
  RGBA_ASTC_12x10_Format: Xf,
  RGBA_ASTC_12x12_Format: Yf,
  RGBA_ASTC_4x4_Format: Df,
  RGBA_ASTC_5x4_Format: Nf,
  RGBA_ASTC_5x5_Format: Uf,
  RGBA_ASTC_6x5_Format: Of,
  RGBA_ASTC_6x6_Format: Ff,
  RGBA_ASTC_8x5_Format: zf,
  RGBA_ASTC_8x6_Format: Bf,
  RGBA_ASTC_8x8_Format: kf,
  RGBA_BPTC_Format: zc,
  RGBA_ETC2_EAC_Format: If,
  RGBA_PVRTC_2BPPV1_Format: Pf,
  RGBA_PVRTC_4BPPV1_Format: Cf,
  RGBA_S3TC_DXT1_Format: Uc,
  RGBA_S3TC_DXT3_Format: Oc,
  RGBA_S3TC_DXT5_Format: Fc,
  RGB_BPTC_SIGNED_Format: qf,
  RGB_BPTC_UNSIGNED_Format: jf,
  RGB_ETC1_Format: fv,
  RGB_ETC2_Format: Lf,
  RGB_PVRTC_2BPPV1_Format: Rf,
  RGB_PVRTC_4BPPV1_Format: Af,
  RGB_S3TC_DXT1_Format: Nc,
  RGFormat: hv,
  RGIntegerFormat: Sd,
  RawShaderMaterial: h_,
  Ray: xs,
  Raycaster: tp,
  Rec709Primaries: Sa,
  RectAreaLight: P_,
  RedFormat: uv,
  RedIntegerFormat: xd,
  ReinhardToneMapping: nv,
  RenderTarget: Dv,
  RepeatWrapping: ma,
  ReplaceStencilOp: vx,
  ReverseSubtractEquation: O0,
  RingGeometry: _u,
  SIGNED_RED_GREEN_RGTC2_Format: Kf,
  SIGNED_RED_RGTC1_Format: Zf,
  SRGBColorSpace: hn,
  SRGBTransfer: zt,
  Scene: ou,
  ShaderChunk: ht,
  ShaderLib: Mi,
  ShaderMaterial: fi,
  ShadowMaterial: u_,
  Shape: ps,
  ShapeGeometry: yu,
  ShapePath: kb,
  ShapeUtils: zi,
  ShortType: ov,
  Skeleton: lu,
  SkeletonHelper: Ab,
  SkinnedMesh: Jv,
  Source: cs,
  Sphere: Ei,
  SphereGeometry: Ga,
  Spherical: ld,
  SphericalHarmonics3: L_,
  SplineCurve: Gd,
  SpotLight: b_,
  SpotLightHelper: bb,
  Sprite: jv,
  SpriteMaterial: Ud,
  SrcAlphaFactor: dd,
  SrcAlphaSaturateFactor: X0,
  SrcColorFactor: B0,
  StaticCopyUsage: Ux,
  StaticDrawUsage: Ea,
  StaticReadUsage: Ix,
  StereoCamera: tb,
  StreamCopyUsage: Fx,
  StreamDrawUsage: Lx,
  StreamReadUsage: Nx,
  StringKeyframeTrack: Es,
  SubtractEquation: U0,
  SubtractiveBlending: Ef,
  TOUCH: is,
  TangentSpaceNormalMap: Nr,
  TetrahedronGeometry: xu,
  Texture: nn,
  TextureLoader: qT,
  TorusGeometry: Su,
  TorusKnotGeometry: Mu,
  Triangle: Gn,
  TriangleFanDrawMode: mx,
  TriangleStripDrawMode: px,
  TrianglesDrawMode: dx,
  TubeGeometry: Eu,
  TwoPassDoubleSide: lx,
  UVMapping: Kc,
  Uint16BufferAttribute: Rd,
  Uint32BufferAttribute: Cd,
  Uint8BufferAttribute: vS,
  Uint8ClampedBufferAttribute: _S,
  Uniform: ep,
  UniformsGroup: xb,
  UniformsLib: Re,
  UniformsUtils: Ov,
  UnsignedByteType: Fi,
  UnsignedInt248Type: Rr,
  UnsignedIntType: ir,
  UnsignedShort4444Type: _d,
  UnsignedShort5551Type: yd,
  UnsignedShortType: Qc,
  VSMShadowMap: yi,
  Vector2: ue,
  Vector3: D,
  Vector4: It,
  VectorKeyframeTrack: La,
  VideoTexture: sT,
  WebGL1Renderer: Yv,
  WebGL3DRenderTarget: iS,
  WebGLArrayRenderTarget: nS,
  WebGLCoordinateSystem: Ui,
  WebGLCubeRenderTarget: zv,
  WebGLMultipleRenderTargets: rS,
  WebGLRenderTarget: hi,
  WebGLRenderer: Nd,
  WebGLUtils: Wv,
  WebGPUCoordinateSystem: wa,
  WireframeGeometry: c_,
  WrapAroundEnding: ya,
  ZeroCurvatureEnding: as,
  ZeroFactor: F0,
  ZeroSlopeEnding: ls,
  ZeroStencilOp: gx,
  _SRGBAFormat: Xc,
  createCanvasElement: Iv,
  sRGBEncoding: Pr
}, Symbol.toStringTag, { value: "Module" }));
var B_ = { exports: {} }, ws = {};
/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
ws.ConcurrentRoot = 1;
ws.ContinuousEventPriority = 4;
ws.DefaultEventPriority = 16;
ws.DiscreteEventPriority = 1;
ws.IdleEventPriority = 536870912;
ws.LegacyRoot = 0;
B_.exports = ws;
var go = B_.exports;
function Vb(r) {
  let e;
  const t = /* @__PURE__ */ new Set(), n = (h, f) => {
    const p = typeof h == "function" ? h(e) : h;
    if (p !== e) {
      const m = e;
      e = f ? p : Object.assign({}, e, p), t.forEach((v) => v(e, m));
    }
  }, i = () => e, s = (h, f = i, p = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let m = f(e);
    function v() {
      const y = f(e);
      if (!p(m, y)) {
        const E = m;
        h(m = y, E);
      }
    }
    return t.add(v), () => t.delete(v);
  }, u = { setState: n, getState: i, subscribe: (h, f, p) => f || p ? s(h, f, p) : (t.add(h), () => t.delete(h)), destroy: () => t.clear() };
  return e = r(n, i, u), u;
}
const Gb = typeof window > "u" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent), h0 = Gb ? rr : $y;
function k_(r) {
  const e = typeof r == "function" ? Vb(r) : r, t = (n = e.getState, i = Object.is) => {
    const [, s] = Ky((x) => x + 1, 0), l = e.getState(), c = Si(l), u = Si(n), h = Si(i), f = Si(!1), p = Si();
    p.current === void 0 && (p.current = n(l));
    let m, v = !1;
    (c.current !== l || u.current !== n || h.current !== i || f.current) && (m = n(l), v = !i(p.current, m)), h0(() => {
      v && (p.current = m), c.current = l, u.current = n, h.current = i, f.current = !1;
    });
    const y = Si(l);
    h0(() => {
      const x = () => {
        try {
          const w = e.getState(), M = u.current(w);
          h.current(p.current, M) || (c.current = w, p.current = M, s());
        } catch {
          f.current = !0, s();
        }
      }, _ = e.subscribe(x);
      return e.getState() !== y.current && x(), _;
    }, []);
    const E = v ? m : p.current;
    return Qy(E), E;
  };
  return Object.assign(t, e), t[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const n = [t, e];
    return {
      next() {
        const i = n.length <= 0;
        return { value: n.shift(), done: i };
      }
    };
  }, t;
}
var H_ = { exports: {} }, V_ = { exports: {} }, G_ = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(r) {
  function e(Y, q) {
    var j = Y.length;
    Y.push(q);
    e:
      for (; 0 < j; ) {
        var k = j - 1 >>> 1, Q = Y[k];
        if (0 < i(Q, q))
          Y[k] = q, Y[j] = Q, j = k;
        else
          break e;
      }
  }
  function t(Y) {
    return Y.length === 0 ? null : Y[0];
  }
  function n(Y) {
    if (Y.length === 0)
      return null;
    var q = Y[0], j = Y.pop();
    if (j !== q) {
      Y[0] = j;
      e:
        for (var k = 0, Q = Y.length, fe = Q >>> 1; k < fe; ) {
          var Te = 2 * (k + 1) - 1, Ae = Y[Te], ke = Te + 1, He = Y[ke];
          if (0 > i(Ae, j))
            ke < Q && 0 > i(He, Ae) ? (Y[k] = He, Y[ke] = j, k = ke) : (Y[k] = Ae, Y[Te] = j, k = Te);
          else if (ke < Q && 0 > i(He, j))
            Y[k] = He, Y[ke] = j, k = ke;
          else
            break e;
        }
    }
    return q;
  }
  function i(Y, q) {
    var j = Y.sortIndex - q.sortIndex;
    return j !== 0 ? j : Y.id - q.id;
  }
  if (typeof performance == "object" && typeof performance.now == "function") {
    var s = performance;
    r.unstable_now = function() {
      return s.now();
    };
  } else {
    var l = Date, c = l.now();
    r.unstable_now = function() {
      return l.now() - c;
    };
  }
  var u = [], h = [], f = 1, p = null, m = 3, v = !1, y = !1, E = !1, x = typeof setTimeout == "function" ? setTimeout : null, _ = typeof clearTimeout == "function" ? clearTimeout : null, w = typeof setImmediate < "u" ? setImmediate : null;
  typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function M(Y) {
    for (var q = t(h); q !== null; ) {
      if (q.callback === null)
        n(h);
      else if (q.startTime <= Y)
        n(h), q.sortIndex = q.expirationTime, e(u, q);
      else
        break;
      q = t(h);
    }
  }
  function b(Y) {
    if (E = !1, M(Y), !y)
      if (t(u) !== null)
        y = !0, oe(A);
      else {
        var q = t(h);
        q !== null && ie(b, q.startTime - Y);
      }
  }
  function A(Y, q) {
    y = !1, E && (E = !1, _(z), z = -1), v = !0;
    var j = m;
    try {
      for (M(q), p = t(u); p !== null && (!(p.expirationTime > q) || Y && !H()); ) {
        var k = p.callback;
        if (typeof k == "function") {
          p.callback = null, m = p.priorityLevel;
          var Q = k(p.expirationTime <= q);
          q = r.unstable_now(), typeof Q == "function" ? p.callback = Q : p === t(u) && n(u), M(q);
        } else
          n(u);
        p = t(u);
      }
      if (p !== null)
        var fe = !0;
      else {
        var Te = t(h);
        Te !== null && ie(b, Te.startTime - q), fe = !1;
      }
      return fe;
    } finally {
      p = null, m = j, v = !1;
    }
  }
  var C = !1, I = null, z = -1, R = 5, L = -1;
  function H() {
    return !(r.unstable_now() - L < R);
  }
  function te() {
    if (I !== null) {
      var Y = r.unstable_now();
      L = Y;
      var q = !0;
      try {
        q = I(!0, Y);
      } finally {
        q ? se() : (C = !1, I = null);
      }
    } else
      C = !1;
  }
  var se;
  if (typeof w == "function")
    se = function() {
      w(te);
    };
  else if (typeof MessageChannel < "u") {
    var G = new MessageChannel(), $ = G.port2;
    G.port1.onmessage = te, se = function() {
      $.postMessage(null);
    };
  } else
    se = function() {
      x(te, 0);
    };
  function oe(Y) {
    I = Y, C || (C = !0, se());
  }
  function ie(Y, q) {
    z = x(function() {
      Y(r.unstable_now());
    }, q);
  }
  r.unstable_IdlePriority = 5, r.unstable_ImmediatePriority = 1, r.unstable_LowPriority = 4, r.unstable_NormalPriority = 3, r.unstable_Profiling = null, r.unstable_UserBlockingPriority = 2, r.unstable_cancelCallback = function(Y) {
    Y.callback = null;
  }, r.unstable_continueExecution = function() {
    y || v || (y = !0, oe(A));
  }, r.unstable_forceFrameRate = function(Y) {
    0 > Y || 125 < Y ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : R = 0 < Y ? Math.floor(1e3 / Y) : 5;
  }, r.unstable_getCurrentPriorityLevel = function() {
    return m;
  }, r.unstable_getFirstCallbackNode = function() {
    return t(u);
  }, r.unstable_next = function(Y) {
    switch (m) {
      case 1:
      case 2:
      case 3:
        var q = 3;
        break;
      default:
        q = m;
    }
    var j = m;
    m = q;
    try {
      return Y();
    } finally {
      m = j;
    }
  }, r.unstable_pauseExecution = function() {
  }, r.unstable_requestPaint = function() {
  }, r.unstable_runWithPriority = function(Y, q) {
    switch (Y) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        Y = 3;
    }
    var j = m;
    m = Y;
    try {
      return q();
    } finally {
      m = j;
    }
  }, r.unstable_scheduleCallback = function(Y, q, j) {
    var k = r.unstable_now();
    switch (typeof j == "object" && j !== null ? (j = j.delay, j = typeof j == "number" && 0 < j ? k + j : k) : j = k, Y) {
      case 1:
        var Q = -1;
        break;
      case 2:
        Q = 250;
        break;
      case 5:
        Q = 1073741823;
        break;
      case 4:
        Q = 1e4;
        break;
      default:
        Q = 5e3;
    }
    return Q = j + Q, Y = { id: f++, callback: q, priorityLevel: Y, startTime: j, expirationTime: Q, sortIndex: -1 }, j > k ? (Y.sortIndex = j, e(h, Y), t(u) === null && Y === t(h) && (E ? (_(z), z = -1) : E = !0, ie(b, j - k))) : (Y.sortIndex = Q, e(u, Y), y || v || (y = !0, oe(A))), Y;
  }, r.unstable_shouldYield = H, r.unstable_wrapCallback = function(Y) {
    var q = m;
    return function() {
      var j = m;
      m = q;
      try {
        return Y.apply(this, arguments);
      } finally {
        m = j;
      }
    };
  };
})(G_);
V_.exports = G_;
var cd = V_.exports;
/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Wb = function(e) {
  var t = {}, n = R0, i = cd, s = Object.assign;
  function l(o) {
    for (var a = "https://reactjs.org/docs/error-decoder.html?invariant=" + o, d = 1; d < arguments.length; d++)
      a += "&args[]=" + encodeURIComponent(arguments[d]);
    return "Minified React error #" + o + "; visit " + a + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var c = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, u = Symbol.for("react.element"), h = Symbol.for("react.portal"), f = Symbol.for("react.fragment"), p = Symbol.for("react.strict_mode"), m = Symbol.for("react.profiler"), v = Symbol.for("react.provider"), y = Symbol.for("react.context"), E = Symbol.for("react.forward_ref"), x = Symbol.for("react.suspense"), _ = Symbol.for("react.suspense_list"), w = Symbol.for("react.memo"), M = Symbol.for("react.lazy"), b = Symbol.for("react.offscreen"), A = Symbol.iterator;
  function C(o) {
    return o === null || typeof o != "object" ? null : (o = A && o[A] || o["@@iterator"], typeof o == "function" ? o : null);
  }
  function I(o) {
    if (o == null)
      return null;
    if (typeof o == "function")
      return o.displayName || o.name || null;
    if (typeof o == "string")
      return o;
    switch (o) {
      case f:
        return "Fragment";
      case h:
        return "Portal";
      case m:
        return "Profiler";
      case p:
        return "StrictMode";
      case x:
        return "Suspense";
      case _:
        return "SuspenseList";
    }
    if (typeof o == "object")
      switch (o.$$typeof) {
        case y:
          return (o.displayName || "Context") + ".Consumer";
        case v:
          return (o._context.displayName || "Context") + ".Provider";
        case E:
          var a = o.render;
          return o = o.displayName, o || (o = a.displayName || a.name || "", o = o !== "" ? "ForwardRef(" + o + ")" : "ForwardRef"), o;
        case w:
          return a = o.displayName || null, a !== null ? a : I(o.type) || "Memo";
        case M:
          a = o._payload, o = o._init;
          try {
            return I(o(a));
          } catch {
          }
      }
    return null;
  }
  function z(o) {
    var a = o.type;
    switch (o.tag) {
      case 24:
        return "Cache";
      case 9:
        return (a.displayName || "Context") + ".Consumer";
      case 10:
        return (a._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return o = a.render, o = o.displayName || o.name || "", a.displayName || (o !== "" ? "ForwardRef(" + o + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return a;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return I(a);
      case 8:
        return a === p ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if (typeof a == "function")
          return a.displayName || a.name || null;
        if (typeof a == "string")
          return a;
    }
    return null;
  }
  function R(o) {
    var a = o, d = o;
    if (o.alternate)
      for (; a.return; )
        a = a.return;
    else {
      o = a;
      do
        a = o, a.flags & 4098 && (d = a.return), o = a.return;
      while (o);
    }
    return a.tag === 3 ? d : null;
  }
  function L(o) {
    if (R(o) !== o)
      throw Error(l(188));
  }
  function H(o) {
    var a = o.alternate;
    if (!a) {
      if (a = R(o), a === null)
        throw Error(l(188));
      return a !== o ? null : o;
    }
    for (var d = o, g = a; ; ) {
      var S = d.return;
      if (S === null)
        break;
      var T = S.alternate;
      if (T === null) {
        if (g = S.return, g !== null) {
          d = g;
          continue;
        }
        break;
      }
      if (S.child === T.child) {
        for (T = S.child; T; ) {
          if (T === d)
            return L(S), o;
          if (T === g)
            return L(S), a;
          T = T.sibling;
        }
        throw Error(l(188));
      }
      if (d.return !== g.return)
        d = S, g = T;
      else {
        for (var U = !1, W = S.child; W; ) {
          if (W === d) {
            U = !0, d = S, g = T;
            break;
          }
          if (W === g) {
            U = !0, g = S, d = T;
            break;
          }
          W = W.sibling;
        }
        if (!U) {
          for (W = T.child; W; ) {
            if (W === d) {
              U = !0, d = T, g = S;
              break;
            }
            if (W === g) {
              U = !0, g = T, d = S;
              break;
            }
            W = W.sibling;
          }
          if (!U)
            throw Error(l(189));
        }
      }
      if (d.alternate !== g)
        throw Error(l(190));
    }
    if (d.tag !== 3)
      throw Error(l(188));
    return d.stateNode.current === d ? o : a;
  }
  function te(o) {
    return o = H(o), o !== null ? se(o) : null;
  }
  function se(o) {
    if (o.tag === 5 || o.tag === 6)
      return o;
    for (o = o.child; o !== null; ) {
      var a = se(o);
      if (a !== null)
        return a;
      o = o.sibling;
    }
    return null;
  }
  function G(o) {
    if (o.tag === 5 || o.tag === 6)
      return o;
    for (o = o.child; o !== null; ) {
      if (o.tag !== 4) {
        var a = G(o);
        if (a !== null)
          return a;
      }
      o = o.sibling;
    }
    return null;
  }
  var $ = Array.isArray, oe = e.getPublicInstance, ie = e.getRootHostContext, Y = e.getChildHostContext, q = e.prepareForCommit, j = e.resetAfterCommit, k = e.createInstance, Q = e.appendInitialChild, fe = e.finalizeInitialChildren, Te = e.prepareUpdate, Ae = e.shouldSetTextContent, ke = e.createTextInstance, He = e.scheduleTimeout, je = e.cancelTimeout, yt = e.noTimeout, Ct = e.isPrimaryRenderer, Ve = e.supportsMutation, B = e.supportsPersistence, ve = e.supportsHydration, he = e.getInstanceFromNode, Ee = e.preparePortalMount, de = e.getCurrentEventPriority, Xe = e.detachDeletedInstance, Ne = e.supportsMicrotasks, Oe = e.scheduleMicrotask, $e = e.supportsTestSelectors, mt = e.findFiberRoot, Dt = e.getBoundingRect, O = e.getTextContent, P = e.isHiddenSubtree, ee = e.matchAccessibilityRole, Se = e.setFocusIfFocusable, ge = e.setupIntersectionObserver, xe = e.appendChild, Ge = e.appendChildToContainer, be = e.commitTextUpdate, Pe = e.commitMount, tt = e.commitUpdate, xt = e.insertBefore, Me = e.insertInContainerBefore, St = e.removeChild, V = e.removeChildFromContainer, ae = e.resetTextContent, _e = e.hideInstance, F = e.hideTextInstance, me = e.unhideInstance, ye = e.unhideTextInstance, Ce = e.clearContainer, Le = e.cloneInstance, pe = e.createContainerChildSet, Ue = e.appendChildToContainerChildSet, Ze = e.finalizeContainerChildren, Ht = e.replaceContainerChildren, Mt = e.cloneHiddenInstance, ln = e.cloneHiddenTextInstance, qt = e.canHydrateInstance, Ya = e.canHydrateTextInstance, qa = e.canHydrateSuspenseInstance, ja = e.isSuspenseInstancePending, hr = e.isSuspenseInstanceFallback, Za = e.registerSuspenseInstanceRetry, bi = e.getNextHydratableSibling, Ja = e.getFirstHydratableChild, Tu = e.getFirstHydratableChildWithinContainer, bu = e.getFirstHydratableChildWithinSuspenseInstance, Au = e.hydrateInstance, N = e.hydrateTextInstance, Z = e.hydrateSuspenseInstance, le = e.getNextHydratableInstanceAfterSuspenseInstance, K = e.commitHydratedContainer, ce = e.commitHydratedSuspenseInstance, ze = e.clearSuspenseBoundary, Je = e.clearSuspenseBoundaryFromContainer, it = e.shouldDeleteUnhydratedTailInstances, rt = e.didNotMatchHydratedContainerTextInstance, gt = e.didNotMatchHydratedTextInstance, et;
  function ot(o) {
    if (et === void 0)
      try {
        throw Error();
      } catch (d) {
        var a = d.stack.trim().match(/\n( *(at )?)/);
        et = a && a[1] || "";
      }
    return `
` + et + o;
  }
  var Ft = !1;
  function Bt(o, a) {
    if (!o || Ft)
      return "";
    Ft = !0;
    var d = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (a)
        if (a = function() {
          throw Error();
        }, Object.defineProperty(a.prototype, "props", { set: function() {
          throw Error();
        } }), typeof Reflect == "object" && Reflect.construct) {
          try {
            Reflect.construct(a, []);
          } catch (we) {
            var g = we;
          }
          Reflect.construct(o, [], a);
        } else {
          try {
            a.call();
          } catch (we) {
            g = we;
          }
          o.call(a.prototype);
        }
      else {
        try {
          throw Error();
        } catch (we) {
          g = we;
        }
        o();
      }
    } catch (we) {
      if (we && g && typeof we.stack == "string") {
        for (var S = we.stack.split(`
`), T = g.stack.split(`
`), U = S.length - 1, W = T.length - 1; 1 <= U && 0 <= W && S[U] !== T[W]; )
          W--;
        for (; 1 <= U && 0 <= W; U--, W--)
          if (S[U] !== T[W]) {
            if (U !== 1 || W !== 1)
              do
                if (U--, W--, 0 > W || S[U] !== T[W]) {
                  var re = `
` + S[U].replace(" at new ", " at ");
                  return o.displayName && re.includes("<anonymous>") && (re = re.replace("<anonymous>", o.displayName)), re;
                }
              while (1 <= U && 0 <= W);
            break;
          }
      }
    } finally {
      Ft = !1, Error.prepareStackTrace = d;
    }
    return (o = o ? o.displayName || o.name : "") ? ot(o) : "";
  }
  var zn = Object.prototype.hasOwnProperty, Yn = [], Nt = -1;
  function at(o) {
    return { current: o };
  }
  function Pt(o) {
    0 > Nt || (o.current = Yn[Nt], Yn[Nt] = null, Nt--);
  }
  function st(o, a) {
    Nt++, Yn[Nt] = o.current, o.current = a;
  }
  var xn = {}, cn = at(xn), rn = at(!1), di = xn;
  function jt(o, a) {
    var d = o.type.contextTypes;
    if (!d)
      return xn;
    var g = o.stateNode;
    if (g && g.__reactInternalMemoizedUnmaskedChildContext === a)
      return g.__reactInternalMemoizedMaskedChildContext;
    var S = {}, T;
    for (T in d)
      S[T] = a[T];
    return g && (o = o.stateNode, o.__reactInternalMemoizedUnmaskedChildContext = a, o.__reactInternalMemoizedMaskedChildContext = S), S;
  }
  function Zt(o) {
    return o = o.childContextTypes, o != null;
  }
  function fr() {
    Pt(rn), Pt(cn);
  }
  function Sn(o, a, d) {
    if (cn.current !== xn)
      throw Error(l(168));
    st(cn, a), st(rn, d);
  }
  function Ts(o, a, d) {
    var g = o.stateNode;
    if (a = a.childContextTypes, typeof g.getChildContext != "function")
      return d;
    g = g.getChildContext();
    for (var S in g)
      if (!(S in a))
        throw Error(l(108, z(o) || "Unknown", S));
    return s({}, d, g);
  }
  function bs(o) {
    return o = (o = o.stateNode) && o.__reactInternalMemoizedMergedChildContext || xn, di = cn.current, st(cn, o), st(rn, rn.current), !0;
  }
  function bo(o, a, d) {
    var g = o.stateNode;
    if (!g)
      throw Error(l(169));
    d ? (o = Ts(o, a, di), g.__reactInternalMemoizedMergedChildContext = o, Pt(rn), Pt(cn), st(cn, o)) : Pt(rn), st(rn, d);
  }
  var pi = Math.clz32 ? Math.clz32 : ly, oy = Math.log, ay = Math.LN2;
  function ly(o) {
    return o >>>= 0, o === 0 ? 32 : 31 - (oy(o) / ay | 0) | 0;
  }
  var Ka = 64, Qa = 4194304;
  function Ao(o) {
    switch (o & -o) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return o & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return o & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return o;
    }
  }
  function $a(o, a) {
    var d = o.pendingLanes;
    if (d === 0)
      return 0;
    var g = 0, S = o.suspendedLanes, T = o.pingedLanes, U = d & 268435455;
    if (U !== 0) {
      var W = U & ~S;
      W !== 0 ? g = Ao(W) : (T &= U, T !== 0 && (g = Ao(T)));
    } else
      U = d & ~S, U !== 0 ? g = Ao(U) : T !== 0 && (g = Ao(T));
    if (g === 0)
      return 0;
    if (a !== 0 && a !== g && !(a & S) && (S = g & -g, T = a & -a, S >= T || S === 16 && (T & 4194240) !== 0))
      return a;
    if (g & 4 && (g |= d & 16), a = o.entangledLanes, a !== 0)
      for (o = o.entanglements, a &= g; 0 < a; )
        d = 31 - pi(a), S = 1 << d, g |= o[d], a &= ~S;
    return g;
  }
  function cy(o, a) {
    switch (o) {
      case 1:
      case 2:
      case 4:
        return a + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return a + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function uy(o, a) {
    for (var d = o.suspendedLanes, g = o.pingedLanes, S = o.expirationTimes, T = o.pendingLanes; 0 < T; ) {
      var U = 31 - pi(T), W = 1 << U, re = S[U];
      re === -1 ? (!(W & d) || W & g) && (S[U] = cy(W, a)) : re <= a && (o.expiredLanes |= W), T &= ~W;
    }
  }
  function Ru(o) {
    return o = o.pendingLanes & -1073741825, o !== 0 ? o : o & 1073741824 ? 1073741824 : 0;
  }
  function Cu(o) {
    for (var a = [], d = 0; 31 > d; d++)
      a.push(o);
    return a;
  }
  function Ro(o, a, d) {
    o.pendingLanes |= a, a !== 536870912 && (o.suspendedLanes = 0, o.pingedLanes = 0), o = o.eventTimes, a = 31 - pi(a), o[a] = d;
  }
  function hy(o, a) {
    var d = o.pendingLanes & ~a;
    o.pendingLanes = a, o.suspendedLanes = 0, o.pingedLanes = 0, o.expiredLanes &= a, o.mutableReadLanes &= a, o.entangledLanes &= a, a = o.entanglements;
    var g = o.eventTimes;
    for (o = o.expirationTimes; 0 < d; ) {
      var S = 31 - pi(d), T = 1 << S;
      a[S] = 0, g[S] = -1, o[S] = -1, d &= ~T;
    }
  }
  function Pu(o, a) {
    var d = o.entangledLanes |= a;
    for (o = o.entanglements; d; ) {
      var g = 31 - pi(d), S = 1 << g;
      S & a | o[g] & a && (o[g] |= a), d &= ~S;
    }
  }
  var Tt = 0;
  function ap(o) {
    return o &= -o, 1 < o ? 4 < o ? o & 268435455 ? 16 : 536870912 : 4 : 1;
  }
  var Lu = i.unstable_scheduleCallback, lp = i.unstable_cancelCallback, fy = i.unstable_shouldYield, dy = i.unstable_requestPaint, pn = i.unstable_now, Iu = i.unstable_ImmediatePriority, py = i.unstable_UserBlockingPriority, Du = i.unstable_NormalPriority, my = i.unstable_IdlePriority, el = null, Ai = null;
  function gy(o) {
    if (Ai && typeof Ai.onCommitFiberRoot == "function")
      try {
        Ai.onCommitFiberRoot(el, o, void 0, (o.current.flags & 128) === 128);
      } catch {
      }
  }
  function vy(o, a) {
    return o === a && (o !== 0 || 1 / o === 1 / a) || o !== o && a !== a;
  }
  var Ri = typeof Object.is == "function" ? Object.is : vy, Vi = null, tl = !1, Nu = !1;
  function cp(o) {
    Vi === null ? Vi = [o] : Vi.push(o);
  }
  function _y(o) {
    tl = !0, cp(o);
  }
  function Ci() {
    if (!Nu && Vi !== null) {
      Nu = !0;
      var o = 0, a = Tt;
      try {
        var d = Vi;
        for (Tt = 1; o < d.length; o++) {
          var g = d[o];
          do
            g = g(!0);
          while (g !== null);
        }
        Vi = null, tl = !1;
      } catch (S) {
        throw Vi !== null && (Vi = Vi.slice(o + 1)), Lu(Iu, Ci), S;
      } finally {
        Tt = a, Nu = !1;
      }
    }
    return null;
  }
  var yy = c.ReactCurrentBatchConfig;
  function nl(o, a) {
    if (Ri(o, a))
      return !0;
    if (typeof o != "object" || o === null || typeof a != "object" || a === null)
      return !1;
    var d = Object.keys(o), g = Object.keys(a);
    if (d.length !== g.length)
      return !1;
    for (g = 0; g < d.length; g++) {
      var S = d[g];
      if (!zn.call(a, S) || !Ri(o[S], a[S]))
        return !1;
    }
    return !0;
  }
  function xy(o) {
    switch (o.tag) {
      case 5:
        return ot(o.type);
      case 16:
        return ot("Lazy");
      case 13:
        return ot("Suspense");
      case 19:
        return ot("SuspenseList");
      case 0:
      case 2:
      case 15:
        return o = Bt(o.type, !1), o;
      case 11:
        return o = Bt(o.type.render, !1), o;
      case 1:
        return o = Bt(o.type, !0), o;
      default:
        return "";
    }
  }
  function mi(o, a) {
    if (o && o.defaultProps) {
      a = s({}, a), o = o.defaultProps;
      for (var d in o)
        a[d] === void 0 && (a[d] = o[d]);
      return a;
    }
    return a;
  }
  var il = at(null), rl = null, As = null, Uu = null;
  function Ou() {
    Uu = As = rl = null;
  }
  function up(o, a, d) {
    Ct ? (st(il, a._currentValue), a._currentValue = d) : (st(il, a._currentValue2), a._currentValue2 = d);
  }
  function Fu(o) {
    var a = il.current;
    Pt(il), Ct ? o._currentValue = a : o._currentValue2 = a;
  }
  function zu(o, a, d) {
    for (; o !== null; ) {
      var g = o.alternate;
      if ((o.childLanes & a) !== a ? (o.childLanes |= a, g !== null && (g.childLanes |= a)) : g !== null && (g.childLanes & a) !== a && (g.childLanes |= a), o === d)
        break;
      o = o.return;
    }
  }
  function Rs(o, a) {
    rl = o, Uu = As = null, o = o.dependencies, o !== null && o.firstContext !== null && (o.lanes & a && (Zn = !0), o.firstContext = null);
  }
  function ni(o) {
    var a = Ct ? o._currentValue : o._currentValue2;
    if (Uu !== o)
      if (o = { context: o, memoizedValue: a, next: null }, As === null) {
        if (rl === null)
          throw Error(l(308));
        As = o, rl.dependencies = { lanes: 0, firstContext: o };
      } else
        As = As.next = o;
    return a;
  }
  var Pi = null, dr = !1;
  function Bu(o) {
    o.updateQueue = { baseState: o.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
  function hp(o, a) {
    o = o.updateQueue, a.updateQueue === o && (a.updateQueue = { baseState: o.baseState, firstBaseUpdate: o.firstBaseUpdate, lastBaseUpdate: o.lastBaseUpdate, shared: o.shared, effects: o.effects });
  }
  function Gi(o, a) {
    return { eventTime: o, lane: a, tag: 0, payload: null, callback: null, next: null };
  }
  function pr(o, a) {
    var d = o.updateQueue;
    d !== null && (d = d.shared, sn !== null && o.mode & 1 && !(vt & 2) ? (o = d.interleaved, o === null ? (a.next = a, Pi === null ? Pi = [d] : Pi.push(d)) : (a.next = o.next, o.next = a), d.interleaved = a) : (o = d.pending, o === null ? a.next = a : (a.next = o.next, o.next = a), d.pending = a));
  }
  function sl(o, a, d) {
    if (a = a.updateQueue, a !== null && (a = a.shared, (d & 4194240) !== 0)) {
      var g = a.lanes;
      g &= o.pendingLanes, d |= g, a.lanes = d, Pu(o, d);
    }
  }
  function fp(o, a) {
    var d = o.updateQueue, g = o.alternate;
    if (g !== null && (g = g.updateQueue, d === g)) {
      var S = null, T = null;
      if (d = d.firstBaseUpdate, d !== null) {
        do {
          var U = { eventTime: d.eventTime, lane: d.lane, tag: d.tag, payload: d.payload, callback: d.callback, next: null };
          T === null ? S = T = U : T = T.next = U, d = d.next;
        } while (d !== null);
        T === null ? S = T = a : T = T.next = a;
      } else
        S = T = a;
      d = { baseState: g.baseState, firstBaseUpdate: S, lastBaseUpdate: T, shared: g.shared, effects: g.effects }, o.updateQueue = d;
      return;
    }
    o = d.lastBaseUpdate, o === null ? d.firstBaseUpdate = a : o.next = a, d.lastBaseUpdate = a;
  }
  function ol(o, a, d, g) {
    var S = o.updateQueue;
    dr = !1;
    var T = S.firstBaseUpdate, U = S.lastBaseUpdate, W = S.shared.pending;
    if (W !== null) {
      S.shared.pending = null;
      var re = W, we = re.next;
      re.next = null, U === null ? T = we : U.next = we, U = re;
      var Be = o.alternate;
      Be !== null && (Be = Be.updateQueue, W = Be.lastBaseUpdate, W !== U && (W === null ? Be.firstBaseUpdate = we : W.next = we, Be.lastBaseUpdate = re));
    }
    if (T !== null) {
      var lt = S.baseState;
      U = 0, Be = we = re = null, W = T;
      do {
        var Ke = W.lane, Ut = W.eventTime;
        if ((g & Ke) === Ke) {
          Be !== null && (Be = Be.next = {
            eventTime: Ut,
            lane: 0,
            tag: W.tag,
            payload: W.payload,
            callback: W.callback,
            next: null
          });
          e: {
            var qe = o, Tn = W;
            switch (Ke = a, Ut = d, Tn.tag) {
              case 1:
                if (qe = Tn.payload, typeof qe == "function") {
                  lt = qe.call(Ut, lt, Ke);
                  break e;
                }
                lt = qe;
                break e;
              case 3:
                qe.flags = qe.flags & -65537 | 128;
              case 0:
                if (qe = Tn.payload, Ke = typeof qe == "function" ? qe.call(Ut, lt, Ke) : qe, Ke == null)
                  break e;
                lt = s({}, lt, Ke);
                break e;
              case 2:
                dr = !0;
            }
          }
          W.callback !== null && W.lane !== 0 && (o.flags |= 64, Ke = S.effects, Ke === null ? S.effects = [W] : Ke.push(W));
        } else
          Ut = { eventTime: Ut, lane: Ke, tag: W.tag, payload: W.payload, callback: W.callback, next: null }, Be === null ? (we = Be = Ut, re = lt) : Be = Be.next = Ut, U |= Ke;
        if (W = W.next, W === null) {
          if (W = S.shared.pending, W === null)
            break;
          Ke = W, W = Ke.next, Ke.next = null, S.lastBaseUpdate = Ke, S.shared.pending = null;
        }
      } while (1);
      if (Be === null && (re = lt), S.baseState = re, S.firstBaseUpdate = we, S.lastBaseUpdate = Be, a = S.shared.interleaved, a !== null) {
        S = a;
        do
          U |= S.lane, S = S.next;
        while (S !== a);
      } else
        T === null && (S.shared.lanes = 0);
      Fs |= U, o.lanes = U, o.memoizedState = lt;
    }
  }
  function dp(o, a, d) {
    if (o = a.effects, a.effects = null, o !== null)
      for (a = 0; a < o.length; a++) {
        var g = o[a], S = g.callback;
        if (S !== null) {
          if (g.callback = null, g = d, typeof S != "function")
            throw Error(l(191, S));
          S.call(g);
        }
      }
  }
  var pp = new n.Component().refs;
  function ku(o, a, d, g) {
    a = o.memoizedState, d = d(g, a), d = d == null ? a : s({}, a, d), o.memoizedState = d, o.lanes === 0 && (o.updateQueue.baseState = d);
  }
  var al = { isMounted: function(o) {
    return (o = o._reactInternals) ? R(o) === o : !1;
  }, enqueueSetState: function(o, a, d) {
    o = o._reactInternals;
    var g = Dn(), S = vr(o), T = Gi(g, S);
    T.payload = a, d != null && (T.callback = d), pr(o, T), a = ai(o, S, g), a !== null && sl(a, o, S);
  }, enqueueReplaceState: function(o, a, d) {
    o = o._reactInternals;
    var g = Dn(), S = vr(o), T = Gi(g, S);
    T.tag = 1, T.payload = a, d != null && (T.callback = d), pr(o, T), a = ai(o, S, g), a !== null && sl(a, o, S);
  }, enqueueForceUpdate: function(o, a) {
    o = o._reactInternals;
    var d = Dn(), g = vr(o), S = Gi(
      d,
      g
    );
    S.tag = 2, a != null && (S.callback = a), pr(o, S), a = ai(o, g, d), a !== null && sl(a, o, g);
  } };
  function mp(o, a, d, g, S, T, U) {
    return o = o.stateNode, typeof o.shouldComponentUpdate == "function" ? o.shouldComponentUpdate(g, T, U) : a.prototype && a.prototype.isPureReactComponent ? !nl(d, g) || !nl(S, T) : !0;
  }
  function gp(o, a, d) {
    var g = !1, S = xn, T = a.contextType;
    return typeof T == "object" && T !== null ? T = ni(T) : (S = Zt(a) ? di : cn.current, g = a.contextTypes, T = (g = g != null) ? jt(o, S) : xn), a = new a(d, T), o.memoizedState = a.state !== null && a.state !== void 0 ? a.state : null, a.updater = al, o.stateNode = a, a._reactInternals = o, g && (o = o.stateNode, o.__reactInternalMemoizedUnmaskedChildContext = S, o.__reactInternalMemoizedMaskedChildContext = T), a;
  }
  function vp(o, a, d, g) {
    o = a.state, typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps(d, g), typeof a.UNSAFE_componentWillReceiveProps == "function" && a.UNSAFE_componentWillReceiveProps(d, g), a.state !== o && al.enqueueReplaceState(a, a.state, null);
  }
  function Hu(o, a, d, g) {
    var S = o.stateNode;
    S.props = d, S.state = o.memoizedState, S.refs = pp, Bu(o);
    var T = a.contextType;
    typeof T == "object" && T !== null ? S.context = ni(T) : (T = Zt(a) ? di : cn.current, S.context = jt(o, T)), S.state = o.memoizedState, T = a.getDerivedStateFromProps, typeof T == "function" && (ku(o, a, T, d), S.state = o.memoizedState), typeof a.getDerivedStateFromProps == "function" || typeof S.getSnapshotBeforeUpdate == "function" || typeof S.UNSAFE_componentWillMount != "function" && typeof S.componentWillMount != "function" || (a = S.state, typeof S.componentWillMount == "function" && S.componentWillMount(), typeof S.UNSAFE_componentWillMount == "function" && S.UNSAFE_componentWillMount(), a !== S.state && al.enqueueReplaceState(S, S.state, null), ol(o, d, S, g), S.state = o.memoizedState), typeof S.componentDidMount == "function" && (o.flags |= 4194308);
  }
  var Cs = [], Ps = 0, ll = null, cl = 0, ii = [], ri = 0, zr = null, Wi = 1, Xi = "";
  function Br(o, a) {
    Cs[Ps++] = cl, Cs[Ps++] = ll, ll = o, cl = a;
  }
  function _p(o, a, d) {
    ii[ri++] = Wi, ii[ri++] = Xi, ii[ri++] = zr, zr = o;
    var g = Wi;
    o = Xi;
    var S = 32 - pi(g) - 1;
    g &= ~(1 << S), d += 1;
    var T = 32 - pi(a) + S;
    if (30 < T) {
      var U = S - S % 5;
      T = (g & (1 << U) - 1).toString(32), g >>= U, S -= U, Wi = 1 << 32 - pi(a) + S | d << S | g, Xi = T + o;
    } else
      Wi = 1 << T | d << S | g, Xi = o;
  }
  function Vu(o) {
    o.return !== null && (Br(o, 1), _p(o, 1, 0));
  }
  function Gu(o) {
    for (; o === ll; )
      ll = Cs[--Ps], Cs[Ps] = null, cl = Cs[--Ps], Cs[Ps] = null;
    for (; o === zr; )
      zr = ii[--ri], ii[ri] = null, Xi = ii[--ri], ii[ri] = null, Wi = ii[--ri], ii[ri] = null;
  }
  var qn = null, jn = null, Vt = !1, Co = !1, gi = null;
  function yp(o, a) {
    var d = li(5, null, null, 0);
    d.elementType = "DELETED", d.stateNode = a, d.return = o, a = o.deletions, a === null ? (o.deletions = [d], o.flags |= 16) : a.push(d);
  }
  function xp(o, a) {
    switch (o.tag) {
      case 5:
        return a = qt(a, o.type, o.pendingProps), a !== null ? (o.stateNode = a, qn = o, jn = Ja(a), !0) : !1;
      case 6:
        return a = Ya(a, o.pendingProps), a !== null ? (o.stateNode = a, qn = o, jn = null, !0) : !1;
      case 13:
        if (a = qa(a), a !== null) {
          var d = zr !== null ? { id: Wi, overflow: Xi } : null;
          return o.memoizedState = { dehydrated: a, treeContext: d, retryLane: 1073741824 }, d = li(18, null, null, 0), d.stateNode = a, d.return = o, o.child = d, qn = o, jn = null, !0;
        }
        return !1;
      default:
        return !1;
    }
  }
  function Wu(o) {
    return (o.mode & 1) !== 0 && (o.flags & 128) === 0;
  }
  function Xu(o) {
    if (Vt) {
      var a = jn;
      if (a) {
        var d = a;
        if (!xp(o, a)) {
          if (Wu(o))
            throw Error(l(418));
          a = bi(d);
          var g = qn;
          a && xp(o, a) ? yp(g, d) : (o.flags = o.flags & -4097 | 2, Vt = !1, qn = o);
        }
      } else {
        if (Wu(o))
          throw Error(l(418));
        o.flags = o.flags & -4097 | 2, Vt = !1, qn = o;
      }
    }
  }
  function Sp(o) {
    for (o = o.return; o !== null && o.tag !== 5 && o.tag !== 3 && o.tag !== 13; )
      o = o.return;
    qn = o;
  }
  function Po(o) {
    if (!ve || o !== qn)
      return !1;
    if (!Vt)
      return Sp(o), Vt = !0, !1;
    if (o.tag !== 3 && (o.tag !== 5 || it(o.type) && !Ae(o.type, o.memoizedProps))) {
      var a = jn;
      if (a) {
        if (Wu(o)) {
          for (o = jn; o; )
            o = bi(o);
          throw Error(l(418));
        }
        for (; a; )
          yp(o, a), a = bi(a);
      }
    }
    if (Sp(o), o.tag === 13) {
      if (!ve)
        throw Error(l(316));
      if (o = o.memoizedState, o = o !== null ? o.dehydrated : null, !o)
        throw Error(l(317));
      jn = le(o);
    } else
      jn = qn ? bi(o.stateNode) : null;
    return !0;
  }
  function Ls() {
    ve && (jn = qn = null, Co = Vt = !1);
  }
  function Yu(o) {
    gi === null ? gi = [o] : gi.push(o);
  }
  function Lo(o, a, d) {
    if (o = d.ref, o !== null && typeof o != "function" && typeof o != "object") {
      if (d._owner) {
        if (d = d._owner, d) {
          if (d.tag !== 1)
            throw Error(l(309));
          var g = d.stateNode;
        }
        if (!g)
          throw Error(l(147, o));
        var S = g, T = "" + o;
        return a !== null && a.ref !== null && typeof a.ref == "function" && a.ref._stringRef === T ? a.ref : (a = function(U) {
          var W = S.refs;
          W === pp && (W = S.refs = {}), U === null ? delete W[T] : W[T] = U;
        }, a._stringRef = T, a);
      }
      if (typeof o != "string")
        throw Error(l(284));
      if (!d._owner)
        throw Error(l(290, o));
    }
    return o;
  }
  function ul(o, a) {
    throw o = Object.prototype.toString.call(a), Error(l(31, o === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : o));
  }
  function Mp(o) {
    var a = o._init;
    return a(o._payload);
  }
  function Ep(o) {
    function a(J, X) {
      if (o) {
        var ne = J.deletions;
        ne === null ? (J.deletions = [X], J.flags |= 16) : ne.push(X);
      }
    }
    function d(J, X) {
      if (!o)
        return null;
      for (; X !== null; )
        a(J, X), X = X.sibling;
      return null;
    }
    function g(J, X) {
      for (J = /* @__PURE__ */ new Map(); X !== null; )
        X.key !== null ? J.set(X.key, X) : J.set(X.index, X), X = X.sibling;
      return J;
    }
    function S(J, X) {
      return J = yr(J, X), J.index = 0, J.sibling = null, J;
    }
    function T(J, X, ne) {
      return J.index = ne, o ? (ne = J.alternate, ne !== null ? (ne = ne.index, ne < X ? (J.flags |= 2, X) : ne) : (J.flags |= 2, X)) : (J.flags |= 1048576, X);
    }
    function U(J) {
      return o && J.alternate === null && (J.flags |= 2), J;
    }
    function W(J, X, ne, De) {
      return X === null || X.tag !== 6 ? (X = Ch(ne, J.mode, De), X.return = J, X) : (X = S(X, ne), X.return = J, X);
    }
    function re(J, X, ne, De) {
      var Ye = ne.type;
      return Ye === f ? Be(J, X, ne.props.children, De, ne.key) : X !== null && (X.elementType === Ye || typeof Ye == "object" && Ye !== null && Ye.$$typeof === M && Mp(Ye) === X.type) ? (De = S(X, ne.props), De.ref = Lo(J, X, ne), De.return = J, De) : (De = Hl(ne.type, ne.key, ne.props, null, J.mode, De), De.ref = Lo(J, X, ne), De.return = J, De);
    }
    function we(J, X, ne, De) {
      return X === null || X.tag !== 4 || X.stateNode.containerInfo !== ne.containerInfo || X.stateNode.implementation !== ne.implementation ? (X = Ph(ne, J.mode, De), X.return = J, X) : (X = S(X, ne.children || []), X.return = J, X);
    }
    function Be(J, X, ne, De, Ye) {
      return X === null || X.tag !== 7 ? (X = Yr(ne, J.mode, De, Ye), X.return = J, X) : (X = S(X, ne), X.return = J, X);
    }
    function lt(J, X, ne) {
      if (typeof X == "string" && X !== "" || typeof X == "number")
        return X = Ch("" + X, J.mode, ne), X.return = J, X;
      if (typeof X == "object" && X !== null) {
        switch (X.$$typeof) {
          case u:
            return ne = Hl(X.type, X.key, X.props, null, J.mode, ne), ne.ref = Lo(J, null, X), ne.return = J, ne;
          case h:
            return X = Ph(X, J.mode, ne), X.return = J, X;
          case M:
            var De = X._init;
            return lt(J, De(X._payload), ne);
        }
        if ($(X) || C(X))
          return X = Yr(X, J.mode, ne, null), X.return = J, X;
        ul(J, X);
      }
      return null;
    }
    function Ke(J, X, ne, De) {
      var Ye = X !== null ? X.key : null;
      if (typeof ne == "string" && ne !== "" || typeof ne == "number")
        return Ye !== null ? null : W(J, X, "" + ne, De);
      if (typeof ne == "object" && ne !== null) {
        switch (ne.$$typeof) {
          case u:
            return ne.key === Ye ? re(J, X, ne, De) : null;
          case h:
            return ne.key === Ye ? we(J, X, ne, De) : null;
          case M:
            return Ye = ne._init, Ke(
              J,
              X,
              Ye(ne._payload),
              De
            );
        }
        if ($(ne) || C(ne))
          return Ye !== null ? null : Be(J, X, ne, De, null);
        ul(J, ne);
      }
      return null;
    }
    function Ut(J, X, ne, De, Ye) {
      if (typeof De == "string" && De !== "" || typeof De == "number")
        return J = J.get(ne) || null, W(X, J, "" + De, Ye);
      if (typeof De == "object" && De !== null) {
        switch (De.$$typeof) {
          case u:
            return J = J.get(De.key === null ? ne : De.key) || null, re(X, J, De, Ye);
          case h:
            return J = J.get(De.key === null ? ne : De.key) || null, we(X, J, De, Ye);
          case M:
            var dt = De._init;
            return Ut(J, X, ne, dt(De._payload), Ye);
        }
        if ($(De) || C(De))
          return J = J.get(ne) || null, Be(X, J, De, Ye, null);
        ul(X, De);
      }
      return null;
    }
    function qe(J, X, ne, De) {
      for (var Ye = null, dt = null, ct = X, bt = X = 0, gn = null; ct !== null && bt < ne.length; bt++) {
        ct.index > bt ? (gn = ct, ct = null) : gn = ct.sibling;
        var At = Ke(J, ct, ne[bt], De);
        if (At === null) {
          ct === null && (ct = gn);
          break;
        }
        o && ct && At.alternate === null && a(J, ct), X = T(At, X, bt), dt === null ? Ye = At : dt.sibling = At, dt = At, ct = gn;
      }
      if (bt === ne.length)
        return d(J, ct), Vt && Br(J, bt), Ye;
      if (ct === null) {
        for (; bt < ne.length; bt++)
          ct = lt(J, ne[bt], De), ct !== null && (X = T(ct, X, bt), dt === null ? Ye = ct : dt.sibling = ct, dt = ct);
        return Vt && Br(J, bt), Ye;
      }
      for (ct = g(J, ct); bt < ne.length; bt++)
        gn = Ut(ct, J, bt, ne[bt], De), gn !== null && (o && gn.alternate !== null && ct.delete(gn.key === null ? bt : gn.key), X = T(gn, X, bt), dt === null ? Ye = gn : dt.sibling = gn, dt = gn);
      return o && ct.forEach(function(xr) {
        return a(J, xr);
      }), Vt && Br(J, bt), Ye;
    }
    function Tn(J, X, ne, De) {
      var Ye = C(ne);
      if (typeof Ye != "function")
        throw Error(l(150));
      if (ne = Ye.call(ne), ne == null)
        throw Error(l(151));
      for (var dt = Ye = null, ct = X, bt = X = 0, gn = null, At = ne.next(); ct !== null && !At.done; bt++, At = ne.next()) {
        ct.index > bt ? (gn = ct, ct = null) : gn = ct.sibling;
        var xr = Ke(J, ct, At.value, De);
        if (xr === null) {
          ct === null && (ct = gn);
          break;
        }
        o && ct && xr.alternate === null && a(J, ct), X = T(xr, X, bt), dt === null ? Ye = xr : dt.sibling = xr, dt = xr, ct = gn;
      }
      if (At.done)
        return d(
          J,
          ct
        ), Vt && Br(J, bt), Ye;
      if (ct === null) {
        for (; !At.done; bt++, At = ne.next())
          At = lt(J, At.value, De), At !== null && (X = T(At, X, bt), dt === null ? Ye = At : dt.sibling = At, dt = At);
        return Vt && Br(J, bt), Ye;
      }
      for (ct = g(J, ct); !At.done; bt++, At = ne.next())
        At = Ut(ct, J, bt, At.value, De), At !== null && (o && At.alternate !== null && ct.delete(At.key === null ? bt : At.key), X = T(At, X, bt), dt === null ? Ye = At : dt.sibling = At, dt = At);
      return o && ct.forEach(function(Jy) {
        return a(J, Jy);
      }), Vt && Br(J, bt), Ye;
    }
    function ci(J, X, ne, De) {
      if (typeof ne == "object" && ne !== null && ne.type === f && ne.key === null && (ne = ne.props.children), typeof ne == "object" && ne !== null) {
        switch (ne.$$typeof) {
          case u:
            e: {
              for (var Ye = ne.key, dt = X; dt !== null; ) {
                if (dt.key === Ye) {
                  if (Ye = ne.type, Ye === f) {
                    if (dt.tag === 7) {
                      d(J, dt.sibling), X = S(dt, ne.props.children), X.return = J, J = X;
                      break e;
                    }
                  } else if (dt.elementType === Ye || typeof Ye == "object" && Ye !== null && Ye.$$typeof === M && Mp(Ye) === dt.type) {
                    d(J, dt.sibling), X = S(dt, ne.props), X.ref = Lo(J, dt, ne), X.return = J, J = X;
                    break e;
                  }
                  d(J, dt);
                  break;
                } else
                  a(J, dt);
                dt = dt.sibling;
              }
              ne.type === f ? (X = Yr(ne.props.children, J.mode, De, ne.key), X.return = J, J = X) : (De = Hl(ne.type, ne.key, ne.props, null, J.mode, De), De.ref = Lo(J, X, ne), De.return = J, J = De);
            }
            return U(J);
          case h:
            e: {
              for (dt = ne.key; X !== null; ) {
                if (X.key === dt)
                  if (X.tag === 4 && X.stateNode.containerInfo === ne.containerInfo && X.stateNode.implementation === ne.implementation) {
                    d(J, X.sibling), X = S(X, ne.children || []), X.return = J, J = X;
                    break e;
                  } else {
                    d(J, X);
                    break;
                  }
                else
                  a(J, X);
                X = X.sibling;
              }
              X = Ph(ne, J.mode, De), X.return = J, J = X;
            }
            return U(J);
          case M:
            return dt = ne._init, ci(J, X, dt(ne._payload), De);
        }
        if ($(ne))
          return qe(J, X, ne, De);
        if (C(ne))
          return Tn(J, X, ne, De);
        ul(J, ne);
      }
      return typeof ne == "string" && ne !== "" || typeof ne == "number" ? (ne = "" + ne, X !== null && X.tag === 6 ? (d(J, X.sibling), X = S(X, ne), X.return = J, J = X) : (d(J, X), X = Ch(ne, J.mode, De), X.return = J, J = X), U(J)) : d(J, X);
    }
    return ci;
  }
  var Is = Ep(!0), wp = Ep(!1), Io = {}, si = at(Io), Do = at(Io), Ds = at(Io);
  function Li(o) {
    if (o === Io)
      throw Error(l(174));
    return o;
  }
  function qu(o, a) {
    st(Ds, a), st(Do, o), st(si, Io), o = ie(a), Pt(si), st(si, o);
  }
  function Ns() {
    Pt(si), Pt(Do), Pt(Ds);
  }
  function Tp(o) {
    var a = Li(Ds.current), d = Li(si.current);
    a = Y(d, o.type, a), d !== a && (st(Do, o), st(si, a));
  }
  function ju(o) {
    Do.current === o && (Pt(si), Pt(Do));
  }
  var Gt = at(0);
  function hl(o) {
    for (var a = o; a !== null; ) {
      if (a.tag === 13) {
        var d = a.memoizedState;
        if (d !== null && (d = d.dehydrated, d === null || ja(d) || hr(d)))
          return a;
      } else if (a.tag === 19 && a.memoizedProps.revealOrder !== void 0) {
        if (a.flags & 128)
          return a;
      } else if (a.child !== null) {
        a.child.return = a, a = a.child;
        continue;
      }
      if (a === o)
        break;
      for (; a.sibling === null; ) {
        if (a.return === null || a.return === o)
          return null;
        a = a.return;
      }
      a.sibling.return = a.return, a = a.sibling;
    }
    return null;
  }
  var Zu = [];
  function Ju() {
    for (var o = 0; o < Zu.length; o++) {
      var a = Zu[o];
      Ct ? a._workInProgressVersionPrimary = null : a._workInProgressVersionSecondary = null;
    }
    Zu.length = 0;
  }
  var fl = c.ReactCurrentDispatcher, oi = c.ReactCurrentBatchConfig, Us = 0, Jt = null, Mn = null, mn = null, dl = !1, No = !1, Uo = 0, Sy = 0;
  function En() {
    throw Error(l(321));
  }
  function Ku(o, a) {
    if (a === null)
      return !1;
    for (var d = 0; d < a.length && d < o.length; d++)
      if (!Ri(o[d], a[d]))
        return !1;
    return !0;
  }
  function Qu(o, a, d, g, S, T) {
    if (Us = T, Jt = a, a.memoizedState = null, a.updateQueue = null, a.lanes = 0, fl.current = o === null || o.memoizedState === null ? Ty : by, o = d(g, S), No) {
      T = 0;
      do {
        if (No = !1, Uo = 0, 25 <= T)
          throw Error(l(301));
        T += 1, mn = Mn = null, a.updateQueue = null, fl.current = Ay, o = d(g, S);
      } while (No);
    }
    if (fl.current = _l, a = Mn !== null && Mn.next !== null, Us = 0, mn = Mn = Jt = null, dl = !1, a)
      throw Error(l(300));
    return o;
  }
  function $u() {
    var o = Uo !== 0;
    return Uo = 0, o;
  }
  function Yi() {
    var o = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    return mn === null ? Jt.memoizedState = mn = o : mn = mn.next = o, mn;
  }
  function Ii() {
    if (Mn === null) {
      var o = Jt.alternate;
      o = o !== null ? o.memoizedState : null;
    } else
      o = Mn.next;
    var a = mn === null ? Jt.memoizedState : mn.next;
    if (a !== null)
      mn = a, Mn = o;
    else {
      if (o === null)
        throw Error(l(310));
      Mn = o, o = { memoizedState: Mn.memoizedState, baseState: Mn.baseState, baseQueue: Mn.baseQueue, queue: Mn.queue, next: null }, mn === null ? Jt.memoizedState = mn = o : mn = mn.next = o;
    }
    return mn;
  }
  function kr(o, a) {
    return typeof a == "function" ? a(o) : a;
  }
  function pl(o) {
    var a = Ii(), d = a.queue;
    if (d === null)
      throw Error(l(311));
    d.lastRenderedReducer = o;
    var g = Mn, S = g.baseQueue, T = d.pending;
    if (T !== null) {
      if (S !== null) {
        var U = S.next;
        S.next = T.next, T.next = U;
      }
      g.baseQueue = S = T, d.pending = null;
    }
    if (S !== null) {
      T = S.next, g = g.baseState;
      var W = U = null, re = null, we = T;
      do {
        var Be = we.lane;
        if ((Us & Be) === Be)
          re !== null && (re = re.next = { lane: 0, action: we.action, hasEagerState: we.hasEagerState, eagerState: we.eagerState, next: null }), g = we.hasEagerState ? we.eagerState : o(g, we.action);
        else {
          var lt = {
            lane: Be,
            action: we.action,
            hasEagerState: we.hasEagerState,
            eagerState: we.eagerState,
            next: null
          };
          re === null ? (W = re = lt, U = g) : re = re.next = lt, Jt.lanes |= Be, Fs |= Be;
        }
        we = we.next;
      } while (we !== null && we !== T);
      re === null ? U = g : re.next = W, Ri(g, a.memoizedState) || (Zn = !0), a.memoizedState = g, a.baseState = U, a.baseQueue = re, d.lastRenderedState = g;
    }
    if (o = d.interleaved, o !== null) {
      S = o;
      do
        T = S.lane, Jt.lanes |= T, Fs |= T, S = S.next;
      while (S !== o);
    } else
      S === null && (d.lanes = 0);
    return [a.memoizedState, d.dispatch];
  }
  function ml(o) {
    var a = Ii(), d = a.queue;
    if (d === null)
      throw Error(l(311));
    d.lastRenderedReducer = o;
    var g = d.dispatch, S = d.pending, T = a.memoizedState;
    if (S !== null) {
      d.pending = null;
      var U = S = S.next;
      do
        T = o(T, U.action), U = U.next;
      while (U !== S);
      Ri(T, a.memoizedState) || (Zn = !0), a.memoizedState = T, a.baseQueue === null && (a.baseState = T), d.lastRenderedState = T;
    }
    return [T, g];
  }
  function bp() {
  }
  function Ap(o, a) {
    var d = Jt, g = Ii(), S = a(), T = !Ri(g.memoizedState, S);
    if (T && (g.memoizedState = S, Zn = !0), g = g.queue, Fo(Pp.bind(null, d, g, o), [o]), g.getSnapshot !== a || T || mn !== null && mn.memoizedState.tag & 1) {
      if (d.flags |= 2048, Oo(9, Cp.bind(null, d, g, S, a), void 0, null), sn === null)
        throw Error(l(349));
      Us & 30 || Rp(d, a, S);
    }
    return S;
  }
  function Rp(o, a, d) {
    o.flags |= 16384, o = { getSnapshot: a, value: d }, a = Jt.updateQueue, a === null ? (a = { lastEffect: null, stores: null }, Jt.updateQueue = a, a.stores = [o]) : (d = a.stores, d === null ? a.stores = [o] : d.push(o));
  }
  function Cp(o, a, d, g) {
    a.value = d, a.getSnapshot = g, Lp(a) && ai(o, 1, -1);
  }
  function Pp(o, a, d) {
    return d(function() {
      Lp(a) && ai(o, 1, -1);
    });
  }
  function Lp(o) {
    var a = o.getSnapshot;
    o = o.value;
    try {
      var d = a();
      return !Ri(o, d);
    } catch {
      return !0;
    }
  }
  function eh(o) {
    var a = Yi();
    return typeof o == "function" && (o = o()), a.memoizedState = a.baseState = o, o = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: kr, lastRenderedState: o }, a.queue = o, o = o.dispatch = wy.bind(null, Jt, o), [a.memoizedState, o];
  }
  function Oo(o, a, d, g) {
    return o = { tag: o, create: a, destroy: d, deps: g, next: null }, a = Jt.updateQueue, a === null ? (a = { lastEffect: null, stores: null }, Jt.updateQueue = a, a.lastEffect = o.next = o) : (d = a.lastEffect, d === null ? a.lastEffect = o.next = o : (g = d.next, d.next = o, o.next = g, a.lastEffect = o)), o;
  }
  function Ip() {
    return Ii().memoizedState;
  }
  function gl(o, a, d, g) {
    var S = Yi();
    Jt.flags |= o, S.memoizedState = Oo(1 | a, d, void 0, g === void 0 ? null : g);
  }
  function vl(o, a, d, g) {
    var S = Ii();
    g = g === void 0 ? null : g;
    var T = void 0;
    if (Mn !== null) {
      var U = Mn.memoizedState;
      if (T = U.destroy, g !== null && Ku(g, U.deps)) {
        S.memoizedState = Oo(a, d, T, g);
        return;
      }
    }
    Jt.flags |= o, S.memoizedState = Oo(1 | a, d, T, g);
  }
  function th(o, a) {
    return gl(8390656, 8, o, a);
  }
  function Fo(o, a) {
    return vl(2048, 8, o, a);
  }
  function Dp(o, a) {
    return vl(4, 2, o, a);
  }
  function Np(o, a) {
    return vl(4, 4, o, a);
  }
  function Up(o, a) {
    if (typeof a == "function")
      return o = o(), a(o), function() {
        a(null);
      };
    if (a != null)
      return o = o(), a.current = o, function() {
        a.current = null;
      };
  }
  function Op(o, a, d) {
    return d = d != null ? d.concat([o]) : null, vl(4, 4, Up.bind(null, a, o), d);
  }
  function nh() {
  }
  function Fp(o, a) {
    var d = Ii();
    a = a === void 0 ? null : a;
    var g = d.memoizedState;
    return g !== null && a !== null && Ku(a, g[1]) ? g[0] : (d.memoizedState = [o, a], o);
  }
  function zp(o, a) {
    var d = Ii();
    a = a === void 0 ? null : a;
    var g = d.memoizedState;
    return g !== null && a !== null && Ku(a, g[1]) ? g[0] : (o = o(), d.memoizedState = [o, a], o);
  }
  function My(o, a) {
    var d = Tt;
    Tt = d !== 0 && 4 > d ? d : 4, o(!0);
    var g = oi.transition;
    oi.transition = {};
    try {
      o(!1), a();
    } finally {
      Tt = d, oi.transition = g;
    }
  }
  function Bp() {
    return Ii().memoizedState;
  }
  function Ey(o, a, d) {
    var g = vr(o);
    d = { lane: g, action: d, hasEagerState: !1, eagerState: null, next: null }, kp(o) ? Hp(a, d) : (Vp(o, a, d), d = Dn(), o = ai(o, g, d), o !== null && Gp(o, a, g));
  }
  function wy(o, a, d) {
    var g = vr(o), S = { lane: g, action: d, hasEagerState: !1, eagerState: null, next: null };
    if (kp(o))
      Hp(a, S);
    else {
      Vp(o, a, S);
      var T = o.alternate;
      if (o.lanes === 0 && (T === null || T.lanes === 0) && (T = a.lastRenderedReducer, T !== null))
        try {
          var U = a.lastRenderedState, W = T(U, d);
          if (S.hasEagerState = !0, S.eagerState = W, Ri(W, U))
            return;
        } catch {
        } finally {
        }
      d = Dn(), o = ai(o, g, d), o !== null && Gp(o, a, g);
    }
  }
  function kp(o) {
    var a = o.alternate;
    return o === Jt || a !== null && a === Jt;
  }
  function Hp(o, a) {
    No = dl = !0;
    var d = o.pending;
    d === null ? a.next = a : (a.next = d.next, d.next = a), o.pending = a;
  }
  function Vp(o, a, d) {
    sn !== null && o.mode & 1 && !(vt & 2) ? (o = a.interleaved, o === null ? (d.next = d, Pi === null ? Pi = [a] : Pi.push(a)) : (d.next = o.next, o.next = d), a.interleaved = d) : (o = a.pending, o === null ? d.next = d : (d.next = o.next, o.next = d), a.pending = d);
  }
  function Gp(o, a, d) {
    if (d & 4194240) {
      var g = a.lanes;
      g &= o.pendingLanes, d |= g, a.lanes = d, Pu(o, d);
    }
  }
  var _l = { readContext: ni, useCallback: En, useContext: En, useEffect: En, useImperativeHandle: En, useInsertionEffect: En, useLayoutEffect: En, useMemo: En, useReducer: En, useRef: En, useState: En, useDebugValue: En, useDeferredValue: En, useTransition: En, useMutableSource: En, useSyncExternalStore: En, useId: En, unstable_isNewReconciler: !1 }, Ty = { readContext: ni, useCallback: function(o, a) {
    return Yi().memoizedState = [o, a === void 0 ? null : a], o;
  }, useContext: ni, useEffect: th, useImperativeHandle: function(o, a, d) {
    return d = d != null ? d.concat([o]) : null, gl(
      4194308,
      4,
      Up.bind(null, a, o),
      d
    );
  }, useLayoutEffect: function(o, a) {
    return gl(4194308, 4, o, a);
  }, useInsertionEffect: function(o, a) {
    return gl(4, 2, o, a);
  }, useMemo: function(o, a) {
    var d = Yi();
    return a = a === void 0 ? null : a, o = o(), d.memoizedState = [o, a], o;
  }, useReducer: function(o, a, d) {
    var g = Yi();
    return a = d !== void 0 ? d(a) : a, g.memoizedState = g.baseState = a, o = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: o, lastRenderedState: a }, g.queue = o, o = o.dispatch = Ey.bind(null, Jt, o), [g.memoizedState, o];
  }, useRef: function(o) {
    var a = Yi();
    return o = { current: o }, a.memoizedState = o;
  }, useState: eh, useDebugValue: nh, useDeferredValue: function(o) {
    var a = eh(o), d = a[0], g = a[1];
    return th(function() {
      var S = oi.transition;
      oi.transition = {};
      try {
        g(o);
      } finally {
        oi.transition = S;
      }
    }, [o]), d;
  }, useTransition: function() {
    var o = eh(!1), a = o[0];
    return o = My.bind(null, o[1]), Yi().memoizedState = o, [a, o];
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(o, a, d) {
    var g = Jt, S = Yi();
    if (Vt) {
      if (d === void 0)
        throw Error(l(407));
      d = d();
    } else {
      if (d = a(), sn === null)
        throw Error(l(349));
      Us & 30 || Rp(g, a, d);
    }
    S.memoizedState = d;
    var T = { value: d, getSnapshot: a };
    return S.queue = T, th(Pp.bind(null, g, T, o), [o]), g.flags |= 2048, Oo(9, Cp.bind(null, g, T, d, a), void 0, null), d;
  }, useId: function() {
    var o = Yi(), a = sn.identifierPrefix;
    if (Vt) {
      var d = Xi, g = Wi;
      d = (g & ~(1 << 32 - pi(g) - 1)).toString(32) + d, a = ":" + a + "R" + d, d = Uo++, 0 < d && (a += "H" + d.toString(32)), a += ":";
    } else
      d = Sy++, a = ":" + a + "r" + d.toString(32) + ":";
    return o.memoizedState = a;
  }, unstable_isNewReconciler: !1 }, by = {
    readContext: ni,
    useCallback: Fp,
    useContext: ni,
    useEffect: Fo,
    useImperativeHandle: Op,
    useInsertionEffect: Dp,
    useLayoutEffect: Np,
    useMemo: zp,
    useReducer: pl,
    useRef: Ip,
    useState: function() {
      return pl(kr);
    },
    useDebugValue: nh,
    useDeferredValue: function(o) {
      var a = pl(kr), d = a[0], g = a[1];
      return Fo(function() {
        var S = oi.transition;
        oi.transition = {};
        try {
          g(o);
        } finally {
          oi.transition = S;
        }
      }, [o]), d;
    },
    useTransition: function() {
      var o = pl(kr)[0], a = Ii().memoizedState;
      return [o, a];
    },
    useMutableSource: bp,
    useSyncExternalStore: Ap,
    useId: Bp,
    unstable_isNewReconciler: !1
  }, Ay = {
    readContext: ni,
    useCallback: Fp,
    useContext: ni,
    useEffect: Fo,
    useImperativeHandle: Op,
    useInsertionEffect: Dp,
    useLayoutEffect: Np,
    useMemo: zp,
    useReducer: ml,
    useRef: Ip,
    useState: function() {
      return ml(kr);
    },
    useDebugValue: nh,
    useDeferredValue: function(o) {
      var a = ml(kr), d = a[0], g = a[1];
      return Fo(function() {
        var S = oi.transition;
        oi.transition = {};
        try {
          g(o);
        } finally {
          oi.transition = S;
        }
      }, [o]), d;
    },
    useTransition: function() {
      var o = ml(kr)[0], a = Ii().memoizedState;
      return [o, a];
    },
    useMutableSource: bp,
    useSyncExternalStore: Ap,
    useId: Bp,
    unstable_isNewReconciler: !1
  };
  function ih(o, a) {
    try {
      var d = "", g = a;
      do
        d += xy(g), g = g.return;
      while (g);
      var S = d;
    } catch (T) {
      S = `
Error generating stack: ` + T.message + `
` + T.stack;
    }
    return { value: o, source: a, stack: S };
  }
  function rh(o, a) {
    try {
      console.error(a.value);
    } catch (d) {
      setTimeout(function() {
        throw d;
      });
    }
  }
  var Ry = typeof WeakMap == "function" ? WeakMap : Map;
  function Wp(o, a, d) {
    d = Gi(-1, d), d.tag = 3, d.payload = { element: null };
    var g = a.value;
    return d.callback = function() {
      Nl || (Nl = !0, Mh = g), rh(o, a);
    }, d;
  }
  function Xp(o, a, d) {
    d = Gi(-1, d), d.tag = 3;
    var g = o.type.getDerivedStateFromError;
    if (typeof g == "function") {
      var S = a.value;
      d.payload = function() {
        return g(S);
      }, d.callback = function() {
        rh(o, a);
      };
    }
    var T = o.stateNode;
    return T !== null && typeof T.componentDidCatch == "function" && (d.callback = function() {
      rh(o, a), typeof g != "function" && (mr === null ? mr = /* @__PURE__ */ new Set([this]) : mr.add(this));
      var U = a.stack;
      this.componentDidCatch(a.value, { componentStack: U !== null ? U : "" });
    }), d;
  }
  function Yp(o, a, d) {
    var g = o.pingCache;
    if (g === null) {
      g = o.pingCache = new Ry();
      var S = /* @__PURE__ */ new Set();
      g.set(a, S);
    } else
      S = g.get(a), S === void 0 && (S = /* @__PURE__ */ new Set(), g.set(a, S));
    S.has(d) || (S.add(d), o = Vy.bind(null, o, a, d), a.then(o, o));
  }
  function qp(o) {
    do {
      var a;
      if ((a = o.tag === 13) && (a = o.memoizedState, a = a !== null ? a.dehydrated !== null : !0), a)
        return o;
      o = o.return;
    } while (o !== null);
    return null;
  }
  function jp(o, a, d, g, S) {
    return o.mode & 1 ? (o.flags |= 65536, o.lanes = S, o) : (o === a ? o.flags |= 65536 : (o.flags |= 128, d.flags |= 131072, d.flags &= -52805, d.tag === 1 && (d.alternate === null ? d.tag = 17 : (a = Gi(-1, 1), a.tag = 2, pr(d, a))), d.lanes |= 1), o);
  }
  function Di(o) {
    o.flags |= 4;
  }
  function Zp(o, a) {
    if (o !== null && o.child === a.child)
      return !0;
    if (a.flags & 16)
      return !1;
    for (o = a.child; o !== null; ) {
      if (o.flags & 12854 || o.subtreeFlags & 12854)
        return !1;
      o = o.sibling;
    }
    return !0;
  }
  var zo, Bo, yl, xl;
  if (Ve)
    zo = function(o, a) {
      for (var d = a.child; d !== null; ) {
        if (d.tag === 5 || d.tag === 6)
          Q(o, d.stateNode);
        else if (d.tag !== 4 && d.child !== null) {
          d.child.return = d, d = d.child;
          continue;
        }
        if (d === a)
          break;
        for (; d.sibling === null; ) {
          if (d.return === null || d.return === a)
            return;
          d = d.return;
        }
        d.sibling.return = d.return, d = d.sibling;
      }
    }, Bo = function() {
    }, yl = function(o, a, d, g, S) {
      if (o = o.memoizedProps, o !== g) {
        var T = a.stateNode, U = Li(si.current);
        d = Te(T, d, o, g, S, U), (a.updateQueue = d) && Di(a);
      }
    }, xl = function(o, a, d, g) {
      d !== g && Di(a);
    };
  else if (B) {
    zo = function(o, a, d, g) {
      for (var S = a.child; S !== null; ) {
        if (S.tag === 5) {
          var T = S.stateNode;
          d && g && (T = Mt(T, S.type, S.memoizedProps, S)), Q(o, T);
        } else if (S.tag === 6)
          T = S.stateNode, d && g && (T = ln(T, S.memoizedProps, S)), Q(o, T);
        else if (S.tag !== 4) {
          if (S.tag === 22 && S.memoizedState !== null)
            T = S.child, T !== null && (T.return = S), zo(o, S, !0, !0);
          else if (S.child !== null) {
            S.child.return = S, S = S.child;
            continue;
          }
        }
        if (S === a)
          break;
        for (; S.sibling === null; ) {
          if (S.return === null || S.return === a)
            return;
          S = S.return;
        }
        S.sibling.return = S.return, S = S.sibling;
      }
    };
    var Jp = function(o, a, d, g) {
      for (var S = a.child; S !== null; ) {
        if (S.tag === 5) {
          var T = S.stateNode;
          d && g && (T = Mt(T, S.type, S.memoizedProps, S)), Ue(o, T);
        } else if (S.tag === 6)
          T = S.stateNode, d && g && (T = ln(T, S.memoizedProps, S)), Ue(o, T);
        else if (S.tag !== 4) {
          if (S.tag === 22 && S.memoizedState !== null)
            T = S.child, T !== null && (T.return = S), Jp(o, S, !0, !0);
          else if (S.child !== null) {
            S.child.return = S, S = S.child;
            continue;
          }
        }
        if (S === a)
          break;
        for (; S.sibling === null; ) {
          if (S.return === null || S.return === a)
            return;
          S = S.return;
        }
        S.sibling.return = S.return, S = S.sibling;
      }
    };
    Bo = function(o, a) {
      var d = a.stateNode;
      if (!Zp(o, a)) {
        o = d.containerInfo;
        var g = pe(o);
        Jp(g, a, !1, !1), d.pendingChildren = g, Di(a), Ze(o, g);
      }
    }, yl = function(o, a, d, g, S) {
      var T = o.stateNode, U = o.memoizedProps;
      if ((o = Zp(o, a)) && U === g)
        a.stateNode = T;
      else {
        var W = a.stateNode, re = Li(si.current), we = null;
        U !== g && (we = Te(W, d, U, g, S, re)), o && we === null ? a.stateNode = T : (T = Le(T, we, d, U, g, a, o, W), fe(T, d, g, S, re) && Di(a), a.stateNode = T, o ? Di(a) : zo(T, a, !1, !1));
      }
    }, xl = function(o, a, d, g) {
      d !== g ? (o = Li(Ds.current), d = Li(si.current), a.stateNode = ke(g, o, d, a), Di(a)) : a.stateNode = o.stateNode;
    };
  } else
    Bo = function() {
    }, yl = function() {
    }, xl = function() {
    };
  function ko(o, a) {
    if (!Vt)
      switch (o.tailMode) {
        case "hidden":
          a = o.tail;
          for (var d = null; a !== null; )
            a.alternate !== null && (d = a), a = a.sibling;
          d === null ? o.tail = null : d.sibling = null;
          break;
        case "collapsed":
          d = o.tail;
          for (var g = null; d !== null; )
            d.alternate !== null && (g = d), d = d.sibling;
          g === null ? a || o.tail === null ? o.tail = null : o.tail.sibling = null : g.sibling = null;
      }
  }
  function wn(o) {
    var a = o.alternate !== null && o.alternate.child === o.child, d = 0, g = 0;
    if (a)
      for (var S = o.child; S !== null; )
        d |= S.lanes | S.childLanes, g |= S.subtreeFlags & 14680064, g |= S.flags & 14680064, S.return = o, S = S.sibling;
    else
      for (S = o.child; S !== null; )
        d |= S.lanes | S.childLanes, g |= S.subtreeFlags, g |= S.flags, S.return = o, S = S.sibling;
    return o.subtreeFlags |= g, o.childLanes = d, a;
  }
  function Cy(o, a, d) {
    var g = a.pendingProps;
    switch (Gu(a), a.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return wn(a), null;
      case 1:
        return Zt(a.type) && fr(), wn(a), null;
      case 3:
        return g = a.stateNode, Ns(), Pt(rn), Pt(cn), Ju(), g.pendingContext && (g.context = g.pendingContext, g.pendingContext = null), (o === null || o.child === null) && (Po(a) ? Di(a) : o === null || o.memoizedState.isDehydrated && !(a.flags & 256) || (a.flags |= 1024, gi !== null && (Th(gi), gi = null))), Bo(o, a), wn(a), null;
      case 5:
        ju(a), d = Li(Ds.current);
        var S = a.type;
        if (o !== null && a.stateNode != null)
          yl(o, a, S, g, d), o.ref !== a.ref && (a.flags |= 512, a.flags |= 2097152);
        else {
          if (!g) {
            if (a.stateNode === null)
              throw Error(l(166));
            return wn(a), null;
          }
          if (o = Li(si.current), Po(a)) {
            if (!ve)
              throw Error(l(175));
            o = Au(a.stateNode, a.type, a.memoizedProps, d, o, a, !Co), a.updateQueue = o, o !== null && Di(a);
          } else {
            var T = k(S, g, d, o, a);
            zo(T, a, !1, !1), a.stateNode = T, fe(T, S, g, d, o) && Di(a);
          }
          a.ref !== null && (a.flags |= 512, a.flags |= 2097152);
        }
        return wn(a), null;
      case 6:
        if (o && a.stateNode != null)
          xl(o, a, o.memoizedProps, g);
        else {
          if (typeof g != "string" && a.stateNode === null)
            throw Error(l(166));
          if (o = Li(Ds.current), d = Li(si.current), Po(a)) {
            if (!ve)
              throw Error(l(176));
            if (o = a.stateNode, g = a.memoizedProps, (d = N(o, g, a, !Co)) && (S = qn, S !== null))
              switch (T = (S.mode & 1) !== 0, S.tag) {
                case 3:
                  rt(S.stateNode.containerInfo, o, g, T);
                  break;
                case 5:
                  gt(S.type, S.memoizedProps, S.stateNode, o, g, T);
              }
            d && Di(a);
          } else
            a.stateNode = ke(g, o, d, a);
        }
        return wn(a), null;
      case 13:
        if (Pt(Gt), g = a.memoizedState, Vt && jn !== null && a.mode & 1 && !(a.flags & 128)) {
          for (o = jn; o; )
            o = bi(o);
          return Ls(), a.flags |= 98560, a;
        }
        if (g !== null && g.dehydrated !== null) {
          if (g = Po(a), o === null) {
            if (!g)
              throw Error(l(318));
            if (!ve)
              throw Error(l(344));
            if (o = a.memoizedState, o = o !== null ? o.dehydrated : null, !o)
              throw Error(l(317));
            Z(o, a);
          } else
            Ls(), !(a.flags & 128) && (a.memoizedState = null), a.flags |= 4;
          return wn(a), null;
        }
        return gi !== null && (Th(gi), gi = null), a.flags & 128 ? (a.lanes = d, a) : (g = g !== null, d = !1, o === null ? Po(a) : d = o.memoizedState !== null, g && !d && (a.child.flags |= 8192, a.mode & 1 && (o === null || Gt.current & 1 ? un === 0 && (un = 3) : Ah())), a.updateQueue !== null && (a.flags |= 4), wn(a), null);
      case 4:
        return Ns(), Bo(o, a), o === null && Ee(a.stateNode.containerInfo), wn(a), null;
      case 10:
        return Fu(a.type._context), wn(a), null;
      case 17:
        return Zt(a.type) && fr(), wn(a), null;
      case 19:
        if (Pt(Gt), S = a.memoizedState, S === null)
          return wn(a), null;
        if (g = (a.flags & 128) !== 0, T = S.rendering, T === null)
          if (g)
            ko(S, !1);
          else {
            if (un !== 0 || o !== null && o.flags & 128)
              for (o = a.child; o !== null; ) {
                if (T = hl(o), T !== null) {
                  for (a.flags |= 128, ko(S, !1), o = T.updateQueue, o !== null && (a.updateQueue = o, a.flags |= 4), a.subtreeFlags = 0, o = d, g = a.child; g !== null; )
                    d = g, S = o, d.flags &= 14680066, T = d.alternate, T === null ? (d.childLanes = 0, d.lanes = S, d.child = null, d.subtreeFlags = 0, d.memoizedProps = null, d.memoizedState = null, d.updateQueue = null, d.dependencies = null, d.stateNode = null) : (d.childLanes = T.childLanes, d.lanes = T.lanes, d.child = T.child, d.subtreeFlags = 0, d.deletions = null, d.memoizedProps = T.memoizedProps, d.memoizedState = T.memoizedState, d.updateQueue = T.updateQueue, d.type = T.type, S = T.dependencies, d.dependencies = S === null ? null : { lanes: S.lanes, firstContext: S.firstContext }), g = g.sibling;
                  return st(Gt, Gt.current & 1 | 2), a.child;
                }
                o = o.sibling;
              }
            S.tail !== null && pn() > Sh && (a.flags |= 128, g = !0, ko(S, !1), a.lanes = 4194304);
          }
        else {
          if (!g)
            if (o = hl(T), o !== null) {
              if (a.flags |= 128, g = !0, o = o.updateQueue, o !== null && (a.updateQueue = o, a.flags |= 4), ko(S, !0), S.tail === null && S.tailMode === "hidden" && !T.alternate && !Vt)
                return wn(a), null;
            } else
              2 * pn() - S.renderingStartTime > Sh && d !== 1073741824 && (a.flags |= 128, g = !0, ko(S, !1), a.lanes = 4194304);
          S.isBackwards ? (T.sibling = a.child, a.child = T) : (o = S.last, o !== null ? o.sibling = T : a.child = T, S.last = T);
        }
        return S.tail !== null ? (a = S.tail, S.rendering = a, S.tail = a.sibling, S.renderingStartTime = pn(), a.sibling = null, o = Gt.current, st(Gt, g ? o & 1 | 2 : o & 1), a) : (wn(a), null);
      case 22:
      case 23:
        return bh(), g = a.memoizedState !== null, o !== null && o.memoizedState !== null !== g && (a.flags |= 8192), g && a.mode & 1 ? Jn & 1073741824 && (wn(a), Ve && a.subtreeFlags & 6 && (a.flags |= 8192)) : wn(a), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(l(156, a.tag));
  }
  var Py = c.ReactCurrentOwner, Zn = !1;
  function In(o, a, d, g) {
    a.child = o === null ? wp(a, null, d, g) : Is(a, o.child, d, g);
  }
  function Kp(o, a, d, g, S) {
    d = d.render;
    var T = a.ref;
    return Rs(a, S), g = Qu(o, a, d, g, T, S), d = $u(), o !== null && !Zn ? (a.updateQueue = o.updateQueue, a.flags &= -2053, o.lanes &= ~S, qi(o, a, S)) : (Vt && d && Vu(a), a.flags |= 1, In(o, a, g, S), a.child);
  }
  function Qp(o, a, d, g, S) {
    if (o === null) {
      var T = d.type;
      return typeof T == "function" && !Rh(T) && T.defaultProps === void 0 && d.compare === null && d.defaultProps === void 0 ? (a.tag = 15, a.type = T, $p(o, a, T, g, S)) : (o = Hl(d.type, null, g, a, a.mode, S), o.ref = a.ref, o.return = a, a.child = o);
    }
    if (T = o.child, !(o.lanes & S)) {
      var U = T.memoizedProps;
      if (d = d.compare, d = d !== null ? d : nl, d(U, g) && o.ref === a.ref)
        return qi(o, a, S);
    }
    return a.flags |= 1, o = yr(T, g), o.ref = a.ref, o.return = a, a.child = o;
  }
  function $p(o, a, d, g, S) {
    if (o !== null && nl(o.memoizedProps, g) && o.ref === a.ref)
      if (Zn = !1, (o.lanes & S) !== 0)
        o.flags & 131072 && (Zn = !0);
      else
        return a.lanes = o.lanes, qi(o, a, S);
    return sh(o, a, d, g, S);
  }
  function em(o, a, d) {
    var g = a.pendingProps, S = g.children, T = o !== null ? o.memoizedState : null;
    if (g.mode === "hidden")
      if (!(a.mode & 1))
        a.memoizedState = { baseLanes: 0, cachePool: null }, st(Os, Jn), Jn |= d;
      else if (d & 1073741824)
        a.memoizedState = { baseLanes: 0, cachePool: null }, g = T !== null ? T.baseLanes : d, st(Os, Jn), Jn |= g;
      else
        return o = T !== null ? T.baseLanes | d : d, a.lanes = a.childLanes = 1073741824, a.memoizedState = { baseLanes: o, cachePool: null }, a.updateQueue = null, st(Os, Jn), Jn |= o, null;
    else
      T !== null ? (g = T.baseLanes | d, a.memoizedState = null) : g = d, st(Os, Jn), Jn |= g;
    return In(o, a, S, d), a.child;
  }
  function tm(o, a) {
    var d = a.ref;
    (o === null && d !== null || o !== null && o.ref !== d) && (a.flags |= 512, a.flags |= 2097152);
  }
  function sh(o, a, d, g, S) {
    var T = Zt(d) ? di : cn.current;
    return T = jt(a, T), Rs(a, S), d = Qu(o, a, d, g, T, S), g = $u(), o !== null && !Zn ? (a.updateQueue = o.updateQueue, a.flags &= -2053, o.lanes &= ~S, qi(o, a, S)) : (Vt && g && Vu(a), a.flags |= 1, In(o, a, d, S), a.child);
  }
  function nm(o, a, d, g, S) {
    if (Zt(d)) {
      var T = !0;
      bs(a);
    } else
      T = !1;
    if (Rs(a, S), a.stateNode === null)
      o !== null && (o.alternate = null, a.alternate = null, a.flags |= 2), gp(a, d, g), Hu(a, d, g, S), g = !0;
    else if (o === null) {
      var U = a.stateNode, W = a.memoizedProps;
      U.props = W;
      var re = U.context, we = d.contextType;
      typeof we == "object" && we !== null ? we = ni(we) : (we = Zt(d) ? di : cn.current, we = jt(a, we));
      var Be = d.getDerivedStateFromProps, lt = typeof Be == "function" || typeof U.getSnapshotBeforeUpdate == "function";
      lt || typeof U.UNSAFE_componentWillReceiveProps != "function" && typeof U.componentWillReceiveProps != "function" || (W !== g || re !== we) && vp(a, U, g, we), dr = !1;
      var Ke = a.memoizedState;
      U.state = Ke, ol(a, g, U, S), re = a.memoizedState, W !== g || Ke !== re || rn.current || dr ? (typeof Be == "function" && (ku(a, d, Be, g), re = a.memoizedState), (W = dr || mp(a, d, W, g, Ke, re, we)) ? (lt || typeof U.UNSAFE_componentWillMount != "function" && typeof U.componentWillMount != "function" || (typeof U.componentWillMount == "function" && U.componentWillMount(), typeof U.UNSAFE_componentWillMount == "function" && U.UNSAFE_componentWillMount()), typeof U.componentDidMount == "function" && (a.flags |= 4194308)) : (typeof U.componentDidMount == "function" && (a.flags |= 4194308), a.memoizedProps = g, a.memoizedState = re), U.props = g, U.state = re, U.context = we, g = W) : (typeof U.componentDidMount == "function" && (a.flags |= 4194308), g = !1);
    } else {
      U = a.stateNode, hp(o, a), W = a.memoizedProps, we = a.type === a.elementType ? W : mi(a.type, W), U.props = we, lt = a.pendingProps, Ke = U.context, re = d.contextType, typeof re == "object" && re !== null ? re = ni(re) : (re = Zt(d) ? di : cn.current, re = jt(a, re));
      var Ut = d.getDerivedStateFromProps;
      (Be = typeof Ut == "function" || typeof U.getSnapshotBeforeUpdate == "function") || typeof U.UNSAFE_componentWillReceiveProps != "function" && typeof U.componentWillReceiveProps != "function" || (W !== lt || Ke !== re) && vp(a, U, g, re), dr = !1, Ke = a.memoizedState, U.state = Ke, ol(a, g, U, S);
      var qe = a.memoizedState;
      W !== lt || Ke !== qe || rn.current || dr ? (typeof Ut == "function" && (ku(a, d, Ut, g), qe = a.memoizedState), (we = dr || mp(a, d, we, g, Ke, qe, re) || !1) ? (Be || typeof U.UNSAFE_componentWillUpdate != "function" && typeof U.componentWillUpdate != "function" || (typeof U.componentWillUpdate == "function" && U.componentWillUpdate(
        g,
        qe,
        re
      ), typeof U.UNSAFE_componentWillUpdate == "function" && U.UNSAFE_componentWillUpdate(g, qe, re)), typeof U.componentDidUpdate == "function" && (a.flags |= 4), typeof U.getSnapshotBeforeUpdate == "function" && (a.flags |= 1024)) : (typeof U.componentDidUpdate != "function" || W === o.memoizedProps && Ke === o.memoizedState || (a.flags |= 4), typeof U.getSnapshotBeforeUpdate != "function" || W === o.memoizedProps && Ke === o.memoizedState || (a.flags |= 1024), a.memoizedProps = g, a.memoizedState = qe), U.props = g, U.state = qe, U.context = re, g = we) : (typeof U.componentDidUpdate != "function" || W === o.memoizedProps && Ke === o.memoizedState || (a.flags |= 4), typeof U.getSnapshotBeforeUpdate != "function" || W === o.memoizedProps && Ke === o.memoizedState || (a.flags |= 1024), g = !1);
    }
    return oh(o, a, d, g, T, S);
  }
  function oh(o, a, d, g, S, T) {
    tm(o, a);
    var U = (a.flags & 128) !== 0;
    if (!g && !U)
      return S && bo(a, d, !1), qi(o, a, T);
    g = a.stateNode, Py.current = a;
    var W = U && typeof d.getDerivedStateFromError != "function" ? null : g.render();
    return a.flags |= 1, o !== null && U ? (a.child = Is(a, o.child, null, T), a.child = Is(a, null, W, T)) : In(o, a, W, T), a.memoizedState = g.state, S && bo(a, d, !0), a.child;
  }
  function im(o) {
    var a = o.stateNode;
    a.pendingContext ? Sn(o, a.pendingContext, a.pendingContext !== a.context) : a.context && Sn(o, a.context, !1), qu(o, a.containerInfo);
  }
  function rm(o, a, d, g, S) {
    return Ls(), Yu(S), a.flags |= 256, In(o, a, d, g), a.child;
  }
  var Sl = { dehydrated: null, treeContext: null, retryLane: 0 };
  function Ml(o) {
    return { baseLanes: o, cachePool: null };
  }
  function sm(o, a, d) {
    var g = a.pendingProps, S = Gt.current, T = !1, U = (a.flags & 128) !== 0, W;
    if ((W = U) || (W = o !== null && o.memoizedState === null ? !1 : (S & 2) !== 0), W ? (T = !0, a.flags &= -129) : (o === null || o.memoizedState !== null) && (S |= 1), st(Gt, S & 1), o === null)
      return Xu(a), o = a.memoizedState, o !== null && (o = o.dehydrated, o !== null) ? (a.mode & 1 ? hr(o) ? a.lanes = 8 : a.lanes = 1073741824 : a.lanes = 1, null) : (S = g.children, o = g.fallback, T ? (g = a.mode, T = a.child, S = { mode: "hidden", children: S }, !(g & 1) && T !== null ? (T.childLanes = 0, T.pendingProps = S) : T = Vl(S, g, 0, null), o = Yr(o, g, d, null), T.return = a, o.return = a, T.sibling = o, a.child = T, a.child.memoizedState = Ml(d), a.memoizedState = Sl, o) : ah(a, S));
    if (S = o.memoizedState, S !== null) {
      if (W = S.dehydrated, W !== null) {
        if (U)
          return a.flags & 256 ? (a.flags &= -257, El(o, a, d, Error(l(422)))) : a.memoizedState !== null ? (a.child = o.child, a.flags |= 128, null) : (T = g.fallback, S = a.mode, g = Vl({ mode: "visible", children: g.children }, S, 0, null), T = Yr(T, S, d, null), T.flags |= 2, g.return = a, T.return = a, g.sibling = T, a.child = g, a.mode & 1 && Is(
            a,
            o.child,
            null,
            d
          ), a.child.memoizedState = Ml(d), a.memoizedState = Sl, T);
        if (!(a.mode & 1))
          a = El(o, a, d, null);
        else if (hr(W))
          a = El(o, a, d, Error(l(419)));
        else if (g = (d & o.childLanes) !== 0, Zn || g) {
          if (g = sn, g !== null) {
            switch (d & -d) {
              case 4:
                T = 2;
                break;
              case 16:
                T = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                T = 32;
                break;
              case 536870912:
                T = 268435456;
                break;
              default:
                T = 0;
            }
            g = T & (g.suspendedLanes | d) ? 0 : T, g !== 0 && g !== S.retryLane && (S.retryLane = g, ai(o, g, -1));
          }
          Ah(), a = El(o, a, d, Error(l(421)));
        } else
          ja(W) ? (a.flags |= 128, a.child = o.child, a = Gy.bind(null, o), Za(W, a), a = null) : (d = S.treeContext, ve && (jn = bu(W), qn = a, Vt = !0, gi = null, Co = !1, d !== null && (ii[ri++] = Wi, ii[ri++] = Xi, ii[ri++] = zr, Wi = d.id, Xi = d.overflow, zr = a)), a = ah(a, a.pendingProps.children), a.flags |= 4096);
        return a;
      }
      return T ? (g = am(o, a, g.children, g.fallback, d), T = a.child, S = o.child.memoizedState, T.memoizedState = S === null ? Ml(d) : { baseLanes: S.baseLanes | d, cachePool: null }, T.childLanes = o.childLanes & ~d, a.memoizedState = Sl, g) : (d = om(o, a, g.children, d), a.memoizedState = null, d);
    }
    return T ? (g = am(o, a, g.children, g.fallback, d), T = a.child, S = o.child.memoizedState, T.memoizedState = S === null ? Ml(d) : { baseLanes: S.baseLanes | d, cachePool: null }, T.childLanes = o.childLanes & ~d, a.memoizedState = Sl, g) : (d = om(o, a, g.children, d), a.memoizedState = null, d);
  }
  function ah(o, a) {
    return a = Vl({ mode: "visible", children: a }, o.mode, 0, null), a.return = o, o.child = a;
  }
  function om(o, a, d, g) {
    var S = o.child;
    return o = S.sibling, d = yr(S, { mode: "visible", children: d }), !(a.mode & 1) && (d.lanes = g), d.return = a, d.sibling = null, o !== null && (g = a.deletions, g === null ? (a.deletions = [o], a.flags |= 16) : g.push(o)), a.child = d;
  }
  function am(o, a, d, g, S) {
    var T = a.mode;
    o = o.child;
    var U = o.sibling, W = { mode: "hidden", children: d };
    return !(T & 1) && a.child !== o ? (d = a.child, d.childLanes = 0, d.pendingProps = W, a.deletions = null) : (d = yr(o, W), d.subtreeFlags = o.subtreeFlags & 14680064), U !== null ? g = yr(U, g) : (g = Yr(g, T, S, null), g.flags |= 2), g.return = a, d.return = a, d.sibling = g, a.child = d, g;
  }
  function El(o, a, d, g) {
    return g !== null && Yu(g), Is(a, o.child, null, d), o = ah(a, a.pendingProps.children), o.flags |= 2, a.memoizedState = null, o;
  }
  function lm(o, a, d) {
    o.lanes |= a;
    var g = o.alternate;
    g !== null && (g.lanes |= a), zu(o.return, a, d);
  }
  function lh(o, a, d, g, S) {
    var T = o.memoizedState;
    T === null ? o.memoizedState = { isBackwards: a, rendering: null, renderingStartTime: 0, last: g, tail: d, tailMode: S } : (T.isBackwards = a, T.rendering = null, T.renderingStartTime = 0, T.last = g, T.tail = d, T.tailMode = S);
  }
  function cm(o, a, d) {
    var g = a.pendingProps, S = g.revealOrder, T = g.tail;
    if (In(o, a, g.children, d), g = Gt.current, g & 2)
      g = g & 1 | 2, a.flags |= 128;
    else {
      if (o !== null && o.flags & 128)
        e:
          for (o = a.child; o !== null; ) {
            if (o.tag === 13)
              o.memoizedState !== null && lm(o, d, a);
            else if (o.tag === 19)
              lm(o, d, a);
            else if (o.child !== null) {
              o.child.return = o, o = o.child;
              continue;
            }
            if (o === a)
              break e;
            for (; o.sibling === null; ) {
              if (o.return === null || o.return === a)
                break e;
              o = o.return;
            }
            o.sibling.return = o.return, o = o.sibling;
          }
      g &= 1;
    }
    if (st(Gt, g), !(a.mode & 1))
      a.memoizedState = null;
    else
      switch (S) {
        case "forwards":
          for (d = a.child, S = null; d !== null; )
            o = d.alternate, o !== null && hl(o) === null && (S = d), d = d.sibling;
          d = S, d === null ? (S = a.child, a.child = null) : (S = d.sibling, d.sibling = null), lh(a, !1, S, d, T);
          break;
        case "backwards":
          for (d = null, S = a.child, a.child = null; S !== null; ) {
            if (o = S.alternate, o !== null && hl(o) === null) {
              a.child = S;
              break;
            }
            o = S.sibling, S.sibling = d, d = S, S = o;
          }
          lh(a, !0, d, null, T);
          break;
        case "together":
          lh(a, !1, null, null, void 0);
          break;
        default:
          a.memoizedState = null;
      }
    return a.child;
  }
  function qi(o, a, d) {
    if (o !== null && (a.dependencies = o.dependencies), Fs |= a.lanes, !(d & a.childLanes))
      return null;
    if (o !== null && a.child !== o.child)
      throw Error(l(153));
    if (a.child !== null) {
      for (o = a.child, d = yr(o, o.pendingProps), a.child = d, d.return = a; o.sibling !== null; )
        o = o.sibling, d = d.sibling = yr(o, o.pendingProps), d.return = a;
      d.sibling = null;
    }
    return a.child;
  }
  function Ly(o, a, d) {
    switch (a.tag) {
      case 3:
        im(a), Ls();
        break;
      case 5:
        Tp(a);
        break;
      case 1:
        Zt(a.type) && bs(a);
        break;
      case 4:
        qu(a, a.stateNode.containerInfo);
        break;
      case 10:
        up(a, a.type._context, a.memoizedProps.value);
        break;
      case 13:
        var g = a.memoizedState;
        if (g !== null)
          return g.dehydrated !== null ? (st(Gt, Gt.current & 1), a.flags |= 128, null) : d & a.child.childLanes ? sm(o, a, d) : (st(Gt, Gt.current & 1), o = qi(o, a, d), o !== null ? o.sibling : null);
        st(Gt, Gt.current & 1);
        break;
      case 19:
        if (g = (d & a.childLanes) !== 0, o.flags & 128) {
          if (g)
            return cm(
              o,
              a,
              d
            );
          a.flags |= 128;
        }
        var S = a.memoizedState;
        if (S !== null && (S.rendering = null, S.tail = null, S.lastEffect = null), st(Gt, Gt.current), g)
          break;
        return null;
      case 22:
      case 23:
        return a.lanes = 0, em(o, a, d);
    }
    return qi(o, a, d);
  }
  function Iy(o, a) {
    switch (Gu(a), a.tag) {
      case 1:
        return Zt(a.type) && fr(), o = a.flags, o & 65536 ? (a.flags = o & -65537 | 128, a) : null;
      case 3:
        return Ns(), Pt(rn), Pt(cn), Ju(), o = a.flags, o & 65536 && !(o & 128) ? (a.flags = o & -65537 | 128, a) : null;
      case 5:
        return ju(a), null;
      case 13:
        if (Pt(Gt), o = a.memoizedState, o !== null && o.dehydrated !== null) {
          if (a.alternate === null)
            throw Error(l(340));
          Ls();
        }
        return o = a.flags, o & 65536 ? (a.flags = o & -65537 | 128, a) : null;
      case 19:
        return Pt(Gt), null;
      case 4:
        return Ns(), null;
      case 10:
        return Fu(a.type._context), null;
      case 22:
      case 23:
        return bh(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var wl = !1, Hr = !1, Dy = typeof WeakSet == "function" ? WeakSet : Set, Ie = null;
  function Tl(o, a) {
    var d = o.ref;
    if (d !== null)
      if (typeof d == "function")
        try {
          d(null);
        } catch (g) {
          Hn(o, a, g);
        }
      else
        d.current = null;
  }
  function ch(o, a, d) {
    try {
      d();
    } catch (g) {
      Hn(o, a, g);
    }
  }
  var um = !1;
  function Ny(o, a) {
    for (q(o.containerInfo), Ie = a; Ie !== null; )
      if (o = Ie, a = o.child, (o.subtreeFlags & 1028) !== 0 && a !== null)
        a.return = o, Ie = a;
      else
        for (; Ie !== null; ) {
          o = Ie;
          try {
            var d = o.alternate;
            if (o.flags & 1024)
              switch (o.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (d !== null) {
                    var g = d.memoizedProps, S = d.memoizedState, T = o.stateNode, U = T.getSnapshotBeforeUpdate(o.elementType === o.type ? g : mi(o.type, g), S);
                    T.__reactInternalSnapshotBeforeUpdate = U;
                  }
                  break;
                case 3:
                  Ve && Ce(o.stateNode.containerInfo);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(l(163));
              }
          } catch (W) {
            Hn(o, o.return, W);
          }
          if (a = o.sibling, a !== null) {
            a.return = o.return, Ie = a;
            break;
          }
          Ie = o.return;
        }
    return d = um, um = !1, d;
  }
  function Vr(o, a, d) {
    var g = a.updateQueue;
    if (g = g !== null ? g.lastEffect : null, g !== null) {
      var S = g = g.next;
      do {
        if ((S.tag & o) === o) {
          var T = S.destroy;
          S.destroy = void 0, T !== void 0 && ch(a, d, T);
        }
        S = S.next;
      } while (S !== g);
    }
  }
  function Ho(o, a) {
    if (a = a.updateQueue, a = a !== null ? a.lastEffect : null, a !== null) {
      var d = a = a.next;
      do {
        if ((d.tag & o) === o) {
          var g = d.create;
          d.destroy = g();
        }
        d = d.next;
      } while (d !== a);
    }
  }
  function uh(o) {
    var a = o.ref;
    if (a !== null) {
      var d = o.stateNode;
      switch (o.tag) {
        case 5:
          o = oe(d);
          break;
        default:
          o = d;
      }
      typeof a == "function" ? a(o) : a.current = o;
    }
  }
  function hm(o, a, d) {
    if (Ai && typeof Ai.onCommitFiberUnmount == "function")
      try {
        Ai.onCommitFiberUnmount(el, a);
      } catch {
      }
    switch (a.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        if (o = a.updateQueue, o !== null && (o = o.lastEffect, o !== null)) {
          var g = o = o.next;
          do {
            var S = g, T = S.destroy;
            S = S.tag, T !== void 0 && (S & 2 || S & 4) && ch(a, d, T), g = g.next;
          } while (g !== o);
        }
        break;
      case 1:
        if (Tl(a, d), o = a.stateNode, typeof o.componentWillUnmount == "function")
          try {
            o.props = a.memoizedProps, o.state = a.memoizedState, o.componentWillUnmount();
          } catch (U) {
            Hn(
              a,
              d,
              U
            );
          }
        break;
      case 5:
        Tl(a, d);
        break;
      case 4:
        Ve ? vm(o, a, d) : B && B && (a = a.stateNode.containerInfo, d = pe(a), Ht(a, d));
    }
  }
  function fm(o, a, d) {
    for (var g = a; ; )
      if (hm(o, g, d), g.child === null || Ve && g.tag === 4) {
        if (g === a)
          break;
        for (; g.sibling === null; ) {
          if (g.return === null || g.return === a)
            return;
          g = g.return;
        }
        g.sibling.return = g.return, g = g.sibling;
      } else
        g.child.return = g, g = g.child;
  }
  function dm(o) {
    var a = o.alternate;
    a !== null && (o.alternate = null, dm(a)), o.child = null, o.deletions = null, o.sibling = null, o.tag === 5 && (a = o.stateNode, a !== null && Xe(a)), o.stateNode = null, o.return = null, o.dependencies = null, o.memoizedProps = null, o.memoizedState = null, o.pendingProps = null, o.stateNode = null, o.updateQueue = null;
  }
  function pm(o) {
    return o.tag === 5 || o.tag === 3 || o.tag === 4;
  }
  function mm(o) {
    e:
      for (; ; ) {
        for (; o.sibling === null; ) {
          if (o.return === null || pm(o.return))
            return null;
          o = o.return;
        }
        for (o.sibling.return = o.return, o = o.sibling; o.tag !== 5 && o.tag !== 6 && o.tag !== 18; ) {
          if (o.flags & 2 || o.child === null || o.tag === 4)
            continue e;
          o.child.return = o, o = o.child;
        }
        if (!(o.flags & 2))
          return o.stateNode;
      }
  }
  function gm(o) {
    if (Ve) {
      e: {
        for (var a = o.return; a !== null; ) {
          if (pm(a))
            break e;
          a = a.return;
        }
        throw Error(l(160));
      }
      var d = a;
      switch (d.tag) {
        case 5:
          a = d.stateNode, d.flags & 32 && (ae(a), d.flags &= -33), d = mm(o), fh(o, d, a);
          break;
        case 3:
        case 4:
          a = d.stateNode.containerInfo, d = mm(o), hh(o, d, a);
          break;
        default:
          throw Error(l(161));
      }
    }
  }
  function hh(o, a, d) {
    var g = o.tag;
    if (g === 5 || g === 6)
      o = o.stateNode, a ? Me(d, o, a) : Ge(d, o);
    else if (g !== 4 && (o = o.child, o !== null))
      for (hh(o, a, d), o = o.sibling; o !== null; )
        hh(o, a, d), o = o.sibling;
  }
  function fh(o, a, d) {
    var g = o.tag;
    if (g === 5 || g === 6)
      o = o.stateNode, a ? xt(d, o, a) : xe(d, o);
    else if (g !== 4 && (o = o.child, o !== null))
      for (fh(o, a, d), o = o.sibling; o !== null; )
        fh(o, a, d), o = o.sibling;
  }
  function vm(o, a, d) {
    for (var g = a, S = !1, T, U; ; ) {
      if (!S) {
        S = g.return;
        e:
          for (; ; ) {
            if (S === null)
              throw Error(l(160));
            switch (T = S.stateNode, S.tag) {
              case 5:
                U = !1;
                break e;
              case 3:
                T = T.containerInfo, U = !0;
                break e;
              case 4:
                T = T.containerInfo, U = !0;
                break e;
            }
            S = S.return;
          }
        S = !0;
      }
      if (g.tag === 5 || g.tag === 6)
        fm(o, g, d), U ? V(T, g.stateNode) : St(T, g.stateNode);
      else if (g.tag === 18)
        U ? Je(T, g.stateNode) : ze(T, g.stateNode);
      else if (g.tag === 4) {
        if (g.child !== null) {
          T = g.stateNode.containerInfo, U = !0, g.child.return = g, g = g.child;
          continue;
        }
      } else if (hm(o, g, d), g.child !== null) {
        g.child.return = g, g = g.child;
        continue;
      }
      if (g === a)
        break;
      for (; g.sibling === null; ) {
        if (g.return === null || g.return === a)
          return;
        g = g.return, g.tag === 4 && (S = !1);
      }
      g.sibling.return = g.return, g = g.sibling;
    }
  }
  function dh(o, a) {
    if (Ve) {
      switch (a.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          Vr(3, a, a.return), Ho(3, a), Vr(5, a, a.return);
          return;
        case 1:
          return;
        case 5:
          var d = a.stateNode;
          if (d != null) {
            var g = a.memoizedProps;
            o = o !== null ? o.memoizedProps : g;
            var S = a.type, T = a.updateQueue;
            a.updateQueue = null, T !== null && tt(d, T, S, o, g, a);
          }
          return;
        case 6:
          if (a.stateNode === null)
            throw Error(l(162));
          d = a.memoizedProps, be(a.stateNode, o !== null ? o.memoizedProps : d, d);
          return;
        case 3:
          ve && o !== null && o.memoizedState.isDehydrated && K(a.stateNode.containerInfo);
          return;
        case 12:
          return;
        case 13:
          bl(a);
          return;
        case 19:
          bl(a);
          return;
        case 17:
          return;
      }
      throw Error(l(163));
    }
    switch (a.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        Vr(3, a, a.return), Ho(3, a), Vr(5, a, a.return);
        return;
      case 12:
        return;
      case 13:
        bl(a);
        return;
      case 19:
        bl(a);
        return;
      case 3:
        ve && o !== null && o.memoizedState.isDehydrated && K(a.stateNode.containerInfo);
        break;
      case 22:
      case 23:
        return;
    }
    e:
      if (B) {
        switch (a.tag) {
          case 1:
          case 5:
          case 6:
            break e;
          case 3:
          case 4:
            a = a.stateNode, Ht(a.containerInfo, a.pendingChildren);
            break e;
        }
        throw Error(l(163));
      }
  }
  function bl(o) {
    var a = o.updateQueue;
    if (a !== null) {
      o.updateQueue = null;
      var d = o.stateNode;
      d === null && (d = o.stateNode = new Dy()), a.forEach(function(g) {
        var S = Wy.bind(null, o, g);
        d.has(g) || (d.add(g), g.then(S, S));
      });
    }
  }
  function Uy(o, a) {
    for (Ie = a; Ie !== null; ) {
      a = Ie;
      var d = a.deletions;
      if (d !== null)
        for (var g = 0; g < d.length; g++) {
          var S = d[g];
          try {
            var T = o;
            Ve ? vm(T, S, a) : fm(T, S, a);
            var U = S.alternate;
            U !== null && (U.return = null), S.return = null;
          } catch (Ye) {
            Hn(S, a, Ye);
          }
        }
      if (d = a.child, a.subtreeFlags & 12854 && d !== null)
        d.return = a, Ie = d;
      else
        for (; Ie !== null; ) {
          a = Ie;
          try {
            var W = a.flags;
            if (W & 32 && Ve && ae(a.stateNode), W & 512) {
              var re = a.alternate;
              if (re !== null) {
                var we = re.ref;
                we !== null && (typeof we == "function" ? we(null) : we.current = null);
              }
            }
            if (W & 8192)
              switch (a.tag) {
                case 13:
                  if (a.memoizedState !== null) {
                    var Be = a.alternate;
                    (Be === null || Be.memoizedState === null) && (xh = pn());
                  }
                  break;
                case 22:
                  var lt = a.memoizedState !== null, Ke = a.alternate, Ut = Ke !== null && Ke.memoizedState !== null;
                  if (d = a, Ve) {
                    e:
                      if (g = d, S = lt, T = null, Ve)
                        for (var qe = g; ; ) {
                          if (qe.tag === 5) {
                            if (T === null) {
                              T = qe;
                              var Tn = qe.stateNode;
                              S ? _e(Tn) : me(qe.stateNode, qe.memoizedProps);
                            }
                          } else if (qe.tag === 6) {
                            if (T === null) {
                              var ci = qe.stateNode;
                              S ? F(ci) : ye(ci, qe.memoizedProps);
                            }
                          } else if ((qe.tag !== 22 && qe.tag !== 23 || qe.memoizedState === null || qe === g) && qe.child !== null) {
                            qe.child.return = qe, qe = qe.child;
                            continue;
                          }
                          if (qe === g)
                            break;
                          for (; qe.sibling === null; ) {
                            if (qe.return === null || qe.return === g)
                              break e;
                            T === qe && (T = null), qe = qe.return;
                          }
                          T === qe && (T = null), qe.sibling.return = qe.return, qe = qe.sibling;
                        }
                  }
                  if (lt && !Ut && d.mode & 1) {
                    Ie = d;
                    for (var J = d.child; J !== null; ) {
                      for (d = Ie = J; Ie !== null; ) {
                        g = Ie;
                        var X = g.child;
                        switch (g.tag) {
                          case 0:
                          case 11:
                          case 14:
                          case 15:
                            Vr(4, g, g.return);
                            break;
                          case 1:
                            Tl(g, g.return);
                            var ne = g.stateNode;
                            if (typeof ne.componentWillUnmount == "function") {
                              var De = g.return;
                              try {
                                ne.props = g.memoizedProps, ne.state = g.memoizedState, ne.componentWillUnmount();
                              } catch (Ye) {
                                Hn(
                                  g,
                                  De,
                                  Ye
                                );
                              }
                            }
                            break;
                          case 5:
                            Tl(g, g.return);
                            break;
                          case 22:
                            if (g.memoizedState !== null) {
                              xm(d);
                              continue;
                            }
                        }
                        X !== null ? (X.return = g, Ie = X) : xm(d);
                      }
                      J = J.sibling;
                    }
                  }
              }
            switch (W & 4102) {
              case 2:
                gm(a), a.flags &= -3;
                break;
              case 6:
                gm(a), a.flags &= -3, dh(a.alternate, a);
                break;
              case 4096:
                a.flags &= -4097;
                break;
              case 4100:
                a.flags &= -4097, dh(a.alternate, a);
                break;
              case 4:
                dh(a.alternate, a);
            }
          } catch (Ye) {
            Hn(a, a.return, Ye);
          }
          if (d = a.sibling, d !== null) {
            d.return = a.return, Ie = d;
            break;
          }
          Ie = a.return;
        }
    }
  }
  function Oy(o, a, d) {
    Ie = o, _m(o);
  }
  function _m(o, a, d) {
    for (var g = (o.mode & 1) !== 0; Ie !== null; ) {
      var S = Ie, T = S.child;
      if (S.tag === 22 && g) {
        var U = S.memoizedState !== null || wl;
        if (!U) {
          var W = S.alternate, re = W !== null && W.memoizedState !== null || Hr;
          W = wl;
          var we = Hr;
          if (wl = U, (Hr = re) && !we)
            for (Ie = S; Ie !== null; )
              U = Ie, re = U.child, U.tag === 22 && U.memoizedState !== null ? Sm(S) : re !== null ? (re.return = U, Ie = re) : Sm(S);
          for (; T !== null; )
            Ie = T, _m(T), T = T.sibling;
          Ie = S, wl = W, Hr = we;
        }
        ym(o);
      } else
        S.subtreeFlags & 8772 && T !== null ? (T.return = S, Ie = T) : ym(o);
    }
  }
  function ym(o) {
    for (; Ie !== null; ) {
      var a = Ie;
      if (a.flags & 8772) {
        var d = a.alternate;
        try {
          if (a.flags & 8772)
            switch (a.tag) {
              case 0:
              case 11:
              case 15:
                Hr || Ho(5, a);
                break;
              case 1:
                var g = a.stateNode;
                if (a.flags & 4 && !Hr)
                  if (d === null)
                    g.componentDidMount();
                  else {
                    var S = a.elementType === a.type ? d.memoizedProps : mi(a.type, d.memoizedProps);
                    g.componentDidUpdate(S, d.memoizedState, g.__reactInternalSnapshotBeforeUpdate);
                  }
                var T = a.updateQueue;
                T !== null && dp(a, T, g);
                break;
              case 3:
                var U = a.updateQueue;
                if (U !== null) {
                  if (d = null, a.child !== null)
                    switch (a.child.tag) {
                      case 5:
                        d = oe(a.child.stateNode);
                        break;
                      case 1:
                        d = a.child.stateNode;
                    }
                  dp(a, U, d);
                }
                break;
              case 5:
                var W = a.stateNode;
                d === null && a.flags & 4 && Pe(W, a.type, a.memoizedProps, a);
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (ve && a.memoizedState === null) {
                  var re = a.alternate;
                  if (re !== null) {
                    var we = re.memoizedState;
                    if (we !== null) {
                      var Be = we.dehydrated;
                      Be !== null && ce(Be);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
                break;
              default:
                throw Error(l(163));
            }
          Hr || a.flags & 512 && uh(a);
        } catch (lt) {
          Hn(a, a.return, lt);
        }
      }
      if (a === o) {
        Ie = null;
        break;
      }
      if (d = a.sibling, d !== null) {
        d.return = a.return, Ie = d;
        break;
      }
      Ie = a.return;
    }
  }
  function xm(o) {
    for (; Ie !== null; ) {
      var a = Ie;
      if (a === o) {
        Ie = null;
        break;
      }
      var d = a.sibling;
      if (d !== null) {
        d.return = a.return, Ie = d;
        break;
      }
      Ie = a.return;
    }
  }
  function Sm(o) {
    for (; Ie !== null; ) {
      var a = Ie;
      try {
        switch (a.tag) {
          case 0:
          case 11:
          case 15:
            var d = a.return;
            try {
              Ho(4, a);
            } catch (re) {
              Hn(a, d, re);
            }
            break;
          case 1:
            var g = a.stateNode;
            if (typeof g.componentDidMount == "function") {
              var S = a.return;
              try {
                g.componentDidMount();
              } catch (re) {
                Hn(a, S, re);
              }
            }
            var T = a.return;
            try {
              uh(a);
            } catch (re) {
              Hn(a, T, re);
            }
            break;
          case 5:
            var U = a.return;
            try {
              uh(a);
            } catch (re) {
              Hn(a, U, re);
            }
        }
      } catch (re) {
        Hn(a, a.return, re);
      }
      if (a === o) {
        Ie = null;
        break;
      }
      var W = a.sibling;
      if (W !== null) {
        W.return = a.return, Ie = W;
        break;
      }
      Ie = a.return;
    }
  }
  var Al = 0, Rl = 1, Cl = 2, Pl = 3, Ll = 4;
  if (typeof Symbol == "function" && Symbol.for) {
    var Vo = Symbol.for;
    Al = Vo("selector.component"), Rl = Vo("selector.has_pseudo_class"), Cl = Vo("selector.role"), Pl = Vo("selector.test_id"), Ll = Vo("selector.text");
  }
  function ph(o) {
    var a = he(o);
    if (a != null) {
      if (typeof a.memoizedProps["data-testname"] != "string")
        throw Error(l(364));
      return a;
    }
    if (o = mt(o), o === null)
      throw Error(l(362));
    return o.stateNode.current;
  }
  function mh(o, a) {
    switch (a.$$typeof) {
      case Al:
        if (o.type === a.value)
          return !0;
        break;
      case Rl:
        e: {
          a = a.value, o = [o, 0];
          for (var d = 0; d < o.length; ) {
            var g = o[d++], S = o[d++], T = a[S];
            if (g.tag !== 5 || !P(g)) {
              for (; T != null && mh(g, T); )
                S++, T = a[S];
              if (S === a.length) {
                a = !0;
                break e;
              } else
                for (g = g.child; g !== null; )
                  o.push(g, S), g = g.sibling;
            }
          }
          a = !1;
        }
        return a;
      case Cl:
        if (o.tag === 5 && ee(o.stateNode, a.value))
          return !0;
        break;
      case Ll:
        if ((o.tag === 5 || o.tag === 6) && (o = O(o), o !== null && 0 <= o.indexOf(a.value)))
          return !0;
        break;
      case Pl:
        if (o.tag === 5 && (o = o.memoizedProps["data-testname"], typeof o == "string" && o.toLowerCase() === a.value.toLowerCase()))
          return !0;
        break;
      default:
        throw Error(l(365));
    }
    return !1;
  }
  function gh(o) {
    switch (o.$$typeof) {
      case Al:
        return "<" + (I(o.value) || "Unknown") + ">";
      case Rl:
        return ":has(" + (gh(o) || "") + ")";
      case Cl:
        return '[role="' + o.value + '"]';
      case Ll:
        return '"' + o.value + '"';
      case Pl:
        return '[data-testname="' + o.value + '"]';
      default:
        throw Error(l(365));
    }
  }
  function Mm(o, a) {
    var d = [];
    o = [o, 0];
    for (var g = 0; g < o.length; ) {
      var S = o[g++], T = o[g++], U = a[T];
      if (S.tag !== 5 || !P(S)) {
        for (; U != null && mh(S, U); )
          T++, U = a[T];
        if (T === a.length)
          d.push(S);
        else
          for (S = S.child; S !== null; )
            o.push(S, T), S = S.sibling;
      }
    }
    return d;
  }
  function vh(o, a) {
    if (!$e)
      throw Error(l(363));
    o = ph(o), o = Mm(o, a), a = [], o = Array.from(o);
    for (var d = 0; d < o.length; ) {
      var g = o[d++];
      if (g.tag === 5)
        P(g) || a.push(g.stateNode);
      else
        for (g = g.child; g !== null; )
          o.push(g), g = g.sibling;
    }
    return a;
  }
  var Fy = Math.ceil, Il = c.ReactCurrentDispatcher, _h = c.ReactCurrentOwner, $t = c.ReactCurrentBatchConfig, vt = 0, sn = null, on = null, _n = 0, Jn = 0, Os = at(0), un = 0, Go = null, Fs = 0, Dl = 0, yh = 0, Wo = null, Bn = null, xh = 0, Sh = 1 / 0;
  function zs() {
    Sh = pn() + 500;
  }
  var Nl = !1, Mh = null, mr = null, Ul = !1, gr = null, Ol = 0, Xo = 0, Eh = null, Fl = -1, zl = 0;
  function Dn() {
    return vt & 6 ? pn() : Fl !== -1 ? Fl : Fl = pn();
  }
  function vr(o) {
    return o.mode & 1 ? vt & 2 && _n !== 0 ? _n & -_n : yy.transition !== null ? (zl === 0 && (o = Ka, Ka <<= 1, !(Ka & 4194240) && (Ka = 64), zl = o), zl) : (o = Tt, o !== 0 ? o : de()) : 1;
  }
  function ai(o, a, d) {
    if (50 < Xo)
      throw Xo = 0, Eh = null, Error(l(185));
    var g = Bl(o, a);
    return g === null ? null : (Ro(g, a, d), (!(vt & 2) || g !== sn) && (g === sn && (!(vt & 2) && (Dl |= a), un === 4 && _r(g, _n)), kn(g, d), a === 1 && vt === 0 && !(o.mode & 1) && (zs(), tl && Ci())), g);
  }
  function Bl(o, a) {
    o.lanes |= a;
    var d = o.alternate;
    for (d !== null && (d.lanes |= a), d = o, o = o.return; o !== null; )
      o.childLanes |= a, d = o.alternate, d !== null && (d.childLanes |= a), d = o, o = o.return;
    return d.tag === 3 ? d.stateNode : null;
  }
  function kn(o, a) {
    var d = o.callbackNode;
    uy(o, a);
    var g = $a(o, o === sn ? _n : 0);
    if (g === 0)
      d !== null && lp(d), o.callbackNode = null, o.callbackPriority = 0;
    else if (a = g & -g, o.callbackPriority !== a) {
      if (d != null && lp(d), a === 1)
        o.tag === 0 ? _y(wm.bind(null, o)) : cp(wm.bind(null, o)), Ne ? Oe(function() {
          vt === 0 && Ci();
        }) : Lu(Iu, Ci), d = null;
      else {
        switch (ap(g)) {
          case 1:
            d = Iu;
            break;
          case 4:
            d = py;
            break;
          case 16:
            d = Du;
            break;
          case 536870912:
            d = my;
            break;
          default:
            d = Du;
        }
        d = Dm(d, Em.bind(null, o));
      }
      o.callbackPriority = a, o.callbackNode = d;
    }
  }
  function Em(o, a) {
    if (Fl = -1, zl = 0, vt & 6)
      throw Error(l(327));
    var d = o.callbackNode;
    if (Xr() && o.callbackNode !== d)
      return null;
    var g = $a(o, o === sn ? _n : 0);
    if (g === 0)
      return null;
    if (g & 30 || g & o.expiredLanes || a)
      a = kl(o, g);
    else {
      a = g;
      var S = vt;
      vt |= 2;
      var T = Am();
      (sn !== o || _n !== a) && (zs(), Gr(o, a));
      do
        try {
          ky();
          break;
        } catch (W) {
          bm(o, W);
        }
      while (1);
      Ou(), Il.current = T, vt = S, on !== null ? a = 0 : (sn = null, _n = 0, a = un);
    }
    if (a !== 0) {
      if (a === 2 && (S = Ru(o), S !== 0 && (g = S, a = wh(o, S))), a === 1)
        throw d = Go, Gr(o, 0), _r(o, g), kn(o, pn()), d;
      if (a === 6)
        _r(o, g);
      else {
        if (S = o.current.alternate, !(g & 30) && !zy(S) && (a = kl(o, g), a === 2 && (T = Ru(o), T !== 0 && (g = T, a = wh(o, T))), a === 1))
          throw d = Go, Gr(o, 0), _r(o, g), kn(o, pn()), d;
        switch (o.finishedWork = S, o.finishedLanes = g, a) {
          case 0:
          case 1:
            throw Error(l(345));
          case 2:
            Wr(o, Bn);
            break;
          case 3:
            if (_r(o, g), (g & 130023424) === g && (a = xh + 500 - pn(), 10 < a)) {
              if ($a(o, 0) !== 0)
                break;
              if (S = o.suspendedLanes, (S & g) !== g) {
                Dn(), o.pingedLanes |= o.suspendedLanes & S;
                break;
              }
              o.timeoutHandle = He(Wr.bind(null, o, Bn), a);
              break;
            }
            Wr(o, Bn);
            break;
          case 4:
            if (_r(o, g), (g & 4194240) === g)
              break;
            for (a = o.eventTimes, S = -1; 0 < g; ) {
              var U = 31 - pi(g);
              T = 1 << U, U = a[U], U > S && (S = U), g &= ~T;
            }
            if (g = S, g = pn() - g, g = (120 > g ? 120 : 480 > g ? 480 : 1080 > g ? 1080 : 1920 > g ? 1920 : 3e3 > g ? 3e3 : 4320 > g ? 4320 : 1960 * Fy(g / 1960)) - g, 10 < g) {
              o.timeoutHandle = He(Wr.bind(null, o, Bn), g);
              break;
            }
            Wr(o, Bn);
            break;
          case 5:
            Wr(o, Bn);
            break;
          default:
            throw Error(l(329));
        }
      }
    }
    return kn(o, pn()), o.callbackNode === d ? Em.bind(null, o) : null;
  }
  function wh(o, a) {
    var d = Wo;
    return o.current.memoizedState.isDehydrated && (Gr(o, a).flags |= 256), o = kl(o, a), o !== 2 && (a = Bn, Bn = d, a !== null && Th(a)), o;
  }
  function Th(o) {
    Bn === null ? Bn = o : Bn.push.apply(Bn, o);
  }
  function zy(o) {
    for (var a = o; ; ) {
      if (a.flags & 16384) {
        var d = a.updateQueue;
        if (d !== null && (d = d.stores, d !== null))
          for (var g = 0; g < d.length; g++) {
            var S = d[g], T = S.getSnapshot;
            S = S.value;
            try {
              if (!Ri(T(), S))
                return !1;
            } catch {
              return !1;
            }
          }
      }
      if (d = a.child, a.subtreeFlags & 16384 && d !== null)
        d.return = a, a = d;
      else {
        if (a === o)
          break;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === o)
            return !0;
          a = a.return;
        }
        a.sibling.return = a.return, a = a.sibling;
      }
    }
    return !0;
  }
  function _r(o, a) {
    for (a &= ~yh, a &= ~Dl, o.suspendedLanes |= a, o.pingedLanes &= ~a, o = o.expirationTimes; 0 < a; ) {
      var d = 31 - pi(a), g = 1 << d;
      o[d] = -1, a &= ~g;
    }
  }
  function wm(o) {
    if (vt & 6)
      throw Error(l(327));
    Xr();
    var a = $a(o, 0);
    if (!(a & 1))
      return kn(o, pn()), null;
    var d = kl(o, a);
    if (o.tag !== 0 && d === 2) {
      var g = Ru(o);
      g !== 0 && (a = g, d = wh(o, g));
    }
    if (d === 1)
      throw d = Go, Gr(o, 0), _r(o, a), kn(o, pn()), d;
    if (d === 6)
      throw Error(l(345));
    return o.finishedWork = o.current.alternate, o.finishedLanes = a, Wr(o, Bn), kn(o, pn()), null;
  }
  function Tm(o) {
    gr !== null && gr.tag === 0 && !(vt & 6) && Xr();
    var a = vt;
    vt |= 1;
    var d = $t.transition, g = Tt;
    try {
      if ($t.transition = null, Tt = 1, o)
        return o();
    } finally {
      Tt = g, $t.transition = d, vt = a, !(vt & 6) && Ci();
    }
  }
  function bh() {
    Jn = Os.current, Pt(Os);
  }
  function Gr(o, a) {
    o.finishedWork = null, o.finishedLanes = 0;
    var d = o.timeoutHandle;
    if (d !== yt && (o.timeoutHandle = yt, je(d)), on !== null)
      for (d = on.return; d !== null; ) {
        var g = d;
        switch (Gu(g), g.tag) {
          case 1:
            g = g.type.childContextTypes, g != null && fr();
            break;
          case 3:
            Ns(), Pt(rn), Pt(cn), Ju();
            break;
          case 5:
            ju(g);
            break;
          case 4:
            Ns();
            break;
          case 13:
            Pt(Gt);
            break;
          case 19:
            Pt(Gt);
            break;
          case 10:
            Fu(g.type._context);
            break;
          case 22:
          case 23:
            bh();
        }
        d = d.return;
      }
    if (sn = o, on = o = yr(o.current, null), _n = Jn = a, un = 0, Go = null, yh = Dl = Fs = 0, Bn = Wo = null, Pi !== null) {
      for (a = 0; a < Pi.length; a++)
        if (d = Pi[a], g = d.interleaved, g !== null) {
          d.interleaved = null;
          var S = g.next, T = d.pending;
          if (T !== null) {
            var U = T.next;
            T.next = S, g.next = U;
          }
          d.pending = g;
        }
      Pi = null;
    }
    return o;
  }
  function bm(o, a) {
    do {
      var d = on;
      try {
        if (Ou(), fl.current = _l, dl) {
          for (var g = Jt.memoizedState; g !== null; ) {
            var S = g.queue;
            S !== null && (S.pending = null), g = g.next;
          }
          dl = !1;
        }
        if (Us = 0, mn = Mn = Jt = null, No = !1, Uo = 0, _h.current = null, d === null || d.return === null) {
          un = 1, Go = a, on = null;
          break;
        }
        e: {
          var T = o, U = d.return, W = d, re = a;
          if (a = _n, W.flags |= 32768, re !== null && typeof re == "object" && typeof re.then == "function") {
            var we = re, Be = W, lt = Be.tag;
            if (!(Be.mode & 1) && (lt === 0 || lt === 11 || lt === 15)) {
              var Ke = Be.alternate;
              Ke ? (Be.updateQueue = Ke.updateQueue, Be.memoizedState = Ke.memoizedState, Be.lanes = Ke.lanes) : (Be.updateQueue = null, Be.memoizedState = null);
            }
            var Ut = qp(U);
            if (Ut !== null) {
              Ut.flags &= -257, jp(Ut, U, W, T, a), Ut.mode & 1 && Yp(T, we, a), a = Ut, re = we;
              var qe = a.updateQueue;
              if (qe === null) {
                var Tn = /* @__PURE__ */ new Set();
                Tn.add(re), a.updateQueue = Tn;
              } else
                qe.add(re);
              break e;
            } else {
              if (!(a & 1)) {
                Yp(T, we, a), Ah();
                break e;
              }
              re = Error(l(426));
            }
          } else if (Vt && W.mode & 1) {
            var ci = qp(U);
            if (ci !== null) {
              !(ci.flags & 65536) && (ci.flags |= 256), jp(ci, U, W, T, a), Yu(re);
              break e;
            }
          }
          T = re, un !== 4 && (un = 2), Wo === null ? Wo = [T] : Wo.push(T), re = ih(re, W), W = U;
          do {
            switch (W.tag) {
              case 3:
                W.flags |= 65536, a &= -a, W.lanes |= a;
                var J = Wp(W, re, a);
                fp(W, J);
                break e;
              case 1:
                T = re;
                var X = W.type, ne = W.stateNode;
                if (!(W.flags & 128) && (typeof X.getDerivedStateFromError == "function" || ne !== null && typeof ne.componentDidCatch == "function" && (mr === null || !mr.has(ne)))) {
                  W.flags |= 65536, a &= -a, W.lanes |= a;
                  var De = Xp(W, T, a);
                  fp(W, De);
                  break e;
                }
            }
            W = W.return;
          } while (W !== null);
        }
        Cm(d);
      } catch (Ye) {
        a = Ye, on === d && d !== null && (on = d = d.return);
        continue;
      }
      break;
    } while (1);
  }
  function Am() {
    var o = Il.current;
    return Il.current = _l, o === null ? _l : o;
  }
  function Ah() {
    (un === 0 || un === 3 || un === 2) && (un = 4), sn === null || !(Fs & 268435455) && !(Dl & 268435455) || _r(sn, _n);
  }
  function kl(o, a) {
    var d = vt;
    vt |= 2;
    var g = Am();
    sn === o && _n === a || Gr(o, a);
    do
      try {
        By();
        break;
      } catch (S) {
        bm(o, S);
      }
    while (1);
    if (Ou(), vt = d, Il.current = g, on !== null)
      throw Error(l(261));
    return sn = null, _n = 0, un;
  }
  function By() {
    for (; on !== null; )
      Rm(on);
  }
  function ky() {
    for (; on !== null && !fy(); )
      Rm(on);
  }
  function Rm(o) {
    var a = Im(o.alternate, o, Jn);
    o.memoizedProps = o.pendingProps, a === null ? Cm(o) : on = a, _h.current = null;
  }
  function Cm(o) {
    var a = o;
    do {
      var d = a.alternate;
      if (o = a.return, a.flags & 32768) {
        if (d = Iy(d, a), d !== null) {
          d.flags &= 32767, on = d;
          return;
        }
        if (o !== null)
          o.flags |= 32768, o.subtreeFlags = 0, o.deletions = null;
        else {
          un = 6, on = null;
          return;
        }
      } else if (d = Cy(d, a, Jn), d !== null) {
        on = d;
        return;
      }
      if (a = a.sibling, a !== null) {
        on = a;
        return;
      }
      on = a = o;
    } while (a !== null);
    un === 0 && (un = 5);
  }
  function Wr(o, a) {
    var d = Tt, g = $t.transition;
    try {
      $t.transition = null, Tt = 1, Hy(o, a, d);
    } finally {
      $t.transition = g, Tt = d;
    }
    return null;
  }
  function Hy(o, a, d) {
    do
      Xr();
    while (gr !== null);
    if (vt & 6)
      throw Error(l(327));
    var g = o.finishedWork, S = o.finishedLanes;
    if (g === null)
      return null;
    if (o.finishedWork = null, o.finishedLanes = 0, g === o.current)
      throw Error(l(177));
    o.callbackNode = null, o.callbackPriority = 0;
    var T = g.lanes | g.childLanes;
    if (hy(o, T), o === sn && (on = sn = null, _n = 0), !(g.subtreeFlags & 2064) && !(g.flags & 2064) || Ul || (Ul = !0, Dm(Du, function() {
      return Xr(), null;
    })), T = (g.flags & 15990) !== 0, g.subtreeFlags & 15990 || T) {
      T = $t.transition, $t.transition = null;
      var U = Tt;
      Tt = 1;
      var W = vt;
      vt |= 4, _h.current = null, Ny(o, g), Uy(o, g), j(o.containerInfo), o.current = g, Oy(g), dy(), vt = W, Tt = U, $t.transition = T;
    } else
      o.current = g;
    if (Ul && (Ul = !1, gr = o, Ol = S), T = o.pendingLanes, T === 0 && (mr = null), gy(g.stateNode), kn(o, pn()), a !== null)
      for (d = o.onRecoverableError, g = 0; g < a.length; g++)
        d(a[g]);
    if (Nl)
      throw Nl = !1, o = Mh, Mh = null, o;
    return Ol & 1 && o.tag !== 0 && Xr(), T = o.pendingLanes, T & 1 ? o === Eh ? Xo++ : (Xo = 0, Eh = o) : Xo = 0, Ci(), null;
  }
  function Xr() {
    if (gr !== null) {
      var o = ap(Ol), a = $t.transition, d = Tt;
      try {
        if ($t.transition = null, Tt = 16 > o ? 16 : o, gr === null)
          var g = !1;
        else {
          if (o = gr, gr = null, Ol = 0, vt & 6)
            throw Error(l(331));
          var S = vt;
          for (vt |= 4, Ie = o.current; Ie !== null; ) {
            var T = Ie, U = T.child;
            if (Ie.flags & 16) {
              var W = T.deletions;
              if (W !== null) {
                for (var re = 0; re < W.length; re++) {
                  var we = W[re];
                  for (Ie = we; Ie !== null; ) {
                    var Be = Ie;
                    switch (Be.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Vr(8, Be, T);
                    }
                    var lt = Be.child;
                    if (lt !== null)
                      lt.return = Be, Ie = lt;
                    else
                      for (; Ie !== null; ) {
                        Be = Ie;
                        var Ke = Be.sibling, Ut = Be.return;
                        if (dm(Be), Be === we) {
                          Ie = null;
                          break;
                        }
                        if (Ke !== null) {
                          Ke.return = Ut, Ie = Ke;
                          break;
                        }
                        Ie = Ut;
                      }
                  }
                }
                var qe = T.alternate;
                if (qe !== null) {
                  var Tn = qe.child;
                  if (Tn !== null) {
                    qe.child = null;
                    do {
                      var ci = Tn.sibling;
                      Tn.sibling = null, Tn = ci;
                    } while (Tn !== null);
                  }
                }
                Ie = T;
              }
            }
            if (T.subtreeFlags & 2064 && U !== null)
              U.return = T, Ie = U;
            else
              e:
                for (; Ie !== null; ) {
                  if (T = Ie, T.flags & 2048)
                    switch (T.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Vr(9, T, T.return);
                    }
                  var J = T.sibling;
                  if (J !== null) {
                    J.return = T.return, Ie = J;
                    break e;
                  }
                  Ie = T.return;
                }
          }
          var X = o.current;
          for (Ie = X; Ie !== null; ) {
            U = Ie;
            var ne = U.child;
            if (U.subtreeFlags & 2064 && ne !== null)
              ne.return = U, Ie = ne;
            else
              e:
                for (U = X; Ie !== null; ) {
                  if (W = Ie, W.flags & 2048)
                    try {
                      switch (W.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Ho(9, W);
                      }
                    } catch (Ye) {
                      Hn(W, W.return, Ye);
                    }
                  if (W === U) {
                    Ie = null;
                    break e;
                  }
                  var De = W.sibling;
                  if (De !== null) {
                    De.return = W.return, Ie = De;
                    break e;
                  }
                  Ie = W.return;
                }
          }
          if (vt = S, Ci(), Ai && typeof Ai.onPostCommitFiberRoot == "function")
            try {
              Ai.onPostCommitFiberRoot(el, o);
            } catch {
            }
          g = !0;
        }
        return g;
      } finally {
        Tt = d, $t.transition = a;
      }
    }
    return !1;
  }
  function Pm(o, a, d) {
    a = ih(d, a), a = Wp(o, a, 1), pr(o, a), a = Dn(), o = Bl(o, 1), o !== null && (Ro(o, 1, a), kn(o, a));
  }
  function Hn(o, a, d) {
    if (o.tag === 3)
      Pm(o, o, d);
    else
      for (; a !== null; ) {
        if (a.tag === 3) {
          Pm(a, o, d);
          break;
        } else if (a.tag === 1) {
          var g = a.stateNode;
          if (typeof a.type.getDerivedStateFromError == "function" || typeof g.componentDidCatch == "function" && (mr === null || !mr.has(g))) {
            o = ih(d, o), o = Xp(a, o, 1), pr(a, o), o = Dn(), a = Bl(a, 1), a !== null && (Ro(a, 1, o), kn(a, o));
            break;
          }
        }
        a = a.return;
      }
  }
  function Vy(o, a, d) {
    var g = o.pingCache;
    g !== null && g.delete(a), a = Dn(), o.pingedLanes |= o.suspendedLanes & d, sn === o && (_n & d) === d && (un === 4 || un === 3 && (_n & 130023424) === _n && 500 > pn() - xh ? Gr(o, 0) : yh |= d), kn(o, a);
  }
  function Lm(o, a) {
    a === 0 && (o.mode & 1 ? (a = Qa, Qa <<= 1, !(Qa & 130023424) && (Qa = 4194304)) : a = 1);
    var d = Dn();
    o = Bl(o, a), o !== null && (Ro(o, a, d), kn(o, d));
  }
  function Gy(o) {
    var a = o.memoizedState, d = 0;
    a !== null && (d = a.retryLane), Lm(o, d);
  }
  function Wy(o, a) {
    var d = 0;
    switch (o.tag) {
      case 13:
        var g = o.stateNode, S = o.memoizedState;
        S !== null && (d = S.retryLane);
        break;
      case 19:
        g = o.stateNode;
        break;
      default:
        throw Error(l(314));
    }
    g !== null && g.delete(a), Lm(o, d);
  }
  var Im;
  Im = function(o, a, d) {
    if (o !== null)
      if (o.memoizedProps !== a.pendingProps || rn.current)
        Zn = !0;
      else {
        if (!(o.lanes & d) && !(a.flags & 128))
          return Zn = !1, Ly(o, a, d);
        Zn = !!(o.flags & 131072);
      }
    else
      Zn = !1, Vt && a.flags & 1048576 && _p(a, cl, a.index);
    switch (a.lanes = 0, a.tag) {
      case 2:
        var g = a.type;
        o !== null && (o.alternate = null, a.alternate = null, a.flags |= 2), o = a.pendingProps;
        var S = jt(a, cn.current);
        Rs(a, d), S = Qu(null, a, g, o, S, d);
        var T = $u();
        return a.flags |= 1, typeof S == "object" && S !== null && typeof S.render == "function" && S.$$typeof === void 0 ? (a.tag = 1, a.memoizedState = null, a.updateQueue = null, Zt(g) ? (T = !0, bs(a)) : T = !1, a.memoizedState = S.state !== null && S.state !== void 0 ? S.state : null, Bu(a), S.updater = al, a.stateNode = S, S._reactInternals = a, Hu(a, g, o, d), a = oh(null, a, g, !0, T, d)) : (a.tag = 0, Vt && T && Vu(a), In(null, a, S, d), a = a.child), a;
      case 16:
        g = a.elementType;
        e: {
          switch (o !== null && (o.alternate = null, a.alternate = null, a.flags |= 2), o = a.pendingProps, S = g._init, g = S(g._payload), a.type = g, S = a.tag = Yy(g), o = mi(g, o), S) {
            case 0:
              a = sh(null, a, g, o, d);
              break e;
            case 1:
              a = nm(
                null,
                a,
                g,
                o,
                d
              );
              break e;
            case 11:
              a = Kp(null, a, g, o, d);
              break e;
            case 14:
              a = Qp(null, a, g, mi(g.type, o), d);
              break e;
          }
          throw Error(l(306, g, ""));
        }
        return a;
      case 0:
        return g = a.type, S = a.pendingProps, S = a.elementType === g ? S : mi(g, S), sh(o, a, g, S, d);
      case 1:
        return g = a.type, S = a.pendingProps, S = a.elementType === g ? S : mi(g, S), nm(o, a, g, S, d);
      case 3:
        e: {
          if (im(a), o === null)
            throw Error(l(387));
          g = a.pendingProps, T = a.memoizedState, S = T.element, hp(o, a), ol(a, g, null, d);
          var U = a.memoizedState;
          if (g = U.element, ve && T.isDehydrated)
            if (T = {
              element: g,
              isDehydrated: !1,
              cache: U.cache,
              transitions: U.transitions
            }, a.updateQueue.baseState = T, a.memoizedState = T, a.flags & 256) {
              S = Error(l(423)), a = rm(o, a, g, d, S);
              break e;
            } else if (g !== S) {
              S = Error(l(424)), a = rm(o, a, g, d, S);
              break e;
            } else
              for (ve && (jn = Tu(a.stateNode.containerInfo), qn = a, Vt = !0, gi = null, Co = !1), d = wp(a, null, g, d), a.child = d; d; )
                d.flags = d.flags & -3 | 4096, d = d.sibling;
          else {
            if (Ls(), g === S) {
              a = qi(o, a, d);
              break e;
            }
            In(o, a, g, d);
          }
          a = a.child;
        }
        return a;
      case 5:
        return Tp(a), o === null && Xu(a), g = a.type, S = a.pendingProps, T = o !== null ? o.memoizedProps : null, U = S.children, Ae(g, S) ? U = null : T !== null && Ae(g, T) && (a.flags |= 32), tm(o, a), In(o, a, U, d), a.child;
      case 6:
        return o === null && Xu(a), null;
      case 13:
        return sm(o, a, d);
      case 4:
        return qu(a, a.stateNode.containerInfo), g = a.pendingProps, o === null ? a.child = Is(a, null, g, d) : In(o, a, g, d), a.child;
      case 11:
        return g = a.type, S = a.pendingProps, S = a.elementType === g ? S : mi(g, S), Kp(o, a, g, S, d);
      case 7:
        return In(o, a, a.pendingProps, d), a.child;
      case 8:
        return In(o, a, a.pendingProps.children, d), a.child;
      case 12:
        return In(o, a, a.pendingProps.children, d), a.child;
      case 10:
        e: {
          if (g = a.type._context, S = a.pendingProps, T = a.memoizedProps, U = S.value, up(a, g, U), T !== null)
            if (Ri(T.value, U)) {
              if (T.children === S.children && !rn.current) {
                a = qi(o, a, d);
                break e;
              }
            } else
              for (T = a.child, T !== null && (T.return = a); T !== null; ) {
                var W = T.dependencies;
                if (W !== null) {
                  U = T.child;
                  for (var re = W.firstContext; re !== null; ) {
                    if (re.context === g) {
                      if (T.tag === 1) {
                        re = Gi(-1, d & -d), re.tag = 2;
                        var we = T.updateQueue;
                        if (we !== null) {
                          we = we.shared;
                          var Be = we.pending;
                          Be === null ? re.next = re : (re.next = Be.next, Be.next = re), we.pending = re;
                        }
                      }
                      T.lanes |= d, re = T.alternate, re !== null && (re.lanes |= d), zu(T.return, d, a), W.lanes |= d;
                      break;
                    }
                    re = re.next;
                  }
                } else if (T.tag === 10)
                  U = T.type === a.type ? null : T.child;
                else if (T.tag === 18) {
                  if (U = T.return, U === null)
                    throw Error(l(341));
                  U.lanes |= d, W = U.alternate, W !== null && (W.lanes |= d), zu(U, d, a), U = T.sibling;
                } else
                  U = T.child;
                if (U !== null)
                  U.return = T;
                else
                  for (U = T; U !== null; ) {
                    if (U === a) {
                      U = null;
                      break;
                    }
                    if (T = U.sibling, T !== null) {
                      T.return = U.return, U = T;
                      break;
                    }
                    U = U.return;
                  }
                T = U;
              }
          In(o, a, S.children, d), a = a.child;
        }
        return a;
      case 9:
        return S = a.type, g = a.pendingProps.children, Rs(a, d), S = ni(S), g = g(S), a.flags |= 1, In(o, a, g, d), a.child;
      case 14:
        return g = a.type, S = mi(g, a.pendingProps), S = mi(g.type, S), Qp(o, a, g, S, d);
      case 15:
        return $p(o, a, a.type, a.pendingProps, d);
      case 17:
        return g = a.type, S = a.pendingProps, S = a.elementType === g ? S : mi(g, S), o !== null && (o.alternate = null, a.alternate = null, a.flags |= 2), a.tag = 1, Zt(g) ? (o = !0, bs(a)) : o = !1, Rs(a, d), gp(a, g, S), Hu(a, g, S, d), oh(null, a, g, !0, o, d);
      case 19:
        return cm(o, a, d);
      case 22:
        return em(o, a, d);
    }
    throw Error(l(156, a.tag));
  };
  function Dm(o, a) {
    return Lu(o, a);
  }
  function Xy(o, a, d, g) {
    this.tag = o, this.key = d, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = a, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = g, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function li(o, a, d, g) {
    return new Xy(o, a, d, g);
  }
  function Rh(o) {
    return o = o.prototype, !(!o || !o.isReactComponent);
  }
  function Yy(o) {
    if (typeof o == "function")
      return Rh(o) ? 1 : 0;
    if (o != null) {
      if (o = o.$$typeof, o === E)
        return 11;
      if (o === w)
        return 14;
    }
    return 2;
  }
  function yr(o, a) {
    var d = o.alternate;
    return d === null ? (d = li(o.tag, a, o.key, o.mode), d.elementType = o.elementType, d.type = o.type, d.stateNode = o.stateNode, d.alternate = o, o.alternate = d) : (d.pendingProps = a, d.type = o.type, d.flags = 0, d.subtreeFlags = 0, d.deletions = null), d.flags = o.flags & 14680064, d.childLanes = o.childLanes, d.lanes = o.lanes, d.child = o.child, d.memoizedProps = o.memoizedProps, d.memoizedState = o.memoizedState, d.updateQueue = o.updateQueue, a = o.dependencies, d.dependencies = a === null ? null : { lanes: a.lanes, firstContext: a.firstContext }, d.sibling = o.sibling, d.index = o.index, d.ref = o.ref, d;
  }
  function Hl(o, a, d, g, S, T) {
    var U = 2;
    if (g = o, typeof o == "function")
      Rh(o) && (U = 1);
    else if (typeof o == "string")
      U = 5;
    else
      e:
        switch (o) {
          case f:
            return Yr(d.children, S, T, a);
          case p:
            U = 8, S |= 8;
            break;
          case m:
            return o = li(12, d, a, S | 2), o.elementType = m, o.lanes = T, o;
          case x:
            return o = li(13, d, a, S), o.elementType = x, o.lanes = T, o;
          case _:
            return o = li(19, d, a, S), o.elementType = _, o.lanes = T, o;
          case b:
            return Vl(d, S, T, a);
          default:
            if (typeof o == "object" && o !== null)
              switch (o.$$typeof) {
                case v:
                  U = 10;
                  break e;
                case y:
                  U = 9;
                  break e;
                case E:
                  U = 11;
                  break e;
                case w:
                  U = 14;
                  break e;
                case M:
                  U = 16, g = null;
                  break e;
              }
            throw Error(l(130, o == null ? o : typeof o, ""));
        }
    return a = li(U, d, a, S), a.elementType = o, a.type = g, a.lanes = T, a;
  }
  function Yr(o, a, d, g) {
    return o = li(7, o, g, a), o.lanes = d, o;
  }
  function Vl(o, a, d, g) {
    return o = li(22, o, g, a), o.elementType = b, o.lanes = d, o.stateNode = {}, o;
  }
  function Ch(o, a, d) {
    return o = li(6, o, null, a), o.lanes = d, o;
  }
  function Ph(o, a, d) {
    return a = li(4, o.children !== null ? o.children : [], o.key, a), a.lanes = d, a.stateNode = { containerInfo: o.containerInfo, pendingChildren: null, implementation: o.implementation }, a;
  }
  function qy(o, a, d, g, S) {
    this.tag = a, this.containerInfo = o, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = yt, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = Cu(0), this.expirationTimes = Cu(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Cu(0), this.identifierPrefix = g, this.onRecoverableError = S, ve && (this.mutableSourceEagerHydrationData = null);
  }
  function Nm(o, a, d, g, S, T, U, W, re) {
    return o = new qy(o, a, d, W, re), a === 1 ? (a = 1, T === !0 && (a |= 8)) : a = 0, T = li(3, null, null, a), o.current = T, T.stateNode = o, T.memoizedState = { element: g, isDehydrated: d, cache: null, transitions: null }, Bu(T), o;
  }
  function Um(o) {
    if (!o)
      return xn;
    o = o._reactInternals;
    e: {
      if (R(o) !== o || o.tag !== 1)
        throw Error(l(170));
      var a = o;
      do {
        switch (a.tag) {
          case 3:
            a = a.stateNode.context;
            break e;
          case 1:
            if (Zt(a.type)) {
              a = a.stateNode.__reactInternalMemoizedMergedChildContext;
              break e;
            }
        }
        a = a.return;
      } while (a !== null);
      throw Error(l(171));
    }
    if (o.tag === 1) {
      var d = o.type;
      if (Zt(d))
        return Ts(o, d, a);
    }
    return a;
  }
  function Om(o) {
    var a = o._reactInternals;
    if (a === void 0)
      throw typeof o.render == "function" ? Error(l(188)) : (o = Object.keys(o).join(","), Error(l(268, o)));
    return o = te(a), o === null ? null : o.stateNode;
  }
  function Fm(o, a) {
    if (o = o.memoizedState, o !== null && o.dehydrated !== null) {
      var d = o.retryLane;
      o.retryLane = d !== 0 && d < a ? d : a;
    }
  }
  function Lh(o, a) {
    Fm(o, a), (o = o.alternate) && Fm(o, a);
  }
  function jy(o) {
    return o = te(o), o === null ? null : o.stateNode;
  }
  function Zy() {
    return null;
  }
  return t.attemptContinuousHydration = function(o) {
    if (o.tag === 13) {
      var a = Dn();
      ai(o, 134217728, a), Lh(o, 134217728);
    }
  }, t.attemptHydrationAtCurrentPriority = function(o) {
    if (o.tag === 13) {
      var a = Dn(), d = vr(o);
      ai(o, d, a), Lh(o, d);
    }
  }, t.attemptSynchronousHydration = function(o) {
    switch (o.tag) {
      case 3:
        var a = o.stateNode;
        if (a.current.memoizedState.isDehydrated) {
          var d = Ao(a.pendingLanes);
          d !== 0 && (Pu(a, d | 1), kn(a, pn()), !(vt & 6) && (zs(), Ci()));
        }
        break;
      case 13:
        var g = Dn();
        Tm(function() {
          return ai(o, 1, g);
        }), Lh(o, 1);
    }
  }, t.batchedUpdates = function(o, a) {
    var d = vt;
    vt |= 1;
    try {
      return o(a);
    } finally {
      vt = d, vt === 0 && (zs(), tl && Ci());
    }
  }, t.createComponentSelector = function(o) {
    return { $$typeof: Al, value: o };
  }, t.createContainer = function(o, a, d, g, S, T, U) {
    return Nm(o, a, !1, null, d, g, S, T, U);
  }, t.createHasPseudoClassSelector = function(o) {
    return { $$typeof: Rl, value: o };
  }, t.createHydrationContainer = function(o, a, d, g, S, T, U, W, re) {
    return o = Nm(d, g, !0, o, S, T, U, W, re), o.context = Um(null), d = o.current, g = Dn(), S = vr(d), T = Gi(g, S), T.callback = a ?? null, pr(d, T), o.current.lanes = S, Ro(o, S, g), kn(o, g), o;
  }, t.createPortal = function(o, a, d) {
    var g = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return { $$typeof: h, key: g == null ? null : "" + g, children: o, containerInfo: a, implementation: d };
  }, t.createRoleSelector = function(o) {
    return { $$typeof: Cl, value: o };
  }, t.createTestNameSelector = function(o) {
    return { $$typeof: Pl, value: o };
  }, t.createTextSelector = function(o) {
    return { $$typeof: Ll, value: o };
  }, t.deferredUpdates = function(o) {
    var a = Tt, d = $t.transition;
    try {
      return $t.transition = null, Tt = 16, o();
    } finally {
      Tt = a, $t.transition = d;
    }
  }, t.discreteUpdates = function(o, a, d, g, S) {
    var T = Tt, U = $t.transition;
    try {
      return $t.transition = null, Tt = 1, o(a, d, g, S);
    } finally {
      Tt = T, $t.transition = U, vt === 0 && zs();
    }
  }, t.findAllNodes = vh, t.findBoundingRects = function(o, a) {
    if (!$e)
      throw Error(l(363));
    a = vh(o, a), o = [];
    for (var d = 0; d < a.length; d++)
      o.push(Dt(a[d]));
    for (a = o.length - 1; 0 < a; a--) {
      d = o[a];
      for (var g = d.x, S = g + d.width, T = d.y, U = T + d.height, W = a - 1; 0 <= W; W--)
        if (a !== W) {
          var re = o[W], we = re.x, Be = we + re.width, lt = re.y, Ke = lt + re.height;
          if (g >= we && T >= lt && S <= Be && U <= Ke) {
            o.splice(a, 1);
            break;
          } else if (g !== we || d.width !== re.width || Ke < T || lt > U) {
            if (!(T !== lt || d.height !== re.height || Be < g || we > S)) {
              we > g && (re.width += we - g, re.x = g), Be < S && (re.width = S - we), o.splice(a, 1);
              break;
            }
          } else {
            lt > T && (re.height += lt - T, re.y = T), Ke < U && (re.height = U - lt), o.splice(a, 1);
            break;
          }
        }
    }
    return o;
  }, t.findHostInstance = Om, t.findHostInstanceWithNoPortals = function(o) {
    return o = H(o), o = o !== null ? G(o) : null, o === null ? null : o.stateNode;
  }, t.findHostInstanceWithWarning = function(o) {
    return Om(o);
  }, t.flushControlled = function(o) {
    var a = vt;
    vt |= 1;
    var d = $t.transition, g = Tt;
    try {
      $t.transition = null, Tt = 1, o();
    } finally {
      Tt = g, $t.transition = d, vt = a, vt === 0 && (zs(), Ci());
    }
  }, t.flushPassiveEffects = Xr, t.flushSync = Tm, t.focusWithin = function(o, a) {
    if (!$e)
      throw Error(l(363));
    for (o = ph(o), a = Mm(o, a), a = Array.from(a), o = 0; o < a.length; ) {
      var d = a[o++];
      if (!P(d)) {
        if (d.tag === 5 && Se(d.stateNode))
          return !0;
        for (d = d.child; d !== null; )
          a.push(d), d = d.sibling;
      }
    }
    return !1;
  }, t.getCurrentUpdatePriority = function() {
    return Tt;
  }, t.getFindAllNodesFailureDescription = function(o, a) {
    if (!$e)
      throw Error(l(363));
    var d = 0, g = [];
    o = [ph(o), 0];
    for (var S = 0; S < o.length; ) {
      var T = o[S++], U = o[S++], W = a[U];
      if ((T.tag !== 5 || !P(T)) && (mh(T, W) && (g.push(gh(W)), U++, U > d && (d = U)), U < a.length))
        for (T = T.child; T !== null; )
          o.push(T, U), T = T.sibling;
    }
    if (d < a.length) {
      for (o = []; d < a.length; d++)
        o.push(gh(a[d]));
      return `findAllNodes was able to match part of the selector:
  ` + (g.join(" > ") + `

No matching component was found for:
  `) + o.join(" > ");
    }
    return null;
  }, t.getPublicRootInstance = function(o) {
    if (o = o.current, !o.child)
      return null;
    switch (o.child.tag) {
      case 5:
        return oe(o.child.stateNode);
      default:
        return o.child.stateNode;
    }
  }, t.injectIntoDevTools = function(o) {
    if (o = { bundleType: o.bundleType, version: o.version, rendererPackageName: o.rendererPackageName, rendererConfig: o.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: c.ReactCurrentDispatcher, findHostInstanceByFiber: jy, findFiberByHostInstance: o.findFiberByHostInstance || Zy, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.0.0-fc46dba67-20220329" }, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
      o = !1;
    else {
      var a = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (a.isDisabled || !a.supportsFiber)
        o = !0;
      else {
        try {
          el = a.inject(o), Ai = a;
        } catch {
        }
        o = !!a.checkDCE;
      }
    }
    return o;
  }, t.isAlreadyRendering = function() {
    return !1;
  }, t.observeVisibleRects = function(o, a, d, g) {
    if (!$e)
      throw Error(l(363));
    o = vh(o, a);
    var S = ge(o, d, g).disconnect;
    return { disconnect: function() {
      S();
    } };
  }, t.registerMutableSourceForHydration = function(o, a) {
    var d = a._getVersion;
    d = d(a._source), o.mutableSourceEagerHydrationData == null ? o.mutableSourceEagerHydrationData = [a, d] : o.mutableSourceEagerHydrationData.push(a, d);
  }, t.runWithPriority = function(o, a) {
    var d = Tt;
    try {
      return Tt = o, a();
    } finally {
      Tt = d;
    }
  }, t.shouldError = function() {
    return null;
  }, t.shouldSuspend = function() {
    return !1;
  }, t.updateContainer = function(o, a, d, g) {
    var S = a.current, T = Dn(), U = vr(S);
    return d = Um(d), a.context === null ? a.context = d : a.pendingContext = d, a = Gi(T, U), a.payload = { element: o }, g = g === void 0 ? null : g, g !== null && (a.callback = g), pr(S, a), o = ai(S, U, T), o !== null && sl(o, S, U), U;
  }, t;
};
H_.exports = Wb;
var Xb = H_.exports;
const Yb = /* @__PURE__ */ ex(Xb), np = {}, W_ = (r) => void Object.assign(np, r);
function qb(r, e) {
  function t(f, {
    args: p = [],
    attach: m,
    ...v
  }, y) {
    let E = `${f[0].toUpperCase()}${f.slice(1)}`, x;
    if (f === "primitive") {
      if (v.object === void 0)
        throw new Error("R3F: Primitives without 'object' are invalid!");
      const _ = v.object;
      x = co(_, {
        type: f,
        root: y,
        attach: m,
        primitive: !0
      });
    } else {
      const _ = np[E];
      if (!_)
        throw new Error(`R3F: ${E} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
      if (!Array.isArray(p))
        throw new Error("R3F: The args prop must be an array!");
      x = co(new _(...p), {
        type: f,
        root: y,
        attach: m,
        // Save args in case we need to reconstruct later for HMR
        memoizedProps: {
          args: p
        }
      });
    }
    return x.__r3f.attach === void 0 && (x.isBufferGeometry ? x.__r3f.attach = "geometry" : x.isMaterial && (x.__r3f.attach = "material")), E !== "inject" && pf(x, v), x;
  }
  function n(f, p) {
    let m = !1;
    if (p) {
      var v, y;
      (v = p.__r3f) != null && v.attach ? df(f, p, p.__r3f.attach) : p.isObject3D && f.isObject3D && (f.add(p), m = !0), m || (y = f.__r3f) == null || y.objects.push(p), p.__r3f || co(p, {}), p.__r3f.parent = f, hd(p), uo(p);
    }
  }
  function i(f, p, m) {
    let v = !1;
    if (p) {
      var y, E;
      if ((y = p.__r3f) != null && y.attach)
        df(f, p, p.__r3f.attach);
      else if (p.isObject3D && f.isObject3D) {
        p.parent = f, p.dispatchEvent({
          type: "added"
        }), f.dispatchEvent({
          type: "childadded",
          child: p
        });
        const x = f.children.filter((w) => w !== p), _ = x.indexOf(m);
        f.children = [...x.slice(0, _), p, ...x.slice(_)], v = !0;
      }
      v || (E = f.__r3f) == null || E.objects.push(p), p.__r3f || co(p, {}), p.__r3f.parent = f, hd(p), uo(p);
    }
  }
  function s(f, p, m = !1) {
    f && [...f].forEach((v) => l(p, v, m));
  }
  function l(f, p, m) {
    if (p) {
      var v, y, E;
      if (p.__r3f && (p.__r3f.parent = null), (v = f.__r3f) != null && v.objects && (f.__r3f.objects = f.__r3f.objects.filter((b) => b !== p)), (y = p.__r3f) != null && y.attach)
        g0(f, p, p.__r3f.attach);
      else if (p.isObject3D && f.isObject3D) {
        var x;
        f.remove(p), (x = p.__r3f) != null && x.root && eA(Vc(p), p);
      }
      const w = (E = p.__r3f) == null ? void 0 : E.primitive, M = !w && (m === void 0 ? p.dispose !== null : m);
      if (!w) {
        var _;
        s((_ = p.__r3f) == null ? void 0 : _.objects, p, M), s(p.children, p, M);
      }
      if (delete p.__r3f, M && p.dispose && p.type !== "Scene") {
        const b = () => {
          try {
            p.dispose();
          } catch {
          }
        };
        typeof IS_REACT_ACT_ENVIRONMENT > "u" ? cd.unstable_scheduleCallback(cd.unstable_IdlePriority, b) : b();
      }
      uo(f);
    }
  }
  function c(f, p, m, v) {
    var y;
    const E = (y = f.__r3f) == null ? void 0 : y.parent;
    if (!E)
      return;
    const x = t(p, m, f.__r3f.root);
    if (f.children) {
      for (const _ of f.children)
        _.__r3f && n(x, _);
      f.children = f.children.filter((_) => !_.__r3f);
    }
    f.__r3f.objects.forEach((_) => n(x, _)), f.__r3f.objects = [], f.__r3f.autoRemovedBeforeAppend || l(E, f), x.parent && (x.__r3f.autoRemovedBeforeAppend = !0), n(E, x), x.raycast && x.__r3f.eventCount && Vc(x).getState().internal.interaction.push(x), [v, v.alternate].forEach((_) => {
      _ !== null && (_.stateNode = x, _.ref && (typeof _.ref == "function" ? _.ref(x) : _.ref.current = x));
    });
  }
  const u = () => {
  };
  return {
    reconciler: Yb({
      createInstance: t,
      removeChild: l,
      appendChild: n,
      appendInitialChild: n,
      insertBefore: i,
      supportsMutation: !0,
      isPrimaryRenderer: !1,
      supportsPersistence: !1,
      supportsHydration: !1,
      noTimeout: -1,
      appendChildToContainer: (f, p) => {
        if (!p)
          return;
        const m = f.getState().scene;
        m.__r3f && (m.__r3f.root = f, n(m, p));
      },
      removeChildFromContainer: (f, p) => {
        p && l(f.getState().scene, p);
      },
      insertInContainerBefore: (f, p, m) => {
        if (!p || !m)
          return;
        const v = f.getState().scene;
        v.__r3f && i(v, p, m);
      },
      getRootHostContext: () => null,
      getChildHostContext: (f) => f,
      finalizeInitialChildren(f) {
        var p;
        return !!((p = f?.__r3f) != null ? p : {}).handlers;
      },
      prepareUpdate(f, p, m, v) {
        var y;
        if (((y = f?.__r3f) != null ? y : {}).primitive && v.object && v.object !== f)
          return [!0];
        {
          const {
            args: x = [],
            children: _,
            ...w
          } = v, {
            args: M = [],
            children: b,
            ...A
          } = m;
          if (!Array.isArray(x))
            throw new Error("R3F: the args prop must be an array!");
          if (x.some((I, z) => I !== M[z]))
            return [!0];
          const C = K_(f, w, A, !0);
          return C.changes.length ? [!1, C] : null;
        }
      },
      commitUpdate(f, [p, m], v, y, E, x) {
        p ? c(f, v, E, x) : pf(f, m);
      },
      commitMount(f, p, m, v) {
        var y;
        const E = (y = f.__r3f) != null ? y : {};
        f.raycast && E.handlers && E.eventCount && Vc(f).getState().internal.interaction.push(f);
      },
      getPublicInstance: (f) => f,
      prepareForCommit: () => null,
      preparePortalMount: (f) => co(f.getState().scene),
      resetAfterCommit: () => {
      },
      shouldSetTextContent: () => !1,
      clearContainer: () => !1,
      hideInstance(f) {
        var p;
        const {
          attach: m,
          parent: v
        } = (p = f.__r3f) != null ? p : {};
        m && v && g0(v, f, m), f.isObject3D && (f.visible = !1), uo(f);
      },
      unhideInstance(f, p) {
        var m;
        const {
          attach: v,
          parent: y
        } = (m = f.__r3f) != null ? m : {};
        v && y && df(y, f, v), (f.isObject3D && p.visible == null || p.visible) && (f.visible = !0), uo(f);
      },
      createTextInstance: u,
      hideTextInstance: u,
      unhideTextInstance: u,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874
      // @ts-expect-error
      getCurrentEventPriority: () => e ? e() : go.DefaultEventPriority,
      beforeActiveInstanceBlur: () => {
      },
      afterActiveInstanceBlur: () => {
      },
      detachDeletedInstance: () => {
      },
      now: typeof performance < "u" && kt.fun(performance.now) ? performance.now : kt.fun(Date.now) ? Date.now : () => 0,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503
      scheduleTimeout: kt.fun(setTimeout) ? setTimeout : void 0,
      cancelTimeout: kt.fun(clearTimeout) ? clearTimeout : void 0
    }),
    applyProps: pf
  };
}
var f0, d0;
const ff = (r) => "colorSpace" in r || "outputColorSpace" in r, X_ = () => {
  var r;
  return (r = np.ColorManagement) != null ? r : null;
}, Y_ = (r) => r && r.isOrthographicCamera, jb = (r) => r && r.hasOwnProperty("current"), Xa = typeof window < "u" && ((f0 = window.document) != null && f0.createElement || ((d0 = window.navigator) == null ? void 0 : d0.product) === "ReactNative") ? nt.useLayoutEffect : nt.useEffect;
function q_(r) {
  const e = nt.useRef(r);
  return Xa(() => void (e.current = r), [r]), e;
}
function Zb({
  set: r
}) {
  return Xa(() => (r(new Promise(() => null)), () => r(!1)), [r]), null;
}
class j_ extends nt.Component {
  constructor(...e) {
    super(...e), this.state = {
      error: !1
    };
  }
  componentDidCatch(e) {
    this.props.set(e);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}
j_.getDerivedStateFromError = () => ({
  error: !0
});
const Z_ = "__default", p0 = /* @__PURE__ */ new Map(), Jb = (r) => r && !!r.memoized && !!r.changes;
function J_(r) {
  var e;
  const t = typeof window < "u" ? (e = window.devicePixelRatio) != null ? e : 2 : 1;
  return Array.isArray(r) ? Math.min(Math.max(r[0], t), r[1]) : r;
}
const na = (r) => {
  var e;
  return (e = r.__r3f) == null ? void 0 : e.root.getState();
};
function Vc(r) {
  let e = r.__r3f.root;
  for (; e.getState().previousRoot; )
    e = e.getState().previousRoot;
  return e;
}
const kt = {
  obj: (r) => r === Object(r) && !kt.arr(r) && typeof r != "function",
  fun: (r) => typeof r == "function",
  str: (r) => typeof r == "string",
  num: (r) => typeof r == "number",
  boo: (r) => typeof r == "boolean",
  und: (r) => r === void 0,
  arr: (r) => Array.isArray(r),
  equ(r, e, {
    arrays: t = "shallow",
    objects: n = "reference",
    strict: i = !0
  } = {}) {
    if (typeof r != typeof e || !!r != !!e)
      return !1;
    if (kt.str(r) || kt.num(r) || kt.boo(r))
      return r === e;
    const s = kt.obj(r);
    if (s && n === "reference")
      return r === e;
    const l = kt.arr(r);
    if (l && t === "reference")
      return r === e;
    if ((l || s) && r === e)
      return !0;
    let c;
    for (c in r)
      if (!(c in e))
        return !1;
    if (s && t === "shallow" && n === "shallow") {
      for (c in i ? e : r)
        if (!kt.equ(r[c], e[c], {
          strict: i,
          objects: "reference"
        }))
          return !1;
    } else
      for (c in i ? e : r)
        if (r[c] !== e[c])
          return !1;
    if (kt.und(c)) {
      if (l && r.length === 0 && e.length === 0 || s && Object.keys(r).length === 0 && Object.keys(e).length === 0)
        return !0;
      if (r !== e)
        return !1;
    }
    return !0;
  }
};
function Kb(r) {
  r.dispose && r.type !== "Scene" && r.dispose();
  for (const e in r)
    e.dispose == null || e.dispose(), delete r[e];
}
function co(r, e) {
  const t = r;
  return t.__r3f = {
    type: "",
    root: null,
    previousAttach: null,
    memoizedProps: {},
    eventCount: 0,
    handlers: {},
    objects: [],
    parent: null,
    ...e
  }, r;
}
function ud(r, e) {
  let t = r;
  if (e.includes("-")) {
    const n = e.split("-"), i = n.pop();
    return t = n.reduce((s, l) => s[l], r), {
      target: t,
      key: i
    };
  } else
    return {
      target: t,
      key: e
    };
}
const m0 = /-\d+$/;
function df(r, e, t) {
  if (kt.str(t)) {
    if (m0.test(t)) {
      const s = t.replace(m0, ""), {
        target: l,
        key: c
      } = ud(r, s);
      Array.isArray(l[c]) || (l[c] = []);
    }
    const {
      target: n,
      key: i
    } = ud(r, t);
    e.__r3f.previousAttach = n[i], n[i] = e;
  } else
    e.__r3f.previousAttach = t(r, e);
}
function g0(r, e, t) {
  var n, i;
  if (kt.str(t)) {
    const {
      target: s,
      key: l
    } = ud(r, t), c = e.__r3f.previousAttach;
    c === void 0 ? delete s[l] : s[l] = c;
  } else
    (n = e.__r3f) == null || n.previousAttach == null || n.previousAttach(r, e);
  (i = e.__r3f) == null || delete i.previousAttach;
}
function K_(r, {
  children: e,
  key: t,
  ref: n,
  ...i
}, {
  children: s,
  key: l,
  ref: c,
  ...u
} = {}, h = !1) {
  const f = r.__r3f, p = Object.entries(i), m = [];
  if (h) {
    const y = Object.keys(u);
    for (let E = 0; E < y.length; E++)
      i.hasOwnProperty(y[E]) || p.unshift([y[E], Z_ + "remove"]);
  }
  p.forEach(([y, E]) => {
    var x;
    if ((x = r.__r3f) != null && x.primitive && y === "object" || kt.equ(E, u[y]))
      return;
    if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(y))
      return m.push([y, E, !0, []]);
    let _ = [];
    y.includes("-") && (_ = y.split("-")), m.push([y, E, !1, _]);
    for (const w in i) {
      const M = i[w];
      w.startsWith(`${y}-`) && m.push([w, M, !1, w.split("-")]);
    }
  });
  const v = {
    ...i
  };
  return f != null && f.memoizedProps && f != null && f.memoizedProps.args && (v.args = f.memoizedProps.args), f != null && f.memoizedProps && f != null && f.memoizedProps.attach && (v.attach = f.memoizedProps.attach), {
    memoized: v,
    changes: m
  };
}
const Qb = typeof process < "u" && !1;
function pf(r, e) {
  var t;
  const n = r.__r3f, i = n?.root, s = i == null || i.getState == null ? void 0 : i.getState(), {
    memoized: l,
    changes: c
  } = Jb(e) ? e : K_(r, e), u = n?.eventCount;
  r.__r3f && (r.__r3f.memoizedProps = l);
  for (let m = 0; m < c.length; m++) {
    let [v, y, E, x] = c[m];
    if (ff(r)) {
      const b = "srgb", A = "srgb-linear";
      v === "encoding" ? (v = "colorSpace", y = y === 3001 ? b : A) : v === "outputEncoding" && (v = "outputColorSpace", y = y === 3001 ? b : A);
    }
    let _ = r, w = _[v];
    if (x.length && (w = x.reduce((M, b) => M[b], r), !(w && w.set))) {
      const [M, ...b] = x.reverse();
      _ = b.reverse().reduce((A, C) => A[C], r), v = M;
    }
    if (y === Z_ + "remove")
      if (_.constructor) {
        let M = p0.get(_.constructor);
        M || (M = new _.constructor(), p0.set(_.constructor, M)), y = M[v];
      } else
        y = 0;
    if (E && n)
      y ? n.handlers[v] = y : delete n.handlers[v], n.eventCount = Object.keys(n.handlers).length;
    else if (w && w.set && (w.copy || w instanceof fs)) {
      if (Array.isArray(y))
        w.fromArray ? w.fromArray(y) : w.set(...y);
      else if (w.copy && y && y.constructor && // Some environments may break strict identity checks by duplicating versions of three.js.
      // Loosen to unminified names, ignoring descendents.
      // https://github.com/pmndrs/react-three-fiber/issues/2856
      // TODO: fix upstream and remove in v9
      (Qb ? w.constructor.name === y.constructor.name : w.constructor === y.constructor))
        w.copy(y);
      else if (y !== void 0) {
        var h;
        const M = (h = w) == null ? void 0 : h.isColor;
        !M && w.setScalar ? w.setScalar(y) : w instanceof fs && y instanceof fs ? w.mask = y.mask : w.set(y), !X_() && s && !s.linear && M && w.convertSRGBToLinear();
      }
    } else {
      var f;
      if (_[v] = y, (f = _[v]) != null && f.isTexture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
      _[v].format === Cn && _[v].type === Fi && s) {
        const M = _[v];
        ff(M) && ff(s.gl) ? M.colorSpace = s.gl.outputColorSpace : M.encoding = s.gl.outputEncoding;
      }
    }
    uo(r);
  }
  if (n && n.parent && r.raycast && u !== n.eventCount) {
    const m = Vc(r).getState().internal, v = m.interaction.indexOf(r);
    v > -1 && m.interaction.splice(v, 1), n.eventCount && m.interaction.push(r);
  }
  return !(c.length === 1 && c[0][0] === "onUpdate") && c.length && (t = r.__r3f) != null && t.parent && hd(r), r;
}
function uo(r) {
  var e, t;
  const n = (e = r.__r3f) == null || (t = e.root) == null || t.getState == null ? void 0 : t.getState();
  n && n.internal.frames === 0 && n.invalidate();
}
function hd(r) {
  r.onUpdate == null || r.onUpdate(r);
}
function Q_(r, e) {
  r.manual || (Y_(r) ? (r.left = e.width / -2, r.right = e.width / 2, r.top = e.height / 2, r.bottom = e.height / -2) : r.aspect = e.width / e.height, r.updateProjectionMatrix(), r.updateMatrixWorld());
}
function Lc(r) {
  return (r.eventObject || r.object).uuid + "/" + r.index + r.instanceId;
}
function $b() {
  var r;
  const e = typeof self < "u" && self || typeof window < "u" && window;
  if (!e)
    return go.DefaultEventPriority;
  switch ((r = e.event) == null ? void 0 : r.type) {
    case "click":
    case "contextmenu":
    case "dblclick":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
      return go.DiscreteEventPriority;
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "pointerenter":
    case "pointerleave":
    case "wheel":
      return go.ContinuousEventPriority;
    default:
      return go.DefaultEventPriority;
  }
}
function $_(r, e, t, n) {
  const i = t.get(e);
  i && (t.delete(e), t.size === 0 && (r.delete(n), i.target.releasePointerCapture(n)));
}
function eA(r, e) {
  const {
    internal: t
  } = r.getState();
  t.interaction = t.interaction.filter((n) => n !== e), t.initialHits = t.initialHits.filter((n) => n !== e), t.hovered.forEach((n, i) => {
    (n.eventObject === e || n.object === e) && t.hovered.delete(i);
  }), t.capturedMap.forEach((n, i) => {
    $_(t.capturedMap, e, n, i);
  });
}
function tA(r) {
  function e(u) {
    const {
      internal: h
    } = r.getState(), f = u.offsetX - h.initialClick[0], p = u.offsetY - h.initialClick[1];
    return Math.round(Math.sqrt(f * f + p * p));
  }
  function t(u) {
    return u.filter((h) => ["Move", "Over", "Enter", "Out", "Leave"].some((f) => {
      var p;
      return (p = h.__r3f) == null ? void 0 : p.handlers["onPointer" + f];
    }));
  }
  function n(u, h) {
    const f = r.getState(), p = /* @__PURE__ */ new Set(), m = [], v = h ? h(f.internal.interaction) : f.internal.interaction;
    for (let _ = 0; _ < v.length; _++) {
      const w = na(v[_]);
      w && (w.raycaster.camera = void 0);
    }
    f.previousRoot || f.events.compute == null || f.events.compute(u, f);
    function y(_) {
      const w = na(_);
      if (!w || !w.events.enabled || w.raycaster.camera === null)
        return [];
      if (w.raycaster.camera === void 0) {
        var M;
        w.events.compute == null || w.events.compute(u, w, (M = w.previousRoot) == null ? void 0 : M.getState()), w.raycaster.camera === void 0 && (w.raycaster.camera = null);
      }
      return w.raycaster.camera ? w.raycaster.intersectObject(_, !0) : [];
    }
    let E = v.flatMap(y).sort((_, w) => {
      const M = na(_.object), b = na(w.object);
      return !M || !b ? _.distance - w.distance : b.events.priority - M.events.priority || _.distance - w.distance;
    }).filter((_) => {
      const w = Lc(_);
      return p.has(w) ? !1 : (p.add(w), !0);
    });
    f.events.filter && (E = f.events.filter(E, f));
    for (const _ of E) {
      let w = _.object;
      for (; w; ) {
        var x;
        (x = w.__r3f) != null && x.eventCount && m.push({
          ..._,
          eventObject: w
        }), w = w.parent;
      }
    }
    if ("pointerId" in u && f.internal.capturedMap.has(u.pointerId))
      for (let _ of f.internal.capturedMap.get(u.pointerId).values())
        p.has(Lc(_.intersection)) || m.push(_.intersection);
    return m;
  }
  function i(u, h, f, p) {
    const m = r.getState();
    if (u.length) {
      const v = {
        stopped: !1
      };
      for (const y of u) {
        const E = na(y.object) || m, {
          raycaster: x,
          pointer: _,
          camera: w,
          internal: M
        } = E, b = new D(_.x, _.y, 0).unproject(w), A = (L) => {
          var H, te;
          return (H = (te = M.capturedMap.get(L)) == null ? void 0 : te.has(y.eventObject)) != null ? H : !1;
        }, C = (L) => {
          const H = {
            intersection: y,
            target: h.target
          };
          M.capturedMap.has(L) ? M.capturedMap.get(L).set(y.eventObject, H) : M.capturedMap.set(L, /* @__PURE__ */ new Map([[y.eventObject, H]])), h.target.setPointerCapture(L);
        }, I = (L) => {
          const H = M.capturedMap.get(L);
          H && $_(M.capturedMap, y.eventObject, H, L);
        };
        let z = {};
        for (let L in h) {
          let H = h[L];
          typeof H != "function" && (z[L] = H);
        }
        let R = {
          ...y,
          ...z,
          pointer: _,
          intersections: u,
          stopped: v.stopped,
          delta: f,
          unprojectedPoint: b,
          ray: x.ray,
          camera: w,
          // Hijack stopPropagation, which just sets a flag
          stopPropagation() {
            const L = "pointerId" in h && M.capturedMap.get(h.pointerId);
            if (
              // ...if this pointer hasn't been captured
              (!L || // ... or if the hit object is capturing the pointer
              L.has(y.eventObject)) && (R.stopped = v.stopped = !0, M.hovered.size && Array.from(M.hovered.values()).find((H) => H.eventObject === y.eventObject))
            ) {
              const H = u.slice(0, u.indexOf(y));
              s([...H, y]);
            }
          },
          // there should be a distinction between target and currentTarget
          target: {
            hasPointerCapture: A,
            setPointerCapture: C,
            releasePointerCapture: I
          },
          currentTarget: {
            hasPointerCapture: A,
            setPointerCapture: C,
            releasePointerCapture: I
          },
          nativeEvent: h
        };
        if (p(R), v.stopped === !0)
          break;
      }
    }
    return u;
  }
  function s(u) {
    const {
      internal: h
    } = r.getState();
    for (const f of h.hovered.values())
      if (!u.length || !u.find((p) => p.object === f.object && p.index === f.index && p.instanceId === f.instanceId)) {
        const m = f.eventObject.__r3f, v = m?.handlers;
        if (h.hovered.delete(Lc(f)), m != null && m.eventCount) {
          const y = {
            ...f,
            intersections: u
          };
          v.onPointerOut == null || v.onPointerOut(y), v.onPointerLeave == null || v.onPointerLeave(y);
        }
      }
  }
  function l(u, h) {
    for (let f = 0; f < h.length; f++) {
      const p = h[f].__r3f;
      p == null || p.handlers.onPointerMissed == null || p.handlers.onPointerMissed(u);
    }
  }
  function c(u) {
    switch (u) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => s([]);
      case "onLostPointerCapture":
        return (h) => {
          const {
            internal: f
          } = r.getState();
          "pointerId" in h && f.capturedMap.has(h.pointerId) && requestAnimationFrame(() => {
            f.capturedMap.has(h.pointerId) && (f.capturedMap.delete(h.pointerId), s([]));
          });
        };
    }
    return function(f) {
      const {
        onPointerMissed: p,
        internal: m
      } = r.getState();
      m.lastEvent.current = f;
      const v = u === "onPointerMove", y = u === "onClick" || u === "onContextMenu" || u === "onDoubleClick", x = n(f, v ? t : void 0), _ = y ? e(f) : 0;
      u === "onPointerDown" && (m.initialClick = [f.offsetX, f.offsetY], m.initialHits = x.map((M) => M.eventObject)), y && !x.length && _ <= 2 && (l(f, m.interaction), p && p(f)), v && s(x);
      function w(M) {
        const b = M.eventObject, A = b.__r3f, C = A?.handlers;
        if (A != null && A.eventCount)
          if (v) {
            if (C.onPointerOver || C.onPointerEnter || C.onPointerOut || C.onPointerLeave) {
              const I = Lc(M), z = m.hovered.get(I);
              z ? z.stopped && M.stopPropagation() : (m.hovered.set(I, M), C.onPointerOver == null || C.onPointerOver(M), C.onPointerEnter == null || C.onPointerEnter(M));
            }
            C.onPointerMove == null || C.onPointerMove(M);
          } else {
            const I = C[u];
            I ? (!y || m.initialHits.includes(b)) && (l(f, m.interaction.filter((z) => !m.initialHits.includes(z))), I(M)) : y && m.initialHits.includes(b) && l(f, m.interaction.filter((z) => !m.initialHits.includes(z)));
          }
      }
      i(x, f, _, w);
    };
  }
  return {
    handlePointer: c
  };
}
const nA = ["set", "get", "setSize", "setFrameloop", "setDpr", "events", "invalidate", "advance", "size", "viewport"], ey = (r) => !!(r != null && r.render), ip = /* @__PURE__ */ nt.createContext(null), iA = (r, e) => {
  const t = k_((c, u) => {
    const h = new D(), f = new D(), p = new D();
    function m(_ = u().camera, w = f, M = u().size) {
      const {
        width: b,
        height: A,
        top: C,
        left: I
      } = M, z = b / A;
      w.isVector3 ? p.copy(w) : p.set(...w);
      const R = _.getWorldPosition(h).distanceTo(p);
      if (Y_(_))
        return {
          width: b / _.zoom,
          height: A / _.zoom,
          top: C,
          left: I,
          factor: 1,
          distance: R,
          aspect: z
        };
      {
        const L = _.fov * Math.PI / 180, H = 2 * Math.tan(L / 2) * R, te = H * (b / A);
        return {
          width: te,
          height: H,
          top: C,
          left: I,
          factor: b / te,
          distance: R,
          aspect: z
        };
      }
    }
    let v;
    const y = (_) => c((w) => ({
      performance: {
        ...w.performance,
        current: _
      }
    })), E = new ue();
    return {
      set: c,
      get: u,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      xr: null,
      scene: null,
      invalidate: (_ = 1) => r(u(), _),
      advance: (_, w) => e(_, w, u()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new Kd(),
      pointer: E,
      mouse: E,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const _ = u();
          v && clearTimeout(v), _.performance.current !== _.performance.min && y(_.performance.min), v = setTimeout(() => y(u().performance.max), _.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        updateStyle: !1
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: m
      },
      setEvents: (_) => c((w) => ({
        ...w,
        events: {
          ...w.events,
          ..._
        }
      })),
      setSize: (_, w, M, b, A) => {
        const C = u().camera, I = {
          width: _,
          height: w,
          top: b || 0,
          left: A || 0,
          updateStyle: M
        };
        c((z) => ({
          size: I,
          viewport: {
            ...z.viewport,
            ...m(C, f, I)
          }
        }));
      },
      setDpr: (_) => c((w) => {
        const M = J_(_);
        return {
          viewport: {
            ...w.viewport,
            dpr: M,
            initialDpr: w.viewport.initialDpr || M
          }
        };
      }),
      setFrameloop: (_ = "always") => {
        const w = u().clock;
        w.stop(), w.elapsedTime = 0, _ !== "never" && (w.start(), w.elapsedTime = 0), c(() => ({
          frameloop: _
        }));
      },
      previousRoot: void 0,
      internal: {
        active: !1,
        priority: 0,
        frames: 0,
        lastEvent: /* @__PURE__ */ nt.createRef(),
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        subscribe: (_, w, M) => {
          const b = u().internal;
          return b.priority = b.priority + (w > 0 ? 1 : 0), b.subscribers.push({
            ref: _,
            priority: w,
            store: M
          }), b.subscribers = b.subscribers.sort((A, C) => A.priority - C.priority), () => {
            const A = u().internal;
            A != null && A.subscribers && (A.priority = A.priority - (w > 0 ? 1 : 0), A.subscribers = A.subscribers.filter((C) => C.ref !== _));
          };
        }
      }
    };
  }), n = t.getState();
  let i = n.size, s = n.viewport.dpr, l = n.camera;
  return t.subscribe(() => {
    const {
      camera: c,
      size: u,
      viewport: h,
      gl: f,
      set: p
    } = t.getState();
    if (u.width !== i.width || u.height !== i.height || h.dpr !== s) {
      var m;
      i = u, s = h.dpr, Q_(c, u), f.setPixelRatio(h.dpr);
      const v = (m = u.updateStyle) != null ? m : typeof HTMLCanvasElement < "u" && f.domElement instanceof HTMLCanvasElement;
      f.setSize(u.width, u.height, v);
    }
    c !== l && (l = c, p((v) => ({
      viewport: {
        ...v.viewport,
        ...v.viewport.getCurrentViewport(c)
      }
    })));
  }), t.subscribe((c) => r(c)), t;
};
let Ic, rA = /* @__PURE__ */ new Set(), sA = /* @__PURE__ */ new Set(), oA = /* @__PURE__ */ new Set();
function mf(r, e) {
  if (r.size)
    for (const {
      callback: t
    } of r.values())
      t(e);
}
function ia(r, e) {
  switch (r) {
    case "before":
      return mf(rA, e);
    case "after":
      return mf(sA, e);
    case "tail":
      return mf(oA, e);
  }
}
let gf, vf;
function _f(r, e, t) {
  let n = e.clock.getDelta();
  for (e.frameloop === "never" && typeof r == "number" && (n = r - e.clock.elapsedTime, e.clock.oldTime = e.clock.elapsedTime, e.clock.elapsedTime = r), gf = e.internal.subscribers, Ic = 0; Ic < gf.length; Ic++)
    vf = gf[Ic], vf.ref.current(vf.store.getState(), n, t);
  return !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera), e.internal.frames = Math.max(0, e.internal.frames - 1), e.frameloop === "always" ? 1 : e.internal.frames;
}
function aA(r) {
  let e = !1, t = !1, n, i, s;
  function l(h) {
    i = requestAnimationFrame(l), e = !0, n = 0, ia("before", h), t = !0;
    for (const p of r.values()) {
      var f;
      s = p.store.getState(), s.internal.active && (s.frameloop === "always" || s.internal.frames > 0) && !((f = s.gl.xr) != null && f.isPresenting) && (n += _f(h, s));
    }
    if (t = !1, ia("after", h), n === 0)
      return ia("tail", h), e = !1, cancelAnimationFrame(i);
  }
  function c(h, f = 1) {
    var p;
    if (!h)
      return r.forEach((m) => c(m.store.getState(), f));
    (p = h.gl.xr) != null && p.isPresenting || !h.internal.active || h.frameloop === "never" || (f > 1 ? h.internal.frames = Math.min(60, h.internal.frames + f) : t ? h.internal.frames = 2 : h.internal.frames = 1, e || (e = !0, requestAnimationFrame(l)));
  }
  function u(h, f = !0, p, m) {
    if (f && ia("before", h), p)
      _f(h, p, m);
    else
      for (const v of r.values())
        _f(h, v.store.getState());
    f && ia("after", h);
  }
  return {
    loop: l,
    invalidate: c,
    advance: u
  };
}
function rp() {
  const r = nt.useContext(ip);
  if (!r)
    throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return r;
}
function xi(r = (t) => t, e) {
  return rp()(r, e);
}
function sp(r, e = 0) {
  const t = rp(), n = t.getState().internal.subscribe, i = q_(r);
  return Xa(() => n(i, e, t), [e, n, t]), null;
}
const So = /* @__PURE__ */ new Map(), {
  invalidate: v0,
  advance: _0
} = aA(So), {
  reconciler: Na,
  applyProps: ao
} = qb(So, $b), lo = {
  objects: "shallow",
  strict: !1
}, lA = (r, e) => {
  const t = typeof r == "function" ? r(e) : r;
  return ey(t) ? t : new Nd({
    powerPreference: "high-performance",
    canvas: e,
    antialias: !0,
    alpha: !0,
    ...r
  });
};
function cA(r, e) {
  const t = typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement;
  if (e) {
    const {
      width: n,
      height: i,
      top: s,
      left: l,
      updateStyle: c = t
    } = e;
    return {
      width: n,
      height: i,
      top: s,
      left: l,
      updateStyle: c
    };
  } else if (typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement && r.parentElement) {
    const {
      width: n,
      height: i,
      top: s,
      left: l
    } = r.parentElement.getBoundingClientRect();
    return {
      width: n,
      height: i,
      top: s,
      left: l,
      updateStyle: t
    };
  } else if (typeof OffscreenCanvas < "u" && r instanceof OffscreenCanvas)
    return {
      width: r.width,
      height: r.height,
      top: 0,
      left: 0,
      updateStyle: t
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  };
}
function uA(r) {
  const e = So.get(r), t = e?.fiber, n = e?.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const i = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), s = n || iA(v0, _0), l = t || Na.createContainer(s, go.ConcurrentRoot, null, !1, null, "", i, null);
  e || So.set(r, {
    fiber: l,
    store: s
  });
  let c, u = !1, h;
  return {
    configure(f = {}) {
      let {
        gl: p,
        size: m,
        scene: v,
        events: y,
        onCreated: E,
        shadows: x = !1,
        linear: _ = !1,
        flat: w = !1,
        legacy: M = !1,
        orthographic: b = !1,
        frameloop: A = "always",
        dpr: C = [1, 2],
        performance: I,
        raycaster: z,
        camera: R,
        onPointerMissed: L
      } = f, H = s.getState(), te = H.gl;
      H.gl || H.set({
        gl: te = lA(p, r)
      });
      let se = H.raycaster;
      se || H.set({
        raycaster: se = new tp()
      });
      const {
        params: G,
        ...$
      } = z || {};
      if (kt.equ($, se, lo) || ao(se, {
        ...$
      }), kt.equ(G, se.params, lo) || ao(se, {
        params: {
          ...se.params,
          ...G
        }
      }), !H.camera || H.camera === h && !kt.equ(h, R, lo)) {
        h = R;
        const j = R instanceof za, k = j ? R : b ? new or(0, 0, 0, 0, 0.1, 1e3) : new tn(75, 0, 0.1, 1e3);
        j || (k.position.z = 5, R && (ao(k, R), ("aspect" in R || "left" in R || "right" in R || "bottom" in R || "top" in R) && (k.manual = !0, k.updateProjectionMatrix())), !H.camera && !(R != null && R.rotation) && k.lookAt(0, 0, 0)), H.set({
          camera: k
        }), se.camera = k;
      }
      if (!H.scene) {
        let j;
        v != null && v.isScene ? j = v : (j = new ou(), v && ao(j, v)), H.set({
          scene: co(j)
        });
      }
      if (!H.xr) {
        var oe;
        const j = (fe, Te) => {
          const Ae = s.getState();
          Ae.frameloop !== "never" && _0(fe, !0, Ae, Te);
        }, k = () => {
          const fe = s.getState();
          fe.gl.xr.enabled = fe.gl.xr.isPresenting, fe.gl.xr.setAnimationLoop(fe.gl.xr.isPresenting ? j : null), fe.gl.xr.isPresenting || v0(fe);
        }, Q = {
          connect() {
            const fe = s.getState().gl;
            fe.xr.addEventListener("sessionstart", k), fe.xr.addEventListener("sessionend", k);
          },
          disconnect() {
            const fe = s.getState().gl;
            fe.xr.removeEventListener("sessionstart", k), fe.xr.removeEventListener("sessionend", k);
          }
        };
        typeof ((oe = te.xr) == null ? void 0 : oe.addEventListener) == "function" && Q.connect(), H.set({
          xr: Q
        });
      }
      if (te.shadowMap) {
        const j = te.shadowMap.enabled, k = te.shadowMap.type;
        if (te.shadowMap.enabled = !!x, kt.boo(x))
          te.shadowMap.type = aa;
        else if (kt.str(x)) {
          var ie;
          const Q = {
            basic: D0,
            percentage: Jc,
            soft: aa,
            variance: yi
          };
          te.shadowMap.type = (ie = Q[x]) != null ? ie : aa;
        } else
          kt.obj(x) && Object.assign(te.shadowMap, x);
        (j !== te.shadowMap.enabled || k !== te.shadowMap.type) && (te.shadowMap.needsUpdate = !0);
      }
      const Y = X_();
      Y && ("enabled" in Y ? Y.enabled = !M : "legacyMode" in Y && (Y.legacyMode = M)), u || ao(te, {
        outputEncoding: _ ? 3e3 : 3001,
        toneMapping: w ? Oi : md
      }), H.legacy !== M && H.set(() => ({
        legacy: M
      })), H.linear !== _ && H.set(() => ({
        linear: _
      })), H.flat !== w && H.set(() => ({
        flat: w
      })), p && !kt.fun(p) && !ey(p) && !kt.equ(p, te, lo) && ao(te, p), y && !H.events.handlers && H.set({
        events: y(s)
      });
      const q = cA(r, m);
      return kt.equ(q, H.size, lo) || H.setSize(q.width, q.height, q.updateStyle, q.top, q.left), C && H.viewport.dpr !== J_(C) && H.setDpr(C), H.frameloop !== A && H.setFrameloop(A), H.onPointerMissed || H.set({
        onPointerMissed: L
      }), I && !kt.equ(I, H.performance, lo) && H.set((j) => ({
        performance: {
          ...j.performance,
          ...I
        }
      })), c = E, u = !0, this;
    },
    render(f) {
      return u || this.configure(), Na.updateContainer(/* @__PURE__ */ Et.jsx(hA, {
        store: s,
        children: f,
        onCreated: c,
        rootElement: r
      }), l, null, () => {
      }), s;
    },
    unmount() {
      ty(r);
    }
  };
}
function hA({
  store: r,
  children: e,
  onCreated: t,
  rootElement: n
}) {
  return Xa(() => {
    const i = r.getState();
    i.set((s) => ({
      internal: {
        ...s.internal,
        active: !0
      }
    })), t && t(i), r.getState().events.connected || i.events.connect == null || i.events.connect(n);
  }, []), /* @__PURE__ */ Et.jsx(ip.Provider, {
    value: r,
    children: e
  });
}
function ty(r, e) {
  const t = So.get(r), n = t?.fiber;
  if (n) {
    const i = t?.store.getState();
    i && (i.internal.active = !1), Na.updateContainer(null, n, null, () => {
      i && setTimeout(() => {
        try {
          var s, l, c, u;
          i.events.disconnect == null || i.events.disconnect(), (s = i.gl) == null || (l = s.renderLists) == null || l.dispose == null || l.dispose(), (c = i.gl) == null || c.forceContextLoss == null || c.forceContextLoss(), (u = i.gl) != null && u.xr && i.xr.disconnect(), Kb(i), So.delete(r), e && e(r);
        } catch {
        }
      }, 500);
    });
  }
}
function fA(r, e, t) {
  return /* @__PURE__ */ Et.jsx(dA, {
    children: r,
    container: e,
    state: t
  }, e.uuid);
}
function dA({
  state: r = {},
  children: e,
  container: t
}) {
  const {
    events: n,
    size: i,
    ...s
  } = r, l = rp(), [c] = nt.useState(() => new tp()), [u] = nt.useState(() => new ue()), h = nt.useCallback(
    (p, m) => {
      const v = {
        ...p
      };
      Object.keys(p).forEach((E) => {
        // Some props should be off-limits
        (nA.includes(E) || // Otherwise filter out the props that are different and let the inject layer take precedence
        // Unless the inject layer props is undefined, then we keep the root layer
        p[E] !== m[E] && m[E]) && delete v[E];
      });
      let y;
      if (m && i) {
        const E = m.camera;
        y = p.viewport.getCurrentViewport(E, new D(), i), E !== p.camera && Q_(E, i);
      }
      return {
        // The intersect consists of the previous root state
        ...v,
        // Portals have their own scene, which forms the root, a raycaster and a pointer
        scene: t,
        raycaster: c,
        pointer: u,
        mouse: u,
        // Their previous root is the layer before it
        previousRoot: l,
        // Events, size and viewport can be overridden by the inject layer
        events: {
          ...p.events,
          ...m?.events,
          ...n
        },
        size: {
          ...p.size,
          ...i
        },
        viewport: {
          ...p.viewport,
          ...y
        },
        ...s
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [r]
  ), [f] = nt.useState(() => {
    const p = l.getState();
    return k_((v, y) => ({
      ...p,
      scene: t,
      raycaster: c,
      pointer: u,
      mouse: u,
      previousRoot: l,
      events: {
        ...p.events,
        ...n
      },
      size: {
        ...p.size,
        ...i
      },
      ...s,
      // Set and get refer to this root-state
      set: v,
      get: y,
      // Layers are allowed to override events
      setEvents: (E) => v((x) => ({
        ...x,
        events: {
          ...x.events,
          ...E
        }
      }))
    }));
  });
  return nt.useEffect(() => {
    const p = l.subscribe((m) => f.setState((v) => h(m, v)));
    return () => {
      p();
    };
  }, [h]), nt.useEffect(() => {
    f.setState((p) => h(l.getState(), p));
  }, [h]), nt.useEffect(() => () => {
    f.destroy();
  }, []), /* @__PURE__ */ Et.jsx(Et.Fragment, {
    children: Na.createPortal(/* @__PURE__ */ Et.jsx(ip.Provider, {
      value: f,
      children: e
    }), f, null)
  });
}
Na.injectIntoDevTools({
  bundleType: 0,
  rendererPackageName: "@react-three/fiber",
  version: nt.version
});
const yf = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function pA(r) {
  const {
    handlePointer: e
  } = tA(r);
  return {
    priority: 1,
    enabled: !0,
    compute(t, n, i) {
      n.pointer.set(t.offsetX / n.size.width * 2 - 1, -(t.offsetY / n.size.height) * 2 + 1), n.raycaster.setFromCamera(n.pointer, n.camera);
    },
    connected: void 0,
    handlers: Object.keys(yf).reduce((t, n) => ({
      ...t,
      [n]: e(n)
    }), {}),
    update: () => {
      var t;
      const {
        events: n,
        internal: i
      } = r.getState();
      (t = i.lastEvent) != null && t.current && n.handlers && n.handlers.onPointerMove(i.lastEvent.current);
    },
    connect: (t) => {
      var n;
      const {
        set: i,
        events: s
      } = r.getState();
      s.disconnect == null || s.disconnect(), i((l) => ({
        events: {
          ...l.events,
          connected: t
        }
      })), Object.entries((n = s.handlers) != null ? n : []).forEach(([l, c]) => {
        const [u, h] = yf[l];
        t.addEventListener(u, c, {
          passive: h
        });
      });
    },
    disconnect: () => {
      const {
        set: t,
        events: n
      } = r.getState();
      if (n.connected) {
        var i;
        Object.entries((i = n.handlers) != null ? i : []).forEach(([s, l]) => {
          if (n && n.connected instanceof HTMLElement) {
            const [c] = yf[s];
            n.connected.removeEventListener(c, l);
          }
        }), t((s) => ({
          events: {
            ...s.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
function y0(r, e) {
  let t;
  return (...n) => {
    window.clearTimeout(t), t = window.setTimeout(() => r(...n), e);
  };
}
function mA({ debounce: r, scroll: e, polyfill: t, offsetSize: n } = { debounce: 0, scroll: !1, offsetSize: !1 }) {
  const i = t || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!i)
    throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [s, l] = ra({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), c = Si({ element: null, scrollContainers: null, resizeObserver: null, lastBounds: s, orientationHandler: null }), u = r ? typeof r == "number" ? r : r.scroll : null, h = r ? typeof r == "number" ? r : r.resize : null, f = Si(!1);
  rr(() => (f.current = !0, () => void (f.current = !1)));
  const [p, m, v] = xf(() => {
    const _ = () => {
      if (!c.current.element)
        return;
      const { left: w, top: M, width: b, height: A, bottom: C, right: I, x: z, y: R } = c.current.element.getBoundingClientRect(), L = { left: w, top: M, width: b, height: A, bottom: C, right: I, x: z, y: R };
      c.current.element instanceof HTMLElement && n && (L.height = c.current.element.offsetHeight, L.width = c.current.element.offsetWidth), Object.freeze(L), f.current && !yA(c.current.lastBounds, L) && l(c.current.lastBounds = L);
    };
    return [_, h ? y0(_, h) : _, u ? y0(_, u) : _];
  }, [l, n, u, h]);
  function y() {
    c.current.scrollContainers && (c.current.scrollContainers.forEach((_) => _.removeEventListener("scroll", v, !0)), c.current.scrollContainers = null), c.current.resizeObserver && (c.current.resizeObserver.disconnect(), c.current.resizeObserver = null), c.current.orientationHandler && ("orientation" in screen && "removeEventListener" in screen.orientation ? screen.orientation.removeEventListener("change", c.current.orientationHandler) : "onorientationchange" in window && window.removeEventListener("orientationchange", c.current.orientationHandler));
  }
  function E() {
    c.current.element && (c.current.resizeObserver = new i(v), c.current.resizeObserver.observe(c.current.element), e && c.current.scrollContainers && c.current.scrollContainers.forEach((_) => _.addEventListener("scroll", v, { capture: !0, passive: !0 })), c.current.orientationHandler = () => {
      v();
    }, "orientation" in screen && "addEventListener" in screen.orientation ? screen.orientation.addEventListener("change", c.current.orientationHandler) : "onorientationchange" in window && window.addEventListener("orientationchange", c.current.orientationHandler));
  }
  const x = (_) => {
    !_ || _ === c.current.element || (y(), c.current.element = _, c.current.scrollContainers = ny(_), E());
  };
  return vA(v, !!e), gA(m), rr(() => {
    y(), E();
  }, [e, v, m]), rr(() => y, []), [x, s, p];
}
function gA(r) {
  rr(() => {
    const e = r;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [r]);
}
function vA(r, e) {
  rr(() => {
    if (e) {
      const t = r;
      return window.addEventListener("scroll", t, { capture: !0, passive: !0 }), () => void window.removeEventListener("scroll", t, !0);
    }
  }, [r, e]);
}
function ny(r) {
  const e = [];
  if (!r || r === document.body)
    return e;
  const { overflow: t, overflowX: n, overflowY: i } = window.getComputedStyle(r);
  return [t, n, i].some((s) => s === "auto" || s === "scroll") && e.push(r), [...e, ...ny(r.parentElement)];
}
const _A = ["x", "y", "top", "bottom", "left", "right", "width", "height"], yA = (r, e) => _A.every((t) => r[t] === e[t]);
var xA = Object.defineProperty, SA = Object.defineProperties, MA = Object.getOwnPropertyDescriptors, x0 = Object.getOwnPropertySymbols, EA = Object.prototype.hasOwnProperty, wA = Object.prototype.propertyIsEnumerable, S0 = (r, e, t) => e in r ? xA(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t, M0 = (r, e) => {
  for (var t in e || (e = {}))
    EA.call(e, t) && S0(r, t, e[t]);
  if (x0)
    for (var t of x0(e))
      wA.call(e, t) && S0(r, t, e[t]);
  return r;
}, TA = (r, e) => SA(r, MA(e)), E0, w0;
typeof window < "u" && ((E0 = window.document) != null && E0.createElement || ((w0 = window.navigator) == null ? void 0 : w0.product) === "ReactNative") ? nt.useLayoutEffect : nt.useEffect;
function iy(r, e, t) {
  if (!r)
    return;
  if (t(r) === !0)
    return r;
  let n = e ? r.return : r.child;
  for (; n; ) {
    const i = iy(n, e, t);
    if (i)
      return i;
    n = e ? null : n.sibling;
  }
}
function ry(r) {
  try {
    return Object.defineProperties(r, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return r;
  }
}
const T0 = console.error;
console.error = function() {
  const r = [...arguments].join("");
  if (r?.startsWith("Warning:") && r.includes("useContext")) {
    console.error = T0;
    return;
  }
  return T0.apply(this, arguments);
};
const op = ry(nt.createContext(null));
class sy extends nt.Component {
  render() {
    return /* @__PURE__ */ nt.createElement(op.Provider, {
      value: this._reactInternals
    }, this.props.children);
  }
}
function bA() {
  const r = nt.useContext(op);
  if (r === null)
    throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = nt.useId();
  return nt.useMemo(() => {
    for (const n of [r, r?.alternate]) {
      if (!n)
        continue;
      const i = iy(n, !1, (s) => {
        let l = s.memoizedState;
        for (; l; ) {
          if (l.memoizedState === e)
            return !0;
          l = l.next;
        }
      });
      if (i)
        return i;
    }
  }, [r, e]);
}
function AA() {
  const r = bA(), [e] = nt.useState(() => /* @__PURE__ */ new Map());
  e.clear();
  let t = r;
  for (; t; ) {
    if (t.type && typeof t.type == "object") {
      const i = t.type._context === void 0 && t.type.Provider === t.type ? t.type : t.type._context;
      i && i !== op && !e.has(i) && e.set(i, nt.useContext(ry(i)));
    }
    t = t.return;
  }
  return e;
}
function RA() {
  const r = AA();
  return nt.useMemo(
    () => Array.from(r.keys()).reduce(
      (e, t) => (n) => /* @__PURE__ */ nt.createElement(e, null, /* @__PURE__ */ nt.createElement(t.Provider, TA(M0({}, n), {
        value: r.get(t)
      }))),
      (e) => /* @__PURE__ */ nt.createElement(sy, M0({}, e))
    ),
    [r]
  );
}
const CA = /* @__PURE__ */ nt.forwardRef(function({
  children: e,
  fallback: t,
  resize: n,
  style: i,
  gl: s,
  events: l = pA,
  eventSource: c,
  eventPrefix: u,
  shadows: h,
  linear: f,
  flat: p,
  legacy: m,
  orthographic: v,
  frameloop: y,
  dpr: E,
  performance: x,
  raycaster: _,
  camera: w,
  scene: M,
  onPointerMissed: b,
  onCreated: A,
  ...C
}, I) {
  nt.useMemo(() => W_(Hb), []);
  const z = RA(), [R, L] = mA({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...n
  }), H = nt.useRef(null), te = nt.useRef(null);
  nt.useImperativeHandle(I, () => H.current);
  const se = q_(b), [G, $] = nt.useState(!1), [oe, ie] = nt.useState(!1);
  if (G)
    throw G;
  if (oe)
    throw oe;
  const Y = nt.useRef(null);
  Xa(() => {
    const j = H.current;
    L.width > 0 && L.height > 0 && j && (Y.current || (Y.current = uA(j)), Y.current.configure({
      gl: s,
      events: l,
      shadows: h,
      linear: f,
      flat: p,
      legacy: m,
      orthographic: v,
      frameloop: y,
      dpr: E,
      performance: x,
      raycaster: _,
      camera: w,
      scene: M,
      size: L,
      // Pass mutable reference to onPointerMissed so it's free to update
      onPointerMissed: (...k) => se.current == null ? void 0 : se.current(...k),
      onCreated: (k) => {
        k.events.connect == null || k.events.connect(c ? jb(c) ? c.current : c : te.current), u && k.setEvents({
          compute: (Q, fe) => {
            const Te = Q[u + "X"], Ae = Q[u + "Y"];
            fe.pointer.set(Te / fe.size.width * 2 - 1, -(Ae / fe.size.height) * 2 + 1), fe.raycaster.setFromCamera(fe.pointer, fe.camera);
          }
        }), A?.(k);
      }
    }), Y.current.render(/* @__PURE__ */ Et.jsx(z, {
      children: /* @__PURE__ */ Et.jsx(j_, {
        set: ie,
        children: /* @__PURE__ */ Et.jsx(nt.Suspense, {
          fallback: /* @__PURE__ */ Et.jsx(Zb, {
            set: $
          }),
          children: e ?? null
        })
      })
    })));
  }), nt.useEffect(() => {
    const j = H.current;
    if (j)
      return () => ty(j);
  }, []);
  const q = c ? "none" : "auto";
  return /* @__PURE__ */ Et.jsx("div", {
    ref: te,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: q,
      ...i
    },
    ...C,
    children: /* @__PURE__ */ Et.jsx("div", {
      ref: R,
      style: {
        width: "100%",
        height: "100%"
      },
      children: /* @__PURE__ */ Et.jsx("canvas", {
        ref: H,
        style: {
          display: "block"
        },
        children: t
      })
    })
  });
}), PA = /* @__PURE__ */ nt.forwardRef(function(e, t) {
  return /* @__PURE__ */ Et.jsx(sy, {
    children: /* @__PURE__ */ Et.jsx(CA, {
      ...e,
      ref: t
    })
  });
});
function fd() {
  return fd = Object.assign ? Object.assign.bind() : function(r) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var n in t)
        ({}).hasOwnProperty.call(t, n) && (r[n] = t[n]);
    }
    return r;
  }, fd.apply(null, arguments);
}
var LA = Object.defineProperty, IA = (r, e, t) => e in r ? LA(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t, DA = (r, e, t) => (IA(r, typeof e != "symbol" ? e + "" : e, t), t);
class NA {
  constructor() {
    DA(this, "_listeners");
  }
  /**
   * Adds a listener to an event type.
   * @param type The type of event to listen to.
   * @param listener The function that gets called when the event is fired.
   */
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  /**
      * Checks if listener is added to an event type.
      * @param type The type of event to listen to.
      * @param listener The function that gets called when the event is fired.
      */
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  /**
      * Removes a listener from an event type.
      * @param type The type of the listener that gets removed.
      * @param listener The listener function that gets removed.
      */
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const i = this._listeners[e];
    if (i !== void 0) {
      const s = i.indexOf(t);
      s !== -1 && i.splice(s, 1);
    }
  }
  /**
      * Fire an event type.
      * @param event The event that gets fired.
      */
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const i = n.slice(0);
      for (let s = 0, l = i.length; s < l; s++)
        i[s].call(this, e);
      e.target = null;
    }
  }
}
var UA = Object.defineProperty, OA = (r, e, t) => e in r ? UA(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t, Qe = (r, e, t) => (OA(r, typeof e != "symbol" ? e + "" : e, t), t);
const Dc = /* @__PURE__ */ new xs(), b0 = /* @__PURE__ */ new tr(), FA = Math.cos(70 * (Math.PI / 180)), A0 = (r, e) => (r % e + e) % e;
let zA = class extends NA {
  constructor(e, t) {
    super(), Qe(this, "object"), Qe(this, "domElement"), Qe(this, "enabled", !0), Qe(this, "target", new D()), Qe(this, "minDistance", 0), Qe(this, "maxDistance", 1 / 0), Qe(this, "minZoom", 0), Qe(this, "maxZoom", 1 / 0), Qe(this, "minPolarAngle", 0), Qe(this, "maxPolarAngle", Math.PI), Qe(this, "minAzimuthAngle", -1 / 0), Qe(this, "maxAzimuthAngle", 1 / 0), Qe(this, "enableDamping", !1), Qe(this, "dampingFactor", 0.05), Qe(this, "enableZoom", !0), Qe(this, "zoomSpeed", 1), Qe(this, "enableRotate", !0), Qe(this, "rotateSpeed", 1), Qe(this, "enablePan", !0), Qe(this, "panSpeed", 1), Qe(this, "screenSpacePanning", !0), Qe(this, "keyPanSpeed", 7), Qe(this, "zoomToCursor", !1), Qe(this, "autoRotate", !1), Qe(this, "autoRotateSpeed", 2), Qe(this, "reverseOrbit", !1), Qe(this, "reverseHorizontalOrbit", !1), Qe(this, "reverseVerticalOrbit", !1), Qe(this, "keys", { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" }), Qe(this, "mouseButtons", {
      LEFT: ns.ROTATE,
      MIDDLE: ns.DOLLY,
      RIGHT: ns.PAN
    }), Qe(this, "touches", { ONE: is.ROTATE, TWO: is.DOLLY_PAN }), Qe(this, "target0"), Qe(this, "position0"), Qe(this, "zoom0"), Qe(this, "_domElementKeyEvents", null), Qe(this, "getPolarAngle"), Qe(this, "getAzimuthalAngle"), Qe(this, "setPolarAngle"), Qe(this, "setAzimuthalAngle"), Qe(this, "getDistance"), Qe(this, "getZoomScale"), Qe(this, "listenToKeyEvents"), Qe(this, "stopListenToKeyEvents"), Qe(this, "saveState"), Qe(this, "reset"), Qe(this, "update"), Qe(this, "connect"), Qe(this, "dispose"), Qe(this, "dollyIn"), Qe(this, "dollyOut"), Qe(this, "getScale"), Qe(this, "setScale"), this.object = e, this.domElement = t, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = () => f.phi, this.getAzimuthalAngle = () => f.theta, this.setPolarAngle = (V) => {
      let ae = A0(V, 2 * Math.PI), _e = f.phi;
      _e < 0 && (_e += 2 * Math.PI), ae < 0 && (ae += 2 * Math.PI);
      let F = Math.abs(ae - _e);
      2 * Math.PI - F < F && (ae < _e ? ae += 2 * Math.PI : _e += 2 * Math.PI), p.phi = ae - _e, n.update();
    }, this.setAzimuthalAngle = (V) => {
      let ae = A0(V, 2 * Math.PI), _e = f.theta;
      _e < 0 && (_e += 2 * Math.PI), ae < 0 && (ae += 2 * Math.PI);
      let F = Math.abs(ae - _e);
      2 * Math.PI - F < F && (ae < _e ? ae += 2 * Math.PI : _e += 2 * Math.PI), p.theta = ae - _e, n.update();
    }, this.getDistance = () => n.object.position.distanceTo(n.target), this.listenToKeyEvents = (V) => {
      V.addEventListener("keydown", xe), this._domElementKeyEvents = V;
    }, this.stopListenToKeyEvents = () => {
      this._domElementKeyEvents.removeEventListener("keydown", xe), this._domElementKeyEvents = null;
    }, this.saveState = () => {
      n.target0.copy(n.target), n.position0.copy(n.object.position), n.zoom0 = n.object.zoom;
    }, this.reset = () => {
      n.target.copy(n.target0), n.object.position.copy(n.position0), n.object.zoom = n.zoom0, n.object.updateProjectionMatrix(), n.dispatchEvent(i), n.update(), u = c.NONE;
    }, this.update = (() => {
      const V = new D(), ae = new D(0, 1, 0), _e = new Pn().setFromUnitVectors(e.up, ae), F = _e.clone().invert(), me = new D(), ye = new Pn(), Ce = 2 * Math.PI;
      return function() {
        const pe = n.object.position;
        _e.setFromUnitVectors(e.up, ae), F.copy(_e).invert(), V.copy(pe).sub(n.target), V.applyQuaternion(_e), f.setFromVector3(V), n.autoRotate && u === c.NONE && G(te()), n.enableDamping ? (f.theta += p.theta * n.dampingFactor, f.phi += p.phi * n.dampingFactor) : (f.theta += p.theta, f.phi += p.phi);
        let Ue = n.minAzimuthAngle, Ze = n.maxAzimuthAngle;
        isFinite(Ue) && isFinite(Ze) && (Ue < -Math.PI ? Ue += Ce : Ue > Math.PI && (Ue -= Ce), Ze < -Math.PI ? Ze += Ce : Ze > Math.PI && (Ze -= Ce), Ue <= Ze ? f.theta = Math.max(Ue, Math.min(Ze, f.theta)) : f.theta = f.theta > (Ue + Ze) / 2 ? Math.max(Ue, f.theta) : Math.min(Ze, f.theta)), f.phi = Math.max(n.minPolarAngle, Math.min(n.maxPolarAngle, f.phi)), f.makeSafe(), n.enableDamping === !0 ? n.target.addScaledVector(v, n.dampingFactor) : n.target.add(v), n.zoomToCursor && R || n.object.isOrthographicCamera ? f.radius = fe(f.radius) : f.radius = fe(f.radius * m), V.setFromSpherical(f), V.applyQuaternion(F), pe.copy(n.target).add(V), n.object.matrixAutoUpdate || n.object.updateMatrix(), n.object.lookAt(n.target), n.enableDamping === !0 ? (p.theta *= 1 - n.dampingFactor, p.phi *= 1 - n.dampingFactor, v.multiplyScalar(1 - n.dampingFactor)) : (p.set(0, 0, 0), v.set(0, 0, 0));
        let Ht = !1;
        if (n.zoomToCursor && R) {
          let Mt = null;
          if (n.object instanceof tn && n.object.isPerspectiveCamera) {
            const ln = V.length();
            Mt = fe(ln * m);
            const qt = ln - Mt;
            n.object.position.addScaledVector(I, qt), n.object.updateMatrixWorld();
          } else if (n.object.isOrthographicCamera) {
            const ln = new D(z.x, z.y, 0);
            ln.unproject(n.object), n.object.zoom = Math.max(n.minZoom, Math.min(n.maxZoom, n.object.zoom / m)), n.object.updateProjectionMatrix(), Ht = !0;
            const qt = new D(z.x, z.y, 0);
            qt.unproject(n.object), n.object.position.sub(qt).add(ln), n.object.updateMatrixWorld(), Mt = V.length();
          } else
            console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."), n.zoomToCursor = !1;
          Mt !== null && (n.screenSpacePanning ? n.target.set(0, 0, -1).transformDirection(n.object.matrix).multiplyScalar(Mt).add(n.object.position) : (Dc.origin.copy(n.object.position), Dc.direction.set(0, 0, -1).transformDirection(n.object.matrix), Math.abs(n.object.up.dot(Dc.direction)) < FA ? e.lookAt(n.target) : (b0.setFromNormalAndCoplanarPoint(n.object.up, n.target), Dc.intersectPlane(b0, n.target))));
        } else
          n.object instanceof or && n.object.isOrthographicCamera && (Ht = m !== 1, Ht && (n.object.zoom = Math.max(n.minZoom, Math.min(n.maxZoom, n.object.zoom / m)), n.object.updateProjectionMatrix()));
        return m = 1, R = !1, Ht || me.distanceToSquared(n.object.position) > h || 8 * (1 - ye.dot(n.object.quaternion)) > h ? (n.dispatchEvent(i), me.copy(n.object.position), ye.copy(n.object.quaternion), Ht = !1, !0) : !1;
      };
    })(), this.connect = (V) => {
      n.domElement = V, n.domElement.style.touchAction = "none", n.domElement.addEventListener("contextmenu", Pe), n.domElement.addEventListener("pointerdown", Dt), n.domElement.addEventListener("pointercancel", P), n.domElement.addEventListener("wheel", ge);
    }, this.dispose = () => {
      var V, ae, _e, F, me, ye;
      n.domElement && (n.domElement.style.touchAction = "auto"), (V = n.domElement) == null || V.removeEventListener("contextmenu", Pe), (ae = n.domElement) == null || ae.removeEventListener("pointerdown", Dt), (_e = n.domElement) == null || _e.removeEventListener("pointercancel", P), (F = n.domElement) == null || F.removeEventListener("wheel", ge), (me = n.domElement) == null || me.ownerDocument.removeEventListener("pointermove", O), (ye = n.domElement) == null || ye.ownerDocument.removeEventListener("pointerup", P), n._domElementKeyEvents !== null && n._domElementKeyEvents.removeEventListener("keydown", xe);
    };
    const n = this, i = { type: "change" }, s = { type: "start" }, l = { type: "end" }, c = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    };
    let u = c.NONE;
    const h = 1e-6, f = new ld(), p = new ld();
    let m = 1;
    const v = new D(), y = new ue(), E = new ue(), x = new ue(), _ = new ue(), w = new ue(), M = new ue(), b = new ue(), A = new ue(), C = new ue(), I = new D(), z = new ue();
    let R = !1;
    const L = [], H = {};
    function te() {
      return 2 * Math.PI / 60 / 60 * n.autoRotateSpeed;
    }
    function se() {
      return Math.pow(0.95, n.zoomSpeed);
    }
    function G(V) {
      n.reverseOrbit || n.reverseHorizontalOrbit ? p.theta += V : p.theta -= V;
    }
    function $(V) {
      n.reverseOrbit || n.reverseVerticalOrbit ? p.phi += V : p.phi -= V;
    }
    const oe = (() => {
      const V = new D();
      return function(_e, F) {
        V.setFromMatrixColumn(F, 0), V.multiplyScalar(-_e), v.add(V);
      };
    })(), ie = (() => {
      const V = new D();
      return function(_e, F) {
        n.screenSpacePanning === !0 ? V.setFromMatrixColumn(F, 1) : (V.setFromMatrixColumn(F, 0), V.crossVectors(n.object.up, V)), V.multiplyScalar(_e), v.add(V);
      };
    })(), Y = (() => {
      const V = new D();
      return function(_e, F) {
        const me = n.domElement;
        if (me && n.object instanceof tn && n.object.isPerspectiveCamera) {
          const ye = n.object.position;
          V.copy(ye).sub(n.target);
          let Ce = V.length();
          Ce *= Math.tan(n.object.fov / 2 * Math.PI / 180), oe(2 * _e * Ce / me.clientHeight, n.object.matrix), ie(2 * F * Ce / me.clientHeight, n.object.matrix);
        } else
          me && n.object instanceof or && n.object.isOrthographicCamera ? (oe(
            _e * (n.object.right - n.object.left) / n.object.zoom / me.clientWidth,
            n.object.matrix
          ), ie(
            F * (n.object.top - n.object.bottom) / n.object.zoom / me.clientHeight,
            n.object.matrix
          )) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), n.enablePan = !1);
      };
    })();
    function q(V) {
      n.object instanceof tn && n.object.isPerspectiveCamera || n.object instanceof or && n.object.isOrthographicCamera ? m = V : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), n.enableZoom = !1);
    }
    function j(V) {
      q(m / V);
    }
    function k(V) {
      q(m * V);
    }
    function Q(V) {
      if (!n.zoomToCursor || !n.domElement)
        return;
      R = !0;
      const ae = n.domElement.getBoundingClientRect(), _e = V.clientX - ae.left, F = V.clientY - ae.top, me = ae.width, ye = ae.height;
      z.x = _e / me * 2 - 1, z.y = -(F / ye) * 2 + 1, I.set(z.x, z.y, 1).unproject(n.object).sub(n.object.position).normalize();
    }
    function fe(V) {
      return Math.max(n.minDistance, Math.min(n.maxDistance, V));
    }
    function Te(V) {
      y.set(V.clientX, V.clientY);
    }
    function Ae(V) {
      Q(V), b.set(V.clientX, V.clientY);
    }
    function ke(V) {
      _.set(V.clientX, V.clientY);
    }
    function He(V) {
      E.set(V.clientX, V.clientY), x.subVectors(E, y).multiplyScalar(n.rotateSpeed);
      const ae = n.domElement;
      ae && (G(2 * Math.PI * x.x / ae.clientHeight), $(2 * Math.PI * x.y / ae.clientHeight)), y.copy(E), n.update();
    }
    function je(V) {
      A.set(V.clientX, V.clientY), C.subVectors(A, b), C.y > 0 ? j(se()) : C.y < 0 && k(se()), b.copy(A), n.update();
    }
    function yt(V) {
      w.set(V.clientX, V.clientY), M.subVectors(w, _).multiplyScalar(n.panSpeed), Y(M.x, M.y), _.copy(w), n.update();
    }
    function Ct(V) {
      Q(V), V.deltaY < 0 ? k(se()) : V.deltaY > 0 && j(se()), n.update();
    }
    function Ve(V) {
      let ae = !1;
      switch (V.code) {
        case n.keys.UP:
          Y(0, n.keyPanSpeed), ae = !0;
          break;
        case n.keys.BOTTOM:
          Y(0, -n.keyPanSpeed), ae = !0;
          break;
        case n.keys.LEFT:
          Y(n.keyPanSpeed, 0), ae = !0;
          break;
        case n.keys.RIGHT:
          Y(-n.keyPanSpeed, 0), ae = !0;
          break;
      }
      ae && (V.preventDefault(), n.update());
    }
    function B() {
      if (L.length == 1)
        y.set(L[0].pageX, L[0].pageY);
      else {
        const V = 0.5 * (L[0].pageX + L[1].pageX), ae = 0.5 * (L[0].pageY + L[1].pageY);
        y.set(V, ae);
      }
    }
    function ve() {
      if (L.length == 1)
        _.set(L[0].pageX, L[0].pageY);
      else {
        const V = 0.5 * (L[0].pageX + L[1].pageX), ae = 0.5 * (L[0].pageY + L[1].pageY);
        _.set(V, ae);
      }
    }
    function he() {
      const V = L[0].pageX - L[1].pageX, ae = L[0].pageY - L[1].pageY, _e = Math.sqrt(V * V + ae * ae);
      b.set(0, _e);
    }
    function Ee() {
      n.enableZoom && he(), n.enablePan && ve();
    }
    function de() {
      n.enableZoom && he(), n.enableRotate && B();
    }
    function Xe(V) {
      if (L.length == 1)
        E.set(V.pageX, V.pageY);
      else {
        const _e = St(V), F = 0.5 * (V.pageX + _e.x), me = 0.5 * (V.pageY + _e.y);
        E.set(F, me);
      }
      x.subVectors(E, y).multiplyScalar(n.rotateSpeed);
      const ae = n.domElement;
      ae && (G(2 * Math.PI * x.x / ae.clientHeight), $(2 * Math.PI * x.y / ae.clientHeight)), y.copy(E);
    }
    function Ne(V) {
      if (L.length == 1)
        w.set(V.pageX, V.pageY);
      else {
        const ae = St(V), _e = 0.5 * (V.pageX + ae.x), F = 0.5 * (V.pageY + ae.y);
        w.set(_e, F);
      }
      M.subVectors(w, _).multiplyScalar(n.panSpeed), Y(M.x, M.y), _.copy(w);
    }
    function Oe(V) {
      const ae = St(V), _e = V.pageX - ae.x, F = V.pageY - ae.y, me = Math.sqrt(_e * _e + F * F);
      A.set(0, me), C.set(0, Math.pow(A.y / b.y, n.zoomSpeed)), j(C.y), b.copy(A);
    }
    function $e(V) {
      n.enableZoom && Oe(V), n.enablePan && Ne(V);
    }
    function mt(V) {
      n.enableZoom && Oe(V), n.enableRotate && Xe(V);
    }
    function Dt(V) {
      var ae, _e;
      n.enabled !== !1 && (L.length === 0 && ((ae = n.domElement) == null || ae.ownerDocument.addEventListener("pointermove", O), (_e = n.domElement) == null || _e.ownerDocument.addEventListener("pointerup", P)), tt(V), V.pointerType === "touch" ? Ge(V) : ee(V));
    }
    function O(V) {
      n.enabled !== !1 && (V.pointerType === "touch" ? be(V) : Se(V));
    }
    function P(V) {
      var ae, _e, F;
      xt(V), L.length === 0 && ((ae = n.domElement) == null || ae.releasePointerCapture(V.pointerId), (_e = n.domElement) == null || _e.ownerDocument.removeEventListener("pointermove", O), (F = n.domElement) == null || F.ownerDocument.removeEventListener("pointerup", P)), n.dispatchEvent(l), u = c.NONE;
    }
    function ee(V) {
      let ae;
      switch (V.button) {
        case 0:
          ae = n.mouseButtons.LEFT;
          break;
        case 1:
          ae = n.mouseButtons.MIDDLE;
          break;
        case 2:
          ae = n.mouseButtons.RIGHT;
          break;
        default:
          ae = -1;
      }
      switch (ae) {
        case ns.DOLLY:
          if (n.enableZoom === !1)
            return;
          Ae(V), u = c.DOLLY;
          break;
        case ns.ROTATE:
          if (V.ctrlKey || V.metaKey || V.shiftKey) {
            if (n.enablePan === !1)
              return;
            ke(V), u = c.PAN;
          } else {
            if (n.enableRotate === !1)
              return;
            Te(V), u = c.ROTATE;
          }
          break;
        case ns.PAN:
          if (V.ctrlKey || V.metaKey || V.shiftKey) {
            if (n.enableRotate === !1)
              return;
            Te(V), u = c.ROTATE;
          } else {
            if (n.enablePan === !1)
              return;
            ke(V), u = c.PAN;
          }
          break;
        default:
          u = c.NONE;
      }
      u !== c.NONE && n.dispatchEvent(s);
    }
    function Se(V) {
      if (n.enabled !== !1)
        switch (u) {
          case c.ROTATE:
            if (n.enableRotate === !1)
              return;
            He(V);
            break;
          case c.DOLLY:
            if (n.enableZoom === !1)
              return;
            je(V);
            break;
          case c.PAN:
            if (n.enablePan === !1)
              return;
            yt(V);
            break;
        }
    }
    function ge(V) {
      n.enabled === !1 || n.enableZoom === !1 || u !== c.NONE && u !== c.ROTATE || (V.preventDefault(), n.dispatchEvent(s), Ct(V), n.dispatchEvent(l));
    }
    function xe(V) {
      n.enabled === !1 || n.enablePan === !1 || Ve(V);
    }
    function Ge(V) {
      switch (Me(V), L.length) {
        case 1:
          switch (n.touches.ONE) {
            case is.ROTATE:
              if (n.enableRotate === !1)
                return;
              B(), u = c.TOUCH_ROTATE;
              break;
            case is.PAN:
              if (n.enablePan === !1)
                return;
              ve(), u = c.TOUCH_PAN;
              break;
            default:
              u = c.NONE;
          }
          break;
        case 2:
          switch (n.touches.TWO) {
            case is.DOLLY_PAN:
              if (n.enableZoom === !1 && n.enablePan === !1)
                return;
              Ee(), u = c.TOUCH_DOLLY_PAN;
              break;
            case is.DOLLY_ROTATE:
              if (n.enableZoom === !1 && n.enableRotate === !1)
                return;
              de(), u = c.TOUCH_DOLLY_ROTATE;
              break;
            default:
              u = c.NONE;
          }
          break;
        default:
          u = c.NONE;
      }
      u !== c.NONE && n.dispatchEvent(s);
    }
    function be(V) {
      switch (Me(V), u) {
        case c.TOUCH_ROTATE:
          if (n.enableRotate === !1)
            return;
          Xe(V), n.update();
          break;
        case c.TOUCH_PAN:
          if (n.enablePan === !1)
            return;
          Ne(V), n.update();
          break;
        case c.TOUCH_DOLLY_PAN:
          if (n.enableZoom === !1 && n.enablePan === !1)
            return;
          $e(V), n.update();
          break;
        case c.TOUCH_DOLLY_ROTATE:
          if (n.enableZoom === !1 && n.enableRotate === !1)
            return;
          mt(V), n.update();
          break;
        default:
          u = c.NONE;
      }
    }
    function Pe(V) {
      n.enabled !== !1 && V.preventDefault();
    }
    function tt(V) {
      L.push(V);
    }
    function xt(V) {
      delete H[V.pointerId];
      for (let ae = 0; ae < L.length; ae++)
        if (L[ae].pointerId == V.pointerId) {
          L.splice(ae, 1);
          return;
        }
    }
    function Me(V) {
      let ae = H[V.pointerId];
      ae === void 0 && (ae = new ue(), H[V.pointerId] = ae), ae.set(V.pageX, V.pageY);
    }
    function St(V) {
      const ae = V.pointerId === L[0].pointerId ? L[1] : L[0];
      return H[ae.pointerId];
    }
    this.dollyIn = (V = se()) => {
      k(V), n.update();
    }, this.dollyOut = (V = se()) => {
      j(V), n.update();
    }, this.getScale = () => m, this.setScale = (V) => {
      q(V), n.update();
    }, this.getZoomScale = () => se(), t !== void 0 && this.connect(t), this.update();
  }
};
function BA(r, e, t) {
  const n = xi((m) => m.size), i = xi((m) => m.viewport), s = typeof r == "number" ? r : n.width * i.dpr, l = typeof e == "number" ? e : n.height * i.dpr, c = (typeof r == "number" ? t : r) || {}, {
    samples: u = 0,
    depth: h,
    ...f
  } = c, p = nt.useMemo(() => {
    const m = new hi(s, l, {
      minFilter: Xt,
      magFilter: Xt,
      type: ms,
      ...f
    });
    return h && (m.depthTexture = new Dd(s, l, ei)), m.samples = u, m;
  }, []);
  return nt.useLayoutEffect(() => {
    p.setSize(s, l), u && (p.samples = u);
  }, [u, p, s, l]), nt.useEffect(() => () => p.dispose(), []), p;
}
const kA = /* @__PURE__ */ nt.forwardRef(({
  makeDefault: r,
  camera: e,
  regress: t,
  domElement: n,
  enableDamping: i = !0,
  keyEvents: s = !1,
  onChange: l,
  onStart: c,
  onEnd: u,
  ...h
}, f) => {
  const p = xi((C) => C.invalidate), m = xi((C) => C.camera), v = xi((C) => C.gl), y = xi((C) => C.events), E = xi((C) => C.setEvents), x = xi((C) => C.set), _ = xi((C) => C.get), w = xi((C) => C.performance), M = e || m, b = n || y.connected || v.domElement, A = nt.useMemo(() => new zA(M), [M]);
  return sp(() => {
    A.enabled && A.update();
  }, -1), nt.useEffect(() => (s && A.connect(s === !0 ? b : s), A.connect(b), () => void A.dispose()), [s, b, t, A, p]), nt.useEffect(() => {
    const C = (R) => {
      p(), t && w.regress(), l && l(R);
    }, I = (R) => {
      c && c(R);
    }, z = (R) => {
      u && u(R);
    };
    return A.addEventListener("change", C), A.addEventListener("start", I), A.addEventListener("end", z), () => {
      A.removeEventListener("start", I), A.removeEventListener("end", z), A.removeEventListener("change", C);
    };
  }, [l, c, u, A, p, E]), nt.useEffect(() => {
    if (r) {
      const C = _().controls;
      return x({
        controls: A
      }), () => x({
        controls: C
      });
    }
  }, [r, A]), /* @__PURE__ */ nt.createElement("primitive", fd({
    ref: f,
    object: A,
    enableDamping: i
  }, h));
});
function HA(r) {
  const e = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(r);
  return e ? {
    r: parseInt(e[1], 16) / 255,
    g: parseInt(e[2], 16) / 255,
    b: parseInt(e[3], 16) / 255
  } : null;
}
function VA(r, e) {
  const t = new Float32Array(r * 4);
  for (let n = 0; n < r * 4; n += 4)
    t[n] = (Math.random() - 0.5) * 4, t[n + 1] = (Math.random() - 0.5) * 4, t[n + 2] = (Math.random() - 0.5) * 4, t[n + 3] = 1;
  return t;
}
const GA = `
  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
  vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
  vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }
  vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

  float snoise(vec3 v) {
    const vec2 C = vec2(1.0/6.0, 1.0/3.0);
    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
    vec3 i = floor(v + dot(v, C.yyy));
    vec3 x0 = v - i + dot(i, C.xxx);
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min(g.xyz, l.zxy);
    vec3 i2 = max(g.xyz, l.zxy);
    vec3 x1 = x0 - i1 + C.xxx;
    vec3 x2 = x0 - i2 + C.yyy;
    vec3 x3 = x0 - D.yyy;
    i = mod289(i);
    vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));
    float n_ = 0.142857142857;
    vec3 ns = n_ * D.wyz - D.xzx;
    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_);
    vec4 x = x_ * ns.x + ns.yyyy;
    vec4 y = y_ * ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);
    vec4 b0 = vec4(x.xy, y.xy);
    vec4 b1 = vec4(x.zw, y.zw);
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));
    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
    vec3 p0 = vec3(a0.xy, h.x);
    vec3 p1 = vec3(a0.zw, h.y);
    vec3 p2 = vec3(a1.xy, h.z);
    vec3 p3 = vec3(a1.zw, h.w);
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));
    p0 *= norm.x; p1 *= norm.y; p2 *= norm.z; p3 *= norm.w;
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
    m = m * m;
    return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));
  }
`, WA = `
vec3 snoiseVec3(vec3 x) {
  float s  = snoise(vec3( x ));
  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));
  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));
  vec3 c = vec3( s , s1 , s2 );
  return c;
}
`, XA = `
vec3 curlNoise(vec3 p) {
  const float e = .1;
  vec3 dx = vec3( e   , 0.0 , 0.0 );
  vec3 dy = vec3( 0.0 , e   , 0.0 );
  vec3 dz = vec3( 0.0 , 0.0 , e   );

  vec3 p_x0 = snoiseVec3( p - dx );
  vec3 p_x1 = snoiseVec3( p + dx );
  vec3 p_y0 = snoiseVec3( p - dy );
  vec3 p_y1 = snoiseVec3( p + dy );
  vec3 p_z0 = snoiseVec3( p - dz );
  vec3 p_z1 = snoiseVec3( p + dz );

  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

  const float divisor = 1.0 / ( 2.0 * e );
  return normalize( vec3( x , y , z ) * divisor );
}
`, YA = `
  vec3 fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }
  float cnoise(vec3 P) { // Your version is already close; use this if testing
    vec3 Pi0 = floor(P);
    vec3 Pi1 = Pi0 + vec3(1.0);
    Pi0 = mod289(Pi0);
    Pi1 = mod289(Pi1);
    vec3 Pf0 = fract(P);
    vec3 Pf1 = Pf0 - vec3(1.0);
    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    vec4 iy = vec4(Pi0.yy, Pi1.yy);
    vec4 iz0 = Pi0.zzzz;
    vec4 iz1 = Pi1.zzzz;
    vec4 ixy = permute(permute(ix) + iy);
    vec4 ixy0 = permute(ixy + iz0);
    vec4 ixy1 = permute(ixy + iz1);
    vec4 gx0 = ixy0 / 7.0;
    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
    gx0 = fract(gx0);
    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
    vec4 sz0 = step(gz0, vec4(0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);
    vec4 gx1 = ixy1 / 7.0;
    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
    gx1 = fract(gx1);
    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
    vec4 sz1 = step(gz1, vec4(0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);
    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x; g010 *= norm0.y; g100 *= norm0.z; g110 *= norm0.w;
    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x; g011 *= norm1.y; g101 *= norm1.z; g111 *= norm1.w;
    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);
    vec3 fade_xyz = fade(Pf0);
    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
    return 2.2 * n_xyz;
  }

`;
class qA extends fi {
  constructor(e = 512) {
    const t = new ds(
      VA(e * e),
      e,
      e,
      Cn,
      ei
    );
    t.needsUpdate = !0, super({
      uniforms: {
        positions: { value: t },
        uFrequency: { value: 0.25 },
        uTime: { value: 0 }
      },
      vertexShader: `
        precision mediump float;
        varying vec2 vUv;
        void main() {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `,
      fragmentShader: `
        precision mediump float;
        precision mediump sampler2D;
        uniform float uTime;
        uniform float uFrequency;
        uniform sampler2D positions;
        varying vec2 vUv;

        ${GA}
        ${WA}
        ${XA}
        ${YA}

        void main() {
          float time = uTime * 0.015;
          vec3 pos = texture2D(positions, vUv).rgb;
          vec3 curlPos = texture2D(positions, vUv).rgb;

          pos = curlNoise(pos * uFrequency + time);
          curlPos = curlNoise(curlPos * uFrequency + time);
          curlPos += curlNoise(curlPos * uFrequency * 2.0) * 0.5;
          curlPos += curlNoise(curlPos * uFrequency * 4.0) * 0.25;
          curlPos += curlNoise(curlPos * uFrequency * 8.0) * 0.125;

          gl_FragColor = vec4(mix(pos, curlPos, snoise(pos + time) * 0.5 + 0.5), 1.0);
        }
      `
    });
  }
}
class jA extends fi {
  constructor() {
    super({
      uniforms: {
        positions: { value: null },
        pointSize: { value: 3 },
        uTime: { value: 0 },
        uFocus: { value: 4 },
        uFov: { value: 45 },
        uBlur: { value: 30 },
        uGradientColors: { value: new Float32Array([1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1]) },
        uGradientStops: { value: new Float32Array([0, 0.3, 0.7, 1]) },
        uGradientRadius: { value: 2 }
      },
      vertexShader: `
        precision mediump float;
        uniform sampler2D positions;
        uniform float pointSize;
        uniform float uTime;
        uniform float uFocus;
        uniform float uFov;
        uniform float uBlur;
        uniform float uGradientRadius;
        varying float vDistance;
        varying float vGradientDistance;
        varying vec3 vWorldPosition;

        void main() {
          vec3 pos = texture2D(positions, position.xy).xyz;
          vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);
          vec4 worldPosition = modelMatrix * vec4(pos, 1.0);

          gl_Position = projectionMatrix * mvPosition;

          vDistance = abs(uFocus - -mvPosition.z);
          vGradientDistance = length(worldPosition.xyz) / uGradientRadius;

          float sizeFactor = step(1.0 - (1.0 / uFov), position.x);
          gl_PointSize = sizeFactor * vDistance * uBlur;
        }
      `,
      fragmentShader: `
        precision mediump float;
        varying float vDistance;
        varying float vGradientDistance;
        varying vec3 vWorldPosition;
        uniform vec3 uGradientColors[4];
        uniform float uGradientStops[4];
        uniform float uTime;

        vec3 getGradientColor(float t) {
          t = clamp(t, 0.0, 1.0);
          vec3 color = mix(uGradientColors[0], uGradientColors[1], smoothstep(uGradientStops[0], uGradientStops[1], t));
          color = mix(color, uGradientColors[2], smoothstep(uGradientStops[1], uGradientStops[2], t));
          color = mix(color, uGradientColors[3], smoothstep(uGradientStops[2], uGradientStops[3], t));
          return color;
        }

        void main() {
          vec2 cxy = 2.0 * gl_PointCoord - 1.0;
          float r2 = dot(cxy, cxy);
          if (r2 > 1.0) discard;
          float mask = 1.0 - smoothstep(0.95, 1.0, r2);

          float alpha = (1.04 - clamp(vDistance, 0.0, 1.0)) * mask;

          float timeOffset = sin(uTime * 0.5) * 0.1;
          vec3 gradientColor = getGradientColor(vGradientDistance + timeOffset);

          gl_FragColor = vec4(gradientColor, alpha);
        }
      `,
      transparent: !0,
      blending: Ar,
      depthWrite: !1
    });
  }
}
W_({ SimulationMaterial: qA, DepthOfFieldMaterial: jA });
function ZA({
  frequency: r = 0.15,
  speedFactor: e = 4,
  fov: t = 35,
  blur: n = 24,
  focus: i = 8.7,
  size: s = 256,
  gradientColors: l = ["#F0F4FF", "#637AFF", "#372CD5", "#F0F4FF"],
  gradientStops: c = [0.6, 0.65, 0.75, 0.8],
  gradientRadius: u = 1.35,
  ...h
}) {
  const f = Si(), p = Si(), [m] = ra(() => new ou()), [v] = ra(() => new or(-1, 1, 1, -1, 1 / Math.pow(2, 53), 1)), [y] = ra(() => new Float32Array([-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0])), [E] = ra(() => new Float32Array([0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0])), x = BA(s, s, {
    minFilter: Wt,
    magFilter: Wt,
    format: Cn,
    stencilBuffer: !1,
    type: ei
  }), _ = xf(() => {
    const M = s * s, b = new Float32Array(M * 3);
    for (let A = 0; A < M; A++) {
      const C = A * 3;
      b[C + 0] = A % s / s, b[C + 1] = Math.floor(A / s) / s, b[C + 2] = 0;
    }
    return b;
  }, [s]), w = xf(() => {
    const M = l.map((b) => {
      const A = HA(b);
      return [A.r, A.g, A.b];
    });
    return {
      colors: new Float32Array(M.flat()),
      stops: new Float32Array(c)
    };
  }, [l, c]);
  return sp(({ gl: M, clock: b }) => {
    if (!f.current || !p.current)
      return;
    M.setRenderTarget(x), M.clear(), M.render(m, v), M.setRenderTarget(null);
    const A = p.current;
    A && A.uniforms && (A.uniforms.positions.value = x.texture, A.uniforms.uFocus.value = i, A.uniforms.uFov.value = t, A.uniforms.uBlur.value = n, A.uniforms.uGradientColors.value = w.colors, A.uniforms.uGradientStops.value = w.stops, A.uniforms.uGradientRadius.value = u, A.uniforms.uTime.value = b.elapsedTime);
    const C = f.current;
    C && C.uniforms && (C.uniforms.uTime.value = b.elapsedTime * e, C.uniforms.uFrequency.value = Pv.lerp(
      C.uniforms.uFrequency.value,
      r,
      0.1
    ));
  }), /* @__PURE__ */ Et.jsxs(Et.Fragment, { children: [
    fA(
      /* @__PURE__ */ Et.jsxs("mesh", { children: [
        /* @__PURE__ */ Et.jsx("simulationMaterial", { ref: f, args: [s] }),
        /* @__PURE__ */ Et.jsxs("bufferGeometry", { children: [
          /* @__PURE__ */ Et.jsx("bufferAttribute", { attach: "attributes-position", count: y.length / 3, array: y, itemSize: 3 }),
          /* @__PURE__ */ Et.jsx("bufferAttribute", { attach: "attributes-uv", count: E.length / 2, array: E, itemSize: 2 })
        ] })
      ] }),
      m
    ),
    /* @__PURE__ */ Et.jsxs("points", { ...h, children: [
      /* @__PURE__ */ Et.jsx("bufferGeometry", { children: /* @__PURE__ */ Et.jsx("bufferAttribute", { attach: "attributes-position", count: _.length / 3, array: _, itemSize: 3 }) }),
      /* @__PURE__ */ Et.jsx("depthOfFieldMaterial", { ref: p })
    ] })
  ] });
}
function JA({
  backgroundColor: r = "#fff",
  // Add backgroundColor prop
  frequency: e = 0.15,
  speedFactor: t = 4,
  rotationSpeed: n = 3.3,
  gradientColors: i = ["#F0F4FF", "#637AFF", "#372CD5", "#F0F4FF"],
  gradientStops: s = [0.6, 0.65, 0.75, 0.8],
  gradientRadius: l = 1.35,
  autoRotate: c = !0,
  enableVerticalRotation: u = !0,
  blur: h = 24,
  focus: f = 8.7,
  fov: p = 35,
  cameraZ: m = 7.6,
  particles: v = 256
}) {
  const { camera: y, gl: E, size: x } = xi(), _ = Si();
  return rr(() => {
    const w = new Fe(r);
    E.setClearColor(w, 1);
  }, [E, r]), rr(() => {
    const w = () => {
      y.aspect = x.width / x.height, y.updateProjectionMatrix(), E.setSize(x.width, x.height);
    };
    return window.addEventListener("resize", w), w(), () => window.removeEventListener("resize", w);
  }, [y, E, x]), sp((w, M) => {
    _.current && _.current.update && _.current.update(M);
  }), rr(() => {
    y.position.set(0, 0, m);
  }, [m, y]), /* @__PURE__ */ Et.jsxs(Et.Fragment, { children: [
    /* @__PURE__ */ Et.jsx(
      kA,
      {
        ref: _,
        makeDefault: !0,
        autoRotate: c,
        autoRotateSpeed: n,
        enableZoom: !1,
        enableDamping: !0,
        dampingFactor: 0.05,
        enableRotate: !0,
        minPolarAngle: u ? 0 : Math.PI / 2,
        maxPolarAngle: u ? Math.PI : Math.PI / 2
      }
    ),
    /* @__PURE__ */ Et.jsx("ambientLight", {}),
    /* @__PURE__ */ Et.jsx(
      ZA,
      {
        frequency: e,
        speedFactor: t,
        fov: p,
        blur: h,
        focus: f,
        position: [0, 0, 0],
        size: v,
        gradientColors: i,
        gradientStops: s,
        gradientRadius: l
      }
    )
  ] });
}
function eR({
  backgroundColor: r = "#fff",
  frequency: e = 0.15,
  speedFactor: t = 4,
  rotationSpeed: n = 0.3,
  gradientColors: i = ["#F0F4FF", "#637AFF", "#372CD5", "#F0F4FF"],
  gradientStops: s = [0.6, 0.65, 0.75, 0.8],
  gradientRadius: l = 1.35,
  autoRotate: c = !0,
  enableVerticalRotation: u = !1,
  blur: h = 24,
  focus: f = 8.7,
  fov: p = 35,
  cameraZ: m = 7.6,
  particles: v = 256
}) {
  return /* @__PURE__ */ Et.jsx("div", { style: { width: "100%", height: "100%", position: "relative" }, children: /* @__PURE__ */ Et.jsx(
    PA,
    {
      camera: { fov: p, position: [0, 0, m] },
      gl: {
        alpha: !1,
        antialias: !0,
        powerPreference: "high-performance",
        desynchronized: !0,
        premultipliedAlpha: !1,
        preserveDrawingBuffer: !1,
        failIfMajorPerformanceCaveat: !1,
        stencil: !1,
        depth: !0
      },
      dpr: [1, 2],
      resize: { scroll: !1, offsetSize: !0 },
      style: {
        position: "absolute",
        inset: 0,
        display: "block",
        background: r
      },
      children: /* @__PURE__ */ Et.jsx(
        JA,
        {
          backgroundColor: r,
          frequency: e,
          speedFactor: t,
          rotationSpeed: n,
          gradientColors: i,
          gradientStops: s,
          gradientRadius: l,
          autoRotate: c,
          enableVerticalRotation: u,
          blur: h,
          focus: f,
          fov: p,
          cameraZ: m,
          particles: v
        }
      )
    }
  ) });
}
export {
  eR as default
};
