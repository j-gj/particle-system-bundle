import * as qt from "react";
import Ng, { useReducer as r2, useRef as ys, useDebugValue as a2, useEffect as fc, useLayoutEffect as s2, useState as tp, useMemo as gx } from "react";
function o2(s) {
  return s && s.__esModule && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s;
}
var yx = { exports: {} }, Vh = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var $T;
function l2() {
  if ($T)
    return Vh;
  $T = 1;
  var s = Ng, e = Symbol.for("react.element"), t = Symbol.for("react.fragment"), n = Object.prototype.hasOwnProperty, r = s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, o = { key: !0, ref: !0, __self: !0, __source: !0 };
  function c(f, h, p) {
    var v, y = {}, x = null, M = null;
    p !== void 0 && (x = "" + p), h.key !== void 0 && (x = "" + h.key), h.ref !== void 0 && (M = h.ref);
    for (v in h)
      n.call(h, v) && !o.hasOwnProperty(v) && (y[v] = h[v]);
    if (f && f.defaultProps)
      for (v in h = f.defaultProps, h)
        y[v] === void 0 && (y[v] = h[v]);
    return { $$typeof: e, type: f, key: x, ref: M, props: y, _owner: r.current };
  }
  return Vh.Fragment = t, Vh.jsx = c, Vh.jsxs = c, Vh;
}
var kh = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var eb;
function u2() {
  return eb || (eb = 1, process.env.NODE_ENV !== "production" && function() {
    var s = Ng, e = Symbol.for("react.element"), t = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), o = Symbol.for("react.profiler"), c = Symbol.for("react.provider"), f = Symbol.for("react.context"), h = Symbol.for("react.forward_ref"), p = Symbol.for("react.suspense"), v = Symbol.for("react.suspense_list"), y = Symbol.for("react.memo"), x = Symbol.for("react.lazy"), M = Symbol.for("react.offscreen"), T = Symbol.iterator, C = "@@iterator";
    function w($) {
      if ($ === null || typeof $ != "object")
        return null;
      var Fe = T && $[T] || $[C];
      return typeof Fe == "function" ? Fe : null;
    }
    var E = s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function L($) {
      {
        for (var Fe = arguments.length, st = new Array(Fe > 1 ? Fe - 1 : 0), G = 1; G < Fe; G++)
          st[G - 1] = arguments[G];
        R("error", $, st);
      }
    }
    function R($, Fe, st) {
      {
        var G = E.ReactDebugCurrentFrame, ae = G.getStackAddendum();
        ae !== "" && (Fe += "%s", st = st.concat([ae]));
        var pe = st.map(function(se) {
          return String(se);
        });
        pe.unshift("Warning: " + Fe), Function.prototype.apply.call(console[$], console, pe);
      }
    }
    var U = !1, F = !1, z = !1, B = !1, W = !1, O;
    O = Symbol.for("react.module.reference");
    function I($) {
      return !!(typeof $ == "string" || typeof $ == "function" || $ === n || $ === o || W || $ === r || $ === p || $ === v || B || $ === M || U || F || z || typeof $ == "object" && $ !== null && ($.$$typeof === x || $.$$typeof === y || $.$$typeof === c || $.$$typeof === f || $.$$typeof === h || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      $.$$typeof === O || $.getModuleId !== void 0));
    }
    function Z($, Fe, st) {
      var G = $.displayName;
      if (G)
        return G;
      var ae = Fe.displayName || Fe.name || "";
      return ae !== "" ? st + "(" + ae + ")" : st;
    }
    function ie($) {
      return $.displayName || "Context";
    }
    function fe($) {
      if ($ == null)
        return null;
      if (typeof $.tag == "number" && L("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof $ == "function")
        return $.displayName || $.name || null;
      if (typeof $ == "string")
        return $;
      switch ($) {
        case n:
          return "Fragment";
        case t:
          return "Portal";
        case o:
          return "Profiler";
        case r:
          return "StrictMode";
        case p:
          return "Suspense";
        case v:
          return "SuspenseList";
      }
      if (typeof $ == "object")
        switch ($.$$typeof) {
          case f:
            var Fe = $;
            return ie(Fe) + ".Consumer";
          case c:
            var st = $;
            return ie(st._context) + ".Provider";
          case h:
            return Z($, $.render, "ForwardRef");
          case y:
            var G = $.displayName || null;
            return G !== null ? G : fe($.type) || "Memo";
          case x: {
            var ae = $, pe = ae._payload, se = ae._init;
            try {
              return fe(se(pe));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var K = Object.assign, he = 0, Te, Me, ne, le, re, J, ue;
    function Pe() {
    }
    Pe.__reactDisabledLog = !0;
    function qe() {
      {
        if (he === 0) {
          Te = console.log, Me = console.info, ne = console.warn, le = console.error, re = console.group, J = console.groupCollapsed, ue = console.groupEnd;
          var $ = {
            configurable: !0,
            enumerable: !0,
            value: Pe,
            writable: !0
          };
          Object.defineProperties(console, {
            info: $,
            log: $,
            warn: $,
            error: $,
            group: $,
            groupCollapsed: $,
            groupEnd: $
          });
        }
        he++;
      }
    }
    function $e() {
      {
        if (he--, he === 0) {
          var $ = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: K({}, $, {
              value: Te
            }),
            info: K({}, $, {
              value: Me
            }),
            warn: K({}, $, {
              value: ne
            }),
            error: K({}, $, {
              value: le
            }),
            group: K({}, $, {
              value: re
            }),
            groupCollapsed: K({}, $, {
              value: J
            }),
            groupEnd: K({}, $, {
              value: ue
            })
          });
        }
        he < 0 && L("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var it = E.ReactCurrentDispatcher, gt;
    function ot($, Fe, st) {
      {
        if (gt === void 0)
          try {
            throw Error();
          } catch (ae) {
            var G = ae.stack.trim().match(/\n( *(at )?)/);
            gt = G && G[1] || "";
          }
        return `
` + gt + $;
      }
    }
    var Vt = !1, nn;
    {
      var Tt = typeof WeakMap == "function" ? WeakMap : Map;
      nn = new Tt();
    }
    function Q($, Fe) {
      if (!$ || Vt)
        return "";
      {
        var st = nn.get($);
        if (st !== void 0)
          return st;
      }
      var G;
      Vt = !0;
      var ae = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var pe;
      pe = it.current, it.current = null, qe();
      try {
        if (Fe) {
          var se = function() {
            throw Error();
          };
          if (Object.defineProperty(se.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(se, []);
            } catch (Ct) {
              G = Ct;
            }
            Reflect.construct($, [], se);
          } else {
            try {
              se.call();
            } catch (Ct) {
              G = Ct;
            }
            $.call(se.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (Ct) {
            G = Ct;
          }
          $();
        }
      } catch (Ct) {
        if (Ct && G && typeof Ct.stack == "string") {
          for (var de = Ct.stack.split(`
`), tt = G.stack.split(`
`), ft = de.length - 1, _t = tt.length - 1; ft >= 1 && _t >= 0 && de[ft] !== tt[_t]; )
            _t--;
          for (; ft >= 1 && _t >= 0; ft--, _t--)
            if (de[ft] !== tt[_t]) {
              if (ft !== 1 || _t !== 1)
                do
                  if (ft--, _t--, _t < 0 || de[ft] !== tt[_t]) {
                    var At = `
` + de[ft].replace(" at new ", " at ");
                    return $.displayName && At.includes("<anonymous>") && (At = At.replace("<anonymous>", $.displayName)), typeof $ == "function" && nn.set($, At), At;
                  }
                while (ft >= 1 && _t >= 0);
              break;
            }
        }
      } finally {
        Vt = !1, it.current = pe, $e(), Error.prepareStackTrace = ae;
      }
      var Bt = $ ? $.displayName || $.name : "", wt = Bt ? ot(Bt) : "";
      return typeof $ == "function" && nn.set($, wt), wt;
    }
    function ke($, Fe, st) {
      return Q($, !1);
    }
    function Re($) {
      var Fe = $.prototype;
      return !!(Fe && Fe.isReactComponent);
    }
    function Xe($, Fe, st) {
      if ($ == null)
        return "";
      if (typeof $ == "function")
        return Q($, Re($));
      if (typeof $ == "string")
        return ot($);
      switch ($) {
        case p:
          return ot("Suspense");
        case v:
          return ot("SuspenseList");
      }
      if (typeof $ == "object")
        switch ($.$$typeof) {
          case h:
            return ke($.render);
          case y:
            return Xe($.type, Fe, st);
          case x: {
            var G = $, ae = G._payload, pe = G._init;
            try {
              return Xe(pe(ae), Fe, st);
            } catch {
            }
          }
        }
      return "";
    }
    var Ue = Object.prototype.hasOwnProperty, Mt = {}, lt = E.ReactDebugCurrentFrame;
    function at($) {
      if ($) {
        var Fe = $._owner, st = Xe($.type, $._source, Fe ? Fe.type : null);
        lt.setExtraStackFrame(st);
      } else
        lt.setExtraStackFrame(null);
    }
    function Dt($, Fe, st, G, ae) {
      {
        var pe = Function.call.bind(Ue);
        for (var se in $)
          if (pe($, se)) {
            var de = void 0;
            try {
              if (typeof $[se] != "function") {
                var tt = Error((G || "React class") + ": " + st + " type `" + se + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof $[se] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw tt.name = "Invariant Violation", tt;
              }
              de = $[se](Fe, se, G, st, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ft) {
              de = ft;
            }
            de && !(de instanceof Error) && (at(ae), L("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", G || "React class", st, se, typeof de), at(null)), de instanceof Error && !(de.message in Mt) && (Mt[de.message] = !0, at(ae), L("Failed %s type: %s", st, de.message), at(null));
          }
      }
    }
    var Zt = Array.isArray;
    function rn($) {
      return Zt($);
    }
    function X($) {
      {
        var Fe = typeof Symbol == "function" && Symbol.toStringTag, st = Fe && $[Symbol.toStringTag] || $.constructor.name || "Object";
        return st;
      }
    }
    function H($) {
      try {
        return ye($), !1;
      } catch {
        return !0;
      }
    }
    function ye($) {
      return "" + $;
    }
    function Ye($) {
      if (H($))
        return L("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", X($)), ye($);
    }
    var Ve = E.ReactCurrentOwner, Ze = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, bt, Ke, Se;
    Se = {};
    function Ge($) {
      if (Ue.call($, "ref")) {
        var Fe = Object.getOwnPropertyDescriptor($, "ref").get;
        if (Fe && Fe.isReactWarning)
          return !1;
      }
      return $.ref !== void 0;
    }
    function yt($) {
      if (Ue.call($, "key")) {
        var Fe = Object.getOwnPropertyDescriptor($, "key").get;
        if (Fe && Fe.isReactWarning)
          return !1;
      }
      return $.key !== void 0;
    }
    function Ne($, Fe) {
      if (typeof $.ref == "string" && Ve.current && Fe && Ve.current.stateNode !== Fe) {
        var st = fe(Ve.current.type);
        Se[st] || (L('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', fe(Ve.current.type), $.ref), Se[st] = !0);
      }
    }
    function rt($, Fe) {
      {
        var st = function() {
          bt || (bt = !0, L("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", Fe));
        };
        st.isReactWarning = !0, Object.defineProperty($, "key", {
          get: st,
          configurable: !0
        });
      }
    }
    function ee($, Fe) {
      {
        var st = function() {
          Ke || (Ke = !0, L("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", Fe));
        };
        st.isReactWarning = !0, Object.defineProperty($, "ref", {
          get: st,
          configurable: !0
        });
      }
    }
    var Ee = function($, Fe, st, G, ae, pe, se) {
      var de = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: e,
        // Built-in properties that belong on the element
        type: $,
        key: Fe,
        ref: st,
        props: se,
        // Record the component responsible for creating this element.
        _owner: pe
      };
      return de._store = {}, Object.defineProperty(de._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(de, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: G
      }), Object.defineProperty(de, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: ae
      }), Object.freeze && (Object.freeze(de.props), Object.freeze(de)), de;
    };
    function xe($, Fe, st, G, ae) {
      {
        var pe, se = {}, de = null, tt = null;
        st !== void 0 && (Ye(st), de = "" + st), yt(Fe) && (Ye(Fe.key), de = "" + Fe.key), Ge(Fe) && (tt = Fe.ref, Ne(Fe, ae));
        for (pe in Fe)
          Ue.call(Fe, pe) && !Ze.hasOwnProperty(pe) && (se[pe] = Fe[pe]);
        if ($ && $.defaultProps) {
          var ft = $.defaultProps;
          for (pe in ft)
            se[pe] === void 0 && (se[pe] = ft[pe]);
        }
        if (de || tt) {
          var _t = typeof $ == "function" ? $.displayName || $.name || "Unknown" : $;
          de && rt(se, _t), tt && ee(se, _t);
        }
        return Ee($, de, tt, ae, G, Ve.current, se);
      }
    }
    var k = E.ReactCurrentOwner, ze = E.ReactDebugCurrentFrame;
    function Ce($) {
      if ($) {
        var Fe = $._owner, st = Xe($.type, $._source, Fe ? Fe.type : null);
        ze.setExtraStackFrame(st);
      } else
        ze.setExtraStackFrame(null);
    }
    var Be;
    Be = !1;
    function ut($) {
      return typeof $ == "object" && $ !== null && $.$$typeof === e;
    }
    function He() {
      {
        if (k.current) {
          var $ = fe(k.current.type);
          if ($)
            return `

Check the render method of \`` + $ + "`.";
        }
        return "";
      }
    }
    function vt($) {
      {
        if ($ !== void 0) {
          var Fe = $.fileName.replace(/^.*[\\\/]/, ""), st = $.lineNumber;
          return `

Check your code at ` + Fe + ":" + st + ".";
        }
        return "";
      }
    }
    var Ut = {};
    function Nt($) {
      {
        var Fe = He();
        if (!Fe) {
          var st = typeof $ == "string" ? $ : $.displayName || $.name;
          st && (Fe = `

Check the top-level render call using <` + st + ">.");
        }
        return Fe;
      }
    }
    function Kt($, Fe) {
      {
        if (!$._store || $._store.validated || $.key != null)
          return;
        $._store.validated = !0;
        var st = Nt(Fe);
        if (Ut[st])
          return;
        Ut[st] = !0;
        var G = "";
        $ && $._owner && $._owner !== k.current && (G = " It was passed a child from " + fe($._owner.type) + "."), Ce($), L('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', st, G), Ce(null);
      }
    }
    function Un($, Fe) {
      {
        if (typeof $ != "object")
          return;
        if (rn($))
          for (var st = 0; st < $.length; st++) {
            var G = $[st];
            ut(G) && Kt(G, Fe);
          }
        else if (ut($))
          $._store && ($._store.validated = !0);
        else if ($) {
          var ae = w($);
          if (typeof ae == "function" && ae !== $.entries)
            for (var pe = ae.call($), se; !(se = pe.next()).done; )
              ut(se.value) && Kt(se.value, Fe);
        }
      }
    }
    function wn($) {
      {
        var Fe = $.type;
        if (Fe == null || typeof Fe == "string")
          return;
        var st;
        if (typeof Fe == "function")
          st = Fe.propTypes;
        else if (typeof Fe == "object" && (Fe.$$typeof === h || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        Fe.$$typeof === y))
          st = Fe.propTypes;
        else
          return;
        if (st) {
          var G = fe(Fe);
          Dt(st, $.props, "prop", G, $);
        } else if (Fe.PropTypes !== void 0 && !Be) {
          Be = !0;
          var ae = fe(Fe);
          L("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", ae || "Unknown");
        }
        typeof Fe.getDefaultProps == "function" && !Fe.getDefaultProps.isReactClassApproved && L("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function Yi($) {
      {
        for (var Fe = Object.keys($.props), st = 0; st < Fe.length; st++) {
          var G = Fe[st];
          if (G !== "children" && G !== "key") {
            Ce($), L("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", G), Ce(null);
            break;
          }
        }
        $.ref !== null && (Ce($), L("Invalid attribute `ref` supplied to `React.Fragment`."), Ce(null));
      }
    }
    var Li = {};
    function eo($, Fe, st, G, ae, pe) {
      {
        var se = I($);
        if (!se) {
          var de = "";
          ($ === void 0 || typeof $ == "object" && $ !== null && Object.keys($).length === 0) && (de += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var tt = vt(ae);
          tt ? de += tt : de += He();
          var ft;
          $ === null ? ft = "null" : rn($) ? ft = "array" : $ !== void 0 && $.$$typeof === e ? (ft = "<" + (fe($.type) || "Unknown") + " />", de = " Did you accidentally export a JSX literal instead of a component?") : ft = typeof $, L("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", ft, de);
        }
        var _t = xe($, Fe, st, ae, pe);
        if (_t == null)
          return _t;
        if (se) {
          var At = Fe.children;
          if (At !== void 0)
            if (G)
              if (rn(At)) {
                for (var Bt = 0; Bt < At.length; Bt++)
                  Un(At[Bt], $);
                Object.freeze && Object.freeze(At);
              } else
                L("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              Un(At, $);
        }
        if (Ue.call(Fe, "key")) {
          var wt = fe($), Ct = Object.keys(Fe).filter(function(ji) {
            return ji !== "key";
          }), yn = Ct.length > 0 ? "{key: someKey, " + Ct.join(": ..., ") + ": ...}" : "{key: someKey}";
          if (!Li[wt + yn]) {
            var Fn = Ct.length > 0 ? "{" + Ct.join(": ..., ") + ": ...}" : "{}";
            L(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`, yn, wt, Fn, wt), Li[wt + yn] = !0;
          }
        }
        return $ === n ? Yi(_t) : wn(_t), _t;
      }
    }
    function $i($, Fe, st) {
      return eo($, Fe, st, !0);
    }
    function Ka($, Fe, st) {
      return eo($, Fe, st, !1);
    }
    var Br = Ka, Yo = $i;
    kh.Fragment = n, kh.jsx = Br, kh.jsxs = Yo;
  }()), kh;
}
process.env.NODE_ENV === "production" ? yx.exports = l2() : yx.exports = u2();
var Mn = yx.exports;
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const Og = "157", nc = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, ic = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, K1 = 0, _x = 1, Q1 = 2, c2 = 3, $1 = 0, Ig = 1, rp = 2, vs = 3, ko = 0, Fr = 1, Ys = 2, f2 = 2, Ho = 0, ql = 1, Ag = 2, xx = 3, Sx = 4, ew = 5, ac = 100, tw = 101, nw = 102, Mx = 103, Ex = 104, iw = 200, rw = 201, aw = 202, sw = 203, dS = 204, hS = 205, ow = 206, lw = 207, uw = 208, cw = 209, fw = 210, dw = 0, hw = 1, pw = 2, Rg = 3, mw = 4, vw = 5, gw = 6, yw = 7, Dp = 0, _w = 1, xw = 2, qs = 0, Sw = 1, Mw = 2, Ew = 3, pS = 4, Tw = 5, Fg = 300, Go = 301, Ql = 302, cp = 303, fp = 304, gd = 306, dp = 1e3, Mr = 1001, hp = 1002, di = 1003, Cg = 1004, d2 = 1004, ap = 1005, h2 = 1005, hi = 1006, mS = 1007, p2 = 1007, $l = 1008, m2 = 1008, Zs = 1009, bw = 1010, ww = 1011, zg = 1012, vS = 1013, Bo = 1014, Ta = 1015, vc = 1016, gS = 1017, yS = 1018, Zl = 1020, Aw = 1021, Er = 1023, Rw = 1024, Cw = 1025, Jl = 1026, gc = 1027, Lw = 1028, _S = 1029, Pw = 1030, xS = 1031, SS = 1033, yg = 33776, _g = 33777, xg = 33778, Sg = 33779, Tx = 35840, bx = 35841, wx = 35842, Ax = 35843, Dw = 36196, Rx = 37492, Cx = 37496, Lx = 37808, Px = 37809, Dx = 37810, Ux = 37811, Nx = 37812, Ox = 37813, Ix = 37814, Fx = 37815, zx = 37816, Bx = 37817, Hx = 37818, Vx = 37819, kx = 37820, Gx = 37821, Mg = 36492, Wx = 36494, Xx = 36495, Uw = 36283, Yx = 36284, jx = 36285, qx = 36286, Nw = 2200, Ow = 2201, Iw = 2202, pp = 2300, mp = 2301, Eg = 2302, oc = 2400, lc = 2401, vp = 2402, Bg = 2500, MS = 2501, v2 = 0, g2 = 1, y2 = 2, ES = 3e3, Kl = 3001, Fw = 3200, zw = 3201, tu = 0, Bw = 1, Ea = "", Gi = "srgb", Ks = "srgb-linear", Hg = "display-p3", Up = "display-p3-linear", gp = "linear", Zn = "srgb", yp = "rec709", _p = "p3", _2 = 0, Tg = 7680, x2 = 7681, S2 = 7682, M2 = 7683, E2 = 34055, T2 = 34056, b2 = 5386, w2 = 512, A2 = 513, R2 = 514, C2 = 515, L2 = 516, P2 = 517, D2 = 518, Hw = 519, Vw = 512, kw = 513, Gw = 514, Ww = 515, Xw = 516, Yw = 517, jw = 518, qw = 519, xp = 35044, U2 = 35048, N2 = 35040, O2 = 35045, I2 = 35049, F2 = 35041, z2 = 35046, B2 = 35050, H2 = 35042, V2 = "100", Zx = "300 es", Lg = 1035, js = 2e3, Sp = 2001;
let Xo = class {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const r = this._listeners[e];
    if (r !== void 0) {
      const o = r.indexOf(t);
      o !== -1 && r.splice(o, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const r = n.slice(0);
      for (let o = 0, c = r.length; o < c; o++)
        r[o].call(this, e);
      e.target = null;
    }
  }
};
const xr = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let tb = 1234567;
const dc = Math.PI / 180, hd = 180 / Math.PI;
function ba() {
  const s = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
  return (xr[s & 255] + xr[s >> 8 & 255] + xr[s >> 16 & 255] + xr[s >> 24 & 255] + "-" + xr[e & 255] + xr[e >> 8 & 255] + "-" + xr[e >> 16 & 15 | 64] + xr[e >> 24 & 255] + "-" + xr[t & 63 | 128] + xr[t >> 8 & 255] + "-" + xr[t >> 16 & 255] + xr[t >> 24 & 255] + xr[n & 255] + xr[n >> 8 & 255] + xr[n >> 16 & 255] + xr[n >> 24 & 255]).toLowerCase();
}
function yi(s, e, t) {
  return Math.max(e, Math.min(t, s));
}
function TS(s, e) {
  return (s % e + e) % e;
}
function k2(s, e, t, n, r) {
  return n + (s - e) * (r - n) / (t - e);
}
function G2(s, e, t) {
  return s !== e ? (t - s) / (e - s) : 0;
}
function sp(s, e, t) {
  return (1 - t) * s + t * e;
}
function W2(s, e, t, n) {
  return sp(s, e, 1 - Math.exp(-t * n));
}
function X2(s, e = 1) {
  return e - Math.abs(TS(s, e * 2) - e);
}
function Y2(s, e, t) {
  return s <= e ? 0 : s >= t ? 1 : (s = (s - e) / (t - e), s * s * (3 - 2 * s));
}
function j2(s, e, t) {
  return s <= e ? 0 : s >= t ? 1 : (s = (s - e) / (t - e), s * s * s * (s * (s * 6 - 15) + 10));
}
function q2(s, e) {
  return s + Math.floor(Math.random() * (e - s + 1));
}
function Z2(s, e) {
  return s + Math.random() * (e - s);
}
function J2(s) {
  return s * (0.5 - Math.random());
}
function K2(s) {
  s !== void 0 && (tb = s);
  let e = tb += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function Q2(s) {
  return s * dc;
}
function $2(s) {
  return s * hd;
}
function Jx(s) {
  return (s & s - 1) === 0 && s !== 0;
}
function Zw(s) {
  return Math.pow(2, Math.ceil(Math.log(s) / Math.LN2));
}
function Pg(s) {
  return Math.pow(2, Math.floor(Math.log(s) / Math.LN2));
}
function eD(s, e, t, n, r) {
  const o = Math.cos, c = Math.sin, f = o(t / 2), h = c(t / 2), p = o((e + n) / 2), v = c((e + n) / 2), y = o((e - n) / 2), x = c((e - n) / 2), M = o((n - e) / 2), T = c((n - e) / 2);
  switch (r) {
    case "XYX":
      s.set(f * v, h * y, h * x, f * p);
      break;
    case "YZY":
      s.set(h * x, f * v, h * y, f * p);
      break;
    case "ZXZ":
      s.set(h * y, h * x, f * v, f * p);
      break;
    case "XZX":
      s.set(f * v, h * T, h * M, f * p);
      break;
    case "YXY":
      s.set(h * M, f * v, h * T, f * p);
      break;
    case "ZYZ":
      s.set(h * T, h * M, f * v, f * p);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + r);
  }
}
function ra(s, e) {
  switch (e.constructor) {
    case Float32Array:
      return s;
    case Uint32Array:
      return s / 4294967295;
    case Uint16Array:
      return s / 65535;
    case Uint8Array:
      return s / 255;
    case Int32Array:
      return Math.max(s / 2147483647, -1);
    case Int16Array:
      return Math.max(s / 32767, -1);
    case Int8Array:
      return Math.max(s / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function un(s, e) {
  switch (e.constructor) {
    case Float32Array:
      return s;
    case Uint32Array:
      return Math.round(s * 4294967295);
    case Uint16Array:
      return Math.round(s * 65535);
    case Uint8Array:
      return Math.round(s * 255);
    case Int32Array:
      return Math.round(s * 2147483647);
    case Int16Array:
      return Math.round(s * 32767);
    case Int8Array:
      return Math.round(s * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const Jw = {
  DEG2RAD: dc,
  RAD2DEG: hd,
  generateUUID: ba,
  clamp: yi,
  euclideanModulo: TS,
  mapLinear: k2,
  inverseLerp: G2,
  lerp: sp,
  damp: W2,
  pingpong: X2,
  smoothstep: Y2,
  smootherstep: j2,
  randInt: q2,
  randFloat: Z2,
  randFloatSpread: J2,
  seededRandom: K2,
  degToRad: Q2,
  radToDeg: $2,
  isPowerOfTwo: Jx,
  ceilPowerOfTwo: Zw,
  floorPowerOfTwo: Pg,
  setQuaternionFromProperEuler: eD,
  normalize: un,
  denormalize: ra
};
class Ie {
  constructor(e = 0, t = 0) {
    Ie.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, r = e.elements;
    return this.x = r[0] * t + r[3] * n + r[6], this.y = r[1] * t + r[4] * n + r[7], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(yi(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t), r = Math.sin(t), o = this.x - e.x, c = this.y - e.y;
    return this.x = o * n - c * r + e.x, this.y = o * r + c * n + e.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class cn {
  constructor(e, t, n, r, o, c, f, h, p) {
    cn.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, r, o, c, f, h, p);
  }
  set(e, t, n, r, o, c, f, h, p) {
    const v = this.elements;
    return v[0] = e, v[1] = r, v[2] = f, v[3] = t, v[4] = o, v[5] = h, v[6] = n, v[7] = c, v[8] = p, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, r = t.elements, o = this.elements, c = n[0], f = n[3], h = n[6], p = n[1], v = n[4], y = n[7], x = n[2], M = n[5], T = n[8], C = r[0], w = r[3], E = r[6], L = r[1], R = r[4], U = r[7], F = r[2], z = r[5], B = r[8];
    return o[0] = c * C + f * L + h * F, o[3] = c * w + f * R + h * z, o[6] = c * E + f * U + h * B, o[1] = p * C + v * L + y * F, o[4] = p * w + v * R + y * z, o[7] = p * E + v * U + y * B, o[2] = x * C + M * L + T * F, o[5] = x * w + M * R + T * z, o[8] = x * E + M * U + T * B, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[1], r = e[2], o = e[3], c = e[4], f = e[5], h = e[6], p = e[7], v = e[8];
    return t * c * v - t * f * p - n * o * v + n * f * h + r * o * p - r * c * h;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], r = e[2], o = e[3], c = e[4], f = e[5], h = e[6], p = e[7], v = e[8], y = v * c - f * p, x = f * h - v * o, M = p * o - c * h, T = t * y + n * x + r * M;
    if (T === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const C = 1 / T;
    return e[0] = y * C, e[1] = (r * p - v * n) * C, e[2] = (f * n - r * c) * C, e[3] = x * C, e[4] = (v * t - r * h) * C, e[5] = (r * o - f * t) * C, e[6] = M * C, e[7] = (n * h - p * t) * C, e[8] = (c * t - n * o) * C, this;
  }
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  setUvTransform(e, t, n, r, o, c, f) {
    const h = Math.cos(o), p = Math.sin(o);
    return this.set(
      n * h,
      n * p,
      -n * (h * c + p * f) + c + e,
      -r * p,
      r * h,
      -r * (-p * c + h * f) + f + t,
      0,
      0,
      1
    ), this;
  }
  //
  scale(e, t) {
    return this.premultiply(w_.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(w_.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(w_.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    return e.isVector2 ? this.set(
      1,
      0,
      e.x,
      0,
      1,
      e.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  makeRotation(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      n,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  //
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let r = 0; r < 9; r++)
      if (t[r] !== n[r])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const w_ = /* @__PURE__ */ new cn();
function Kw(s) {
  for (let e = s.length - 1; e >= 0; --e)
    if (s[e] >= 65535)
      return !0;
  return !1;
}
const tD = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function od(s, e) {
  return new tD[s](e);
}
function Mp(s) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", s);
}
function Qw() {
  const s = Mp("canvas");
  return s.style.display = "block", s;
}
const nb = {};
function op(s) {
  s in nb || (nb[s] = !0, console.warn(s));
}
const ib = /* @__PURE__ */ new cn().set(
  0.8224621,
  0.177538,
  0,
  0.0331941,
  0.9668058,
  0,
  0.0170827,
  0.0723974,
  0.9105199
), rb = /* @__PURE__ */ new cn().set(
  1.2249401,
  -0.2249404,
  0,
  -0.0420569,
  1.0420571,
  0,
  -0.0196376,
  -0.0786361,
  1.0982735
), Av = {
  [Ks]: {
    transfer: gp,
    primaries: yp,
    toReference: (s) => s,
    fromReference: (s) => s
  },
  [Gi]: {
    transfer: Zn,
    primaries: yp,
    toReference: (s) => s.convertSRGBToLinear(),
    fromReference: (s) => s.convertLinearToSRGB()
  },
  [Up]: {
    transfer: gp,
    primaries: _p,
    toReference: (s) => s.applyMatrix3(rb),
    fromReference: (s) => s.applyMatrix3(ib)
  },
  [Hg]: {
    transfer: Zn,
    primaries: _p,
    toReference: (s) => s.convertSRGBToLinear().applyMatrix3(rb),
    fromReference: (s) => s.applyMatrix3(ib).convertLinearToSRGB()
  }
}, nD = /* @__PURE__ */ new Set([Ks, Up]), Hn = {
  enabled: !0,
  _workingColorSpace: Ks,
  get legacyMode() {
    return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), !this.enabled;
  },
  set legacyMode(s) {
    console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), this.enabled = !s;
  },
  get workingColorSpace() {
    return this._workingColorSpace;
  },
  set workingColorSpace(s) {
    if (!nD.has(s))
      throw new Error(`Unsupported working color space, "${s}".`);
    this._workingColorSpace = s;
  },
  convert: function(s, e, t) {
    if (this.enabled === !1 || e === t || !e || !t)
      return s;
    const n = Av[e].toReference, r = Av[t].fromReference;
    return r(n(s));
  },
  fromWorkingColorSpace: function(s, e) {
    return this.convert(s, this._workingColorSpace, e);
  },
  toWorkingColorSpace: function(s, e) {
    return this.convert(s, e, this._workingColorSpace);
  },
  getPrimaries: function(s) {
    return Av[s].primaries;
  },
  getTransfer: function(s) {
    return s === Ea ? gp : Av[s].transfer;
  }
};
function dd(s) {
  return s < 0.04045 ? s * 0.0773993808 : Math.pow(s * 0.9478672986 + 0.0521327014, 2.4);
}
function A_(s) {
  return s < 31308e-7 ? s * 12.92 : 1.055 * Math.pow(s, 0.41666) - 0.055;
}
let Of;
class bS {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let t;
    if (e instanceof HTMLCanvasElement)
      t = e;
    else {
      Of === void 0 && (Of = Mp("canvas")), Of.width = e.width, Of.height = e.height;
      const n = Of.getContext("2d");
      e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = Of;
    }
    return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", 0.6)) : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = Mp("canvas");
      t.width = e.width, t.height = e.height;
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const r = n.getImageData(0, 0, e.width, e.height), o = r.data;
      for (let c = 0; c < o.length; c++)
        o[c] = dd(o[c] / 255) * 255;
      return n.putImageData(r, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor(dd(t[n] / 255) * 255) : t[n] = dd(t[n]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
let iD = 0;
class uc {
  constructor(e = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: iD++ }), this.uuid = ba(), this.data = e, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const n = {
      uuid: this.uuid,
      url: ""
    }, r = this.data;
    if (r !== null) {
      let o;
      if (Array.isArray(r)) {
        o = [];
        for (let c = 0, f = r.length; c < f; c++)
          r[c].isDataTexture ? o.push(R_(r[c].image)) : o.push(R_(r[c]));
      } else
        o = R_(r);
      n.url = o;
    }
    return t || (e.images[this.uuid] = n), n;
  }
}
function R_(s) {
  return typeof HTMLImageElement < "u" && s instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && s instanceof ImageBitmap ? bS.getDataURL(s) : s.data ? {
    data: Array.from(s.data),
    width: s.width,
    height: s.height,
    type: s.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let rD = 0;
class Ci extends Xo {
  constructor(e = Ci.DEFAULT_IMAGE, t = Ci.DEFAULT_MAPPING, n = Mr, r = Mr, o = hi, c = $l, f = Er, h = Zs, p = Ci.DEFAULT_ANISOTROPY, v = Ea) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: rD++ }), this.uuid = ba(), this.name = "", this.source = new uc(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = r, this.magFilter = o, this.minFilter = c, this.anisotropy = p, this.format = f, this.internalFormat = null, this.type = h, this.offset = new Ie(0, 0), this.repeat = new Ie(1, 1), this.center = new Ie(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new cn(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, typeof v == "string" ? this.colorSpace = v : (op("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = v === Kl ? Gi : Ea), this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.needsPMREMUpdate = !1;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const n = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== Fg)
      return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case dp:
          e.x = e.x - Math.floor(e.x);
          break;
        case Mr:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case hp:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case dp:
          e.y = e.y - Math.floor(e.y);
          break;
        case Mr:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case hp:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  get encoding() {
    return op("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace === Gi ? Kl : ES;
  }
  set encoding(e) {
    op("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = e === Kl ? Gi : Ea;
  }
}
Ci.DEFAULT_IMAGE = null;
Ci.DEFAULT_MAPPING = Fg;
Ci.DEFAULT_ANISOTROPY = 1;
class Vn {
  constructor(e = 0, t = 0, n = 0, r = 1) {
    Vn.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = r;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, r) {
    return this.x = e, this.y = t, this.z = n, this.w = r, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setW(e) {
    return this.w = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, r = this.z, o = this.w, c = e.elements;
    return this.x = c[0] * t + c[4] * n + c[8] * r + c[12] * o, this.y = c[1] * t + c[5] * n + c[9] * r + c[13] * o, this.z = c[2] * t + c[6] * n + c[10] * r + c[14] * o, this.w = c[3] * t + c[7] * n + c[11] * r + c[15] * o, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, r, o;
    const h = e.elements, p = h[0], v = h[4], y = h[8], x = h[1], M = h[5], T = h[9], C = h[2], w = h[6], E = h[10];
    if (Math.abs(v - x) < 0.01 && Math.abs(y - C) < 0.01 && Math.abs(T - w) < 0.01) {
      if (Math.abs(v + x) < 0.1 && Math.abs(y + C) < 0.1 && Math.abs(T + w) < 0.1 && Math.abs(p + M + E - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const R = (p + 1) / 2, U = (M + 1) / 2, F = (E + 1) / 2, z = (v + x) / 4, B = (y + C) / 4, W = (T + w) / 4;
      return R > U && R > F ? R < 0.01 ? (n = 0, r = 0.707106781, o = 0.707106781) : (n = Math.sqrt(R), r = z / n, o = B / n) : U > F ? U < 0.01 ? (n = 0.707106781, r = 0, o = 0.707106781) : (r = Math.sqrt(U), n = z / r, o = W / r) : F < 0.01 ? (n = 0.707106781, r = 0.707106781, o = 0) : (o = Math.sqrt(F), n = B / o, r = W / o), this.set(n, r, o, t), this;
    }
    let L = Math.sqrt((w - T) * (w - T) + (y - C) * (y - C) + (x - v) * (x - v));
    return Math.abs(L) < 1e-3 && (L = 1), this.x = (w - T) / L, this.y = (y - C) / L, this.z = (x - v) / L, this.w = Math.acos((p + M + E - 1) / 2), this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class $w extends Xo {
  constructor(e = 1, t = 1, n = {}) {
    super(), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new Vn(0, 0, e, t), this.scissorTest = !1, this.viewport = new Vn(0, 0, e, t);
    const r = { width: e, height: t, depth: 1 };
    n.encoding !== void 0 && (op("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."), n.colorSpace = n.encoding === Kl ? Gi : Ea), n = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: hi,
      depthBuffer: !0,
      stencilBuffer: !1,
      depthTexture: null,
      samples: 0
    }, n), this.texture = new Ci(r, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.flipY = !1, this.texture.generateMipmaps = n.generateMipmaps, this.texture.internalFormat = n.internalFormat, this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.depthTexture = n.depthTexture, this.samples = n.samples;
  }
  setSize(e, t, n = 1) {
    (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.isRenderTargetTexture = !0;
    const t = Object.assign({}, e.texture.image);
    return this.texture.source = new uc(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class Za extends $w {
  constructor(e = 1, t = 1, n = {}) {
    super(e, t, n), this.isWebGLRenderTarget = !0;
  }
}
class Vg extends Ci {
  constructor(e = null, t = 1, n = 1, r = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: n, depth: r }, this.magFilter = di, this.minFilter = di, this.wrapR = Mr, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class aD extends Za {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new Vg(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class wS extends Ci {
  constructor(e = null, t = 1, n = 1, r = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: n, depth: r }, this.magFilter = di, this.minFilter = di, this.wrapR = Mr, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class sD extends Za {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new wS(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class oD extends Za {
  constructor(e = 1, t = 1, n = 1, r = {}) {
    super(e, t, r), this.isWebGLMultipleRenderTargets = !0;
    const o = this.texture;
    this.texture = [];
    for (let c = 0; c < n; c++)
      this.texture[c] = o.clone(), this.texture[c].isRenderTargetTexture = !0;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e, this.height = t, this.depth = n;
      for (let r = 0, o = this.texture.length; r < o; r++)
        this.texture[r].image.width = e, this.texture[r].image.height = t, this.texture[r].image.depth = n;
      this.dispose();
    }
    this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  copy(e) {
    this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.texture.length = 0;
    for (let t = 0, n = e.texture.length; t < n; t++)
      this.texture[t] = e.texture[t].clone(), this.texture[t].isRenderTargetTexture = !0;
    return this;
  }
}
class Tr {
  constructor(e = 0, t = 0, n = 0, r = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = r;
  }
  static slerpFlat(e, t, n, r, o, c, f) {
    let h = n[r + 0], p = n[r + 1], v = n[r + 2], y = n[r + 3];
    const x = o[c + 0], M = o[c + 1], T = o[c + 2], C = o[c + 3];
    if (f === 0) {
      e[t + 0] = h, e[t + 1] = p, e[t + 2] = v, e[t + 3] = y;
      return;
    }
    if (f === 1) {
      e[t + 0] = x, e[t + 1] = M, e[t + 2] = T, e[t + 3] = C;
      return;
    }
    if (y !== C || h !== x || p !== M || v !== T) {
      let w = 1 - f;
      const E = h * x + p * M + v * T + y * C, L = E >= 0 ? 1 : -1, R = 1 - E * E;
      if (R > Number.EPSILON) {
        const F = Math.sqrt(R), z = Math.atan2(F, E * L);
        w = Math.sin(w * z) / F, f = Math.sin(f * z) / F;
      }
      const U = f * L;
      if (h = h * w + x * U, p = p * w + M * U, v = v * w + T * U, y = y * w + C * U, w === 1 - f) {
        const F = 1 / Math.sqrt(h * h + p * p + v * v + y * y);
        h *= F, p *= F, v *= F, y *= F;
      }
    }
    e[t] = h, e[t + 1] = p, e[t + 2] = v, e[t + 3] = y;
  }
  static multiplyQuaternionsFlat(e, t, n, r, o, c) {
    const f = n[r], h = n[r + 1], p = n[r + 2], v = n[r + 3], y = o[c], x = o[c + 1], M = o[c + 2], T = o[c + 3];
    return e[t] = f * T + v * y + h * M - p * x, e[t + 1] = h * T + v * x + p * y - f * M, e[t + 2] = p * T + v * M + f * x - h * y, e[t + 3] = v * T - f * y - h * x - p * M, e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  set(e, t, n, r) {
    return this._x = e, this._y = t, this._z = n, this._w = r, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  setFromEuler(e, t) {
    const n = e._x, r = e._y, o = e._z, c = e._order, f = Math.cos, h = Math.sin, p = f(n / 2), v = f(r / 2), y = f(o / 2), x = h(n / 2), M = h(r / 2), T = h(o / 2);
    switch (c) {
      case "XYZ":
        this._x = x * v * y + p * M * T, this._y = p * M * y - x * v * T, this._z = p * v * T + x * M * y, this._w = p * v * y - x * M * T;
        break;
      case "YXZ":
        this._x = x * v * y + p * M * T, this._y = p * M * y - x * v * T, this._z = p * v * T - x * M * y, this._w = p * v * y + x * M * T;
        break;
      case "ZXY":
        this._x = x * v * y - p * M * T, this._y = p * M * y + x * v * T, this._z = p * v * T + x * M * y, this._w = p * v * y - x * M * T;
        break;
      case "ZYX":
        this._x = x * v * y - p * M * T, this._y = p * M * y + x * v * T, this._z = p * v * T - x * M * y, this._w = p * v * y + x * M * T;
        break;
      case "YZX":
        this._x = x * v * y + p * M * T, this._y = p * M * y + x * v * T, this._z = p * v * T - x * M * y, this._w = p * v * y - x * M * T;
        break;
      case "XZY":
        this._x = x * v * y - p * M * T, this._y = p * M * y - x * v * T, this._z = p * v * T + x * M * y, this._w = p * v * y + x * M * T;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + c);
    }
    return t !== !1 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2, r = Math.sin(n);
    return this._x = e.x * r, this._y = e.y * r, this._z = e.z * r, this._w = Math.cos(n), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, n = t[0], r = t[4], o = t[8], c = t[1], f = t[5], h = t[9], p = t[2], v = t[6], y = t[10], x = n + f + y;
    if (x > 0) {
      const M = 0.5 / Math.sqrt(x + 1);
      this._w = 0.25 / M, this._x = (v - h) * M, this._y = (o - p) * M, this._z = (c - r) * M;
    } else if (n > f && n > y) {
      const M = 2 * Math.sqrt(1 + n - f - y);
      this._w = (v - h) / M, this._x = 0.25 * M, this._y = (r + c) / M, this._z = (o + p) / M;
    } else if (f > y) {
      const M = 2 * Math.sqrt(1 + f - n - y);
      this._w = (o - p) / M, this._x = (r + c) / M, this._y = 0.25 * M, this._z = (h + v) / M;
    } else {
      const M = 2 * Math.sqrt(1 + y - n - f);
      this._w = (c - r) / M, this._x = (o + p) / M, this._y = (h + v) / M, this._z = 0.25 * M;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(yi(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0)
      return this;
    const r = Math.min(1, t / n);
    return this.slerp(e, r), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x, r = e._y, o = e._z, c = e._w, f = t._x, h = t._y, p = t._z, v = t._w;
    return this._x = n * v + c * f + r * p - o * h, this._y = r * v + c * h + o * f - n * p, this._z = o * v + c * p + n * h - r * f, this._w = c * v - n * f - r * h - o * p, this._onChangeCallback(), this;
  }
  slerp(e, t) {
    if (t === 0)
      return this;
    if (t === 1)
      return this.copy(e);
    const n = this._x, r = this._y, o = this._z, c = this._w;
    let f = c * e._w + n * e._x + r * e._y + o * e._z;
    if (f < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, f = -f) : this.copy(e), f >= 1)
      return this._w = c, this._x = n, this._y = r, this._z = o, this;
    const h = 1 - f * f;
    if (h <= Number.EPSILON) {
      const M = 1 - t;
      return this._w = M * c + t * this._w, this._x = M * n + t * this._x, this._y = M * r + t * this._y, this._z = M * o + t * this._z, this.normalize(), this._onChangeCallback(), this;
    }
    const p = Math.sqrt(h), v = Math.atan2(p, f), y = Math.sin((1 - t) * v) / p, x = Math.sin(t * v) / p;
    return this._w = c * y + this._w * x, this._x = n * y + this._x * x, this._y = r * y + this._y * x, this._z = o * y + this._z * x, this._onChangeCallback(), this;
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = Math.random(), t = Math.sqrt(1 - e), n = Math.sqrt(e), r = 2 * Math.PI * Math.random(), o = 2 * Math.PI * Math.random();
    return this.set(
      t * Math.cos(r),
      n * Math.sin(o),
      n * Math.cos(o),
      t * Math.sin(r)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class Y {
  constructor(e = 0, t = 0, n = 0) {
    Y.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
  }
  set(e, t, n) {
    return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  applyEuler(e) {
    return this.applyQuaternion(ab.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(ab.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, r = this.z, o = e.elements;
    return this.x = o[0] * t + o[3] * n + o[6] * r, this.y = o[1] * t + o[4] * n + o[7] * r, this.z = o[2] * t + o[5] * n + o[8] * r, this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, r = this.z, o = e.elements, c = 1 / (o[3] * t + o[7] * n + o[11] * r + o[15]);
    return this.x = (o[0] * t + o[4] * n + o[8] * r + o[12]) * c, this.y = (o[1] * t + o[5] * n + o[9] * r + o[13]) * c, this.z = (o[2] * t + o[6] * n + o[10] * r + o[14]) * c, this;
  }
  applyQuaternion(e) {
    const t = this.x, n = this.y, r = this.z, o = e.x, c = e.y, f = e.z, h = e.w, p = h * t + c * r - f * n, v = h * n + f * t - o * r, y = h * r + o * n - c * t, x = -o * t - c * n - f * r;
    return this.x = p * h + x * -o + v * -f - y * -c, this.y = v * h + x * -c + y * -o - p * -f, this.z = y * h + x * -f + p * -c - v * -o, this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, n = this.y, r = this.z, o = e.elements;
    return this.x = o[0] * t + o[4] * n + o[8] * r, this.y = o[1] * t + o[5] * n + o[9] * r, this.z = o[2] * t + o[6] * n + o[10] * r, this.normalize();
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x, r = e.y, o = e.z, c = t.x, f = t.y, h = t.z;
    return this.x = r * h - o * f, this.y = o * c - n * h, this.z = n * f - r * c, this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0)
      return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    return C_.copy(this).projectOnVector(e), this.sub(C_);
  }
  reflect(e) {
    return this.sub(C_.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(yi(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y, r = this.z - e.z;
    return t * t + n * n + r * r;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const r = Math.sin(t) * e;
    return this.x = r * Math.sin(n), this.y = Math.cos(t) * e, this.z = r * Math.cos(n), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), r = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = n, this.z = r, this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    const e = (Math.random() - 0.5) * 2, t = Math.random() * Math.PI * 2, n = Math.sqrt(1 - e ** 2);
    return this.x = n * Math.cos(t), this.y = n * Math.sin(t), this.z = e, this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const C_ = /* @__PURE__ */ new Y(), ab = /* @__PURE__ */ new Tr();
class Qs {
  constructor(e = new Y(1 / 0, 1 / 0, 1 / 0), t = new Y(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3)
      this.expandByPoint(Po.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++)
      this.expandByPoint(Po.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = Po.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    if (e.updateWorldMatrix(!1, !1), e.boundingBox !== void 0)
      e.boundingBox === null && e.computeBoundingBox(), If.copy(e.boundingBox), If.applyMatrix4(e.matrixWorld), this.union(If);
    else {
      const r = e.geometry;
      if (r !== void 0)
        if (t && r.attributes !== void 0 && r.attributes.position !== void 0) {
          const o = r.attributes.position;
          for (let c = 0, f = o.count; c < f; c++)
            Po.fromBufferAttribute(o, c).applyMatrix4(e.matrixWorld), this.expandByPoint(Po);
        } else
          r.boundingBox === null && r.computeBoundingBox(), If.copy(r.boundingBox), If.applyMatrix4(e.matrixWorld), this.union(If);
    }
    const n = e.children;
    for (let r = 0, o = n.length; r < o; r++)
      this.expandByObject(n[r], t);
    return this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, Po), Po.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(Gh), Rv.subVectors(this.max, Gh), Ff.subVectors(e.a, Gh), zf.subVectors(e.b, Gh), Bf.subVectors(e.c, Gh), Hl.subVectors(zf, Ff), Vl.subVectors(Bf, zf), ju.subVectors(Ff, Bf);
    let t = [
      0,
      -Hl.z,
      Hl.y,
      0,
      -Vl.z,
      Vl.y,
      0,
      -ju.z,
      ju.y,
      Hl.z,
      0,
      -Hl.x,
      Vl.z,
      0,
      -Vl.x,
      ju.z,
      0,
      -ju.x,
      -Hl.y,
      Hl.x,
      0,
      -Vl.y,
      Vl.x,
      0,
      -ju.y,
      ju.x,
      0
    ];
    return !L_(t, Ff, zf, Bf, Rv) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !L_(t, Ff, zf, Bf, Rv)) ? !1 : (Cv.crossVectors(Hl, Vl), t = [Cv.x, Cv.y, Cv.z], L_(t, Ff, zf, Bf, Rv));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, Po).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(Po).length() * 0.5), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty() ? this : (Lo[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), Lo[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), Lo[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), Lo[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), Lo[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), Lo[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), Lo[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), Lo[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(Lo), this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const Lo = [
  /* @__PURE__ */ new Y(),
  /* @__PURE__ */ new Y(),
  /* @__PURE__ */ new Y(),
  /* @__PURE__ */ new Y(),
  /* @__PURE__ */ new Y(),
  /* @__PURE__ */ new Y(),
  /* @__PURE__ */ new Y(),
  /* @__PURE__ */ new Y()
], Po = /* @__PURE__ */ new Y(), If = /* @__PURE__ */ new Qs(), Ff = /* @__PURE__ */ new Y(), zf = /* @__PURE__ */ new Y(), Bf = /* @__PURE__ */ new Y(), Hl = /* @__PURE__ */ new Y(), Vl = /* @__PURE__ */ new Y(), ju = /* @__PURE__ */ new Y(), Gh = /* @__PURE__ */ new Y(), Rv = /* @__PURE__ */ new Y(), Cv = /* @__PURE__ */ new Y(), qu = /* @__PURE__ */ new Y();
function L_(s, e, t, n, r) {
  for (let o = 0, c = s.length - 3; o <= c; o += 3) {
    qu.fromArray(s, o);
    const f = r.x * Math.abs(qu.x) + r.y * Math.abs(qu.y) + r.z * Math.abs(qu.z), h = e.dot(qu), p = t.dot(qu), v = n.dot(qu);
    if (Math.max(-Math.max(h, p, v), Math.min(h, p, v)) > f)
      return !1;
  }
  return !0;
}
const lD = /* @__PURE__ */ new Qs(), Wh = /* @__PURE__ */ new Y(), P_ = /* @__PURE__ */ new Y();
class xs {
  constructor(e = new Y(), t = -1) {
    this.center = e, this.radius = t;
  }
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    t !== void 0 ? n.copy(t) : lD.setFromPoints(e).getCenter(n);
    let r = 0;
    for (let o = 0, c = e.length; o < c; o++)
      r = Math.max(r, n.distanceToSquared(e[o]));
    return this.radius = Math.sqrt(r), this;
  }
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    Wh.subVectors(e, this.center);
    const t = Wh.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t), r = (n - this.radius) * 0.5;
      this.center.addScaledVector(Wh, r / n), this.radius += r;
    }
    return this;
  }
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (P_.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(Wh.copy(e.center).add(P_)), this.expandByPoint(Wh.copy(e.center).sub(P_))), this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Do = /* @__PURE__ */ new Y(), D_ = /* @__PURE__ */ new Y(), Lv = /* @__PURE__ */ new Y(), kl = /* @__PURE__ */ new Y(), U_ = /* @__PURE__ */ new Y(), Pv = /* @__PURE__ */ new Y(), N_ = /* @__PURE__ */ new Y();
class Sc {
  constructor(e = new Y(), t = new Y(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, Do)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = Do.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (Do.copy(this.origin).addScaledVector(this.direction, t), Do.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, n, r) {
    D_.copy(e).add(t).multiplyScalar(0.5), Lv.copy(t).sub(e).normalize(), kl.copy(this.origin).sub(D_);
    const o = e.distanceTo(t) * 0.5, c = -this.direction.dot(Lv), f = kl.dot(this.direction), h = -kl.dot(Lv), p = kl.lengthSq(), v = Math.abs(1 - c * c);
    let y, x, M, T;
    if (v > 0)
      if (y = c * h - f, x = c * f - h, T = o * v, y >= 0)
        if (x >= -T)
          if (x <= T) {
            const C = 1 / v;
            y *= C, x *= C, M = y * (y + c * x + 2 * f) + x * (c * y + x + 2 * h) + p;
          } else
            x = o, y = Math.max(0, -(c * x + f)), M = -y * y + x * (x + 2 * h) + p;
        else
          x = -o, y = Math.max(0, -(c * x + f)), M = -y * y + x * (x + 2 * h) + p;
      else
        x <= -T ? (y = Math.max(0, -(-c * o + f)), x = y > 0 ? -o : Math.min(Math.max(-o, -h), o), M = -y * y + x * (x + 2 * h) + p) : x <= T ? (y = 0, x = Math.min(Math.max(-o, -h), o), M = x * (x + 2 * h) + p) : (y = Math.max(0, -(c * o + f)), x = y > 0 ? o : Math.min(Math.max(-o, -h), o), M = -y * y + x * (x + 2 * h) + p);
    else
      x = c > 0 ? -o : o, y = Math.max(0, -(c * x + f)), M = -y * y + x * (x + 2 * h) + p;
    return n && n.copy(this.origin).addScaledVector(this.direction, y), r && r.copy(D_).addScaledVector(Lv, x), M;
  }
  intersectSphere(e, t) {
    Do.subVectors(e.center, this.origin);
    const n = Do.dot(this.direction), r = Do.dot(Do) - n * n, o = e.radius * e.radius;
    if (r > o)
      return null;
    const c = Math.sqrt(o - r), f = n - c, h = n + c;
    return h < 0 ? null : f < 0 ? this.at(h, t) : this.at(f, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    return n === null ? null : this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let n, r, o, c, f, h;
    const p = 1 / this.direction.x, v = 1 / this.direction.y, y = 1 / this.direction.z, x = this.origin;
    return p >= 0 ? (n = (e.min.x - x.x) * p, r = (e.max.x - x.x) * p) : (n = (e.max.x - x.x) * p, r = (e.min.x - x.x) * p), v >= 0 ? (o = (e.min.y - x.y) * v, c = (e.max.y - x.y) * v) : (o = (e.max.y - x.y) * v, c = (e.min.y - x.y) * v), n > c || o > r || ((o > n || isNaN(n)) && (n = o), (c < r || isNaN(r)) && (r = c), y >= 0 ? (f = (e.min.z - x.z) * y, h = (e.max.z - x.z) * y) : (f = (e.max.z - x.z) * y, h = (e.min.z - x.z) * y), n > h || f > r) || ((f > n || n !== n) && (n = f), (h < r || r !== r) && (r = h), r < 0) ? null : this.at(n >= 0 ? n : r, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, Do) !== null;
  }
  intersectTriangle(e, t, n, r, o) {
    U_.subVectors(t, e), Pv.subVectors(n, e), N_.crossVectors(U_, Pv);
    let c = this.direction.dot(N_), f;
    if (c > 0) {
      if (r)
        return null;
      f = 1;
    } else if (c < 0)
      f = -1, c = -c;
    else
      return null;
    kl.subVectors(this.origin, e);
    const h = f * this.direction.dot(Pv.crossVectors(kl, Pv));
    if (h < 0)
      return null;
    const p = f * this.direction.dot(U_.cross(kl));
    if (p < 0 || h + p > c)
      return null;
    const v = -f * kl.dot(N_);
    return v < 0 ? null : this.at(v / c, o);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class tn {
  constructor(e, t, n, r, o, c, f, h, p, v, y, x, M, T, C, w) {
    tn.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, r, o, c, f, h, p, v, y, x, M, T, C, w);
  }
  set(e, t, n, r, o, c, f, h, p, v, y, x, M, T, C, w) {
    const E = this.elements;
    return E[0] = e, E[4] = t, E[8] = n, E[12] = r, E[1] = o, E[5] = c, E[9] = f, E[13] = h, E[2] = p, E[6] = v, E[10] = y, E[14] = x, E[3] = M, E[7] = T, E[11] = C, E[15] = w, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  clone() {
    return new tn().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
  }
  copyPosition(e) {
    const t = this.elements, n = e.elements;
    return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, n) {
    return this.set(
      e.x,
      t.x,
      n.x,
      0,
      e.y,
      t.y,
      n.y,
      0,
      e.z,
      t.z,
      n.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractRotation(e) {
    const t = this.elements, n = e.elements, r = 1 / Hf.setFromMatrixColumn(e, 0).length(), o = 1 / Hf.setFromMatrixColumn(e, 1).length(), c = 1 / Hf.setFromMatrixColumn(e, 2).length();
    return t[0] = n[0] * r, t[1] = n[1] * r, t[2] = n[2] * r, t[3] = 0, t[4] = n[4] * o, t[5] = n[5] * o, t[6] = n[6] * o, t[7] = 0, t[8] = n[8] * c, t[9] = n[9] * c, t[10] = n[10] * c, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements, n = e.x, r = e.y, o = e.z, c = Math.cos(n), f = Math.sin(n), h = Math.cos(r), p = Math.sin(r), v = Math.cos(o), y = Math.sin(o);
    if (e.order === "XYZ") {
      const x = c * v, M = c * y, T = f * v, C = f * y;
      t[0] = h * v, t[4] = -h * y, t[8] = p, t[1] = M + T * p, t[5] = x - C * p, t[9] = -f * h, t[2] = C - x * p, t[6] = T + M * p, t[10] = c * h;
    } else if (e.order === "YXZ") {
      const x = h * v, M = h * y, T = p * v, C = p * y;
      t[0] = x + C * f, t[4] = T * f - M, t[8] = c * p, t[1] = c * y, t[5] = c * v, t[9] = -f, t[2] = M * f - T, t[6] = C + x * f, t[10] = c * h;
    } else if (e.order === "ZXY") {
      const x = h * v, M = h * y, T = p * v, C = p * y;
      t[0] = x - C * f, t[4] = -c * y, t[8] = T + M * f, t[1] = M + T * f, t[5] = c * v, t[9] = C - x * f, t[2] = -c * p, t[6] = f, t[10] = c * h;
    } else if (e.order === "ZYX") {
      const x = c * v, M = c * y, T = f * v, C = f * y;
      t[0] = h * v, t[4] = T * p - M, t[8] = x * p + C, t[1] = h * y, t[5] = C * p + x, t[9] = M * p - T, t[2] = -p, t[6] = f * h, t[10] = c * h;
    } else if (e.order === "YZX") {
      const x = c * h, M = c * p, T = f * h, C = f * p;
      t[0] = h * v, t[4] = C - x * y, t[8] = T * y + M, t[1] = y, t[5] = c * v, t[9] = -f * v, t[2] = -p * v, t[6] = M * y + T, t[10] = x - C * y;
    } else if (e.order === "XZY") {
      const x = c * h, M = c * p, T = f * h, C = f * p;
      t[0] = h * v, t[4] = -y, t[8] = p * v, t[1] = x * y + C, t[5] = c * v, t[9] = M * y - T, t[2] = T * y - M, t[6] = f * v, t[10] = C * y + x;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(uD, e, cD);
  }
  lookAt(e, t, n) {
    const r = this.elements;
    return Sa.subVectors(e, t), Sa.lengthSq() === 0 && (Sa.z = 1), Sa.normalize(), Gl.crossVectors(n, Sa), Gl.lengthSq() === 0 && (Math.abs(n.z) === 1 ? Sa.x += 1e-4 : Sa.z += 1e-4, Sa.normalize(), Gl.crossVectors(n, Sa)), Gl.normalize(), Dv.crossVectors(Sa, Gl), r[0] = Gl.x, r[4] = Dv.x, r[8] = Sa.x, r[1] = Gl.y, r[5] = Dv.y, r[9] = Sa.y, r[2] = Gl.z, r[6] = Dv.z, r[10] = Sa.z, this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, r = t.elements, o = this.elements, c = n[0], f = n[4], h = n[8], p = n[12], v = n[1], y = n[5], x = n[9], M = n[13], T = n[2], C = n[6], w = n[10], E = n[14], L = n[3], R = n[7], U = n[11], F = n[15], z = r[0], B = r[4], W = r[8], O = r[12], I = r[1], Z = r[5], ie = r[9], fe = r[13], K = r[2], he = r[6], Te = r[10], Me = r[14], ne = r[3], le = r[7], re = r[11], J = r[15];
    return o[0] = c * z + f * I + h * K + p * ne, o[4] = c * B + f * Z + h * he + p * le, o[8] = c * W + f * ie + h * Te + p * re, o[12] = c * O + f * fe + h * Me + p * J, o[1] = v * z + y * I + x * K + M * ne, o[5] = v * B + y * Z + x * he + M * le, o[9] = v * W + y * ie + x * Te + M * re, o[13] = v * O + y * fe + x * Me + M * J, o[2] = T * z + C * I + w * K + E * ne, o[6] = T * B + C * Z + w * he + E * le, o[10] = T * W + C * ie + w * Te + E * re, o[14] = T * O + C * fe + w * Me + E * J, o[3] = L * z + R * I + U * K + F * ne, o[7] = L * B + R * Z + U * he + F * le, o[11] = L * W + R * ie + U * Te + F * re, o[15] = L * O + R * fe + U * Me + F * J, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[4], r = e[8], o = e[12], c = e[1], f = e[5], h = e[9], p = e[13], v = e[2], y = e[6], x = e[10], M = e[14], T = e[3], C = e[7], w = e[11], E = e[15];
    return T * (+o * h * y - r * p * y - o * f * x + n * p * x + r * f * M - n * h * M) + C * (+t * h * M - t * p * x + o * c * x - r * c * M + r * p * v - o * h * v) + w * (+t * p * y - t * f * M - o * c * y + n * c * M + o * f * v - n * p * v) + E * (-r * f * v - t * h * y + t * f * x + r * c * y - n * c * x + n * h * v);
  }
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  setPosition(e, t, n) {
    const r = this.elements;
    return e.isVector3 ? (r[12] = e.x, r[13] = e.y, r[14] = e.z) : (r[12] = e, r[13] = t, r[14] = n), this;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], r = e[2], o = e[3], c = e[4], f = e[5], h = e[6], p = e[7], v = e[8], y = e[9], x = e[10], M = e[11], T = e[12], C = e[13], w = e[14], E = e[15], L = y * w * p - C * x * p + C * h * M - f * w * M - y * h * E + f * x * E, R = T * x * p - v * w * p - T * h * M + c * w * M + v * h * E - c * x * E, U = v * C * p - T * y * p + T * f * M - c * C * M - v * f * E + c * y * E, F = T * y * h - v * C * h - T * f * x + c * C * x + v * f * w - c * y * w, z = t * L + n * R + r * U + o * F;
    if (z === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const B = 1 / z;
    return e[0] = L * B, e[1] = (C * x * o - y * w * o - C * r * M + n * w * M + y * r * E - n * x * E) * B, e[2] = (f * w * o - C * h * o + C * r * p - n * w * p - f * r * E + n * h * E) * B, e[3] = (y * h * o - f * x * o - y * r * p + n * x * p + f * r * M - n * h * M) * B, e[4] = R * B, e[5] = (v * w * o - T * x * o + T * r * M - t * w * M - v * r * E + t * x * E) * B, e[6] = (T * h * o - c * w * o - T * r * p + t * w * p + c * r * E - t * h * E) * B, e[7] = (c * x * o - v * h * o + v * r * p - t * x * p - c * r * M + t * h * M) * B, e[8] = U * B, e[9] = (T * y * o - v * C * o - T * n * M + t * C * M + v * n * E - t * y * E) * B, e[10] = (c * C * o - T * f * o + T * n * p - t * C * p - c * n * E + t * f * E) * B, e[11] = (v * f * o - c * y * o - v * n * p + t * y * p + c * n * M - t * f * M) * B, e[12] = F * B, e[13] = (v * C * r - T * y * r + T * n * x - t * C * x - v * n * w + t * y * w) * B, e[14] = (T * f * r - c * C * r - T * n * h + t * C * h + c * n * w - t * f * w) * B, e[15] = (c * y * r - v * f * r + v * n * h - t * y * h - c * n * x + t * f * x) * B, this;
  }
  scale(e) {
    const t = this.elements, n = e.x, r = e.y, o = e.z;
    return t[0] *= n, t[4] *= r, t[8] *= o, t[1] *= n, t[5] *= r, t[9] *= o, t[2] *= n, t[6] *= r, t[10] *= o, t[3] *= n, t[7] *= r, t[11] *= o, this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, r));
  }
  makeTranslation(e, t, n) {
    return e.isVector3 ? this.set(
      1,
      0,
      0,
      e.x,
      0,
      1,
      0,
      e.y,
      0,
      0,
      1,
      e.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      0,
      n,
      0,
      0,
      1,
      0,
      0,
      -n,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t), r = Math.sin(t), o = 1 - n, c = e.x, f = e.y, h = e.z, p = o * c, v = o * f;
    return this.set(
      p * c + n,
      p * f - r * h,
      p * h + r * f,
      0,
      p * f + r * h,
      v * f + n,
      v * h - r * c,
      0,
      p * h - r * f,
      v * h + r * c,
      o * h * h + n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t, n) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeShear(e, t, n, r, o, c) {
    return this.set(
      1,
      n,
      o,
      0,
      e,
      1,
      c,
      0,
      t,
      r,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  compose(e, t, n) {
    const r = this.elements, o = t._x, c = t._y, f = t._z, h = t._w, p = o + o, v = c + c, y = f + f, x = o * p, M = o * v, T = o * y, C = c * v, w = c * y, E = f * y, L = h * p, R = h * v, U = h * y, F = n.x, z = n.y, B = n.z;
    return r[0] = (1 - (C + E)) * F, r[1] = (M + U) * F, r[2] = (T - R) * F, r[3] = 0, r[4] = (M - U) * z, r[5] = (1 - (x + E)) * z, r[6] = (w + L) * z, r[7] = 0, r[8] = (T + R) * B, r[9] = (w - L) * B, r[10] = (1 - (x + C)) * B, r[11] = 0, r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1, this;
  }
  decompose(e, t, n) {
    const r = this.elements;
    let o = Hf.set(r[0], r[1], r[2]).length();
    const c = Hf.set(r[4], r[5], r[6]).length(), f = Hf.set(r[8], r[9], r[10]).length();
    this.determinant() < 0 && (o = -o), e.x = r[12], e.y = r[13], e.z = r[14], ps.copy(this);
    const p = 1 / o, v = 1 / c, y = 1 / f;
    return ps.elements[0] *= p, ps.elements[1] *= p, ps.elements[2] *= p, ps.elements[4] *= v, ps.elements[5] *= v, ps.elements[6] *= v, ps.elements[8] *= y, ps.elements[9] *= y, ps.elements[10] *= y, t.setFromRotationMatrix(ps), n.x = o, n.y = c, n.z = f, this;
  }
  makePerspective(e, t, n, r, o, c, f = js) {
    const h = this.elements, p = 2 * o / (t - e), v = 2 * o / (n - r), y = (t + e) / (t - e), x = (n + r) / (n - r);
    let M, T;
    if (f === js)
      M = -(c + o) / (c - o), T = -2 * c * o / (c - o);
    else if (f === Sp)
      M = -c / (c - o), T = -c * o / (c - o);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + f);
    return h[0] = p, h[4] = 0, h[8] = y, h[12] = 0, h[1] = 0, h[5] = v, h[9] = x, h[13] = 0, h[2] = 0, h[6] = 0, h[10] = M, h[14] = T, h[3] = 0, h[7] = 0, h[11] = -1, h[15] = 0, this;
  }
  makeOrthographic(e, t, n, r, o, c, f = js) {
    const h = this.elements, p = 1 / (t - e), v = 1 / (n - r), y = 1 / (c - o), x = (t + e) * p, M = (n + r) * v;
    let T, C;
    if (f === js)
      T = (c + o) * y, C = -2 * y;
    else if (f === Sp)
      T = o * y, C = -1 * y;
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + f);
    return h[0] = 2 * p, h[4] = 0, h[8] = 0, h[12] = -x, h[1] = 0, h[5] = 2 * v, h[9] = 0, h[13] = -M, h[2] = 0, h[6] = 0, h[10] = C, h[14] = -T, h[3] = 0, h[7] = 0, h[11] = 0, h[15] = 1, this;
  }
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let r = 0; r < 16; r++)
      if (t[r] !== n[r])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
  }
}
const Hf = /* @__PURE__ */ new Y(), ps = /* @__PURE__ */ new tn(), uD = /* @__PURE__ */ new Y(0, 0, 0), cD = /* @__PURE__ */ new Y(1, 1, 1), Gl = /* @__PURE__ */ new Y(), Dv = /* @__PURE__ */ new Y(), Sa = /* @__PURE__ */ new Y(), sb = /* @__PURE__ */ new tn(), ob = /* @__PURE__ */ new Tr();
class Np {
  constructor(e = 0, t = 0, n = 0, r = Np.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = r;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  set(e, t, n, r = this._order) {
    return this._x = e, this._y = t, this._z = n, this._order = r, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e, t = this._order, n = !0) {
    const r = e.elements, o = r[0], c = r[4], f = r[8], h = r[1], p = r[5], v = r[9], y = r[2], x = r[6], M = r[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(yi(f, -1, 1)), Math.abs(f) < 0.9999999 ? (this._x = Math.atan2(-v, M), this._z = Math.atan2(-c, o)) : (this._x = Math.atan2(x, p), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-yi(v, -1, 1)), Math.abs(v) < 0.9999999 ? (this._y = Math.atan2(f, M), this._z = Math.atan2(h, p)) : (this._y = Math.atan2(-y, o), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(yi(x, -1, 1)), Math.abs(x) < 0.9999999 ? (this._y = Math.atan2(-y, M), this._z = Math.atan2(-c, p)) : (this._y = 0, this._z = Math.atan2(h, o));
        break;
      case "ZYX":
        this._y = Math.asin(-yi(y, -1, 1)), Math.abs(y) < 0.9999999 ? (this._x = Math.atan2(x, M), this._z = Math.atan2(h, o)) : (this._x = 0, this._z = Math.atan2(-c, p));
        break;
      case "YZX":
        this._z = Math.asin(yi(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._x = Math.atan2(-v, p), this._y = Math.atan2(-y, o)) : (this._x = 0, this._y = Math.atan2(f, M));
        break;
      case "XZY":
        this._z = Math.asin(-yi(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(x, p), this._y = Math.atan2(f, o)) : (this._x = Math.atan2(-v, M), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, n === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, n) {
    return sb.makeRotationFromQuaternion(e), this.setFromRotationMatrix(sb, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return ob.setFromEuler(this), this.setFromQuaternion(ob, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
Np.DEFAULT_ORDER = "XYZ";
class hc {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let fD = 0;
const lb = /* @__PURE__ */ new Y(), Vf = /* @__PURE__ */ new Tr(), Uo = /* @__PURE__ */ new tn(), Uv = /* @__PURE__ */ new Y(), Xh = /* @__PURE__ */ new Y(), dD = /* @__PURE__ */ new Y(), hD = /* @__PURE__ */ new Tr(), ub = /* @__PURE__ */ new Y(1, 0, 0), cb = /* @__PURE__ */ new Y(0, 1, 0), fb = /* @__PURE__ */ new Y(0, 0, 1), pD = { type: "added" }, mD = { type: "removed" };
class Cn extends Xo {
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: fD++ }), this.uuid = ba(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Cn.DEFAULT_UP.clone();
    const e = new Y(), t = new Np(), n = new Tr(), r = new Y(1, 1, 1);
    function o() {
      n.setFromEuler(t, !1);
    }
    function c() {
      t.setFromQuaternion(n, void 0, !1);
    }
    t._onChange(o), n._onChange(c), Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: n
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: r
      },
      modelViewMatrix: {
        value: new tn()
      },
      normalMatrix: {
        value: new cn()
      }
    }), this.matrix = new tn(), this.matrixWorld = new tn(), this.matrixAutoUpdate = Cn.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.matrixWorldAutoUpdate = Cn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.layers = new hc(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return Vf.setFromAxisAngle(e, t), this.quaternion.multiply(Vf), this;
  }
  rotateOnWorldAxis(e, t) {
    return Vf.setFromAxisAngle(e, t), this.quaternion.premultiply(Vf), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(ub, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(cb, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(fb, e);
  }
  translateOnAxis(e, t) {
    return lb.copy(e).applyQuaternion(this.quaternion), this.position.add(lb.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(ub, e);
  }
  translateY(e) {
    return this.translateOnAxis(cb, e);
  }
  translateZ(e) {
    return this.translateOnAxis(fb, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(Uo.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    e.isVector3 ? Uv.copy(e) : Uv.set(e, t, n);
    const r = this.parent;
    this.updateWorldMatrix(!0, !1), Xh.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Uo.lookAt(Xh, Uv, this.up) : Uo.lookAt(Uv, Xh, this.up), this.quaternion.setFromRotationMatrix(Uo), r && (Uo.extractRotation(r.matrixWorld), Vf.setFromRotationMatrix(Uo), this.quaternion.premultiply(Vf.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(pD)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++)
        this.remove(arguments[n]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(mD)), this;
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(e) {
    return this.updateWorldMatrix(!0, !1), Uo.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), Uo.multiply(e.parent.matrixWorld)), e.applyMatrix4(Uo), this.add(e), e.updateWorldMatrix(!1, !0), this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t)
      return this;
    for (let n = 0, r = this.children.length; n < r; n++) {
      const c = this.children[n].getObjectByProperty(e, t);
      if (c !== void 0)
        return c;
    }
  }
  getObjectsByProperty(e, t) {
    let n = [];
    this[e] === t && n.push(this);
    for (let r = 0, o = this.children.length; r < o; r++) {
      const c = this.children[r].getObjectsByProperty(e, t);
      c.length > 0 && (n = n.concat(c));
    }
    return n;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Xh, e, dD), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Xh, hD, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, r = t.length; n < r; n++)
      t[n].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1)
      return;
    e(this);
    const t = this.children;
    for (let n = 0, r = t.length; n < r; n++)
      t[n].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let n = 0, r = t.length; n < r; n++) {
      const o = t[n];
      (o.matrixWorldAutoUpdate === !0 || e === !0) && o.updateMatrixWorld(e);
    }
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (e === !0 && n !== null && n.matrixWorldAutoUpdate === !0 && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
      const r = this.children;
      for (let o = 0, c = r.length; o < c; o++) {
        const f = r[o];
        f.matrixWorldAutoUpdate === !0 && f.updateWorldMatrix(!1, !0);
      }
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", n = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, n.metadata = {
      version: 4.6,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const r = {};
    r.uuid = this.uuid, r.type = this.type, this.name !== "" && (r.name = this.name), this.castShadow === !0 && (r.castShadow = !0), this.receiveShadow === !0 && (r.receiveShadow = !0), this.visible === !1 && (r.visible = !1), this.frustumCulled === !1 && (r.frustumCulled = !1), this.renderOrder !== 0 && (r.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (r.userData = this.userData), r.layers = this.layers.mask, r.matrix = this.matrix.toArray(), r.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (r.matrixAutoUpdate = !1), this.isInstancedMesh && (r.type = "InstancedMesh", r.count = this.count, r.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (r.instanceColor = this.instanceColor.toJSON()));
    function o(f, h) {
      return f[h.uuid] === void 0 && (f[h.uuid] = h.toJSON(e)), h.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? r.background = this.background.toJSON() : this.background.isTexture && (r.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (r.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      r.geometry = o(e.geometries, this.geometry);
      const f = this.geometry.parameters;
      if (f !== void 0 && f.shapes !== void 0) {
        const h = f.shapes;
        if (Array.isArray(h))
          for (let p = 0, v = h.length; p < v; p++) {
            const y = h[p];
            o(e.shapes, y);
          }
        else
          o(e.shapes, h);
      }
    }
    if (this.isSkinnedMesh && (r.bindMode = this.bindMode, r.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (o(e.skeletons, this.skeleton), r.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const f = [];
        for (let h = 0, p = this.material.length; h < p; h++)
          f.push(o(e.materials, this.material[h]));
        r.material = f;
      } else
        r.material = o(e.materials, this.material);
    if (this.children.length > 0) {
      r.children = [];
      for (let f = 0; f < this.children.length; f++)
        r.children.push(this.children[f].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      r.animations = [];
      for (let f = 0; f < this.animations.length; f++) {
        const h = this.animations[f];
        r.animations.push(o(e.animations, h));
      }
    }
    if (t) {
      const f = c(e.geometries), h = c(e.materials), p = c(e.textures), v = c(e.images), y = c(e.shapes), x = c(e.skeletons), M = c(e.animations), T = c(e.nodes);
      f.length > 0 && (n.geometries = f), h.length > 0 && (n.materials = h), p.length > 0 && (n.textures = p), v.length > 0 && (n.images = v), y.length > 0 && (n.shapes = y), x.length > 0 && (n.skeletons = x), M.length > 0 && (n.animations = M), T.length > 0 && (n.nodes = T);
    }
    return n.object = r, n;
    function c(f) {
      const h = [];
      for (const p in f) {
        const v = f[p];
        delete v.metadata, h.push(v);
      }
      return h;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let n = 0; n < e.children.length; n++) {
        const r = e.children[n];
        this.add(r.clone());
      }
    return this;
  }
}
Cn.DEFAULT_UP = /* @__PURE__ */ new Y(0, 1, 0);
Cn.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Cn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const ms = /* @__PURE__ */ new Y(), No = /* @__PURE__ */ new Y(), O_ = /* @__PURE__ */ new Y(), Oo = /* @__PURE__ */ new Y(), kf = /* @__PURE__ */ new Y(), Gf = /* @__PURE__ */ new Y(), db = /* @__PURE__ */ new Y(), I_ = /* @__PURE__ */ new Y(), F_ = /* @__PURE__ */ new Y(), z_ = /* @__PURE__ */ new Y();
let Nv = !1;
class ia {
  constructor(e = new Y(), t = new Y(), n = new Y()) {
    this.a = e, this.b = t, this.c = n;
  }
  static getNormal(e, t, n, r) {
    r.subVectors(n, t), ms.subVectors(e, t), r.cross(ms);
    const o = r.lengthSq();
    return o > 0 ? r.multiplyScalar(1 / Math.sqrt(o)) : r.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, n, r, o) {
    ms.subVectors(r, t), No.subVectors(n, t), O_.subVectors(e, t);
    const c = ms.dot(ms), f = ms.dot(No), h = ms.dot(O_), p = No.dot(No), v = No.dot(O_), y = c * p - f * f;
    if (y === 0)
      return o.set(-2, -1, -1);
    const x = 1 / y, M = (p * h - f * v) * x, T = (c * v - f * h) * x;
    return o.set(1 - M - T, T, M);
  }
  static containsPoint(e, t, n, r) {
    return this.getBarycoord(e, t, n, r, Oo), Oo.x >= 0 && Oo.y >= 0 && Oo.x + Oo.y <= 1;
  }
  static getUV(e, t, n, r, o, c, f, h) {
    return Nv === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), Nv = !0), this.getInterpolation(e, t, n, r, o, c, f, h);
  }
  static getInterpolation(e, t, n, r, o, c, f, h) {
    return this.getBarycoord(e, t, n, r, Oo), h.setScalar(0), h.addScaledVector(o, Oo.x), h.addScaledVector(c, Oo.y), h.addScaledVector(f, Oo.z), h;
  }
  static isFrontFacing(e, t, n, r) {
    return ms.subVectors(n, t), No.subVectors(e, t), ms.cross(No).dot(r) < 0;
  }
  set(e, t, n) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
  }
  setFromPointsAndIndices(e, t, n, r) {
    return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[r]), this;
  }
  setFromAttributeAndIndices(e, t, n, r) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, r), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return ms.subVectors(this.c, this.b), No.subVectors(this.a, this.b), ms.cross(No).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return ia.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return ia.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getUV(e, t, n, r, o) {
    return Nv === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), Nv = !0), ia.getInterpolation(e, this.a, this.b, this.c, t, n, r, o);
  }
  getInterpolation(e, t, n, r, o) {
    return ia.getInterpolation(e, this.a, this.b, this.c, t, n, r, o);
  }
  containsPoint(e) {
    return ia.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return ia.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a, r = this.b, o = this.c;
    let c, f;
    kf.subVectors(r, n), Gf.subVectors(o, n), I_.subVectors(e, n);
    const h = kf.dot(I_), p = Gf.dot(I_);
    if (h <= 0 && p <= 0)
      return t.copy(n);
    F_.subVectors(e, r);
    const v = kf.dot(F_), y = Gf.dot(F_);
    if (v >= 0 && y <= v)
      return t.copy(r);
    const x = h * y - v * p;
    if (x <= 0 && h >= 0 && v <= 0)
      return c = h / (h - v), t.copy(n).addScaledVector(kf, c);
    z_.subVectors(e, o);
    const M = kf.dot(z_), T = Gf.dot(z_);
    if (T >= 0 && M <= T)
      return t.copy(o);
    const C = M * p - h * T;
    if (C <= 0 && p >= 0 && T <= 0)
      return f = p / (p - T), t.copy(n).addScaledVector(Gf, f);
    const w = v * T - M * y;
    if (w <= 0 && y - v >= 0 && M - T >= 0)
      return db.subVectors(o, r), f = (y - v) / (y - v + (M - T)), t.copy(r).addScaledVector(db, f);
    const E = 1 / (w + C + x);
    return c = C * E, f = x * E, t.copy(n).addScaledVector(kf, c).addScaledVector(Gf, f);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
let vD = 0;
class br extends Xo {
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: vD++ }), this.uuid = ba(), this.name = "", this.type = "Material", this.blending = ql, this.side = ko, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = dS, this.blendDst = hS, this.blendEquation = ac, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = Rg, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = Hw, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Tg, this.stencilZFail = Tg, this.stencilZPass = Tg, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  onBuild() {
  }
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const n = e[t];
        if (n === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const r = this[t];
        if (r === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        r && r.isColor ? r.set(n) : r && r.isVector3 && n && n.isVector3 ? r.copy(n) : this[t] = n;
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const n = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== ql && (n.blending = this.blending), this.side !== ko && (n.side = this.side), this.vertexColors === !0 && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = !0), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === !0 && (n.alphaHash = !0), this.alphaToCoverage === !0 && (n.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0), this.forceSinglePass === !0 && (n.forceSinglePass = !0), this.wireframe === !0 && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = !0), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function r(o) {
      const c = [];
      for (const f in o) {
        const h = o[f];
        delete h.metadata, c.push(h);
      }
      return c;
    }
    if (t) {
      const o = r(e.textures), c = r(e.images);
      o.length > 0 && (n.textures = o), c.length > 0 && (n.images = c);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const r = t.length;
      n = new Array(r);
      for (let o = 0; o !== r; ++o)
        n[o] = t[o].clone();
    }
    return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
}
const eA = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, Wl = { h: 0, s: 0, l: 0 }, Ov = { h: 0, s: 0, l: 0 };
function B_(s, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? s + (e - s) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? s + (e - s) * 6 * (2 / 3 - t) : s;
}
class Rt {
  constructor(e, t, n) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, n);
  }
  set(e, t, n) {
    if (t === void 0 && n === void 0) {
      const r = e;
      r && r.isColor ? this.copy(r) : typeof r == "number" ? this.setHex(r) : typeof r == "string" && this.setStyle(r);
    } else
      this.setRGB(e, t, n);
    return this;
  }
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  setHex(e, t = Gi) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, Hn.toWorkingColorSpace(this, t), this;
  }
  setRGB(e, t, n, r = Hn.workingColorSpace) {
    return this.r = e, this.g = t, this.b = n, Hn.toWorkingColorSpace(this, r), this;
  }
  setHSL(e, t, n, r = Hn.workingColorSpace) {
    if (e = TS(e, 1), t = yi(t, 0, 1), n = yi(n, 0, 1), t === 0)
      this.r = this.g = this.b = n;
    else {
      const o = n <= 0.5 ? n * (1 + t) : n + t - n * t, c = 2 * n - o;
      this.r = B_(c, o, e + 1 / 3), this.g = B_(c, o, e), this.b = B_(c, o, e - 1 / 3);
    }
    return Hn.toWorkingColorSpace(this, r), this;
  }
  setStyle(e, t = Gi) {
    function n(o) {
      o !== void 0 && parseFloat(o) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let r;
    if (r = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let o;
      const c = r[1], f = r[2];
      switch (c) {
        case "rgb":
        case "rgba":
          if (o = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))
            return n(o[4]), this.setRGB(
              Math.min(255, parseInt(o[1], 10)) / 255,
              Math.min(255, parseInt(o[2], 10)) / 255,
              Math.min(255, parseInt(o[3], 10)) / 255,
              t
            );
          if (o = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))
            return n(o[4]), this.setRGB(
              Math.min(100, parseInt(o[1], 10)) / 100,
              Math.min(100, parseInt(o[2], 10)) / 100,
              Math.min(100, parseInt(o[3], 10)) / 100,
              t
            );
          break;
        case "hsl":
        case "hsla":
          if (o = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))
            return n(o[4]), this.setHSL(
              parseFloat(o[1]) / 360,
              parseFloat(o[2]) / 100,
              parseFloat(o[3]) / 100,
              t
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (r = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const o = r[1], c = o.length;
      if (c === 3)
        return this.setRGB(
          parseInt(o.charAt(0), 16) / 15,
          parseInt(o.charAt(1), 16) / 15,
          parseInt(o.charAt(2), 16) / 15,
          t
        );
      if (c === 6)
        return this.setHex(parseInt(o, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = Gi) {
    const n = eA[e.toLowerCase()];
    return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  copySRGBToLinear(e) {
    return this.r = dd(e.r), this.g = dd(e.g), this.b = dd(e.b), this;
  }
  copyLinearToSRGB(e) {
    return this.r = A_(e.r), this.g = A_(e.g), this.b = A_(e.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = Gi) {
    return Hn.fromWorkingColorSpace(Sr.copy(this), e), Math.round(yi(Sr.r * 255, 0, 255)) * 65536 + Math.round(yi(Sr.g * 255, 0, 255)) * 256 + Math.round(yi(Sr.b * 255, 0, 255));
  }
  getHexString(e = Gi) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = Hn.workingColorSpace) {
    Hn.fromWorkingColorSpace(Sr.copy(this), t);
    const n = Sr.r, r = Sr.g, o = Sr.b, c = Math.max(n, r, o), f = Math.min(n, r, o);
    let h, p;
    const v = (f + c) / 2;
    if (f === c)
      h = 0, p = 0;
    else {
      const y = c - f;
      switch (p = v <= 0.5 ? y / (c + f) : y / (2 - c - f), c) {
        case n:
          h = (r - o) / y + (r < o ? 6 : 0);
          break;
        case r:
          h = (o - n) / y + 2;
          break;
        case o:
          h = (n - r) / y + 4;
          break;
      }
      h /= 6;
    }
    return e.h = h, e.s = p, e.l = v, e;
  }
  getRGB(e, t = Hn.workingColorSpace) {
    return Hn.fromWorkingColorSpace(Sr.copy(this), t), e.r = Sr.r, e.g = Sr.g, e.b = Sr.b, e;
  }
  getStyle(e = Gi) {
    Hn.fromWorkingColorSpace(Sr.copy(this), e);
    const t = Sr.r, n = Sr.g, r = Sr.b;
    return e !== Gi ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${r.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(r * 255)})`;
  }
  offsetHSL(e, t, n) {
    return this.getHSL(Wl), this.setHSL(Wl.h + e, Wl.s + t, Wl.l + n);
  }
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  lerpColors(e, t, n) {
    return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
  }
  lerpHSL(e, t) {
    this.getHSL(Wl), e.getHSL(Ov);
    const n = sp(Wl.h, Ov.h, t), r = sp(Wl.s, Ov.s, t), o = sp(Wl.l, Ov.l, t);
    return this.setHSL(n, r, o), this;
  }
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  applyMatrix3(e) {
    const t = this.r, n = this.g, r = this.b, o = e.elements;
    return this.r = o[0] * t + o[3] * n + o[6] * r, this.g = o[1] * t + o[4] * n + o[7] * r, this.b = o[2] * t + o[5] * n + o[8] * r, this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const Sr = /* @__PURE__ */ new Rt();
Rt.NAMES = eA;
class nu extends br {
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new Rt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Dp, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const zo = /* @__PURE__ */ gD();
function gD() {
  const s = new ArrayBuffer(4), e = new Float32Array(s), t = new Uint32Array(s), n = new Uint32Array(512), r = new Uint32Array(512);
  for (let h = 0; h < 256; ++h) {
    const p = h - 127;
    p < -27 ? (n[h] = 0, n[h | 256] = 32768, r[h] = 24, r[h | 256] = 24) : p < -14 ? (n[h] = 1024 >> -p - 14, n[h | 256] = 1024 >> -p - 14 | 32768, r[h] = -p - 1, r[h | 256] = -p - 1) : p <= 15 ? (n[h] = p + 15 << 10, n[h | 256] = p + 15 << 10 | 32768, r[h] = 13, r[h | 256] = 13) : p < 128 ? (n[h] = 31744, n[h | 256] = 64512, r[h] = 24, r[h | 256] = 24) : (n[h] = 31744, n[h | 256] = 64512, r[h] = 13, r[h | 256] = 13);
  }
  const o = new Uint32Array(2048), c = new Uint32Array(64), f = new Uint32Array(64);
  for (let h = 1; h < 1024; ++h) {
    let p = h << 13, v = 0;
    for (; !(p & 8388608); )
      p <<= 1, v -= 8388608;
    p &= -8388609, v += 947912704, o[h] = p | v;
  }
  for (let h = 1024; h < 2048; ++h)
    o[h] = 939524096 + (h - 1024 << 13);
  for (let h = 1; h < 31; ++h)
    c[h] = h << 23;
  c[31] = 1199570944, c[32] = 2147483648;
  for (let h = 33; h < 63; ++h)
    c[h] = 2147483648 + (h - 32 << 23);
  c[63] = 3347054592;
  for (let h = 1; h < 64; ++h)
    h !== 32 && (f[h] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: n,
    shiftTable: r,
    mantissaTable: o,
    exponentTable: c,
    offsetTable: f
  };
}
function na(s) {
  Math.abs(s) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), s = yi(s, -65504, 65504), zo.floatView[0] = s;
  const e = zo.uint32View[0], t = e >> 23 & 511;
  return zo.baseTable[t] + ((e & 8388607) >> zo.shiftTable[t]);
}
function np(s) {
  const e = s >> 10;
  return zo.uint32View[0] = zo.mantissaTable[zo.offsetTable[e] + (s & 1023)] + zo.exponentTable[e], zo.floatView[0];
}
const yD = {
  toHalfFloat: na,
  fromHalfFloat: np
}, Ui = /* @__PURE__ */ new Y(), Iv = /* @__PURE__ */ new Ie();
class jn {
  constructor(e, t, n = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = xp, this.updateRange = { offset: 0, count: -1 }, this.gpuType = Ta, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
  }
  copyAt(e, t, n) {
    e *= this.itemSize, n *= t.itemSize;
    for (let r = 0, o = this.itemSize; r < o; r++)
      this.array[e + r] = t.array[n + r];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, n = this.count; t < n; t++)
        Iv.fromBufferAttribute(this, t), Iv.applyMatrix3(e), this.setXY(t, Iv.x, Iv.y);
    else if (this.itemSize === 3)
      for (let t = 0, n = this.count; t < n; t++)
        Ui.fromBufferAttribute(this, t), Ui.applyMatrix3(e), this.setXYZ(t, Ui.x, Ui.y, Ui.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Ui.fromBufferAttribute(this, t), Ui.applyMatrix4(e), this.setXYZ(t, Ui.x, Ui.y, Ui.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Ui.fromBufferAttribute(this, t), Ui.applyNormalMatrix(e), this.setXYZ(t, Ui.x, Ui.y, Ui.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Ui.fromBufferAttribute(this, t), Ui.transformDirection(e), this.setXYZ(t, Ui.x, Ui.y, Ui.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getComponent(e, t) {
    let n = this.array[e * this.itemSize + t];
    return this.normalized && (n = ra(n, this.array)), n;
  }
  setComponent(e, t, n) {
    return this.normalized && (n = un(n, this.array)), this.array[e * this.itemSize + t] = n, this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = un(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = un(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = un(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = un(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = un(t, this.array), n = un(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, r) {
    return e *= this.itemSize, this.normalized && (t = un(t, this.array), n = un(n, this.array), r = un(r, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = r, this;
  }
  setXYZW(e, t, n, r, o) {
    return e *= this.itemSize, this.normalized && (t = un(t, this.array), n = un(n, this.array), r = un(r, this.array), o = un(o, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = r, this.array[e + 3] = o, this;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== xp && (e.usage = this.usage), (this.updateRange.offset !== 0 || this.updateRange.count !== -1) && (e.updateRange = this.updateRange), e;
  }
}
class _D extends jn {
  constructor(e, t, n) {
    super(new Int8Array(e), t, n);
  }
}
class xD extends jn {
  constructor(e, t, n) {
    super(new Uint8Array(e), t, n);
  }
}
class SD extends jn {
  constructor(e, t, n) {
    super(new Uint8ClampedArray(e), t, n);
  }
}
class MD extends jn {
  constructor(e, t, n) {
    super(new Int16Array(e), t, n);
  }
}
class AS extends jn {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
}
class ED extends jn {
  constructor(e, t, n) {
    super(new Int32Array(e), t, n);
  }
}
class RS extends jn {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
}
class TD extends jn {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let t = np(this.array[e * this.itemSize]);
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = un(t, this.array)), this.array[e * this.itemSize] = na(t), this;
  }
  getY(e) {
    let t = np(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = un(t, this.array)), this.array[e * this.itemSize + 1] = na(t), this;
  }
  getZ(e) {
    let t = np(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = un(t, this.array)), this.array[e * this.itemSize + 2] = na(t), this;
  }
  getW(e) {
    let t = np(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = un(t, this.array)), this.array[e * this.itemSize + 3] = na(t), this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = un(t, this.array), n = un(n, this.array)), this.array[e + 0] = na(t), this.array[e + 1] = na(n), this;
  }
  setXYZ(e, t, n, r) {
    return e *= this.itemSize, this.normalized && (t = un(t, this.array), n = un(n, this.array), r = un(r, this.array)), this.array[e + 0] = na(t), this.array[e + 1] = na(n), this.array[e + 2] = na(r), this;
  }
  setXYZW(e, t, n, r, o) {
    return e *= this.itemSize, this.normalized && (t = un(t, this.array), n = un(n, this.array), r = un(r, this.array), o = un(o, this.array)), this.array[e + 0] = na(t), this.array[e + 1] = na(n), this.array[e + 2] = na(r), this.array[e + 3] = na(o), this;
  }
}
class Pt extends jn {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
}
class bD extends jn {
  constructor(e, t, n) {
    super(new Float64Array(e), t, n);
  }
}
let wD = 0;
const qa = /* @__PURE__ */ new tn(), H_ = /* @__PURE__ */ new Cn(), Wf = /* @__PURE__ */ new Y(), Ma = /* @__PURE__ */ new Qs(), Yh = /* @__PURE__ */ new Qs(), Qi = /* @__PURE__ */ new Y();
class hn extends Xo {
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: wD++ }), this.uuid = ba(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (Kw(e) ? RS : AS)(e, 1) : this.index = e, this;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: n
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const n = this.attributes.normal;
    if (n !== void 0) {
      const o = new cn().getNormalMatrix(e);
      n.applyNormalMatrix(o), n.needsUpdate = !0;
    }
    const r = this.attributes.tangent;
    return r !== void 0 && (r.transformDirection(e), r.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(e) {
    return qa.makeRotationFromQuaternion(e), this.applyMatrix4(qa), this;
  }
  rotateX(e) {
    return qa.makeRotationX(e), this.applyMatrix4(qa), this;
  }
  rotateY(e) {
    return qa.makeRotationY(e), this.applyMatrix4(qa), this;
  }
  rotateZ(e) {
    return qa.makeRotationZ(e), this.applyMatrix4(qa), this;
  }
  translate(e, t, n) {
    return qa.makeTranslation(e, t, n), this.applyMatrix4(qa), this;
  }
  scale(e, t, n) {
    return qa.makeScale(e, t, n), this.applyMatrix4(qa), this;
  }
  lookAt(e) {
    return H_.lookAt(e), H_.updateMatrix(), this.applyMatrix4(H_.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(Wf).negate(), this.translate(Wf.x, Wf.y, Wf.z), this;
  }
  setFromPoints(e) {
    const t = [];
    for (let n = 0, r = e.length; n < r; n++) {
      const o = e[n];
      t.push(o.x, o.y, o.z || 0);
    }
    return this.setAttribute("position", new Pt(t, 3)), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Qs());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(
        new Y(-1 / 0, -1 / 0, -1 / 0),
        new Y(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let n = 0, r = t.length; n < r; n++) {
          const o = t[n];
          Ma.setFromBufferAttribute(o), this.morphTargetsRelative ? (Qi.addVectors(this.boundingBox.min, Ma.min), this.boundingBox.expandByPoint(Qi), Qi.addVectors(this.boundingBox.max, Ma.max), this.boundingBox.expandByPoint(Qi)) : (this.boundingBox.expandByPoint(Ma.min), this.boundingBox.expandByPoint(Ma.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new xs());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new Y(), 1 / 0);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      if (Ma.setFromBufferAttribute(e), t)
        for (let o = 0, c = t.length; o < c; o++) {
          const f = t[o];
          Yh.setFromBufferAttribute(f), this.morphTargetsRelative ? (Qi.addVectors(Ma.min, Yh.min), Ma.expandByPoint(Qi), Qi.addVectors(Ma.max, Yh.max), Ma.expandByPoint(Qi)) : (Ma.expandByPoint(Yh.min), Ma.expandByPoint(Yh.max));
        }
      Ma.getCenter(n);
      let r = 0;
      for (let o = 0, c = e.count; o < c; o++)
        Qi.fromBufferAttribute(e, o), r = Math.max(r, n.distanceToSquared(Qi));
      if (t)
        for (let o = 0, c = t.length; o < c; o++) {
          const f = t[o], h = this.morphTargetsRelative;
          for (let p = 0, v = f.count; p < v; p++)
            Qi.fromBufferAttribute(f, p), h && (Wf.fromBufferAttribute(e, p), Qi.add(Wf)), r = Math.max(r, n.distanceToSquared(Qi));
        }
      this.boundingSphere.radius = Math.sqrt(r), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const n = e.array, r = t.position.array, o = t.normal.array, c = t.uv.array, f = r.length / 3;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new jn(new Float32Array(4 * f), 4));
    const h = this.getAttribute("tangent").array, p = [], v = [];
    for (let I = 0; I < f; I++)
      p[I] = new Y(), v[I] = new Y();
    const y = new Y(), x = new Y(), M = new Y(), T = new Ie(), C = new Ie(), w = new Ie(), E = new Y(), L = new Y();
    function R(I, Z, ie) {
      y.fromArray(r, I * 3), x.fromArray(r, Z * 3), M.fromArray(r, ie * 3), T.fromArray(c, I * 2), C.fromArray(c, Z * 2), w.fromArray(c, ie * 2), x.sub(y), M.sub(y), C.sub(T), w.sub(T);
      const fe = 1 / (C.x * w.y - w.x * C.y);
      isFinite(fe) && (E.copy(x).multiplyScalar(w.y).addScaledVector(M, -C.y).multiplyScalar(fe), L.copy(M).multiplyScalar(C.x).addScaledVector(x, -w.x).multiplyScalar(fe), p[I].add(E), p[Z].add(E), p[ie].add(E), v[I].add(L), v[Z].add(L), v[ie].add(L));
    }
    let U = this.groups;
    U.length === 0 && (U = [{
      start: 0,
      count: n.length
    }]);
    for (let I = 0, Z = U.length; I < Z; ++I) {
      const ie = U[I], fe = ie.start, K = ie.count;
      for (let he = fe, Te = fe + K; he < Te; he += 3)
        R(
          n[he + 0],
          n[he + 1],
          n[he + 2]
        );
    }
    const F = new Y(), z = new Y(), B = new Y(), W = new Y();
    function O(I) {
      B.fromArray(o, I * 3), W.copy(B);
      const Z = p[I];
      F.copy(Z), F.sub(B.multiplyScalar(B.dot(Z))).normalize(), z.crossVectors(W, Z);
      const fe = z.dot(v[I]) < 0 ? -1 : 1;
      h[I * 4] = F.x, h[I * 4 + 1] = F.y, h[I * 4 + 2] = F.z, h[I * 4 + 3] = fe;
    }
    for (let I = 0, Z = U.length; I < Z; ++I) {
      const ie = U[I], fe = ie.start, K = ie.count;
      for (let he = fe, Te = fe + K; he < Te; he += 3)
        O(n[he + 0]), O(n[he + 1]), O(n[he + 2]);
    }
  }
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0)
        n = new jn(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
      else
        for (let x = 0, M = n.count; x < M; x++)
          n.setXYZ(x, 0, 0, 0);
      const r = new Y(), o = new Y(), c = new Y(), f = new Y(), h = new Y(), p = new Y(), v = new Y(), y = new Y();
      if (e)
        for (let x = 0, M = e.count; x < M; x += 3) {
          const T = e.getX(x + 0), C = e.getX(x + 1), w = e.getX(x + 2);
          r.fromBufferAttribute(t, T), o.fromBufferAttribute(t, C), c.fromBufferAttribute(t, w), v.subVectors(c, o), y.subVectors(r, o), v.cross(y), f.fromBufferAttribute(n, T), h.fromBufferAttribute(n, C), p.fromBufferAttribute(n, w), f.add(v), h.add(v), p.add(v), n.setXYZ(T, f.x, f.y, f.z), n.setXYZ(C, h.x, h.y, h.z), n.setXYZ(w, p.x, p.y, p.z);
        }
      else
        for (let x = 0, M = t.count; x < M; x += 3)
          r.fromBufferAttribute(t, x + 0), o.fromBufferAttribute(t, x + 1), c.fromBufferAttribute(t, x + 2), v.subVectors(c, o), y.subVectors(r, o), v.cross(y), n.setXYZ(x + 0, v.x, v.y, v.z), n.setXYZ(x + 1, v.x, v.y, v.z), n.setXYZ(x + 2, v.x, v.y, v.z);
      this.normalizeNormals(), n.needsUpdate = !0;
    }
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++)
      Qi.fromBufferAttribute(e, t), Qi.normalize(), e.setXYZ(t, Qi.x, Qi.y, Qi.z);
  }
  toNonIndexed() {
    function e(f, h) {
      const p = f.array, v = f.itemSize, y = f.normalized, x = new p.constructor(h.length * v);
      let M = 0, T = 0;
      for (let C = 0, w = h.length; C < w; C++) {
        f.isInterleavedBufferAttribute ? M = h[C] * f.data.stride + f.offset : M = h[C] * v;
        for (let E = 0; E < v; E++)
          x[T++] = p[M++];
      }
      return new jn(x, v, y);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new hn(), n = this.index.array, r = this.attributes;
    for (const f in r) {
      const h = r[f], p = e(h, n);
      t.setAttribute(f, p);
    }
    const o = this.morphAttributes;
    for (const f in o) {
      const h = [], p = o[f];
      for (let v = 0, y = p.length; v < y; v++) {
        const x = p[v], M = e(x, n);
        h.push(M);
      }
      t.morphAttributes[f] = h;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const c = this.groups;
    for (let f = 0, h = c.length; f < h; f++) {
      const p = c[f];
      t.addGroup(p.start, p.count, p.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const h = this.parameters;
      for (const p in h)
        h[p] !== void 0 && (e[p] = h[p]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const n = this.attributes;
    for (const h in n) {
      const p = n[h];
      e.data.attributes[h] = p.toJSON(e.data);
    }
    const r = {};
    let o = !1;
    for (const h in this.morphAttributes) {
      const p = this.morphAttributes[h], v = [];
      for (let y = 0, x = p.length; y < x; y++) {
        const M = p[y];
        v.push(M.toJSON(e.data));
      }
      v.length > 0 && (r[h] = v, o = !0);
    }
    o && (e.data.morphAttributes = r, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const c = this.groups;
    c.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(c)));
    const f = this.boundingSphere;
    return f !== null && (e.data.boundingSphere = {
      center: f.center.toArray(),
      radius: f.radius
    }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const n = e.index;
    n !== null && this.setIndex(n.clone(t));
    const r = e.attributes;
    for (const p in r) {
      const v = r[p];
      this.setAttribute(p, v.clone(t));
    }
    const o = e.morphAttributes;
    for (const p in o) {
      const v = [], y = o[p];
      for (let x = 0, M = y.length; x < M; x++)
        v.push(y[x].clone(t));
      this.morphAttributes[p] = v;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const c = e.groups;
    for (let p = 0, v = c.length; p < v; p++) {
      const y = c[p];
      this.addGroup(y.start, y.count, y.materialIndex);
    }
    const f = e.boundingBox;
    f !== null && (this.boundingBox = f.clone());
    const h = e.boundingSphere;
    return h !== null && (this.boundingSphere = h.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const hb = /* @__PURE__ */ new tn(), Zu = /* @__PURE__ */ new Sc(), Fv = /* @__PURE__ */ new xs(), pb = /* @__PURE__ */ new Y(), Xf = /* @__PURE__ */ new Y(), Yf = /* @__PURE__ */ new Y(), jf = /* @__PURE__ */ new Y(), V_ = /* @__PURE__ */ new Y(), zv = /* @__PURE__ */ new Y(), Bv = /* @__PURE__ */ new Ie(), Hv = /* @__PURE__ */ new Ie(), Vv = /* @__PURE__ */ new Ie(), mb = /* @__PURE__ */ new Y(), vb = /* @__PURE__ */ new Y(), gb = /* @__PURE__ */ new Y(), kv = /* @__PURE__ */ new Y(), Gv = /* @__PURE__ */ new Y();
class lr extends Cn {
  constructor(e = new hn(), t = new nu()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const r = t[n[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, c = r.length; o < c; o++) {
          const f = r[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = o;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry, r = n.attributes.position, o = n.morphAttributes.position, c = n.morphTargetsRelative;
    t.fromBufferAttribute(r, e);
    const f = this.morphTargetInfluences;
    if (o && f) {
      zv.set(0, 0, 0);
      for (let h = 0, p = o.length; h < p; h++) {
        const v = f[h], y = o[h];
        v !== 0 && (V_.fromBufferAttribute(y, e), c ? zv.addScaledVector(V_, v) : zv.addScaledVector(V_.sub(t), v));
      }
      t.add(zv);
    }
    return t;
  }
  raycast(e, t) {
    const n = this.geometry, r = this.material, o = this.matrixWorld;
    r !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), Fv.copy(n.boundingSphere), Fv.applyMatrix4(o), Zu.copy(e.ray).recast(e.near), !(Fv.containsPoint(Zu.origin) === !1 && (Zu.intersectSphere(Fv, pb) === null || Zu.origin.distanceToSquared(pb) > (e.far - e.near) ** 2)) && (hb.copy(o).invert(), Zu.copy(e.ray).applyMatrix4(hb), !(n.boundingBox !== null && Zu.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(e, t, Zu)));
  }
  _computeIntersections(e, t, n) {
    let r;
    const o = this.geometry, c = this.material, f = o.index, h = o.attributes.position, p = o.attributes.uv, v = o.attributes.uv1, y = o.attributes.normal, x = o.groups, M = o.drawRange;
    if (f !== null)
      if (Array.isArray(c))
        for (let T = 0, C = x.length; T < C; T++) {
          const w = x[T], E = c[w.materialIndex], L = Math.max(w.start, M.start), R = Math.min(f.count, Math.min(w.start + w.count, M.start + M.count));
          for (let U = L, F = R; U < F; U += 3) {
            const z = f.getX(U), B = f.getX(U + 1), W = f.getX(U + 2);
            r = Wv(this, E, e, n, p, v, y, z, B, W), r && (r.faceIndex = Math.floor(U / 3), r.face.materialIndex = w.materialIndex, t.push(r));
          }
        }
      else {
        const T = Math.max(0, M.start), C = Math.min(f.count, M.start + M.count);
        for (let w = T, E = C; w < E; w += 3) {
          const L = f.getX(w), R = f.getX(w + 1), U = f.getX(w + 2);
          r = Wv(this, c, e, n, p, v, y, L, R, U), r && (r.faceIndex = Math.floor(w / 3), t.push(r));
        }
      }
    else if (h !== void 0)
      if (Array.isArray(c))
        for (let T = 0, C = x.length; T < C; T++) {
          const w = x[T], E = c[w.materialIndex], L = Math.max(w.start, M.start), R = Math.min(h.count, Math.min(w.start + w.count, M.start + M.count));
          for (let U = L, F = R; U < F; U += 3) {
            const z = U, B = U + 1, W = U + 2;
            r = Wv(this, E, e, n, p, v, y, z, B, W), r && (r.faceIndex = Math.floor(U / 3), r.face.materialIndex = w.materialIndex, t.push(r));
          }
        }
      else {
        const T = Math.max(0, M.start), C = Math.min(h.count, M.start + M.count);
        for (let w = T, E = C; w < E; w += 3) {
          const L = w, R = w + 1, U = w + 2;
          r = Wv(this, c, e, n, p, v, y, L, R, U), r && (r.faceIndex = Math.floor(w / 3), t.push(r));
        }
      }
  }
}
function AD(s, e, t, n, r, o, c, f) {
  let h;
  if (e.side === Fr ? h = n.intersectTriangle(c, o, r, !0, f) : h = n.intersectTriangle(r, o, c, e.side === ko, f), h === null)
    return null;
  Gv.copy(f), Gv.applyMatrix4(s.matrixWorld);
  const p = t.ray.origin.distanceTo(Gv);
  return p < t.near || p > t.far ? null : {
    distance: p,
    point: Gv.clone(),
    object: s
  };
}
function Wv(s, e, t, n, r, o, c, f, h, p) {
  s.getVertexPosition(f, Xf), s.getVertexPosition(h, Yf), s.getVertexPosition(p, jf);
  const v = AD(s, e, t, n, Xf, Yf, jf, kv);
  if (v) {
    r && (Bv.fromBufferAttribute(r, f), Hv.fromBufferAttribute(r, h), Vv.fromBufferAttribute(r, p), v.uv = ia.getInterpolation(kv, Xf, Yf, jf, Bv, Hv, Vv, new Ie())), o && (Bv.fromBufferAttribute(o, f), Hv.fromBufferAttribute(o, h), Vv.fromBufferAttribute(o, p), v.uv1 = ia.getInterpolation(kv, Xf, Yf, jf, Bv, Hv, Vv, new Ie()), v.uv2 = v.uv1), c && (mb.fromBufferAttribute(c, f), vb.fromBufferAttribute(c, h), gb.fromBufferAttribute(c, p), v.normal = ia.getInterpolation(kv, Xf, Yf, jf, mb, vb, gb, new Y()), v.normal.dot(n.direction) > 0 && v.normal.multiplyScalar(-1));
    const y = {
      a: f,
      b: h,
      c: p,
      normal: new Y(),
      materialIndex: 0
    };
    ia.getNormal(Xf, Yf, jf, y.normal), v.face = y;
  }
  return v;
}
class Mc extends hn {
  constructor(e = 1, t = 1, n = 1, r = 1, o = 1, c = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: n,
      widthSegments: r,
      heightSegments: o,
      depthSegments: c
    };
    const f = this;
    r = Math.floor(r), o = Math.floor(o), c = Math.floor(c);
    const h = [], p = [], v = [], y = [];
    let x = 0, M = 0;
    T("z", "y", "x", -1, -1, n, t, e, c, o, 0), T("z", "y", "x", 1, -1, n, t, -e, c, o, 1), T("x", "z", "y", 1, 1, e, n, t, r, c, 2), T("x", "z", "y", 1, -1, e, n, -t, r, c, 3), T("x", "y", "z", 1, -1, e, t, n, r, o, 4), T("x", "y", "z", -1, -1, e, t, -n, r, o, 5), this.setIndex(h), this.setAttribute("position", new Pt(p, 3)), this.setAttribute("normal", new Pt(v, 3)), this.setAttribute("uv", new Pt(y, 2));
    function T(C, w, E, L, R, U, F, z, B, W, O) {
      const I = U / B, Z = F / W, ie = U / 2, fe = F / 2, K = z / 2, he = B + 1, Te = W + 1;
      let Me = 0, ne = 0;
      const le = new Y();
      for (let re = 0; re < Te; re++) {
        const J = re * Z - fe;
        for (let ue = 0; ue < he; ue++) {
          const Pe = ue * I - ie;
          le[C] = Pe * L, le[w] = J * R, le[E] = K, p.push(le.x, le.y, le.z), le[C] = 0, le[w] = 0, le[E] = z > 0 ? 1 : -1, v.push(le.x, le.y, le.z), y.push(ue / B), y.push(1 - re / W), Me += 1;
        }
      }
      for (let re = 0; re < W; re++)
        for (let J = 0; J < B; J++) {
          const ue = x + J + he * re, Pe = x + J + he * (re + 1), qe = x + (J + 1) + he * (re + 1), $e = x + (J + 1) + he * re;
          h.push(ue, Pe, $e), h.push(Pe, qe, $e), ne += 6;
        }
      f.addGroup(M, ne, O), M += ne, x += Me;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Mc(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function pd(s) {
  const e = {};
  for (const t in s) {
    e[t] = {};
    for (const n in s[t]) {
      const r = s[t][n];
      r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture || r.isQuaternion) ? r.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = r.clone() : Array.isArray(r) ? e[t][n] = r.slice() : e[t][n] = r;
    }
  }
  return e;
}
function Ir(s) {
  const e = {};
  for (let t = 0; t < s.length; t++) {
    const n = pd(s[t]);
    for (const r in n)
      e[r] = n[r];
  }
  return e;
}
function RD(s) {
  const e = [];
  for (let t = 0; t < s.length; t++)
    e.push(s[t].clone());
  return e;
}
function tA(s) {
  return s.getRenderTarget() === null ? s.outputColorSpace : Hn.workingColorSpace;
}
const nA = { clone: pd, merge: Ir };
var CD = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, LD = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class Ja extends br {
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = CD, this.fragmentShader = LD, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      derivatives: !1,
      // set to use derivatives
      fragDepth: !1,
      // set to use fragment depth values
      drawBuffers: !1,
      // set to use draw buffers
      shaderTextureLOD: !1
      // set to use shader texture LOD
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = pd(e.uniforms), this.uniformsGroups = RD(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const r in this.uniforms) {
      const c = this.uniforms[r].value;
      c && c.isTexture ? t.uniforms[r] = {
        type: "t",
        value: c.toJSON(e).uuid
      } : c && c.isColor ? t.uniforms[r] = {
        type: "c",
        value: c.getHex()
      } : c && c.isVector2 ? t.uniforms[r] = {
        type: "v2",
        value: c.toArray()
      } : c && c.isVector3 ? t.uniforms[r] = {
        type: "v3",
        value: c.toArray()
      } : c && c.isVector4 ? t.uniforms[r] = {
        type: "v4",
        value: c.toArray()
      } : c && c.isMatrix3 ? t.uniforms[r] = {
        type: "m3",
        value: c.toArray()
      } : c && c.isMatrix4 ? t.uniforms[r] = {
        type: "m4",
        value: c.toArray()
      } : t.uniforms[r] = {
        value: c
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
    const n = {};
    for (const r in this.extensions)
      this.extensions[r] === !0 && (n[r] = !0);
    return Object.keys(n).length > 0 && (t.extensions = n), t;
  }
}
class Op extends Cn {
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new tn(), this.projectionMatrix = new tn(), this.projectionMatrixInverse = new tn(), this.coordinateSystem = js;
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
  }
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class Ri extends Op {
  constructor(e = 50, t = 1, n = 0.1, r = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = r, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = hd * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const e = Math.tan(dc * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return hd * 2 * Math.atan(
      Math.tan(dc * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(e, t, n, r, o, c) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = r, this.view.width = o, this.view.height = c, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(dc * 0.5 * this.fov) / this.zoom, n = 2 * t, r = this.aspect * n, o = -0.5 * r;
    const c = this.view;
    if (this.view !== null && this.view.enabled) {
      const h = c.fullWidth, p = c.fullHeight;
      o += c.offsetX * r / h, t -= c.offsetY * n / p, r *= c.width / h, n *= c.height / p;
    }
    const f = this.filmOffset;
    f !== 0 && (o += e * f / this.getFilmWidth()), this.projectionMatrix.makePerspective(o, o + r, t, t - n, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
}
const qf = -90, Zf = 1;
class iA extends Cn {
  constructor(e, t, n) {
    super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const r = new Ri(qf, Zf, e, t);
    r.layers = this.layers, this.add(r);
    const o = new Ri(qf, Zf, e, t);
    o.layers = this.layers, this.add(o);
    const c = new Ri(qf, Zf, e, t);
    c.layers = this.layers, this.add(c);
    const f = new Ri(qf, Zf, e, t);
    f.layers = this.layers, this.add(f);
    const h = new Ri(qf, Zf, e, t);
    h.layers = this.layers, this.add(h);
    const p = new Ri(qf, Zf, e, t);
    p.layers = this.layers, this.add(p);
  }
  updateCoordinateSystem() {
    const e = this.coordinateSystem, t = this.children.concat(), [n, r, o, c, f, h] = t;
    for (const p of t)
      this.remove(p);
    if (e === js)
      n.up.set(0, 1, 0), n.lookAt(1, 0, 0), r.up.set(0, 1, 0), r.lookAt(-1, 0, 0), o.up.set(0, 0, -1), o.lookAt(0, 1, 0), c.up.set(0, 0, 1), c.lookAt(0, -1, 0), f.up.set(0, 1, 0), f.lookAt(0, 0, 1), h.up.set(0, 1, 0), h.lookAt(0, 0, -1);
    else if (e === Sp)
      n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), r.up.set(0, -1, 0), r.lookAt(1, 0, 0), o.up.set(0, 0, 1), o.lookAt(0, 1, 0), c.up.set(0, 0, -1), c.lookAt(0, -1, 0), f.up.set(0, -1, 0), f.lookAt(0, 0, 1), h.up.set(0, -1, 0), h.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const p of t)
      this.add(p), p.updateMatrixWorld();
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: n, activeMipmapLevel: r } = this;
    this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
    const [o, c, f, h, p, v] = this.children, y = e.getRenderTarget(), x = e.getActiveCubeFace(), M = e.getActiveMipmapLevel(), T = e.xr.enabled;
    e.xr.enabled = !1;
    const C = n.texture.generateMipmaps;
    n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0, r), e.render(t, o), e.setRenderTarget(n, 1, r), e.render(t, c), e.setRenderTarget(n, 2, r), e.render(t, f), e.setRenderTarget(n, 3, r), e.render(t, h), e.setRenderTarget(n, 4, r), e.render(t, p), n.texture.generateMipmaps = C, e.setRenderTarget(n, 5, r), e.render(t, v), e.setRenderTarget(y, x, M), e.xr.enabled = T, n.texture.needsPMREMUpdate = !0;
  }
}
class Ip extends Ci {
  constructor(e, t, n, r, o, c, f, h, p, v) {
    e = e !== void 0 ? e : [], t = t !== void 0 ? t : Go, super(e, t, n, r, o, c, f, h, p, v), this.isCubeTexture = !0, this.flipY = !1;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class rA extends Za {
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const n = { width: e, height: e, depth: 1 }, r = [n, n, n, n, n, n];
    t.encoding !== void 0 && (op("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."), t.colorSpace = t.encoding === Kl ? Gi : Ea), this.texture = new Ip(r, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : hi;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const n = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, r = new Mc(5, 5, 5), o = new Ja({
      name: "CubemapFromEquirect",
      uniforms: pd(n.uniforms),
      vertexShader: n.vertexShader,
      fragmentShader: n.fragmentShader,
      side: Fr,
      blending: Ho
    });
    o.uniforms.tEquirect.value = t;
    const c = new lr(r, o), f = t.minFilter;
    return t.minFilter === $l && (t.minFilter = hi), new iA(1, 10, this).update(e, c), t.minFilter = f, c.geometry.dispose(), c.material.dispose(), this;
  }
  clear(e, t, n, r) {
    const o = e.getRenderTarget();
    for (let c = 0; c < 6; c++)
      e.setRenderTarget(this, c), e.clear(t, n, r);
    e.setRenderTarget(o);
  }
}
const k_ = /* @__PURE__ */ new Y(), PD = /* @__PURE__ */ new Y(), DD = /* @__PURE__ */ new cn();
class Fo {
  constructor(e = new Y(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  setComponents(e, t, n, r) {
    return this.normal.set(e, t, n), this.constant = r, this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  setFromCoplanarPoints(e, t, n) {
    const r = k_.subVectors(n, t).cross(PD.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(r, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(k_), r = this.normal.dot(n);
    if (r === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const o = -(e.start.dot(this.normal) + this.constant) / r;
    return o < 0 || o > 1 ? null : t.copy(e.start).addScaledVector(n, o);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
    return t < 0 && n > 0 || n < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || DD.getNormalMatrix(e), r = this.coplanarPoint(k_).applyMatrix4(e), o = this.normal.applyMatrix3(n).normalize();
    return this.constant = -r.dot(o), this;
  }
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Ju = /* @__PURE__ */ new xs(), Xv = /* @__PURE__ */ new Y();
class kg {
  constructor(e = new Fo(), t = new Fo(), n = new Fo(), r = new Fo(), o = new Fo(), c = new Fo()) {
    this.planes = [e, t, n, r, o, c];
  }
  set(e, t, n, r, o, c) {
    const f = this.planes;
    return f[0].copy(e), f[1].copy(t), f[2].copy(n), f[3].copy(r), f[4].copy(o), f[5].copy(c), this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      t[n].copy(e.planes[n]);
    return this;
  }
  setFromProjectionMatrix(e, t = js) {
    const n = this.planes, r = e.elements, o = r[0], c = r[1], f = r[2], h = r[3], p = r[4], v = r[5], y = r[6], x = r[7], M = r[8], T = r[9], C = r[10], w = r[11], E = r[12], L = r[13], R = r[14], U = r[15];
    if (n[0].setComponents(h - o, x - p, w - M, U - E).normalize(), n[1].setComponents(h + o, x + p, w + M, U + E).normalize(), n[2].setComponents(h + c, x + v, w + T, U + L).normalize(), n[3].setComponents(h - c, x - v, w - T, U - L).normalize(), n[4].setComponents(h - f, x - y, w - C, U - R).normalize(), t === js)
      n[5].setComponents(h + f, x + y, w + C, U + R).normalize();
    else if (t === Sp)
      n[5].setComponents(f, y, C, R).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
    return this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), Ju.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), Ju.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(Ju);
  }
  intersectsSprite(e) {
    return Ju.center.set(0, 0, 0), Ju.radius = 0.7071067811865476, Ju.applyMatrix4(e.matrixWorld), this.intersectsSphere(Ju);
  }
  intersectsSphere(e) {
    const t = this.planes, n = e.center, r = -e.radius;
    for (let o = 0; o < 6; o++)
      if (t[o].distanceToPoint(n) < r)
        return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const r = t[n];
      if (Xv.x = r.normal.x > 0 ? e.max.x : e.min.x, Xv.y = r.normal.y > 0 ? e.max.y : e.min.y, Xv.z = r.normal.z > 0 ? e.max.z : e.min.z, r.distanceToPoint(Xv) < 0)
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      if (t[n].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function aA() {
  let s = null, e = !1, t = null, n = null;
  function r(o, c) {
    t(o, c), n = s.requestAnimationFrame(r);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (n = s.requestAnimationFrame(r), e = !0);
    },
    stop: function() {
      s.cancelAnimationFrame(n), e = !1;
    },
    setAnimationLoop: function(o) {
      t = o;
    },
    setContext: function(o) {
      s = o;
    }
  };
}
function UD(s, e) {
  const t = e.isWebGL2, n = /* @__PURE__ */ new WeakMap();
  function r(p, v) {
    const y = p.array, x = p.usage, M = s.createBuffer();
    s.bindBuffer(v, M), s.bufferData(v, y, x), p.onUploadCallback();
    let T;
    if (y instanceof Float32Array)
      T = s.FLOAT;
    else if (y instanceof Uint16Array)
      if (p.isFloat16BufferAttribute)
        if (t)
          T = s.HALF_FLOAT;
        else
          throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
      else
        T = s.UNSIGNED_SHORT;
    else if (y instanceof Int16Array)
      T = s.SHORT;
    else if (y instanceof Uint32Array)
      T = s.UNSIGNED_INT;
    else if (y instanceof Int32Array)
      T = s.INT;
    else if (y instanceof Int8Array)
      T = s.BYTE;
    else if (y instanceof Uint8Array)
      T = s.UNSIGNED_BYTE;
    else if (y instanceof Uint8ClampedArray)
      T = s.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + y);
    return {
      buffer: M,
      type: T,
      bytesPerElement: y.BYTES_PER_ELEMENT,
      version: p.version
    };
  }
  function o(p, v, y) {
    const x = v.array, M = v.updateRange;
    s.bindBuffer(y, p), M.count === -1 ? s.bufferSubData(y, 0, x) : (t ? s.bufferSubData(
      y,
      M.offset * x.BYTES_PER_ELEMENT,
      x,
      M.offset,
      M.count
    ) : s.bufferSubData(
      y,
      M.offset * x.BYTES_PER_ELEMENT,
      x.subarray(M.offset, M.offset + M.count)
    ), M.count = -1), v.onUploadCallback();
  }
  function c(p) {
    return p.isInterleavedBufferAttribute && (p = p.data), n.get(p);
  }
  function f(p) {
    p.isInterleavedBufferAttribute && (p = p.data);
    const v = n.get(p);
    v && (s.deleteBuffer(v.buffer), n.delete(p));
  }
  function h(p, v) {
    if (p.isGLBufferAttribute) {
      const x = n.get(p);
      (!x || x.version < p.version) && n.set(p, {
        buffer: p.buffer,
        type: p.type,
        bytesPerElement: p.elementSize,
        version: p.version
      });
      return;
    }
    p.isInterleavedBufferAttribute && (p = p.data);
    const y = n.get(p);
    y === void 0 ? n.set(p, r(p, v)) : y.version < p.version && (o(y.buffer, p, v), y.version = p.version);
  }
  return {
    get: c,
    remove: f,
    update: h
  };
}
class Fp extends hn {
  constructor(e = 1, t = 1, n = 1, r = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: n,
      heightSegments: r
    };
    const o = e / 2, c = t / 2, f = Math.floor(n), h = Math.floor(r), p = f + 1, v = h + 1, y = e / f, x = t / h, M = [], T = [], C = [], w = [];
    for (let E = 0; E < v; E++) {
      const L = E * x - c;
      for (let R = 0; R < p; R++) {
        const U = R * y - o;
        T.push(U, -L, 0), C.push(0, 0, 1), w.push(R / f), w.push(1 - E / h);
      }
    }
    for (let E = 0; E < h; E++)
      for (let L = 0; L < f; L++) {
        const R = L + p * E, U = L + p * (E + 1), F = L + 1 + p * (E + 1), z = L + 1 + p * E;
        M.push(R, U, z), M.push(U, F, z);
      }
    this.setIndex(M), this.setAttribute("position", new Pt(T, 3)), this.setAttribute("normal", new Pt(C, 3)), this.setAttribute("uv", new Pt(w, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Fp(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
var ND = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, OD = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, ID = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, FD = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, zD = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`, BD = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, HD = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, VD = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, kD = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, GD = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, WD = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, XD = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, YD = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, jD = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`, qD = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, ZD = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, JD = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, KD = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, QD = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, $D = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, eU = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, tU = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, nU = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, iU = `vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, rU = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, aU = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, sU = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, oU = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, lU = "gl_FragColor = linearToOutputTexel( gl_FragColor );", uU = `
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`, cU = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, fU = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, dU = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, hU = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, pU = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, mU = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, vU = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, gU = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, yU = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, _U = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, xU = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, SU = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, MU = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, EU = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, TU = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, bU = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, wU = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, AU = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, RU = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, CU = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, LU = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	anisotropyV /= material.anisotropy;
	material.anisotropy = saturate( material.anisotropy );
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;
#endif`, PU = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, DU = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal;
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, UU = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, NU = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, OU = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, IU = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, FU = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`, zU = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`, BU = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, HU = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, VU = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, kU = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, GU = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, WU = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, XU = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, YU = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`, jU = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`, qU = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`, ZU = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, JU = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, KU = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, QU = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, $U = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, e3 = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, t3 = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, n3 = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, i3 = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, r3 = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, a3 = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, s3 = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, o3 = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, l3 = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, u3 = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, c3 = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, f3 = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, d3 = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, h3 = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`, p3 = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, m3 = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, v3 = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, g3 = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, y3 = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`, _3 = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, x3 = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, S3 = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, M3 = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, E3 = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, T3 = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, b3 = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, w3 = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, A3 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, R3 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, C3 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, L3 = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const P3 = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, D3 = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, U3 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, N3 = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, O3 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, I3 = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, F3 = `#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, z3 = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, B3 = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, H3 = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, V3 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, k3 = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, G3 = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, W3 = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, X3 = `#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, Y3 = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, j3 = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, q3 = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Z3 = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, J3 = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, K3 = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, Q3 = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, $3 = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, eN = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, tN = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, nN = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, iN = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, rN = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, aN = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, sN = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, oN = `#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, lN = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, uN = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, cN = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, ln = {
  alphahash_fragment: ND,
  alphahash_pars_fragment: OD,
  alphamap_fragment: ID,
  alphamap_pars_fragment: FD,
  alphatest_fragment: zD,
  alphatest_pars_fragment: BD,
  aomap_fragment: HD,
  aomap_pars_fragment: VD,
  begin_vertex: kD,
  beginnormal_vertex: GD,
  bsdfs: WD,
  iridescence_fragment: XD,
  bumpmap_pars_fragment: YD,
  clipping_planes_fragment: jD,
  clipping_planes_pars_fragment: qD,
  clipping_planes_pars_vertex: ZD,
  clipping_planes_vertex: JD,
  color_fragment: KD,
  color_pars_fragment: QD,
  color_pars_vertex: $D,
  color_vertex: eU,
  common: tU,
  cube_uv_reflection_fragment: nU,
  defaultnormal_vertex: iU,
  displacementmap_pars_vertex: rU,
  displacementmap_vertex: aU,
  emissivemap_fragment: sU,
  emissivemap_pars_fragment: oU,
  colorspace_fragment: lU,
  colorspace_pars_fragment: uU,
  envmap_fragment: cU,
  envmap_common_pars_fragment: fU,
  envmap_pars_fragment: dU,
  envmap_pars_vertex: hU,
  envmap_physical_pars_fragment: bU,
  envmap_vertex: pU,
  fog_vertex: mU,
  fog_pars_vertex: vU,
  fog_fragment: gU,
  fog_pars_fragment: yU,
  gradientmap_pars_fragment: _U,
  lightmap_fragment: xU,
  lightmap_pars_fragment: SU,
  lights_lambert_fragment: MU,
  lights_lambert_pars_fragment: EU,
  lights_pars_begin: TU,
  lights_toon_fragment: wU,
  lights_toon_pars_fragment: AU,
  lights_phong_fragment: RU,
  lights_phong_pars_fragment: CU,
  lights_physical_fragment: LU,
  lights_physical_pars_fragment: PU,
  lights_fragment_begin: DU,
  lights_fragment_maps: UU,
  lights_fragment_end: NU,
  logdepthbuf_fragment: OU,
  logdepthbuf_pars_fragment: IU,
  logdepthbuf_pars_vertex: FU,
  logdepthbuf_vertex: zU,
  map_fragment: BU,
  map_pars_fragment: HU,
  map_particle_fragment: VU,
  map_particle_pars_fragment: kU,
  metalnessmap_fragment: GU,
  metalnessmap_pars_fragment: WU,
  morphcolor_vertex: XU,
  morphnormal_vertex: YU,
  morphtarget_pars_vertex: jU,
  morphtarget_vertex: qU,
  normal_fragment_begin: ZU,
  normal_fragment_maps: JU,
  normal_pars_fragment: KU,
  normal_pars_vertex: QU,
  normal_vertex: $U,
  normalmap_pars_fragment: e3,
  clearcoat_normal_fragment_begin: t3,
  clearcoat_normal_fragment_maps: n3,
  clearcoat_pars_fragment: i3,
  iridescence_pars_fragment: r3,
  opaque_fragment: a3,
  packing: s3,
  premultiplied_alpha_fragment: o3,
  project_vertex: l3,
  dithering_fragment: u3,
  dithering_pars_fragment: c3,
  roughnessmap_fragment: f3,
  roughnessmap_pars_fragment: d3,
  shadowmap_pars_fragment: h3,
  shadowmap_pars_vertex: p3,
  shadowmap_vertex: m3,
  shadowmask_pars_fragment: v3,
  skinbase_vertex: g3,
  skinning_pars_vertex: y3,
  skinning_vertex: _3,
  skinnormal_vertex: x3,
  specularmap_fragment: S3,
  specularmap_pars_fragment: M3,
  tonemapping_fragment: E3,
  tonemapping_pars_fragment: T3,
  transmission_fragment: b3,
  transmission_pars_fragment: w3,
  uv_pars_fragment: A3,
  uv_pars_vertex: R3,
  uv_vertex: C3,
  worldpos_vertex: L3,
  background_vert: P3,
  background_frag: D3,
  backgroundCube_vert: U3,
  backgroundCube_frag: N3,
  cube_vert: O3,
  cube_frag: I3,
  depth_vert: F3,
  depth_frag: z3,
  distanceRGBA_vert: B3,
  distanceRGBA_frag: H3,
  equirect_vert: V3,
  equirect_frag: k3,
  linedashed_vert: G3,
  linedashed_frag: W3,
  meshbasic_vert: X3,
  meshbasic_frag: Y3,
  meshlambert_vert: j3,
  meshlambert_frag: q3,
  meshmatcap_vert: Z3,
  meshmatcap_frag: J3,
  meshnormal_vert: K3,
  meshnormal_frag: Q3,
  meshphong_vert: $3,
  meshphong_frag: eN,
  meshphysical_vert: tN,
  meshphysical_frag: nN,
  meshtoon_vert: iN,
  meshtoon_frag: rN,
  points_vert: aN,
  points_frag: sN,
  shadow_vert: oN,
  shadow_frag: lN,
  sprite_vert: uN,
  sprite_frag: cN
}, dt = {
  common: {
    diffuse: { value: /* @__PURE__ */ new Rt(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new cn() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new cn() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  envmap: {
    envMap: { value: null },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new cn() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new cn() },
    normalScale: { value: /* @__PURE__ */ new Ie(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new cn() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new Rt(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new Rt(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new cn() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new cn() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new Rt(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new Ie(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new cn() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new cn() },
    alphaTest: { value: 0 }
  }
}, _s = {
  basic: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.specularmap,
      dt.envmap,
      dt.aomap,
      dt.lightmap,
      dt.fog
    ]),
    vertexShader: ln.meshbasic_vert,
    fragmentShader: ln.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.specularmap,
      dt.envmap,
      dt.aomap,
      dt.lightmap,
      dt.emissivemap,
      dt.bumpmap,
      dt.normalmap,
      dt.displacementmap,
      dt.fog,
      dt.lights,
      {
        emissive: { value: /* @__PURE__ */ new Rt(0) }
      }
    ]),
    vertexShader: ln.meshlambert_vert,
    fragmentShader: ln.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.specularmap,
      dt.envmap,
      dt.aomap,
      dt.lightmap,
      dt.emissivemap,
      dt.bumpmap,
      dt.normalmap,
      dt.displacementmap,
      dt.fog,
      dt.lights,
      {
        emissive: { value: /* @__PURE__ */ new Rt(0) },
        specular: { value: /* @__PURE__ */ new Rt(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: ln.meshphong_vert,
    fragmentShader: ln.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.envmap,
      dt.aomap,
      dt.lightmap,
      dt.emissivemap,
      dt.bumpmap,
      dt.normalmap,
      dt.displacementmap,
      dt.roughnessmap,
      dt.metalnessmap,
      dt.fog,
      dt.lights,
      {
        emissive: { value: /* @__PURE__ */ new Rt(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
        // temporary
      }
    ]),
    vertexShader: ln.meshphysical_vert,
    fragmentShader: ln.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.aomap,
      dt.lightmap,
      dt.emissivemap,
      dt.bumpmap,
      dt.normalmap,
      dt.displacementmap,
      dt.gradientmap,
      dt.fog,
      dt.lights,
      {
        emissive: { value: /* @__PURE__ */ new Rt(0) }
      }
    ]),
    vertexShader: ln.meshtoon_vert,
    fragmentShader: ln.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.bumpmap,
      dt.normalmap,
      dt.displacementmap,
      dt.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: ln.meshmatcap_vert,
    fragmentShader: ln.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ Ir([
      dt.points,
      dt.fog
    ]),
    vertexShader: ln.points_vert,
    fragmentShader: ln.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: ln.linedashed_vert,
    fragmentShader: ln.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.displacementmap
    ]),
    vertexShader: ln.depth_vert,
    fragmentShader: ln.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.bumpmap,
      dt.normalmap,
      dt.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ln.meshnormal_vert,
    fragmentShader: ln.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ Ir([
      dt.sprite,
      dt.fog
    ]),
    vertexShader: ln.sprite_vert,
    fragmentShader: ln.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new cn() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: ln.background_vert,
    fragmentShader: ln.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: ln.backgroundCube_vert,
    fragmentShader: ln.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: ln.cube_vert,
    fragmentShader: ln.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: ln.equirect_vert,
    fragmentShader: ln.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ Ir([
      dt.common,
      dt.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new Y() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: ln.distanceRGBA_vert,
    fragmentShader: ln.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ Ir([
      dt.lights,
      dt.fog,
      {
        color: { value: /* @__PURE__ */ new Rt(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ln.shadow_vert,
    fragmentShader: ln.shadow_frag
  }
};
_s.physical = {
  uniforms: /* @__PURE__ */ Ir([
    _s.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new cn() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new cn() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new Ie(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new cn() },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new cn() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new cn() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new Rt(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new cn() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new cn() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new cn() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new Ie() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new cn() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new Rt(0) },
      specularColor: { value: /* @__PURE__ */ new Rt(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new cn() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new cn() },
      anisotropyVector: { value: /* @__PURE__ */ new Ie() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new cn() }
    }
  ]),
  vertexShader: ln.meshphysical_vert,
  fragmentShader: ln.meshphysical_frag
};
const Yv = { r: 0, b: 0, g: 0 };
function fN(s, e, t, n, r, o, c) {
  const f = new Rt(0);
  let h = o === !0 ? 0 : 1, p, v, y = null, x = 0, M = null;
  function T(w, E) {
    let L = !1, R = E.isScene === !0 ? E.background : null;
    R && R.isTexture && (R = (E.backgroundBlurriness > 0 ? t : e).get(R)), R === null ? C(f, h) : R && R.isColor && (C(R, 1), L = !0);
    const U = s.xr.getEnvironmentBlendMode();
    U === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, c) : U === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, c), (s.autoClear || L) && s.clear(s.autoClearColor, s.autoClearDepth, s.autoClearStencil), R && (R.isCubeTexture || R.mapping === gd) ? (v === void 0 && (v = new lr(
      new Mc(1, 1, 1),
      new Ja({
        name: "BackgroundCubeMaterial",
        uniforms: pd(_s.backgroundCube.uniforms),
        vertexShader: _s.backgroundCube.vertexShader,
        fragmentShader: _s.backgroundCube.fragmentShader,
        side: Fr,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), v.geometry.deleteAttribute("normal"), v.geometry.deleteAttribute("uv"), v.onBeforeRender = function(F, z, B) {
      this.matrixWorld.copyPosition(B.matrixWorld);
    }, Object.defineProperty(v.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), r.update(v)), v.material.uniforms.envMap.value = R, v.material.uniforms.flipEnvMap.value = R.isCubeTexture && R.isRenderTargetTexture === !1 ? -1 : 1, v.material.uniforms.backgroundBlurriness.value = E.backgroundBlurriness, v.material.uniforms.backgroundIntensity.value = E.backgroundIntensity, v.material.toneMapped = Hn.getTransfer(R.colorSpace) !== Zn, (y !== R || x !== R.version || M !== s.toneMapping) && (v.material.needsUpdate = !0, y = R, x = R.version, M = s.toneMapping), v.layers.enableAll(), w.unshift(v, v.geometry, v.material, 0, 0, null)) : R && R.isTexture && (p === void 0 && (p = new lr(
      new Fp(2, 2),
      new Ja({
        name: "BackgroundMaterial",
        uniforms: pd(_s.background.uniforms),
        vertexShader: _s.background.vertexShader,
        fragmentShader: _s.background.fragmentShader,
        side: ko,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), p.geometry.deleteAttribute("normal"), Object.defineProperty(p.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), r.update(p)), p.material.uniforms.t2D.value = R, p.material.uniforms.backgroundIntensity.value = E.backgroundIntensity, p.material.toneMapped = Hn.getTransfer(R.colorSpace) !== Zn, R.matrixAutoUpdate === !0 && R.updateMatrix(), p.material.uniforms.uvTransform.value.copy(R.matrix), (y !== R || x !== R.version || M !== s.toneMapping) && (p.material.needsUpdate = !0, y = R, x = R.version, M = s.toneMapping), p.layers.enableAll(), w.unshift(p, p.geometry, p.material, 0, 0, null));
  }
  function C(w, E) {
    w.getRGB(Yv, tA(s)), n.buffers.color.setClear(Yv.r, Yv.g, Yv.b, E, c);
  }
  return {
    getClearColor: function() {
      return f;
    },
    setClearColor: function(w, E = 1) {
      f.set(w), h = E, C(f, h);
    },
    getClearAlpha: function() {
      return h;
    },
    setClearAlpha: function(w) {
      h = w, C(f, h);
    },
    render: T
  };
}
function dN(s, e, t, n) {
  const r = s.getParameter(s.MAX_VERTEX_ATTRIBS), o = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), c = n.isWebGL2 || o !== null, f = {}, h = w(null);
  let p = h, v = !1;
  function y(K, he, Te, Me, ne) {
    let le = !1;
    if (c) {
      const re = C(Me, Te, he);
      p !== re && (p = re, M(p.object)), le = E(K, Me, Te, ne), le && L(K, Me, Te, ne);
    } else {
      const re = he.wireframe === !0;
      (p.geometry !== Me.id || p.program !== Te.id || p.wireframe !== re) && (p.geometry = Me.id, p.program = Te.id, p.wireframe = re, le = !0);
    }
    ne !== null && t.update(ne, s.ELEMENT_ARRAY_BUFFER), (le || v) && (v = !1, W(K, he, Te, Me), ne !== null && s.bindBuffer(s.ELEMENT_ARRAY_BUFFER, t.get(ne).buffer));
  }
  function x() {
    return n.isWebGL2 ? s.createVertexArray() : o.createVertexArrayOES();
  }
  function M(K) {
    return n.isWebGL2 ? s.bindVertexArray(K) : o.bindVertexArrayOES(K);
  }
  function T(K) {
    return n.isWebGL2 ? s.deleteVertexArray(K) : o.deleteVertexArrayOES(K);
  }
  function C(K, he, Te) {
    const Me = Te.wireframe === !0;
    let ne = f[K.id];
    ne === void 0 && (ne = {}, f[K.id] = ne);
    let le = ne[he.id];
    le === void 0 && (le = {}, ne[he.id] = le);
    let re = le[Me];
    return re === void 0 && (re = w(x()), le[Me] = re), re;
  }
  function w(K) {
    const he = [], Te = [], Me = [];
    for (let ne = 0; ne < r; ne++)
      he[ne] = 0, Te[ne] = 0, Me[ne] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: he,
      enabledAttributes: Te,
      attributeDivisors: Me,
      object: K,
      attributes: {},
      index: null
    };
  }
  function E(K, he, Te, Me) {
    const ne = p.attributes, le = he.attributes;
    let re = 0;
    const J = Te.getAttributes();
    for (const ue in J)
      if (J[ue].location >= 0) {
        const qe = ne[ue];
        let $e = le[ue];
        if ($e === void 0 && (ue === "instanceMatrix" && K.instanceMatrix && ($e = K.instanceMatrix), ue === "instanceColor" && K.instanceColor && ($e = K.instanceColor)), qe === void 0 || qe.attribute !== $e || $e && qe.data !== $e.data)
          return !0;
        re++;
      }
    return p.attributesNum !== re || p.index !== Me;
  }
  function L(K, he, Te, Me) {
    const ne = {}, le = he.attributes;
    let re = 0;
    const J = Te.getAttributes();
    for (const ue in J)
      if (J[ue].location >= 0) {
        let qe = le[ue];
        qe === void 0 && (ue === "instanceMatrix" && K.instanceMatrix && (qe = K.instanceMatrix), ue === "instanceColor" && K.instanceColor && (qe = K.instanceColor));
        const $e = {};
        $e.attribute = qe, qe && qe.data && ($e.data = qe.data), ne[ue] = $e, re++;
      }
    p.attributes = ne, p.attributesNum = re, p.index = Me;
  }
  function R() {
    const K = p.newAttributes;
    for (let he = 0, Te = K.length; he < Te; he++)
      K[he] = 0;
  }
  function U(K) {
    F(K, 0);
  }
  function F(K, he) {
    const Te = p.newAttributes, Me = p.enabledAttributes, ne = p.attributeDivisors;
    Te[K] = 1, Me[K] === 0 && (s.enableVertexAttribArray(K), Me[K] = 1), ne[K] !== he && ((n.isWebGL2 ? s : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](K, he), ne[K] = he);
  }
  function z() {
    const K = p.newAttributes, he = p.enabledAttributes;
    for (let Te = 0, Me = he.length; Te < Me; Te++)
      he[Te] !== K[Te] && (s.disableVertexAttribArray(Te), he[Te] = 0);
  }
  function B(K, he, Te, Me, ne, le, re) {
    re === !0 ? s.vertexAttribIPointer(K, he, Te, ne, le) : s.vertexAttribPointer(K, he, Te, Me, ne, le);
  }
  function W(K, he, Te, Me) {
    if (n.isWebGL2 === !1 && (K.isInstancedMesh || Me.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null)
      return;
    R();
    const ne = Me.attributes, le = Te.getAttributes(), re = he.defaultAttributeValues;
    for (const J in le) {
      const ue = le[J];
      if (ue.location >= 0) {
        let Pe = ne[J];
        if (Pe === void 0 && (J === "instanceMatrix" && K.instanceMatrix && (Pe = K.instanceMatrix), J === "instanceColor" && K.instanceColor && (Pe = K.instanceColor)), Pe !== void 0) {
          const qe = Pe.normalized, $e = Pe.itemSize, it = t.get(Pe);
          if (it === void 0)
            continue;
          const gt = it.buffer, ot = it.type, Vt = it.bytesPerElement, nn = n.isWebGL2 === !0 && (ot === s.INT || ot === s.UNSIGNED_INT || Pe.gpuType === vS);
          if (Pe.isInterleavedBufferAttribute) {
            const Tt = Pe.data, Q = Tt.stride, ke = Pe.offset;
            if (Tt.isInstancedInterleavedBuffer) {
              for (let Re = 0; Re < ue.locationSize; Re++)
                F(ue.location + Re, Tt.meshPerAttribute);
              K.isInstancedMesh !== !0 && Me._maxInstanceCount === void 0 && (Me._maxInstanceCount = Tt.meshPerAttribute * Tt.count);
            } else
              for (let Re = 0; Re < ue.locationSize; Re++)
                U(ue.location + Re);
            s.bindBuffer(s.ARRAY_BUFFER, gt);
            for (let Re = 0; Re < ue.locationSize; Re++)
              B(
                ue.location + Re,
                $e / ue.locationSize,
                ot,
                qe,
                Q * Vt,
                (ke + $e / ue.locationSize * Re) * Vt,
                nn
              );
          } else {
            if (Pe.isInstancedBufferAttribute) {
              for (let Tt = 0; Tt < ue.locationSize; Tt++)
                F(ue.location + Tt, Pe.meshPerAttribute);
              K.isInstancedMesh !== !0 && Me._maxInstanceCount === void 0 && (Me._maxInstanceCount = Pe.meshPerAttribute * Pe.count);
            } else
              for (let Tt = 0; Tt < ue.locationSize; Tt++)
                U(ue.location + Tt);
            s.bindBuffer(s.ARRAY_BUFFER, gt);
            for (let Tt = 0; Tt < ue.locationSize; Tt++)
              B(
                ue.location + Tt,
                $e / ue.locationSize,
                ot,
                qe,
                $e * Vt,
                $e / ue.locationSize * Tt * Vt,
                nn
              );
          }
        } else if (re !== void 0) {
          const qe = re[J];
          if (qe !== void 0)
            switch (qe.length) {
              case 2:
                s.vertexAttrib2fv(ue.location, qe);
                break;
              case 3:
                s.vertexAttrib3fv(ue.location, qe);
                break;
              case 4:
                s.vertexAttrib4fv(ue.location, qe);
                break;
              default:
                s.vertexAttrib1fv(ue.location, qe);
            }
        }
      }
    }
    z();
  }
  function O() {
    ie();
    for (const K in f) {
      const he = f[K];
      for (const Te in he) {
        const Me = he[Te];
        for (const ne in Me)
          T(Me[ne].object), delete Me[ne];
        delete he[Te];
      }
      delete f[K];
    }
  }
  function I(K) {
    if (f[K.id] === void 0)
      return;
    const he = f[K.id];
    for (const Te in he) {
      const Me = he[Te];
      for (const ne in Me)
        T(Me[ne].object), delete Me[ne];
      delete he[Te];
    }
    delete f[K.id];
  }
  function Z(K) {
    for (const he in f) {
      const Te = f[he];
      if (Te[K.id] === void 0)
        continue;
      const Me = Te[K.id];
      for (const ne in Me)
        T(Me[ne].object), delete Me[ne];
      delete Te[K.id];
    }
  }
  function ie() {
    fe(), v = !0, p !== h && (p = h, M(p.object));
  }
  function fe() {
    h.geometry = null, h.program = null, h.wireframe = !1;
  }
  return {
    setup: y,
    reset: ie,
    resetDefaultState: fe,
    dispose: O,
    releaseStatesOfGeometry: I,
    releaseStatesOfProgram: Z,
    initAttributes: R,
    enableAttribute: U,
    disableUnusedAttributes: z
  };
}
function hN(s, e, t, n) {
  const r = n.isWebGL2;
  let o;
  function c(p) {
    o = p;
  }
  function f(p, v) {
    s.drawArrays(o, p, v), t.update(v, o, 1);
  }
  function h(p, v, y) {
    if (y === 0)
      return;
    let x, M;
    if (r)
      x = s, M = "drawArraysInstanced";
    else if (x = e.get("ANGLE_instanced_arrays"), M = "drawArraysInstancedANGLE", x === null) {
      console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    x[M](o, p, v, y), t.update(v, o, y);
  }
  this.setMode = c, this.render = f, this.renderInstances = h;
}
function pN(s, e, t) {
  let n;
  function r() {
    if (n !== void 0)
      return n;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const B = e.get("EXT_texture_filter_anisotropic");
      n = s.getParameter(B.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      n = 0;
    return n;
  }
  function o(B) {
    if (B === "highp") {
      if (s.getShaderPrecisionFormat(s.VERTEX_SHADER, s.HIGH_FLOAT).precision > 0 && s.getShaderPrecisionFormat(s.FRAGMENT_SHADER, s.HIGH_FLOAT).precision > 0)
        return "highp";
      B = "mediump";
    }
    return B === "mediump" && s.getShaderPrecisionFormat(s.VERTEX_SHADER, s.MEDIUM_FLOAT).precision > 0 && s.getShaderPrecisionFormat(s.FRAGMENT_SHADER, s.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  const c = typeof WebGL2RenderingContext < "u" && s.constructor.name === "WebGL2RenderingContext";
  let f = t.precision !== void 0 ? t.precision : "highp";
  const h = o(f);
  h !== f && (console.warn("THREE.WebGLRenderer:", f, "not supported, using", h, "instead."), f = h);
  const p = c || e.has("WEBGL_draw_buffers"), v = t.logarithmicDepthBuffer === !0, y = s.getParameter(s.MAX_TEXTURE_IMAGE_UNITS), x = s.getParameter(s.MAX_VERTEX_TEXTURE_IMAGE_UNITS), M = s.getParameter(s.MAX_TEXTURE_SIZE), T = s.getParameter(s.MAX_CUBE_MAP_TEXTURE_SIZE), C = s.getParameter(s.MAX_VERTEX_ATTRIBS), w = s.getParameter(s.MAX_VERTEX_UNIFORM_VECTORS), E = s.getParameter(s.MAX_VARYING_VECTORS), L = s.getParameter(s.MAX_FRAGMENT_UNIFORM_VECTORS), R = x > 0, U = c || e.has("OES_texture_float"), F = R && U, z = c ? s.getParameter(s.MAX_SAMPLES) : 0;
  return {
    isWebGL2: c,
    drawBuffers: p,
    getMaxAnisotropy: r,
    getMaxPrecision: o,
    precision: f,
    logarithmicDepthBuffer: v,
    maxTextures: y,
    maxVertexTextures: x,
    maxTextureSize: M,
    maxCubemapSize: T,
    maxAttributes: C,
    maxVertexUniforms: w,
    maxVaryings: E,
    maxFragmentUniforms: L,
    vertexTextures: R,
    floatFragmentTextures: U,
    floatVertexTextures: F,
    maxSamples: z
  };
}
function mN(s) {
  const e = this;
  let t = null, n = 0, r = !1, o = !1;
  const c = new Fo(), f = new cn(), h = { value: null, needsUpdate: !1 };
  this.uniform = h, this.numPlanes = 0, this.numIntersection = 0, this.init = function(y, x) {
    const M = y.length !== 0 || x || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    n !== 0 || r;
    return r = x, n = y.length, M;
  }, this.beginShadows = function() {
    o = !0, v(null);
  }, this.endShadows = function() {
    o = !1;
  }, this.setGlobalState = function(y, x) {
    t = v(y, x, 0);
  }, this.setState = function(y, x, M) {
    const T = y.clippingPlanes, C = y.clipIntersection, w = y.clipShadows, E = s.get(y);
    if (!r || T === null || T.length === 0 || o && !w)
      o ? v(null) : p();
    else {
      const L = o ? 0 : n, R = L * 4;
      let U = E.clippingState || null;
      h.value = U, U = v(T, x, R, M);
      for (let F = 0; F !== R; ++F)
        U[F] = t[F];
      E.clippingState = U, this.numIntersection = C ? this.numPlanes : 0, this.numPlanes += L;
    }
  };
  function p() {
    h.value !== t && (h.value = t, h.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
  }
  function v(y, x, M, T) {
    const C = y !== null ? y.length : 0;
    let w = null;
    if (C !== 0) {
      if (w = h.value, T !== !0 || w === null) {
        const E = M + C * 4, L = x.matrixWorldInverse;
        f.getNormalMatrix(L), (w === null || w.length < E) && (w = new Float32Array(E));
        for (let R = 0, U = M; R !== C; ++R, U += 4)
          c.copy(y[R]).applyMatrix4(L, f), c.normal.toArray(w, U), w[U + 3] = c.constant;
      }
      h.value = w, h.needsUpdate = !0;
    }
    return e.numPlanes = C, e.numIntersection = 0, w;
  }
}
function vN(s) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(c, f) {
    return f === cp ? c.mapping = Go : f === fp && (c.mapping = Ql), c;
  }
  function n(c) {
    if (c && c.isTexture && c.isRenderTargetTexture === !1) {
      const f = c.mapping;
      if (f === cp || f === fp)
        if (e.has(c)) {
          const h = e.get(c).texture;
          return t(h, c.mapping);
        } else {
          const h = c.image;
          if (h && h.height > 0) {
            const p = new rA(h.height / 2);
            return p.fromEquirectangularTexture(s, c), e.set(c, p), c.addEventListener("dispose", r), t(p.texture, c.mapping);
          } else
            return null;
        }
    }
    return c;
  }
  function r(c) {
    const f = c.target;
    f.removeEventListener("dispose", r);
    const h = e.get(f);
    h !== void 0 && (e.delete(f), h.dispose());
  }
  function o() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: o
  };
}
class Vo extends Op {
  constructor(e = -1, t = 1, n = 1, r = -1, o = 0.1, c = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = r, this.near = o, this.far = c, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  setViewOffset(e, t, n, r, o, c) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = r, this.view.width = o, this.view.height = c, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, r = (this.top + this.bottom) / 2;
    let o = n - e, c = n + e, f = r + t, h = r - t;
    if (this.view !== null && this.view.enabled) {
      const p = (this.right - this.left) / this.view.fullWidth / this.zoom, v = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      o += p * this.view.offsetX, c = o + p * this.view.width, f -= v * this.view.offsetY, h = f - v * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(o, c, f, h, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
const ld = 4, yb = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], sc = 20, G_ = /* @__PURE__ */ new Vo(), _b = /* @__PURE__ */ new Rt();
let W_ = null;
const rc = (1 + Math.sqrt(5)) / 2, Jf = 1 / rc, xb = [
  /* @__PURE__ */ new Y(1, 1, 1),
  /* @__PURE__ */ new Y(-1, 1, 1),
  /* @__PURE__ */ new Y(1, 1, -1),
  /* @__PURE__ */ new Y(-1, 1, -1),
  /* @__PURE__ */ new Y(0, rc, Jf),
  /* @__PURE__ */ new Y(0, rc, -Jf),
  /* @__PURE__ */ new Y(Jf, 0, rc),
  /* @__PURE__ */ new Y(-Jf, 0, rc),
  /* @__PURE__ */ new Y(rc, Jf, 0),
  /* @__PURE__ */ new Y(-rc, Jf, 0)
];
class Kx {
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(e, t = 0, n = 0.1, r = 100) {
    W_ = this._renderer.getRenderTarget(), this._setSize(256);
    const o = this._allocateTargets();
    return o.depthBuffer = !0, this._sceneToCubeUV(e, n, r, o), t > 0 && this._blur(o, 0, 0, t), this._applyPMREM(o), this._cleanup(o), o;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = Eb(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = Mb(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(W_), e.scissorTest = !1, jv(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === Go || e.mapping === Ql ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), W_ = this._renderer.getRenderTarget();
    const n = t || this._allocateTargets();
    return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
      magFilter: hi,
      minFilter: hi,
      generateMipmaps: !1,
      type: vc,
      format: Er,
      colorSpace: Ks,
      depthBuffer: !1
    }, r = Sb(e, t, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = Sb(e, t, n);
      const { _lodMax: o } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = gN(o)), this._blurMaterial = yN(o, e, t);
    }
    return r;
  }
  _compileMaterial(e) {
    const t = new lr(this._lodPlanes[0], e);
    this._renderer.compile(t, G_);
  }
  _sceneToCubeUV(e, t, n, r) {
    const f = new Ri(90, 1, t, n), h = [1, -1, 1, 1, 1, 1], p = [1, 1, 1, -1, -1, -1], v = this._renderer, y = v.autoClear, x = v.toneMapping;
    v.getClearColor(_b), v.toneMapping = qs, v.autoClear = !1;
    const M = new nu({
      name: "PMREM.Background",
      side: Fr,
      depthWrite: !1,
      depthTest: !1
    }), T = new lr(new Mc(), M);
    let C = !1;
    const w = e.background;
    w ? w.isColor && (M.color.copy(w), e.background = null, C = !0) : (M.color.copy(_b), C = !0);
    for (let E = 0; E < 6; E++) {
      const L = E % 3;
      L === 0 ? (f.up.set(0, h[E], 0), f.lookAt(p[E], 0, 0)) : L === 1 ? (f.up.set(0, 0, h[E]), f.lookAt(0, p[E], 0)) : (f.up.set(0, h[E], 0), f.lookAt(0, 0, p[E]));
      const R = this._cubeSize;
      jv(r, L * R, E > 2 ? R : 0, R, R), v.setRenderTarget(r), C && v.render(T, f), v.render(e, f);
    }
    T.geometry.dispose(), T.material.dispose(), v.toneMapping = x, v.autoClear = y, e.background = w;
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer, r = e.mapping === Go || e.mapping === Ql;
    r ? (this._cubemapMaterial === null && (this._cubemapMaterial = Eb()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = Mb());
    const o = r ? this._cubemapMaterial : this._equirectMaterial, c = new lr(this._lodPlanes[0], o), f = o.uniforms;
    f.envMap.value = e;
    const h = this._cubeSize;
    jv(t, 0, 0, 3 * h, 2 * h), n.setRenderTarget(t), n.render(c, G_);
  }
  _applyPMREM(e) {
    const t = this._renderer, n = t.autoClear;
    t.autoClear = !1;
    for (let r = 1; r < this._lodPlanes.length; r++) {
      const o = Math.sqrt(this._sigmas[r] * this._sigmas[r] - this._sigmas[r - 1] * this._sigmas[r - 1]), c = xb[(r - 1) % xb.length];
      this._blur(e, r - 1, r, o, c);
    }
    t.autoClear = n;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(e, t, n, r, o) {
    const c = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      c,
      t,
      n,
      r,
      "latitudinal",
      o
    ), this._halfBlur(
      c,
      e,
      n,
      n,
      r,
      "longitudinal",
      o
    );
  }
  _halfBlur(e, t, n, r, o, c, f) {
    const h = this._renderer, p = this._blurMaterial;
    c !== "latitudinal" && c !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const v = 3, y = new lr(this._lodPlanes[r], p), x = p.uniforms, M = this._sizeLods[n] - 1, T = isFinite(o) ? Math.PI / (2 * M) : 2 * Math.PI / (2 * sc - 1), C = o / T, w = isFinite(o) ? 1 + Math.floor(v * C) : sc;
    w > sc && console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${w} samples when the maximum is set to ${sc}`);
    const E = [];
    let L = 0;
    for (let B = 0; B < sc; ++B) {
      const W = B / C, O = Math.exp(-W * W / 2);
      E.push(O), B === 0 ? L += O : B < w && (L += 2 * O);
    }
    for (let B = 0; B < E.length; B++)
      E[B] = E[B] / L;
    x.envMap.value = e.texture, x.samples.value = w, x.weights.value = E, x.latitudinal.value = c === "latitudinal", f && (x.poleAxis.value = f);
    const { _lodMax: R } = this;
    x.dTheta.value = T, x.mipInt.value = R - n;
    const U = this._sizeLods[r], F = 3 * U * (r > R - ld ? r - R + ld : 0), z = 4 * (this._cubeSize - U);
    jv(t, F, z, 3 * U, 2 * U), h.setRenderTarget(t), h.render(y, G_);
  }
}
function gN(s) {
  const e = [], t = [], n = [];
  let r = s;
  const o = s - ld + 1 + yb.length;
  for (let c = 0; c < o; c++) {
    const f = Math.pow(2, r);
    t.push(f);
    let h = 1 / f;
    c > s - ld ? h = yb[c - s + ld - 1] : c === 0 && (h = 0), n.push(h);
    const p = 1 / (f - 2), v = -p, y = 1 + p, x = [v, v, y, v, y, y, v, v, y, y, v, y], M = 6, T = 6, C = 3, w = 2, E = 1, L = new Float32Array(C * T * M), R = new Float32Array(w * T * M), U = new Float32Array(E * T * M);
    for (let z = 0; z < M; z++) {
      const B = z % 3 * 2 / 3 - 1, W = z > 2 ? 0 : -1, O = [
        B,
        W,
        0,
        B + 2 / 3,
        W,
        0,
        B + 2 / 3,
        W + 1,
        0,
        B,
        W,
        0,
        B + 2 / 3,
        W + 1,
        0,
        B,
        W + 1,
        0
      ];
      L.set(O, C * T * z), R.set(x, w * T * z);
      const I = [z, z, z, z, z, z];
      U.set(I, E * T * z);
    }
    const F = new hn();
    F.setAttribute("position", new jn(L, C)), F.setAttribute("uv", new jn(R, w)), F.setAttribute("faceIndex", new jn(U, E)), e.push(F), r > ld && r--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function Sb(s, e, t) {
  const n = new Za(s, e, t);
  return n.texture.mapping = gd, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function jv(s, e, t, n, r) {
  s.viewport.set(e, t, n, r), s.scissor.set(e, t, n, r);
}
function yN(s, e, t) {
  const n = new Float32Array(sc), r = new Y(0, 1, 0);
  return new Ja({
    name: "SphericalGaussianBlur",
    defines: {
      n: sc,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${s}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: n },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: r }
    },
    vertexShader: CS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: Ho,
    depthTest: !1,
    depthWrite: !1
  });
}
function Mb() {
  return new Ja({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: CS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: Ho,
    depthTest: !1,
    depthWrite: !1
  });
}
function Eb() {
  return new Ja({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: CS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: Ho,
    depthTest: !1,
    depthWrite: !1
  });
}
function CS() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function _N(s) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function n(f) {
    if (f && f.isTexture) {
      const h = f.mapping, p = h === cp || h === fp, v = h === Go || h === Ql;
      if (p || v)
        if (f.isRenderTargetTexture && f.needsPMREMUpdate === !0) {
          f.needsPMREMUpdate = !1;
          let y = e.get(f);
          return t === null && (t = new Kx(s)), y = p ? t.fromEquirectangular(f, y) : t.fromCubemap(f, y), e.set(f, y), y.texture;
        } else {
          if (e.has(f))
            return e.get(f).texture;
          {
            const y = f.image;
            if (p && y && y.height > 0 || v && y && r(y)) {
              t === null && (t = new Kx(s));
              const x = p ? t.fromEquirectangular(f) : t.fromCubemap(f);
              return e.set(f, x), f.addEventListener("dispose", o), x.texture;
            } else
              return null;
          }
        }
    }
    return f;
  }
  function r(f) {
    let h = 0;
    const p = 6;
    for (let v = 0; v < p; v++)
      f[v] !== void 0 && h++;
    return h === p;
  }
  function o(f) {
    const h = f.target;
    h.removeEventListener("dispose", o);
    const p = e.get(h);
    p !== void 0 && (e.delete(h), p.dispose());
  }
  function c() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: n,
    dispose: c
  };
}
function xN(s) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0)
      return e[n];
    let r;
    switch (n) {
      case "WEBGL_depth_texture":
        r = s.getExtension("WEBGL_depth_texture") || s.getExtension("MOZ_WEBGL_depth_texture") || s.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        r = s.getExtension("EXT_texture_filter_anisotropic") || s.getExtension("MOZ_EXT_texture_filter_anisotropic") || s.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        r = s.getExtension("WEBGL_compressed_texture_s3tc") || s.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        r = s.getExtension("WEBGL_compressed_texture_pvrtc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        r = s.getExtension(n);
    }
    return e[n] = r, r;
  }
  return {
    has: function(n) {
      return t(n) !== null;
    },
    init: function(n) {
      n.isWebGL2 ? t("EXT_color_buffer_float") : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture");
    },
    get: function(n) {
      const r = t(n);
      return r === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), r;
    }
  };
}
function SN(s, e, t, n) {
  const r = {}, o = /* @__PURE__ */ new WeakMap();
  function c(y) {
    const x = y.target;
    x.index !== null && e.remove(x.index);
    for (const T in x.attributes)
      e.remove(x.attributes[T]);
    for (const T in x.morphAttributes) {
      const C = x.morphAttributes[T];
      for (let w = 0, E = C.length; w < E; w++)
        e.remove(C[w]);
    }
    x.removeEventListener("dispose", c), delete r[x.id];
    const M = o.get(x);
    M && (e.remove(M), o.delete(x)), n.releaseStatesOfGeometry(x), x.isInstancedBufferGeometry === !0 && delete x._maxInstanceCount, t.memory.geometries--;
  }
  function f(y, x) {
    return r[x.id] === !0 || (x.addEventListener("dispose", c), r[x.id] = !0, t.memory.geometries++), x;
  }
  function h(y) {
    const x = y.attributes;
    for (const T in x)
      e.update(x[T], s.ARRAY_BUFFER);
    const M = y.morphAttributes;
    for (const T in M) {
      const C = M[T];
      for (let w = 0, E = C.length; w < E; w++)
        e.update(C[w], s.ARRAY_BUFFER);
    }
  }
  function p(y) {
    const x = [], M = y.index, T = y.attributes.position;
    let C = 0;
    if (M !== null) {
      const L = M.array;
      C = M.version;
      for (let R = 0, U = L.length; R < U; R += 3) {
        const F = L[R + 0], z = L[R + 1], B = L[R + 2];
        x.push(F, z, z, B, B, F);
      }
    } else if (T !== void 0) {
      const L = T.array;
      C = T.version;
      for (let R = 0, U = L.length / 3 - 1; R < U; R += 3) {
        const F = R + 0, z = R + 1, B = R + 2;
        x.push(F, z, z, B, B, F);
      }
    } else
      return;
    const w = new (Kw(x) ? RS : AS)(x, 1);
    w.version = C;
    const E = o.get(y);
    E && e.remove(E), o.set(y, w);
  }
  function v(y) {
    const x = o.get(y);
    if (x) {
      const M = y.index;
      M !== null && x.version < M.version && p(y);
    } else
      p(y);
    return o.get(y);
  }
  return {
    get: f,
    update: h,
    getWireframeAttribute: v
  };
}
function MN(s, e, t, n) {
  const r = n.isWebGL2;
  let o;
  function c(x) {
    o = x;
  }
  let f, h;
  function p(x) {
    f = x.type, h = x.bytesPerElement;
  }
  function v(x, M) {
    s.drawElements(o, M, f, x * h), t.update(M, o, 1);
  }
  function y(x, M, T) {
    if (T === 0)
      return;
    let C, w;
    if (r)
      C = s, w = "drawElementsInstanced";
    else if (C = e.get("ANGLE_instanced_arrays"), w = "drawElementsInstancedANGLE", C === null) {
      console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    C[w](o, M, f, x * h, T), t.update(M, o, T);
  }
  this.setMode = c, this.setIndex = p, this.render = v, this.renderInstances = y;
}
function EN(s) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function n(o, c, f) {
    switch (t.calls++, c) {
      case s.TRIANGLES:
        t.triangles += f * (o / 3);
        break;
      case s.LINES:
        t.lines += f * (o / 2);
        break;
      case s.LINE_STRIP:
        t.lines += f * (o - 1);
        break;
      case s.LINE_LOOP:
        t.lines += f * o;
        break;
      case s.POINTS:
        t.points += f * o;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", c);
        break;
    }
  }
  function r() {
    t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: r,
    update: n
  };
}
function TN(s, e) {
  return s[0] - e[0];
}
function bN(s, e) {
  return Math.abs(e[1]) - Math.abs(s[1]);
}
function wN(s, e, t) {
  const n = {}, r = new Float32Array(8), o = /* @__PURE__ */ new WeakMap(), c = new Vn(), f = [];
  for (let p = 0; p < 8; p++)
    f[p] = [p, 0];
  function h(p, v, y) {
    const x = p.morphTargetInfluences;
    if (e.isWebGL2 === !0) {
      const M = v.morphAttributes.position || v.morphAttributes.normal || v.morphAttributes.color, T = M !== void 0 ? M.length : 0;
      let C = o.get(v);
      if (C === void 0 || C.count !== T) {
        let K = function() {
          ie.dispose(), o.delete(v), v.removeEventListener("dispose", K);
        };
        C !== void 0 && C.texture.dispose();
        const L = v.morphAttributes.position !== void 0, R = v.morphAttributes.normal !== void 0, U = v.morphAttributes.color !== void 0, F = v.morphAttributes.position || [], z = v.morphAttributes.normal || [], B = v.morphAttributes.color || [];
        let W = 0;
        L === !0 && (W = 1), R === !0 && (W = 2), U === !0 && (W = 3);
        let O = v.attributes.position.count * W, I = 1;
        O > e.maxTextureSize && (I = Math.ceil(O / e.maxTextureSize), O = e.maxTextureSize);
        const Z = new Float32Array(O * I * 4 * T), ie = new Vg(Z, O, I, T);
        ie.type = Ta, ie.needsUpdate = !0;
        const fe = W * 4;
        for (let he = 0; he < T; he++) {
          const Te = F[he], Me = z[he], ne = B[he], le = O * I * 4 * he;
          for (let re = 0; re < Te.count; re++) {
            const J = re * fe;
            L === !0 && (c.fromBufferAttribute(Te, re), Z[le + J + 0] = c.x, Z[le + J + 1] = c.y, Z[le + J + 2] = c.z, Z[le + J + 3] = 0), R === !0 && (c.fromBufferAttribute(Me, re), Z[le + J + 4] = c.x, Z[le + J + 5] = c.y, Z[le + J + 6] = c.z, Z[le + J + 7] = 0), U === !0 && (c.fromBufferAttribute(ne, re), Z[le + J + 8] = c.x, Z[le + J + 9] = c.y, Z[le + J + 10] = c.z, Z[le + J + 11] = ne.itemSize === 4 ? c.w : 1);
          }
        }
        C = {
          count: T,
          texture: ie,
          size: new Ie(O, I)
        }, o.set(v, C), v.addEventListener("dispose", K);
      }
      let w = 0;
      for (let L = 0; L < x.length; L++)
        w += x[L];
      const E = v.morphTargetsRelative ? 1 : 1 - w;
      y.getUniforms().setValue(s, "morphTargetBaseInfluence", E), y.getUniforms().setValue(s, "morphTargetInfluences", x), y.getUniforms().setValue(s, "morphTargetsTexture", C.texture, t), y.getUniforms().setValue(s, "morphTargetsTextureSize", C.size);
    } else {
      const M = x === void 0 ? 0 : x.length;
      let T = n[v.id];
      if (T === void 0 || T.length !== M) {
        T = [];
        for (let R = 0; R < M; R++)
          T[R] = [R, 0];
        n[v.id] = T;
      }
      for (let R = 0; R < M; R++) {
        const U = T[R];
        U[0] = R, U[1] = x[R];
      }
      T.sort(bN);
      for (let R = 0; R < 8; R++)
        R < M && T[R][1] ? (f[R][0] = T[R][0], f[R][1] = T[R][1]) : (f[R][0] = Number.MAX_SAFE_INTEGER, f[R][1] = 0);
      f.sort(TN);
      const C = v.morphAttributes.position, w = v.morphAttributes.normal;
      let E = 0;
      for (let R = 0; R < 8; R++) {
        const U = f[R], F = U[0], z = U[1];
        F !== Number.MAX_SAFE_INTEGER && z ? (C && v.getAttribute("morphTarget" + R) !== C[F] && v.setAttribute("morphTarget" + R, C[F]), w && v.getAttribute("morphNormal" + R) !== w[F] && v.setAttribute("morphNormal" + R, w[F]), r[R] = z, E += z) : (C && v.hasAttribute("morphTarget" + R) === !0 && v.deleteAttribute("morphTarget" + R), w && v.hasAttribute("morphNormal" + R) === !0 && v.deleteAttribute("morphNormal" + R), r[R] = 0);
      }
      const L = v.morphTargetsRelative ? 1 : 1 - E;
      y.getUniforms().setValue(s, "morphTargetBaseInfluence", L), y.getUniforms().setValue(s, "morphTargetInfluences", r);
    }
  }
  return {
    update: h
  };
}
function AN(s, e, t, n) {
  let r = /* @__PURE__ */ new WeakMap();
  function o(h) {
    const p = n.render.frame, v = h.geometry, y = e.get(h, v);
    if (r.get(y) !== p && (e.update(y), r.set(y, p)), h.isInstancedMesh && (h.hasEventListener("dispose", f) === !1 && h.addEventListener("dispose", f), r.get(h) !== p && (t.update(h.instanceMatrix, s.ARRAY_BUFFER), h.instanceColor !== null && t.update(h.instanceColor, s.ARRAY_BUFFER), r.set(h, p))), h.isSkinnedMesh) {
      const x = h.skeleton;
      r.get(x) !== p && (x.update(), r.set(x, p));
    }
    return y;
  }
  function c() {
    r = /* @__PURE__ */ new WeakMap();
  }
  function f(h) {
    const p = h.target;
    p.removeEventListener("dispose", f), t.remove(p.instanceMatrix), p.instanceColor !== null && t.remove(p.instanceColor);
  }
  return {
    update: o,
    dispose: c
  };
}
const sA = /* @__PURE__ */ new Ci(), oA = /* @__PURE__ */ new Vg(), lA = /* @__PURE__ */ new wS(), uA = /* @__PURE__ */ new Ip(), Tb = [], bb = [], wb = new Float32Array(16), Ab = new Float32Array(9), Rb = new Float32Array(4);
function yd(s, e, t) {
  const n = s[0];
  if (n <= 0 || n > 0)
    return s;
  const r = e * t;
  let o = Tb[r];
  if (o === void 0 && (o = new Float32Array(r), Tb[r] = o), e !== 0) {
    n.toArray(o, 0);
    for (let c = 1, f = 0; c !== e; ++c)
      f += t, s[c].toArray(o, f);
  }
  return o;
}
function Wi(s, e) {
  if (s.length !== e.length)
    return !1;
  for (let t = 0, n = s.length; t < n; t++)
    if (s[t] !== e[t])
      return !1;
  return !0;
}
function Xi(s, e) {
  for (let t = 0, n = e.length; t < n; t++)
    s[t] = e[t];
}
function Gg(s, e) {
  let t = bb[e];
  t === void 0 && (t = new Int32Array(e), bb[e] = t);
  for (let n = 0; n !== e; ++n)
    t[n] = s.allocateTextureUnit();
  return t;
}
function RN(s, e) {
  const t = this.cache;
  t[0] !== e && (s.uniform1f(this.addr, e), t[0] = e);
}
function CN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (s.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Wi(t, e))
      return;
    s.uniform2fv(this.addr, e), Xi(t, e);
  }
}
function LN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (s.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (Wi(t, e))
      return;
    s.uniform3fv(this.addr, e), Xi(t, e);
  }
}
function PN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Wi(t, e))
      return;
    s.uniform4fv(this.addr, e), Xi(t, e);
  }
}
function DN(s, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Wi(t, e))
      return;
    s.uniformMatrix2fv(this.addr, !1, e), Xi(t, e);
  } else {
    if (Wi(t, n))
      return;
    Rb.set(n), s.uniformMatrix2fv(this.addr, !1, Rb), Xi(t, n);
  }
}
function UN(s, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Wi(t, e))
      return;
    s.uniformMatrix3fv(this.addr, !1, e), Xi(t, e);
  } else {
    if (Wi(t, n))
      return;
    Ab.set(n), s.uniformMatrix3fv(this.addr, !1, Ab), Xi(t, n);
  }
}
function NN(s, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Wi(t, e))
      return;
    s.uniformMatrix4fv(this.addr, !1, e), Xi(t, e);
  } else {
    if (Wi(t, n))
      return;
    wb.set(n), s.uniformMatrix4fv(this.addr, !1, wb), Xi(t, n);
  }
}
function ON(s, e) {
  const t = this.cache;
  t[0] !== e && (s.uniform1i(this.addr, e), t[0] = e);
}
function IN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (s.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Wi(t, e))
      return;
    s.uniform2iv(this.addr, e), Xi(t, e);
  }
}
function FN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Wi(t, e))
      return;
    s.uniform3iv(this.addr, e), Xi(t, e);
  }
}
function zN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Wi(t, e))
      return;
    s.uniform4iv(this.addr, e), Xi(t, e);
  }
}
function BN(s, e) {
  const t = this.cache;
  t[0] !== e && (s.uniform1ui(this.addr, e), t[0] = e);
}
function HN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (s.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Wi(t, e))
      return;
    s.uniform2uiv(this.addr, e), Xi(t, e);
  }
}
function VN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Wi(t, e))
      return;
    s.uniform3uiv(this.addr, e), Xi(t, e);
  }
}
function kN(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Wi(t, e))
      return;
    s.uniform4uiv(this.addr, e), Xi(t, e);
  }
}
function GN(s, e, t) {
  const n = this.cache, r = t.allocateTextureUnit();
  n[0] !== r && (s.uniform1i(this.addr, r), n[0] = r), t.setTexture2D(e || sA, r);
}
function WN(s, e, t) {
  const n = this.cache, r = t.allocateTextureUnit();
  n[0] !== r && (s.uniform1i(this.addr, r), n[0] = r), t.setTexture3D(e || lA, r);
}
function XN(s, e, t) {
  const n = this.cache, r = t.allocateTextureUnit();
  n[0] !== r && (s.uniform1i(this.addr, r), n[0] = r), t.setTextureCube(e || uA, r);
}
function YN(s, e, t) {
  const n = this.cache, r = t.allocateTextureUnit();
  n[0] !== r && (s.uniform1i(this.addr, r), n[0] = r), t.setTexture2DArray(e || oA, r);
}
function jN(s) {
  switch (s) {
    case 5126:
      return RN;
    case 35664:
      return CN;
    case 35665:
      return LN;
    case 35666:
      return PN;
    case 35674:
      return DN;
    case 35675:
      return UN;
    case 35676:
      return NN;
    case 5124:
    case 35670:
      return ON;
    case 35667:
    case 35671:
      return IN;
    case 35668:
    case 35672:
      return FN;
    case 35669:
    case 35673:
      return zN;
    case 5125:
      return BN;
    case 36294:
      return HN;
    case 36295:
      return VN;
    case 36296:
      return kN;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return GN;
    case 35679:
    case 36299:
    case 36307:
      return WN;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return XN;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return YN;
  }
}
function qN(s, e) {
  s.uniform1fv(this.addr, e);
}
function ZN(s, e) {
  const t = yd(e, this.size, 2);
  s.uniform2fv(this.addr, t);
}
function JN(s, e) {
  const t = yd(e, this.size, 3);
  s.uniform3fv(this.addr, t);
}
function KN(s, e) {
  const t = yd(e, this.size, 4);
  s.uniform4fv(this.addr, t);
}
function QN(s, e) {
  const t = yd(e, this.size, 4);
  s.uniformMatrix2fv(this.addr, !1, t);
}
function $N(s, e) {
  const t = yd(e, this.size, 9);
  s.uniformMatrix3fv(this.addr, !1, t);
}
function eO(s, e) {
  const t = yd(e, this.size, 16);
  s.uniformMatrix4fv(this.addr, !1, t);
}
function tO(s, e) {
  s.uniform1iv(this.addr, e);
}
function nO(s, e) {
  s.uniform2iv(this.addr, e);
}
function iO(s, e) {
  s.uniform3iv(this.addr, e);
}
function rO(s, e) {
  s.uniform4iv(this.addr, e);
}
function aO(s, e) {
  s.uniform1uiv(this.addr, e);
}
function sO(s, e) {
  s.uniform2uiv(this.addr, e);
}
function oO(s, e) {
  s.uniform3uiv(this.addr, e);
}
function lO(s, e) {
  s.uniform4uiv(this.addr, e);
}
function uO(s, e, t) {
  const n = this.cache, r = e.length, o = Gg(t, r);
  Wi(n, o) || (s.uniform1iv(this.addr, o), Xi(n, o));
  for (let c = 0; c !== r; ++c)
    t.setTexture2D(e[c] || sA, o[c]);
}
function cO(s, e, t) {
  const n = this.cache, r = e.length, o = Gg(t, r);
  Wi(n, o) || (s.uniform1iv(this.addr, o), Xi(n, o));
  for (let c = 0; c !== r; ++c)
    t.setTexture3D(e[c] || lA, o[c]);
}
function fO(s, e, t) {
  const n = this.cache, r = e.length, o = Gg(t, r);
  Wi(n, o) || (s.uniform1iv(this.addr, o), Xi(n, o));
  for (let c = 0; c !== r; ++c)
    t.setTextureCube(e[c] || uA, o[c]);
}
function dO(s, e, t) {
  const n = this.cache, r = e.length, o = Gg(t, r);
  Wi(n, o) || (s.uniform1iv(this.addr, o), Xi(n, o));
  for (let c = 0; c !== r; ++c)
    t.setTexture2DArray(e[c] || oA, o[c]);
}
function hO(s) {
  switch (s) {
    case 5126:
      return qN;
    case 35664:
      return ZN;
    case 35665:
      return JN;
    case 35666:
      return KN;
    case 35674:
      return QN;
    case 35675:
      return $N;
    case 35676:
      return eO;
    case 5124:
    case 35670:
      return tO;
    case 35667:
    case 35671:
      return nO;
    case 35668:
    case 35672:
      return iO;
    case 35669:
    case 35673:
      return rO;
    case 5125:
      return aO;
    case 36294:
      return sO;
    case 36295:
      return oO;
    case 36296:
      return lO;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return uO;
    case 35679:
    case 36299:
    case 36307:
      return cO;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return fO;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return dO;
  }
}
class pO {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.setValue = jN(t.type);
  }
}
class mO {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.size = t.size, this.setValue = hO(t.type);
  }
}
class vO {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, n) {
    const r = this.seq;
    for (let o = 0, c = r.length; o !== c; ++o) {
      const f = r[o];
      f.setValue(e, t[f.id], n);
    }
  }
}
const X_ = /(\w+)(\])?(\[|\.)?/g;
function Cb(s, e) {
  s.seq.push(e), s.map[e.id] = e;
}
function gO(s, e, t) {
  const n = s.name, r = n.length;
  for (X_.lastIndex = 0; ; ) {
    const o = X_.exec(n), c = X_.lastIndex;
    let f = o[1];
    const h = o[2] === "]", p = o[3];
    if (h && (f = f | 0), p === void 0 || p === "[" && c + 2 === r) {
      Cb(t, p === void 0 ? new pO(f, s, e) : new mO(f, s, e));
      break;
    } else {
      let y = t.map[f];
      y === void 0 && (y = new vO(f), Cb(t, y)), t = y;
    }
  }
}
class bg {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let r = 0; r < n; ++r) {
      const o = e.getActiveUniform(t, r), c = e.getUniformLocation(t, o.name);
      gO(o, c, this);
    }
  }
  setValue(e, t, n, r) {
    const o = this.map[t];
    o !== void 0 && o.setValue(e, n, r);
  }
  setOptional(e, t, n) {
    const r = t[n];
    r !== void 0 && this.setValue(e, n, r);
  }
  static upload(e, t, n, r) {
    for (let o = 0, c = t.length; o !== c; ++o) {
      const f = t[o], h = n[f.id];
      h.needsUpdate !== !1 && f.setValue(e, h.value, r);
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let r = 0, o = e.length; r !== o; ++r) {
      const c = e[r];
      c.id in t && n.push(c);
    }
    return n;
  }
}
function Lb(s, e, t) {
  const n = s.createShader(e);
  return s.shaderSource(n, t), s.compileShader(n), n;
}
let yO = 0;
function _O(s, e) {
  const t = s.split(`
`), n = [], r = Math.max(e - 6, 0), o = Math.min(e + 6, t.length);
  for (let c = r; c < o; c++) {
    const f = c + 1;
    n.push(`${f === e ? ">" : " "} ${f}: ${t[c]}`);
  }
  return n.join(`
`);
}
function xO(s) {
  const e = Hn.getPrimaries(Hn.workingColorSpace), t = Hn.getPrimaries(s);
  let n;
  switch (e === t ? n = "" : e === _p && t === yp ? n = "LinearDisplayP3ToLinearSRGB" : e === yp && t === _p && (n = "LinearSRGBToLinearDisplayP3"), s) {
    case Ks:
    case Up:
      return [n, "LinearTransferOETF"];
    case Gi:
    case Hg:
      return [n, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space:", s), [n, "LinearTransferOETF"];
  }
}
function Pb(s, e, t) {
  const n = s.getShaderParameter(e, s.COMPILE_STATUS), r = s.getShaderInfoLog(e).trim();
  if (n && r === "")
    return "";
  const o = /ERROR: 0:(\d+)/.exec(r);
  if (o) {
    const c = parseInt(o[1]);
    return t.toUpperCase() + `

` + r + `

` + _O(s.getShaderSource(e), c);
  } else
    return r;
}
function SO(s, e) {
  const t = xO(e);
  return `vec4 ${s}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`;
}
function MO(s, e) {
  let t;
  switch (e) {
    case Sw:
      t = "Linear";
      break;
    case Mw:
      t = "Reinhard";
      break;
    case Ew:
      t = "OptimizedCineon";
      break;
    case pS:
      t = "ACESFilmic";
      break;
    case Tw:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + s + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function EO(s) {
  return [
    s.extensionDerivatives || s.envMapCubeUVHeight || s.bumpMap || s.normalMapTangentSpace || s.clearcoatNormalMap || s.flatShading || s.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
    (s.extensionFragDepth || s.logarithmicDepthBuffer) && s.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
    s.extensionDrawBuffers && s.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
    (s.extensionShaderTextureLOD || s.envMap || s.transmission) && s.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
  ].filter(ip).join(`
`);
}
function TO(s) {
  const e = [];
  for (const t in s) {
    const n = s[t];
    n !== !1 && e.push("#define " + t + " " + n);
  }
  return e.join(`
`);
}
function bO(s, e) {
  const t = {}, n = s.getProgramParameter(e, s.ACTIVE_ATTRIBUTES);
  for (let r = 0; r < n; r++) {
    const o = s.getActiveAttrib(e, r), c = o.name;
    let f = 1;
    o.type === s.FLOAT_MAT2 && (f = 2), o.type === s.FLOAT_MAT3 && (f = 3), o.type === s.FLOAT_MAT4 && (f = 4), t[c] = {
      type: o.type,
      location: s.getAttribLocation(e, c),
      locationSize: f
    };
  }
  return t;
}
function ip(s) {
  return s !== "";
}
function Db(s, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return s.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function Ub(s, e) {
  return s.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const wO = /^[ \t]*#include +<([\w\d./]+)>/gm;
function Qx(s) {
  return s.replace(wO, RO);
}
const AO = /* @__PURE__ */ new Map([
  ["encodings_fragment", "colorspace_fragment"],
  // @deprecated, r154
  ["encodings_pars_fragment", "colorspace_pars_fragment"],
  // @deprecated, r154
  ["output_fragment", "opaque_fragment"]
  // @deprecated, r154
]);
function RO(s, e) {
  let t = ln[e];
  if (t === void 0) {
    const n = AO.get(e);
    if (n !== void 0)
      t = ln[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, n);
    else
      throw new Error("Can not resolve #include <" + e + ">");
  }
  return Qx(t);
}
const CO = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function Nb(s) {
  return s.replace(CO, LO);
}
function LO(s, e, t, n) {
  let r = "";
  for (let o = parseInt(e); o < parseInt(t); o++)
    r += n.replace(/\[\s*i\s*\]/g, "[ " + o + " ]").replace(/UNROLLED_LOOP_INDEX/g, o);
  return r;
}
function Ob(s) {
  let e = "precision " + s.precision + ` float;
precision ` + s.precision + " int;";
  return s.precision === "highp" ? e += `
#define HIGH_PRECISION` : s.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : s.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function PO(s) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return s.shadowMapType === Ig ? e = "SHADOWMAP_TYPE_PCF" : s.shadowMapType === rp ? e = "SHADOWMAP_TYPE_PCF_SOFT" : s.shadowMapType === vs && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function DO(s) {
  let e = "ENVMAP_TYPE_CUBE";
  if (s.envMap)
    switch (s.envMapMode) {
      case Go:
      case Ql:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case gd:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function UO(s) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (s.envMap)
    switch (s.envMapMode) {
      case Ql:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function NO(s) {
  let e = "ENVMAP_BLENDING_NONE";
  if (s.envMap)
    switch (s.combine) {
      case Dp:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case _w:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case xw:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function OO(s) {
  const e = s.envMapCubeUVHeight;
  if (e === null)
    return null;
  const t = Math.log2(e) - 2, n = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)), texelHeight: n, maxMip: t };
}
function IO(s, e, t, n) {
  const r = s.getContext(), o = t.defines;
  let c = t.vertexShader, f = t.fragmentShader;
  const h = PO(t), p = DO(t), v = UO(t), y = NO(t), x = OO(t), M = t.isWebGL2 ? "" : EO(t), T = TO(o), C = r.createProgram();
  let w, E, L = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (w = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    T
  ].filter(ip).join(`
`), w.length > 0 && (w += `
`), E = [
    M,
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    T
  ].filter(ip).join(`
`), E.length > 0 && (E += `
`)) : (w = [
    Ob(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    T,
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + v : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors && t.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + h : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
    "	attribute vec3 morphTarget0;",
    "	attribute vec3 morphTarget1;",
    "	attribute vec3 morphTarget2;",
    "	attribute vec3 morphTarget3;",
    "	#ifdef USE_MORPHNORMALS",
    "		attribute vec3 morphNormal0;",
    "		attribute vec3 morphNormal1;",
    "		attribute vec3 morphNormal2;",
    "		attribute vec3 morphNormal3;",
    "	#else",
    "		attribute vec3 morphTarget4;",
    "		attribute vec3 morphTarget5;",
    "		attribute vec3 morphTarget6;",
    "		attribute vec3 morphTarget7;",
    "	#endif",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(ip).join(`
`), E = [
    M,
    Ob(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    T,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + p : "",
    t.envMap ? "#define " + v : "",
    t.envMap ? "#define " + y : "",
    x ? "#define CUBEUV_TEXEL_WIDTH " + x.texelWidth : "",
    x ? "#define CUBEUV_TEXEL_HEIGHT " + x.texelHeight : "",
    x ? "#define CUBEUV_MAX_MIP " + x.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + h : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== qs ? "#define TONE_MAPPING" : "",
    t.toneMapping !== qs ? ln.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== qs ? MO("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    ln.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    SO("linearToOutputTexel", t.outputColorSpace),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(ip).join(`
`)), c = Qx(c), c = Db(c, t), c = Ub(c, t), f = Qx(f), f = Db(f, t), f = Ub(f, t), c = Nb(c), f = Nb(f), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (L = `#version 300 es
`, w = [
    "precision mediump sampler2DArray;",
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + w, E = [
    "#define varying in",
    t.glslVersion === Zx ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === Zx ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + E);
  const R = L + w + c, U = L + E + f, F = Lb(r, r.VERTEX_SHADER, R), z = Lb(r, r.FRAGMENT_SHADER, U);
  if (r.attachShader(C, F), r.attachShader(C, z), t.index0AttributeName !== void 0 ? r.bindAttribLocation(C, 0, t.index0AttributeName) : t.morphTargets === !0 && r.bindAttribLocation(C, 0, "position"), r.linkProgram(C), s.debug.checkShaderErrors) {
    const O = r.getProgramInfoLog(C).trim(), I = r.getShaderInfoLog(F).trim(), Z = r.getShaderInfoLog(z).trim();
    let ie = !0, fe = !0;
    if (r.getProgramParameter(C, r.LINK_STATUS) === !1)
      if (ie = !1, typeof s.debug.onShaderError == "function")
        s.debug.onShaderError(r, C, F, z);
      else {
        const K = Pb(r, F, "vertex"), he = Pb(r, z, "fragment");
        console.error(
          "THREE.WebGLProgram: Shader Error " + r.getError() + " - VALIDATE_STATUS " + r.getProgramParameter(C, r.VALIDATE_STATUS) + `

Program Info Log: ` + O + `
` + K + `
` + he
        );
      }
    else
      O !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", O) : (I === "" || Z === "") && (fe = !1);
    fe && (this.diagnostics = {
      runnable: ie,
      programLog: O,
      vertexShader: {
        log: I,
        prefix: w
      },
      fragmentShader: {
        log: Z,
        prefix: E
      }
    });
  }
  r.deleteShader(F), r.deleteShader(z);
  let B;
  this.getUniforms = function() {
    return B === void 0 && (B = new bg(r, C)), B;
  };
  let W;
  return this.getAttributes = function() {
    return W === void 0 && (W = bO(r, C)), W;
  }, this.destroy = function() {
    n.releaseStatesOfProgram(this), r.deleteProgram(C), this.program = void 0;
  }, this.type = t.shaderType, this.name = t.shaderName, this.id = yO++, this.cacheKey = e, this.usedTimes = 1, this.program = C, this.vertexShader = F, this.fragmentShader = z, this;
}
let FO = 0;
class zO {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, n = e.fragmentShader, r = this._getShaderStage(t), o = this._getShaderStage(n), c = this._getShaderCacheForMaterial(e);
    return c.has(r) === !1 && (c.add(r), r.usedTimes++), c.has(o) === !1 && (c.add(o), o.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t)
      n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    return n === void 0 && (n = /* @__PURE__ */ new Set(), t.set(e, n)), n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    return n === void 0 && (n = new BO(e), t.set(e, n)), n;
  }
}
class BO {
  constructor(e) {
    this.id = FO++, this.code = e, this.usedTimes = 0;
  }
}
function HO(s, e, t, n, r, o, c) {
  const f = new hc(), h = new zO(), p = [], v = r.isWebGL2, y = r.logarithmicDepthBuffer, x = r.vertexTextures;
  let M = r.precision;
  const T = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function C(O) {
    return O === 0 ? "uv" : `uv${O}`;
  }
  function w(O, I, Z, ie, fe) {
    const K = ie.fog, he = fe.geometry, Te = O.isMeshStandardMaterial ? ie.environment : null, Me = (O.isMeshStandardMaterial ? t : e).get(O.envMap || Te), ne = Me && Me.mapping === gd ? Me.image.height : null, le = T[O.type];
    O.precision !== null && (M = r.getMaxPrecision(O.precision), M !== O.precision && console.warn("THREE.WebGLProgram.getParameters:", O.precision, "not supported, using", M, "instead."));
    const re = he.morphAttributes.position || he.morphAttributes.normal || he.morphAttributes.color, J = re !== void 0 ? re.length : 0;
    let ue = 0;
    he.morphAttributes.position !== void 0 && (ue = 1), he.morphAttributes.normal !== void 0 && (ue = 2), he.morphAttributes.color !== void 0 && (ue = 3);
    let Pe, qe, $e, it;
    if (le) {
      const Kt = _s[le];
      Pe = Kt.vertexShader, qe = Kt.fragmentShader;
    } else
      Pe = O.vertexShader, qe = O.fragmentShader, h.update(O), $e = h.getVertexShaderID(O), it = h.getFragmentShaderID(O);
    const gt = s.getRenderTarget(), ot = fe.isInstancedMesh === !0, Vt = !!O.map, nn = !!O.matcap, Tt = !!Me, Q = !!O.aoMap, ke = !!O.lightMap, Re = !!O.bumpMap, Xe = !!O.normalMap, Ue = !!O.displacementMap, Mt = !!O.emissiveMap, lt = !!O.metalnessMap, at = !!O.roughnessMap, Dt = O.anisotropy > 0, Zt = O.clearcoat > 0, rn = O.iridescence > 0, X = O.sheen > 0, H = O.transmission > 0, ye = Dt && !!O.anisotropyMap, Ye = Zt && !!O.clearcoatMap, Ve = Zt && !!O.clearcoatNormalMap, Ze = Zt && !!O.clearcoatRoughnessMap, bt = rn && !!O.iridescenceMap, Ke = rn && !!O.iridescenceThicknessMap, Se = X && !!O.sheenColorMap, Ge = X && !!O.sheenRoughnessMap, yt = !!O.specularMap, Ne = !!O.specularColorMap, rt = !!O.specularIntensityMap, ee = H && !!O.transmissionMap, Ee = H && !!O.thicknessMap, xe = !!O.gradientMap, k = !!O.alphaMap, ze = O.alphaTest > 0, Ce = !!O.alphaHash, Be = !!O.extensions, ut = !!he.attributes.uv1, He = !!he.attributes.uv2, vt = !!he.attributes.uv3;
    let Ut = qs;
    return O.toneMapped && (gt === null || gt.isXRRenderTarget === !0) && (Ut = s.toneMapping), {
      isWebGL2: v,
      shaderID: le,
      shaderType: O.type,
      shaderName: O.name,
      vertexShader: Pe,
      fragmentShader: qe,
      defines: O.defines,
      customVertexShaderID: $e,
      customFragmentShaderID: it,
      isRawShaderMaterial: O.isRawShaderMaterial === !0,
      glslVersion: O.glslVersion,
      precision: M,
      instancing: ot,
      instancingColor: ot && fe.instanceColor !== null,
      supportsVertexTextures: x,
      outputColorSpace: gt === null ? s.outputColorSpace : gt.isXRRenderTarget === !0 ? gt.texture.colorSpace : Ks,
      map: Vt,
      matcap: nn,
      envMap: Tt,
      envMapMode: Tt && Me.mapping,
      envMapCubeUVHeight: ne,
      aoMap: Q,
      lightMap: ke,
      bumpMap: Re,
      normalMap: Xe,
      displacementMap: x && Ue,
      emissiveMap: Mt,
      normalMapObjectSpace: Xe && O.normalMapType === Bw,
      normalMapTangentSpace: Xe && O.normalMapType === tu,
      metalnessMap: lt,
      roughnessMap: at,
      anisotropy: Dt,
      anisotropyMap: ye,
      clearcoat: Zt,
      clearcoatMap: Ye,
      clearcoatNormalMap: Ve,
      clearcoatRoughnessMap: Ze,
      iridescence: rn,
      iridescenceMap: bt,
      iridescenceThicknessMap: Ke,
      sheen: X,
      sheenColorMap: Se,
      sheenRoughnessMap: Ge,
      specularMap: yt,
      specularColorMap: Ne,
      specularIntensityMap: rt,
      transmission: H,
      transmissionMap: ee,
      thicknessMap: Ee,
      gradientMap: xe,
      opaque: O.transparent === !1 && O.blending === ql,
      alphaMap: k,
      alphaTest: ze,
      alphaHash: Ce,
      combine: O.combine,
      //
      mapUv: Vt && C(O.map.channel),
      aoMapUv: Q && C(O.aoMap.channel),
      lightMapUv: ke && C(O.lightMap.channel),
      bumpMapUv: Re && C(O.bumpMap.channel),
      normalMapUv: Xe && C(O.normalMap.channel),
      displacementMapUv: Ue && C(O.displacementMap.channel),
      emissiveMapUv: Mt && C(O.emissiveMap.channel),
      metalnessMapUv: lt && C(O.metalnessMap.channel),
      roughnessMapUv: at && C(O.roughnessMap.channel),
      anisotropyMapUv: ye && C(O.anisotropyMap.channel),
      clearcoatMapUv: Ye && C(O.clearcoatMap.channel),
      clearcoatNormalMapUv: Ve && C(O.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: Ze && C(O.clearcoatRoughnessMap.channel),
      iridescenceMapUv: bt && C(O.iridescenceMap.channel),
      iridescenceThicknessMapUv: Ke && C(O.iridescenceThicknessMap.channel),
      sheenColorMapUv: Se && C(O.sheenColorMap.channel),
      sheenRoughnessMapUv: Ge && C(O.sheenRoughnessMap.channel),
      specularMapUv: yt && C(O.specularMap.channel),
      specularColorMapUv: Ne && C(O.specularColorMap.channel),
      specularIntensityMapUv: rt && C(O.specularIntensityMap.channel),
      transmissionMapUv: ee && C(O.transmissionMap.channel),
      thicknessMapUv: Ee && C(O.thicknessMap.channel),
      alphaMapUv: k && C(O.alphaMap.channel),
      //
      vertexTangents: !!he.attributes.tangent && (Xe || Dt),
      vertexColors: O.vertexColors,
      vertexAlphas: O.vertexColors === !0 && !!he.attributes.color && he.attributes.color.itemSize === 4,
      vertexUv1s: ut,
      vertexUv2s: He,
      vertexUv3s: vt,
      pointsUvs: fe.isPoints === !0 && !!he.attributes.uv && (Vt || k),
      fog: !!K,
      useFog: O.fog === !0,
      fogExp2: K && K.isFogExp2,
      flatShading: O.flatShading === !0,
      sizeAttenuation: O.sizeAttenuation === !0,
      logarithmicDepthBuffer: y,
      skinning: fe.isSkinnedMesh === !0,
      morphTargets: he.morphAttributes.position !== void 0,
      morphNormals: he.morphAttributes.normal !== void 0,
      morphColors: he.morphAttributes.color !== void 0,
      morphTargetsCount: J,
      morphTextureStride: ue,
      numDirLights: I.directional.length,
      numPointLights: I.point.length,
      numSpotLights: I.spot.length,
      numSpotLightMaps: I.spotLightMap.length,
      numRectAreaLights: I.rectArea.length,
      numHemiLights: I.hemi.length,
      numDirLightShadows: I.directionalShadowMap.length,
      numPointLightShadows: I.pointShadowMap.length,
      numSpotLightShadows: I.spotShadowMap.length,
      numSpotLightShadowsWithMaps: I.numSpotLightShadowsWithMaps,
      numLightProbes: I.numLightProbes,
      numClippingPlanes: c.numPlanes,
      numClipIntersection: c.numIntersection,
      dithering: O.dithering,
      shadowMapEnabled: s.shadowMap.enabled && Z.length > 0,
      shadowMapType: s.shadowMap.type,
      toneMapping: Ut,
      useLegacyLights: s._useLegacyLights,
      decodeVideoTexture: Vt && O.map.isVideoTexture === !0 && Hn.getTransfer(O.map.colorSpace) === Zn,
      premultipliedAlpha: O.premultipliedAlpha,
      doubleSided: O.side === Ys,
      flipSided: O.side === Fr,
      useDepthPacking: O.depthPacking >= 0,
      depthPacking: O.depthPacking || 0,
      index0AttributeName: O.index0AttributeName,
      extensionDerivatives: Be && O.extensions.derivatives === !0,
      extensionFragDepth: Be && O.extensions.fragDepth === !0,
      extensionDrawBuffers: Be && O.extensions.drawBuffers === !0,
      extensionShaderTextureLOD: Be && O.extensions.shaderTextureLOD === !0,
      rendererExtensionFragDepth: v || n.has("EXT_frag_depth"),
      rendererExtensionDrawBuffers: v || n.has("WEBGL_draw_buffers"),
      rendererExtensionShaderTextureLod: v || n.has("EXT_shader_texture_lod"),
      customProgramCacheKey: O.customProgramCacheKey()
    };
  }
  function E(O) {
    const I = [];
    if (O.shaderID ? I.push(O.shaderID) : (I.push(O.customVertexShaderID), I.push(O.customFragmentShaderID)), O.defines !== void 0)
      for (const Z in O.defines)
        I.push(Z), I.push(O.defines[Z]);
    return O.isRawShaderMaterial === !1 && (L(I, O), R(I, O), I.push(s.outputColorSpace)), I.push(O.customProgramCacheKey), I.join();
  }
  function L(O, I) {
    O.push(I.precision), O.push(I.outputColorSpace), O.push(I.envMapMode), O.push(I.envMapCubeUVHeight), O.push(I.mapUv), O.push(I.alphaMapUv), O.push(I.lightMapUv), O.push(I.aoMapUv), O.push(I.bumpMapUv), O.push(I.normalMapUv), O.push(I.displacementMapUv), O.push(I.emissiveMapUv), O.push(I.metalnessMapUv), O.push(I.roughnessMapUv), O.push(I.anisotropyMapUv), O.push(I.clearcoatMapUv), O.push(I.clearcoatNormalMapUv), O.push(I.clearcoatRoughnessMapUv), O.push(I.iridescenceMapUv), O.push(I.iridescenceThicknessMapUv), O.push(I.sheenColorMapUv), O.push(I.sheenRoughnessMapUv), O.push(I.specularMapUv), O.push(I.specularColorMapUv), O.push(I.specularIntensityMapUv), O.push(I.transmissionMapUv), O.push(I.thicknessMapUv), O.push(I.combine), O.push(I.fogExp2), O.push(I.sizeAttenuation), O.push(I.morphTargetsCount), O.push(I.morphAttributeCount), O.push(I.numDirLights), O.push(I.numPointLights), O.push(I.numSpotLights), O.push(I.numSpotLightMaps), O.push(I.numHemiLights), O.push(I.numRectAreaLights), O.push(I.numDirLightShadows), O.push(I.numPointLightShadows), O.push(I.numSpotLightShadows), O.push(I.numSpotLightShadowsWithMaps), O.push(I.numLightProbes), O.push(I.shadowMapType), O.push(I.toneMapping), O.push(I.numClippingPlanes), O.push(I.numClipIntersection), O.push(I.depthPacking);
  }
  function R(O, I) {
    f.disableAll(), I.isWebGL2 && f.enable(0), I.supportsVertexTextures && f.enable(1), I.instancing && f.enable(2), I.instancingColor && f.enable(3), I.matcap && f.enable(4), I.envMap && f.enable(5), I.normalMapObjectSpace && f.enable(6), I.normalMapTangentSpace && f.enable(7), I.clearcoat && f.enable(8), I.iridescence && f.enable(9), I.alphaTest && f.enable(10), I.vertexColors && f.enable(11), I.vertexAlphas && f.enable(12), I.vertexUv1s && f.enable(13), I.vertexUv2s && f.enable(14), I.vertexUv3s && f.enable(15), I.vertexTangents && f.enable(16), I.anisotropy && f.enable(17), O.push(f.mask), f.disableAll(), I.fog && f.enable(0), I.useFog && f.enable(1), I.flatShading && f.enable(2), I.logarithmicDepthBuffer && f.enable(3), I.skinning && f.enable(4), I.morphTargets && f.enable(5), I.morphNormals && f.enable(6), I.morphColors && f.enable(7), I.premultipliedAlpha && f.enable(8), I.shadowMapEnabled && f.enable(9), I.useLegacyLights && f.enable(10), I.doubleSided && f.enable(11), I.flipSided && f.enable(12), I.useDepthPacking && f.enable(13), I.dithering && f.enable(14), I.transmission && f.enable(15), I.sheen && f.enable(16), I.opaque && f.enable(17), I.pointsUvs && f.enable(18), I.decodeVideoTexture && f.enable(19), O.push(f.mask);
  }
  function U(O) {
    const I = T[O.type];
    let Z;
    if (I) {
      const ie = _s[I];
      Z = nA.clone(ie.uniforms);
    } else
      Z = O.uniforms;
    return Z;
  }
  function F(O, I) {
    let Z;
    for (let ie = 0, fe = p.length; ie < fe; ie++) {
      const K = p[ie];
      if (K.cacheKey === I) {
        Z = K, ++Z.usedTimes;
        break;
      }
    }
    return Z === void 0 && (Z = new IO(s, I, O, o), p.push(Z)), Z;
  }
  function z(O) {
    if (--O.usedTimes === 0) {
      const I = p.indexOf(O);
      p[I] = p[p.length - 1], p.pop(), O.destroy();
    }
  }
  function B(O) {
    h.remove(O);
  }
  function W() {
    h.dispose();
  }
  return {
    getParameters: w,
    getProgramCacheKey: E,
    getUniforms: U,
    acquireProgram: F,
    releaseProgram: z,
    releaseShaderCache: B,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: p,
    dispose: W
  };
}
function VO() {
  let s = /* @__PURE__ */ new WeakMap();
  function e(o) {
    let c = s.get(o);
    return c === void 0 && (c = {}, s.set(o, c)), c;
  }
  function t(o) {
    s.delete(o);
  }
  function n(o, c, f) {
    s.get(o)[c] = f;
  }
  function r() {
    s = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    remove: t,
    update: n,
    dispose: r
  };
}
function kO(s, e) {
  return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.material.id !== e.material.id ? s.material.id - e.material.id : s.z !== e.z ? s.z - e.z : s.id - e.id;
}
function Ib(s, e) {
  return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.z !== e.z ? e.z - s.z : s.id - e.id;
}
function Fb() {
  const s = [];
  let e = 0;
  const t = [], n = [], r = [];
  function o() {
    e = 0, t.length = 0, n.length = 0, r.length = 0;
  }
  function c(y, x, M, T, C, w) {
    let E = s[e];
    return E === void 0 ? (E = {
      id: y.id,
      object: y,
      geometry: x,
      material: M,
      groupOrder: T,
      renderOrder: y.renderOrder,
      z: C,
      group: w
    }, s[e] = E) : (E.id = y.id, E.object = y, E.geometry = x, E.material = M, E.groupOrder = T, E.renderOrder = y.renderOrder, E.z = C, E.group = w), e++, E;
  }
  function f(y, x, M, T, C, w) {
    const E = c(y, x, M, T, C, w);
    M.transmission > 0 ? n.push(E) : M.transparent === !0 ? r.push(E) : t.push(E);
  }
  function h(y, x, M, T, C, w) {
    const E = c(y, x, M, T, C, w);
    M.transmission > 0 ? n.unshift(E) : M.transparent === !0 ? r.unshift(E) : t.unshift(E);
  }
  function p(y, x) {
    t.length > 1 && t.sort(y || kO), n.length > 1 && n.sort(x || Ib), r.length > 1 && r.sort(x || Ib);
  }
  function v() {
    for (let y = e, x = s.length; y < x; y++) {
      const M = s[y];
      if (M.id === null)
        break;
      M.id = null, M.object = null, M.geometry = null, M.material = null, M.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: n,
    transparent: r,
    init: o,
    push: f,
    unshift: h,
    finish: v,
    sort: p
  };
}
function GO() {
  let s = /* @__PURE__ */ new WeakMap();
  function e(n, r) {
    const o = s.get(n);
    let c;
    return o === void 0 ? (c = new Fb(), s.set(n, [c])) : r >= o.length ? (c = new Fb(), o.push(c)) : c = o[r], c;
  }
  function t() {
    s = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function WO() {
  const s = {};
  return {
    get: function(e) {
      if (s[e.id] !== void 0)
        return s[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new Y(),
            color: new Rt()
          };
          break;
        case "SpotLight":
          t = {
            position: new Y(),
            direction: new Y(),
            color: new Rt(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new Y(),
            color: new Rt(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new Y(),
            skyColor: new Rt(),
            groundColor: new Rt()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new Rt(),
            position: new Y(),
            halfWidth: new Y(),
            halfHeight: new Y()
          };
          break;
      }
      return s[e.id] = t, t;
    }
  };
}
function XO() {
  const s = {};
  return {
    get: function(e) {
      if (s[e.id] !== void 0)
        return s[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Ie()
          };
          break;
        case "SpotLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Ie()
          };
          break;
        case "PointLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Ie(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return s[e.id] = t, t;
    }
  };
}
let YO = 0;
function jO(s, e) {
  return (e.castShadow ? 2 : 0) - (s.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (s.map ? 1 : 0);
}
function qO(s, e) {
  const t = new WO(), n = XO(), r = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let v = 0; v < 9; v++)
    r.probe.push(new Y());
  const o = new Y(), c = new tn(), f = new tn();
  function h(v, y) {
    let x = 0, M = 0, T = 0;
    for (let ie = 0; ie < 9; ie++)
      r.probe[ie].set(0, 0, 0);
    let C = 0, w = 0, E = 0, L = 0, R = 0, U = 0, F = 0, z = 0, B = 0, W = 0, O = 0;
    v.sort(jO);
    const I = y === !0 ? Math.PI : 1;
    for (let ie = 0, fe = v.length; ie < fe; ie++) {
      const K = v[ie], he = K.color, Te = K.intensity, Me = K.distance, ne = K.shadow && K.shadow.map ? K.shadow.map.texture : null;
      if (K.isAmbientLight)
        x += he.r * Te * I, M += he.g * Te * I, T += he.b * Te * I;
      else if (K.isLightProbe) {
        for (let le = 0; le < 9; le++)
          r.probe[le].addScaledVector(K.sh.coefficients[le], Te);
        O++;
      } else if (K.isDirectionalLight) {
        const le = t.get(K);
        if (le.color.copy(K.color).multiplyScalar(K.intensity * I), K.castShadow) {
          const re = K.shadow, J = n.get(K);
          J.shadowBias = re.bias, J.shadowNormalBias = re.normalBias, J.shadowRadius = re.radius, J.shadowMapSize = re.mapSize, r.directionalShadow[C] = J, r.directionalShadowMap[C] = ne, r.directionalShadowMatrix[C] = K.shadow.matrix, U++;
        }
        r.directional[C] = le, C++;
      } else if (K.isSpotLight) {
        const le = t.get(K);
        le.position.setFromMatrixPosition(K.matrixWorld), le.color.copy(he).multiplyScalar(Te * I), le.distance = Me, le.coneCos = Math.cos(K.angle), le.penumbraCos = Math.cos(K.angle * (1 - K.penumbra)), le.decay = K.decay, r.spot[E] = le;
        const re = K.shadow;
        if (K.map && (r.spotLightMap[B] = K.map, B++, re.updateMatrices(K), K.castShadow && W++), r.spotLightMatrix[E] = re.matrix, K.castShadow) {
          const J = n.get(K);
          J.shadowBias = re.bias, J.shadowNormalBias = re.normalBias, J.shadowRadius = re.radius, J.shadowMapSize = re.mapSize, r.spotShadow[E] = J, r.spotShadowMap[E] = ne, z++;
        }
        E++;
      } else if (K.isRectAreaLight) {
        const le = t.get(K);
        le.color.copy(he).multiplyScalar(Te), le.halfWidth.set(K.width * 0.5, 0, 0), le.halfHeight.set(0, K.height * 0.5, 0), r.rectArea[L] = le, L++;
      } else if (K.isPointLight) {
        const le = t.get(K);
        if (le.color.copy(K.color).multiplyScalar(K.intensity * I), le.distance = K.distance, le.decay = K.decay, K.castShadow) {
          const re = K.shadow, J = n.get(K);
          J.shadowBias = re.bias, J.shadowNormalBias = re.normalBias, J.shadowRadius = re.radius, J.shadowMapSize = re.mapSize, J.shadowCameraNear = re.camera.near, J.shadowCameraFar = re.camera.far, r.pointShadow[w] = J, r.pointShadowMap[w] = ne, r.pointShadowMatrix[w] = K.shadow.matrix, F++;
        }
        r.point[w] = le, w++;
      } else if (K.isHemisphereLight) {
        const le = t.get(K);
        le.skyColor.copy(K.color).multiplyScalar(Te * I), le.groundColor.copy(K.groundColor).multiplyScalar(Te * I), r.hemi[R] = le, R++;
      }
    }
    L > 0 && (e.isWebGL2 || s.has("OES_texture_float_linear") === !0 ? (r.rectAreaLTC1 = dt.LTC_FLOAT_1, r.rectAreaLTC2 = dt.LTC_FLOAT_2) : s.has("OES_texture_half_float_linear") === !0 ? (r.rectAreaLTC1 = dt.LTC_HALF_1, r.rectAreaLTC2 = dt.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), r.ambient[0] = x, r.ambient[1] = M, r.ambient[2] = T;
    const Z = r.hash;
    (Z.directionalLength !== C || Z.pointLength !== w || Z.spotLength !== E || Z.rectAreaLength !== L || Z.hemiLength !== R || Z.numDirectionalShadows !== U || Z.numPointShadows !== F || Z.numSpotShadows !== z || Z.numSpotMaps !== B || Z.numLightProbes !== O) && (r.directional.length = C, r.spot.length = E, r.rectArea.length = L, r.point.length = w, r.hemi.length = R, r.directionalShadow.length = U, r.directionalShadowMap.length = U, r.pointShadow.length = F, r.pointShadowMap.length = F, r.spotShadow.length = z, r.spotShadowMap.length = z, r.directionalShadowMatrix.length = U, r.pointShadowMatrix.length = F, r.spotLightMatrix.length = z + B - W, r.spotLightMap.length = B, r.numSpotLightShadowsWithMaps = W, r.numLightProbes = O, Z.directionalLength = C, Z.pointLength = w, Z.spotLength = E, Z.rectAreaLength = L, Z.hemiLength = R, Z.numDirectionalShadows = U, Z.numPointShadows = F, Z.numSpotShadows = z, Z.numSpotMaps = B, Z.numLightProbes = O, r.version = YO++);
  }
  function p(v, y) {
    let x = 0, M = 0, T = 0, C = 0, w = 0;
    const E = y.matrixWorldInverse;
    for (let L = 0, R = v.length; L < R; L++) {
      const U = v[L];
      if (U.isDirectionalLight) {
        const F = r.directional[x];
        F.direction.setFromMatrixPosition(U.matrixWorld), o.setFromMatrixPosition(U.target.matrixWorld), F.direction.sub(o), F.direction.transformDirection(E), x++;
      } else if (U.isSpotLight) {
        const F = r.spot[T];
        F.position.setFromMatrixPosition(U.matrixWorld), F.position.applyMatrix4(E), F.direction.setFromMatrixPosition(U.matrixWorld), o.setFromMatrixPosition(U.target.matrixWorld), F.direction.sub(o), F.direction.transformDirection(E), T++;
      } else if (U.isRectAreaLight) {
        const F = r.rectArea[C];
        F.position.setFromMatrixPosition(U.matrixWorld), F.position.applyMatrix4(E), f.identity(), c.copy(U.matrixWorld), c.premultiply(E), f.extractRotation(c), F.halfWidth.set(U.width * 0.5, 0, 0), F.halfHeight.set(0, U.height * 0.5, 0), F.halfWidth.applyMatrix4(f), F.halfHeight.applyMatrix4(f), C++;
      } else if (U.isPointLight) {
        const F = r.point[M];
        F.position.setFromMatrixPosition(U.matrixWorld), F.position.applyMatrix4(E), M++;
      } else if (U.isHemisphereLight) {
        const F = r.hemi[w];
        F.direction.setFromMatrixPosition(U.matrixWorld), F.direction.transformDirection(E), w++;
      }
    }
  }
  return {
    setup: h,
    setupView: p,
    state: r
  };
}
function zb(s, e) {
  const t = new qO(s, e), n = [], r = [];
  function o() {
    n.length = 0, r.length = 0;
  }
  function c(y) {
    n.push(y);
  }
  function f(y) {
    r.push(y);
  }
  function h(y) {
    t.setup(n, y);
  }
  function p(y) {
    t.setupView(n, y);
  }
  return {
    init: o,
    state: {
      lightsArray: n,
      shadowsArray: r,
      lights: t
    },
    setupLights: h,
    setupLightsView: p,
    pushLight: c,
    pushShadow: f
  };
}
function ZO(s, e) {
  let t = /* @__PURE__ */ new WeakMap();
  function n(o, c = 0) {
    const f = t.get(o);
    let h;
    return f === void 0 ? (h = new zb(s, e), t.set(o, [h])) : c >= f.length ? (h = new zb(s, e), f.push(h)) : h = f[c], h;
  }
  function r() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: r
  };
}
class LS extends br {
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = Fw, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class PS extends br {
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
const JO = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, KO = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function QO(s, e, t) {
  let n = new kg();
  const r = new Ie(), o = new Ie(), c = new Vn(), f = new LS({ depthPacking: zw }), h = new PS(), p = {}, v = t.maxTextureSize, y = { [ko]: Fr, [Fr]: ko, [Ys]: Ys }, x = new Ja({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new Ie() },
      radius: { value: 4 }
    },
    vertexShader: JO,
    fragmentShader: KO
  }), M = x.clone();
  M.defines.HORIZONTAL_PASS = 1;
  const T = new hn();
  T.setAttribute(
    "position",
    new jn(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const C = new lr(T, x), w = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = Ig;
  let E = this.type;
  this.render = function(F, z, B) {
    if (w.enabled === !1 || w.autoUpdate === !1 && w.needsUpdate === !1 || F.length === 0)
      return;
    const W = s.getRenderTarget(), O = s.getActiveCubeFace(), I = s.getActiveMipmapLevel(), Z = s.state;
    Z.setBlending(Ho), Z.buffers.color.setClear(1, 1, 1, 1), Z.buffers.depth.setTest(!0), Z.setScissorTest(!1);
    const ie = E !== vs && this.type === vs, fe = E === vs && this.type !== vs;
    for (let K = 0, he = F.length; K < he; K++) {
      const Te = F[K], Me = Te.shadow;
      if (Me === void 0) {
        console.warn("THREE.WebGLShadowMap:", Te, "has no shadow.");
        continue;
      }
      if (Me.autoUpdate === !1 && Me.needsUpdate === !1)
        continue;
      r.copy(Me.mapSize);
      const ne = Me.getFrameExtents();
      if (r.multiply(ne), o.copy(Me.mapSize), (r.x > v || r.y > v) && (r.x > v && (o.x = Math.floor(v / ne.x), r.x = o.x * ne.x, Me.mapSize.x = o.x), r.y > v && (o.y = Math.floor(v / ne.y), r.y = o.y * ne.y, Me.mapSize.y = o.y)), Me.map === null || ie === !0 || fe === !0) {
        const re = this.type !== vs ? { minFilter: di, magFilter: di } : {};
        Me.map !== null && Me.map.dispose(), Me.map = new Za(r.x, r.y, re), Me.map.texture.name = Te.name + ".shadowMap", Me.camera.updateProjectionMatrix();
      }
      s.setRenderTarget(Me.map), s.clear();
      const le = Me.getViewportCount();
      for (let re = 0; re < le; re++) {
        const J = Me.getViewport(re);
        c.set(
          o.x * J.x,
          o.y * J.y,
          o.x * J.z,
          o.y * J.w
        ), Z.viewport(c), Me.updateMatrices(Te, re), n = Me.getFrustum(), U(z, B, Me.camera, Te, this.type);
      }
      Me.isPointLightShadow !== !0 && this.type === vs && L(Me, B), Me.needsUpdate = !1;
    }
    E = this.type, w.needsUpdate = !1, s.setRenderTarget(W, O, I);
  };
  function L(F, z) {
    const B = e.update(C);
    x.defines.VSM_SAMPLES !== F.blurSamples && (x.defines.VSM_SAMPLES = F.blurSamples, M.defines.VSM_SAMPLES = F.blurSamples, x.needsUpdate = !0, M.needsUpdate = !0), F.mapPass === null && (F.mapPass = new Za(r.x, r.y)), x.uniforms.shadow_pass.value = F.map.texture, x.uniforms.resolution.value = F.mapSize, x.uniforms.radius.value = F.radius, s.setRenderTarget(F.mapPass), s.clear(), s.renderBufferDirect(z, null, B, x, C, null), M.uniforms.shadow_pass.value = F.mapPass.texture, M.uniforms.resolution.value = F.mapSize, M.uniforms.radius.value = F.radius, s.setRenderTarget(F.map), s.clear(), s.renderBufferDirect(z, null, B, M, C, null);
  }
  function R(F, z, B, W) {
    let O = null;
    const I = B.isPointLight === !0 ? F.customDistanceMaterial : F.customDepthMaterial;
    if (I !== void 0)
      O = I;
    else if (O = B.isPointLight === !0 ? h : f, s.localClippingEnabled && z.clipShadows === !0 && Array.isArray(z.clippingPlanes) && z.clippingPlanes.length !== 0 || z.displacementMap && z.displacementScale !== 0 || z.alphaMap && z.alphaTest > 0 || z.map && z.alphaTest > 0) {
      const Z = O.uuid, ie = z.uuid;
      let fe = p[Z];
      fe === void 0 && (fe = {}, p[Z] = fe);
      let K = fe[ie];
      K === void 0 && (K = O.clone(), fe[ie] = K), O = K;
    }
    if (O.visible = z.visible, O.wireframe = z.wireframe, W === vs ? O.side = z.shadowSide !== null ? z.shadowSide : z.side : O.side = z.shadowSide !== null ? z.shadowSide : y[z.side], O.alphaMap = z.alphaMap, O.alphaTest = z.alphaTest, O.map = z.map, O.clipShadows = z.clipShadows, O.clippingPlanes = z.clippingPlanes, O.clipIntersection = z.clipIntersection, O.displacementMap = z.displacementMap, O.displacementScale = z.displacementScale, O.displacementBias = z.displacementBias, O.wireframeLinewidth = z.wireframeLinewidth, O.linewidth = z.linewidth, B.isPointLight === !0 && O.isMeshDistanceMaterial === !0) {
      const Z = s.properties.get(O);
      Z.light = B;
    }
    return O;
  }
  function U(F, z, B, W, O) {
    if (F.visible === !1)
      return;
    if (F.layers.test(z.layers) && (F.isMesh || F.isLine || F.isPoints) && (F.castShadow || F.receiveShadow && O === vs) && (!F.frustumCulled || n.intersectsObject(F))) {
      F.modelViewMatrix.multiplyMatrices(B.matrixWorldInverse, F.matrixWorld);
      const ie = e.update(F), fe = F.material;
      if (Array.isArray(fe)) {
        const K = ie.groups;
        for (let he = 0, Te = K.length; he < Te; he++) {
          const Me = K[he], ne = fe[Me.materialIndex];
          if (ne && ne.visible) {
            const le = R(F, ne, W, O);
            s.renderBufferDirect(B, null, ie, le, F, Me);
          }
        }
      } else if (fe.visible) {
        const K = R(F, fe, W, O);
        s.renderBufferDirect(B, null, ie, K, F, null);
      }
    }
    const Z = F.children;
    for (let ie = 0, fe = Z.length; ie < fe; ie++)
      U(Z[ie], z, B, W, O);
  }
}
function $O(s, e, t) {
  const n = t.isWebGL2;
  function r() {
    let k = !1;
    const ze = new Vn();
    let Ce = null;
    const Be = new Vn(0, 0, 0, 0);
    return {
      setMask: function(ut) {
        Ce !== ut && !k && (s.colorMask(ut, ut, ut, ut), Ce = ut);
      },
      setLocked: function(ut) {
        k = ut;
      },
      setClear: function(ut, He, vt, Ut, Nt) {
        Nt === !0 && (ut *= Ut, He *= Ut, vt *= Ut), ze.set(ut, He, vt, Ut), Be.equals(ze) === !1 && (s.clearColor(ut, He, vt, Ut), Be.copy(ze));
      },
      reset: function() {
        k = !1, Ce = null, Be.set(-1, 0, 0, 0);
      }
    };
  }
  function o() {
    let k = !1, ze = null, Ce = null, Be = null;
    return {
      setTest: function(ut) {
        ut ? gt(s.DEPTH_TEST) : ot(s.DEPTH_TEST);
      },
      setMask: function(ut) {
        ze !== ut && !k && (s.depthMask(ut), ze = ut);
      },
      setFunc: function(ut) {
        if (Ce !== ut) {
          switch (ut) {
            case dw:
              s.depthFunc(s.NEVER);
              break;
            case hw:
              s.depthFunc(s.ALWAYS);
              break;
            case pw:
              s.depthFunc(s.LESS);
              break;
            case Rg:
              s.depthFunc(s.LEQUAL);
              break;
            case mw:
              s.depthFunc(s.EQUAL);
              break;
            case vw:
              s.depthFunc(s.GEQUAL);
              break;
            case gw:
              s.depthFunc(s.GREATER);
              break;
            case yw:
              s.depthFunc(s.NOTEQUAL);
              break;
            default:
              s.depthFunc(s.LEQUAL);
          }
          Ce = ut;
        }
      },
      setLocked: function(ut) {
        k = ut;
      },
      setClear: function(ut) {
        Be !== ut && (s.clearDepth(ut), Be = ut);
      },
      reset: function() {
        k = !1, ze = null, Ce = null, Be = null;
      }
    };
  }
  function c() {
    let k = !1, ze = null, Ce = null, Be = null, ut = null, He = null, vt = null, Ut = null, Nt = null;
    return {
      setTest: function(Kt) {
        k || (Kt ? gt(s.STENCIL_TEST) : ot(s.STENCIL_TEST));
      },
      setMask: function(Kt) {
        ze !== Kt && !k && (s.stencilMask(Kt), ze = Kt);
      },
      setFunc: function(Kt, Un, wn) {
        (Ce !== Kt || Be !== Un || ut !== wn) && (s.stencilFunc(Kt, Un, wn), Ce = Kt, Be = Un, ut = wn);
      },
      setOp: function(Kt, Un, wn) {
        (He !== Kt || vt !== Un || Ut !== wn) && (s.stencilOp(Kt, Un, wn), He = Kt, vt = Un, Ut = wn);
      },
      setLocked: function(Kt) {
        k = Kt;
      },
      setClear: function(Kt) {
        Nt !== Kt && (s.clearStencil(Kt), Nt = Kt);
      },
      reset: function() {
        k = !1, ze = null, Ce = null, Be = null, ut = null, He = null, vt = null, Ut = null, Nt = null;
      }
    };
  }
  const f = new r(), h = new o(), p = new c(), v = /* @__PURE__ */ new WeakMap(), y = /* @__PURE__ */ new WeakMap();
  let x = {}, M = {}, T = /* @__PURE__ */ new WeakMap(), C = [], w = null, E = !1, L = null, R = null, U = null, F = null, z = null, B = null, W = null, O = !1, I = null, Z = null, ie = null, fe = null, K = null;
  const he = s.getParameter(s.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let Te = !1, Me = 0;
  const ne = s.getParameter(s.VERSION);
  ne.indexOf("WebGL") !== -1 ? (Me = parseFloat(/^WebGL (\d)/.exec(ne)[1]), Te = Me >= 1) : ne.indexOf("OpenGL ES") !== -1 && (Me = parseFloat(/^OpenGL ES (\d)/.exec(ne)[1]), Te = Me >= 2);
  let le = null, re = {};
  const J = s.getParameter(s.SCISSOR_BOX), ue = s.getParameter(s.VIEWPORT), Pe = new Vn().fromArray(J), qe = new Vn().fromArray(ue);
  function $e(k, ze, Ce, Be) {
    const ut = new Uint8Array(4), He = s.createTexture();
    s.bindTexture(k, He), s.texParameteri(k, s.TEXTURE_MIN_FILTER, s.NEAREST), s.texParameteri(k, s.TEXTURE_MAG_FILTER, s.NEAREST);
    for (let vt = 0; vt < Ce; vt++)
      n && (k === s.TEXTURE_3D || k === s.TEXTURE_2D_ARRAY) ? s.texImage3D(ze, 0, s.RGBA, 1, 1, Be, 0, s.RGBA, s.UNSIGNED_BYTE, ut) : s.texImage2D(ze + vt, 0, s.RGBA, 1, 1, 0, s.RGBA, s.UNSIGNED_BYTE, ut);
    return He;
  }
  const it = {};
  it[s.TEXTURE_2D] = $e(s.TEXTURE_2D, s.TEXTURE_2D, 1), it[s.TEXTURE_CUBE_MAP] = $e(s.TEXTURE_CUBE_MAP, s.TEXTURE_CUBE_MAP_POSITIVE_X, 6), n && (it[s.TEXTURE_2D_ARRAY] = $e(s.TEXTURE_2D_ARRAY, s.TEXTURE_2D_ARRAY, 1, 1), it[s.TEXTURE_3D] = $e(s.TEXTURE_3D, s.TEXTURE_3D, 1, 1)), f.setClear(0, 0, 0, 1), h.setClear(1), p.setClear(0), gt(s.DEPTH_TEST), h.setFunc(Rg), Ue(!1), Mt(_x), gt(s.CULL_FACE), Re(Ho);
  function gt(k) {
    x[k] !== !0 && (s.enable(k), x[k] = !0);
  }
  function ot(k) {
    x[k] !== !1 && (s.disable(k), x[k] = !1);
  }
  function Vt(k, ze) {
    return M[k] !== ze ? (s.bindFramebuffer(k, ze), M[k] = ze, n && (k === s.DRAW_FRAMEBUFFER && (M[s.FRAMEBUFFER] = ze), k === s.FRAMEBUFFER && (M[s.DRAW_FRAMEBUFFER] = ze)), !0) : !1;
  }
  function nn(k, ze) {
    let Ce = C, Be = !1;
    if (k)
      if (Ce = T.get(ze), Ce === void 0 && (Ce = [], T.set(ze, Ce)), k.isWebGLMultipleRenderTargets) {
        const ut = k.texture;
        if (Ce.length !== ut.length || Ce[0] !== s.COLOR_ATTACHMENT0) {
          for (let He = 0, vt = ut.length; He < vt; He++)
            Ce[He] = s.COLOR_ATTACHMENT0 + He;
          Ce.length = ut.length, Be = !0;
        }
      } else
        Ce[0] !== s.COLOR_ATTACHMENT0 && (Ce[0] = s.COLOR_ATTACHMENT0, Be = !0);
    else
      Ce[0] !== s.BACK && (Ce[0] = s.BACK, Be = !0);
    Be && (t.isWebGL2 ? s.drawBuffers(Ce) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(Ce));
  }
  function Tt(k) {
    return w !== k ? (s.useProgram(k), w = k, !0) : !1;
  }
  const Q = {
    [ac]: s.FUNC_ADD,
    [tw]: s.FUNC_SUBTRACT,
    [nw]: s.FUNC_REVERSE_SUBTRACT
  };
  if (n)
    Q[Mx] = s.MIN, Q[Ex] = s.MAX;
  else {
    const k = e.get("EXT_blend_minmax");
    k !== null && (Q[Mx] = k.MIN_EXT, Q[Ex] = k.MAX_EXT);
  }
  const ke = {
    [iw]: s.ZERO,
    [rw]: s.ONE,
    [aw]: s.SRC_COLOR,
    [dS]: s.SRC_ALPHA,
    [fw]: s.SRC_ALPHA_SATURATE,
    [uw]: s.DST_COLOR,
    [ow]: s.DST_ALPHA,
    [sw]: s.ONE_MINUS_SRC_COLOR,
    [hS]: s.ONE_MINUS_SRC_ALPHA,
    [cw]: s.ONE_MINUS_DST_COLOR,
    [lw]: s.ONE_MINUS_DST_ALPHA
  };
  function Re(k, ze, Ce, Be, ut, He, vt, Ut) {
    if (k === Ho) {
      E === !0 && (ot(s.BLEND), E = !1);
      return;
    }
    if (E === !1 && (gt(s.BLEND), E = !0), k !== ew) {
      if (k !== L || Ut !== O) {
        if ((R !== ac || z !== ac) && (s.blendEquation(s.FUNC_ADD), R = ac, z = ac), Ut)
          switch (k) {
            case ql:
              s.blendFuncSeparate(s.ONE, s.ONE_MINUS_SRC_ALPHA, s.ONE, s.ONE_MINUS_SRC_ALPHA);
              break;
            case Ag:
              s.blendFunc(s.ONE, s.ONE);
              break;
            case xx:
              s.blendFuncSeparate(s.ZERO, s.ONE_MINUS_SRC_COLOR, s.ZERO, s.ONE);
              break;
            case Sx:
              s.blendFuncSeparate(s.ZERO, s.SRC_COLOR, s.ZERO, s.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", k);
              break;
          }
        else
          switch (k) {
            case ql:
              s.blendFuncSeparate(s.SRC_ALPHA, s.ONE_MINUS_SRC_ALPHA, s.ONE, s.ONE_MINUS_SRC_ALPHA);
              break;
            case Ag:
              s.blendFunc(s.SRC_ALPHA, s.ONE);
              break;
            case xx:
              s.blendFuncSeparate(s.ZERO, s.ONE_MINUS_SRC_COLOR, s.ZERO, s.ONE);
              break;
            case Sx:
              s.blendFunc(s.ZERO, s.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", k);
              break;
          }
        U = null, F = null, B = null, W = null, L = k, O = Ut;
      }
      return;
    }
    ut = ut || ze, He = He || Ce, vt = vt || Be, (ze !== R || ut !== z) && (s.blendEquationSeparate(Q[ze], Q[ut]), R = ze, z = ut), (Ce !== U || Be !== F || He !== B || vt !== W) && (s.blendFuncSeparate(ke[Ce], ke[Be], ke[He], ke[vt]), U = Ce, F = Be, B = He, W = vt), L = k, O = !1;
  }
  function Xe(k, ze) {
    k.side === Ys ? ot(s.CULL_FACE) : gt(s.CULL_FACE);
    let Ce = k.side === Fr;
    ze && (Ce = !Ce), Ue(Ce), k.blending === ql && k.transparent === !1 ? Re(Ho) : Re(k.blending, k.blendEquation, k.blendSrc, k.blendDst, k.blendEquationAlpha, k.blendSrcAlpha, k.blendDstAlpha, k.premultipliedAlpha), h.setFunc(k.depthFunc), h.setTest(k.depthTest), h.setMask(k.depthWrite), f.setMask(k.colorWrite);
    const Be = k.stencilWrite;
    p.setTest(Be), Be && (p.setMask(k.stencilWriteMask), p.setFunc(k.stencilFunc, k.stencilRef, k.stencilFuncMask), p.setOp(k.stencilFail, k.stencilZFail, k.stencilZPass)), at(k.polygonOffset, k.polygonOffsetFactor, k.polygonOffsetUnits), k.alphaToCoverage === !0 ? gt(s.SAMPLE_ALPHA_TO_COVERAGE) : ot(s.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function Ue(k) {
    I !== k && (k ? s.frontFace(s.CW) : s.frontFace(s.CCW), I = k);
  }
  function Mt(k) {
    k !== K1 ? (gt(s.CULL_FACE), k !== Z && (k === _x ? s.cullFace(s.BACK) : k === Q1 ? s.cullFace(s.FRONT) : s.cullFace(s.FRONT_AND_BACK))) : ot(s.CULL_FACE), Z = k;
  }
  function lt(k) {
    k !== ie && (Te && s.lineWidth(k), ie = k);
  }
  function at(k, ze, Ce) {
    k ? (gt(s.POLYGON_OFFSET_FILL), (fe !== ze || K !== Ce) && (s.polygonOffset(ze, Ce), fe = ze, K = Ce)) : ot(s.POLYGON_OFFSET_FILL);
  }
  function Dt(k) {
    k ? gt(s.SCISSOR_TEST) : ot(s.SCISSOR_TEST);
  }
  function Zt(k) {
    k === void 0 && (k = s.TEXTURE0 + he - 1), le !== k && (s.activeTexture(k), le = k);
  }
  function rn(k, ze, Ce) {
    Ce === void 0 && (le === null ? Ce = s.TEXTURE0 + he - 1 : Ce = le);
    let Be = re[Ce];
    Be === void 0 && (Be = { type: void 0, texture: void 0 }, re[Ce] = Be), (Be.type !== k || Be.texture !== ze) && (le !== Ce && (s.activeTexture(Ce), le = Ce), s.bindTexture(k, ze || it[k]), Be.type = k, Be.texture = ze);
  }
  function X() {
    const k = re[le];
    k !== void 0 && k.type !== void 0 && (s.bindTexture(k.type, null), k.type = void 0, k.texture = void 0);
  }
  function H() {
    try {
      s.compressedTexImage2D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function ye() {
    try {
      s.compressedTexImage3D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Ye() {
    try {
      s.texSubImage2D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Ve() {
    try {
      s.texSubImage3D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Ze() {
    try {
      s.compressedTexSubImage2D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function bt() {
    try {
      s.compressedTexSubImage3D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Ke() {
    try {
      s.texStorage2D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Se() {
    try {
      s.texStorage3D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Ge() {
    try {
      s.texImage2D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function yt() {
    try {
      s.texImage3D.apply(s, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Ne(k) {
    Pe.equals(k) === !1 && (s.scissor(k.x, k.y, k.z, k.w), Pe.copy(k));
  }
  function rt(k) {
    qe.equals(k) === !1 && (s.viewport(k.x, k.y, k.z, k.w), qe.copy(k));
  }
  function ee(k, ze) {
    let Ce = y.get(ze);
    Ce === void 0 && (Ce = /* @__PURE__ */ new WeakMap(), y.set(ze, Ce));
    let Be = Ce.get(k);
    Be === void 0 && (Be = s.getUniformBlockIndex(ze, k.name), Ce.set(k, Be));
  }
  function Ee(k, ze) {
    const Be = y.get(ze).get(k);
    v.get(ze) !== Be && (s.uniformBlockBinding(ze, Be, k.__bindingPointIndex), v.set(ze, Be));
  }
  function xe() {
    s.disable(s.BLEND), s.disable(s.CULL_FACE), s.disable(s.DEPTH_TEST), s.disable(s.POLYGON_OFFSET_FILL), s.disable(s.SCISSOR_TEST), s.disable(s.STENCIL_TEST), s.disable(s.SAMPLE_ALPHA_TO_COVERAGE), s.blendEquation(s.FUNC_ADD), s.blendFunc(s.ONE, s.ZERO), s.blendFuncSeparate(s.ONE, s.ZERO, s.ONE, s.ZERO), s.colorMask(!0, !0, !0, !0), s.clearColor(0, 0, 0, 0), s.depthMask(!0), s.depthFunc(s.LESS), s.clearDepth(1), s.stencilMask(4294967295), s.stencilFunc(s.ALWAYS, 0, 4294967295), s.stencilOp(s.KEEP, s.KEEP, s.KEEP), s.clearStencil(0), s.cullFace(s.BACK), s.frontFace(s.CCW), s.polygonOffset(0, 0), s.activeTexture(s.TEXTURE0), s.bindFramebuffer(s.FRAMEBUFFER, null), n === !0 && (s.bindFramebuffer(s.DRAW_FRAMEBUFFER, null), s.bindFramebuffer(s.READ_FRAMEBUFFER, null)), s.useProgram(null), s.lineWidth(1), s.scissor(0, 0, s.canvas.width, s.canvas.height), s.viewport(0, 0, s.canvas.width, s.canvas.height), x = {}, le = null, re = {}, M = {}, T = /* @__PURE__ */ new WeakMap(), C = [], w = null, E = !1, L = null, R = null, U = null, F = null, z = null, B = null, W = null, O = !1, I = null, Z = null, ie = null, fe = null, K = null, Pe.set(0, 0, s.canvas.width, s.canvas.height), qe.set(0, 0, s.canvas.width, s.canvas.height), f.reset(), h.reset(), p.reset();
  }
  return {
    buffers: {
      color: f,
      depth: h,
      stencil: p
    },
    enable: gt,
    disable: ot,
    bindFramebuffer: Vt,
    drawBuffers: nn,
    useProgram: Tt,
    setBlending: Re,
    setMaterial: Xe,
    setFlipSided: Ue,
    setCullFace: Mt,
    setLineWidth: lt,
    setPolygonOffset: at,
    setScissorTest: Dt,
    activeTexture: Zt,
    bindTexture: rn,
    unbindTexture: X,
    compressedTexImage2D: H,
    compressedTexImage3D: ye,
    texImage2D: Ge,
    texImage3D: yt,
    updateUBOMapping: ee,
    uniformBlockBinding: Ee,
    texStorage2D: Ke,
    texStorage3D: Se,
    texSubImage2D: Ye,
    texSubImage3D: Ve,
    compressedTexSubImage2D: Ze,
    compressedTexSubImage3D: bt,
    scissor: Ne,
    viewport: rt,
    reset: xe
  };
}
function eI(s, e, t, n, r, o, c) {
  const f = r.isWebGL2, h = r.maxTextures, p = r.maxCubemapSize, v = r.maxTextureSize, y = r.maxSamples, x = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, M = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), T = /* @__PURE__ */ new WeakMap();
  let C;
  const w = /* @__PURE__ */ new WeakMap();
  let E = !1;
  try {
    E = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function L(X, H) {
    return E ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(X, H)
    ) : Mp("canvas");
  }
  function R(X, H, ye, Ye) {
    let Ve = 1;
    if ((X.width > Ye || X.height > Ye) && (Ve = Ye / Math.max(X.width, X.height)), Ve < 1 || H === !0)
      if (typeof HTMLImageElement < "u" && X instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && X instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && X instanceof ImageBitmap) {
        const Ze = H ? Pg : Math.floor, bt = Ze(Ve * X.width), Ke = Ze(Ve * X.height);
        C === void 0 && (C = L(bt, Ke));
        const Se = ye ? L(bt, Ke) : C;
        return Se.width = bt, Se.height = Ke, Se.getContext("2d").drawImage(X, 0, 0, bt, Ke), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + X.width + "x" + X.height + ") to (" + bt + "x" + Ke + ")."), Se;
      } else
        return "data" in X && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + X.width + "x" + X.height + ")."), X;
    return X;
  }
  function U(X) {
    return Jx(X.width) && Jx(X.height);
  }
  function F(X) {
    return f ? !1 : X.wrapS !== Mr || X.wrapT !== Mr || X.minFilter !== di && X.minFilter !== hi;
  }
  function z(X, H) {
    return X.generateMipmaps && H && X.minFilter !== di && X.minFilter !== hi;
  }
  function B(X) {
    s.generateMipmap(X);
  }
  function W(X, H, ye, Ye, Ve = !1) {
    if (f === !1)
      return H;
    if (X !== null) {
      if (s[X] !== void 0)
        return s[X];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + X + "'");
    }
    let Ze = H;
    if (H === s.RED && (ye === s.FLOAT && (Ze = s.R32F), ye === s.HALF_FLOAT && (Ze = s.R16F), ye === s.UNSIGNED_BYTE && (Ze = s.R8)), H === s.RED_INTEGER && (ye === s.UNSIGNED_BYTE && (Ze = s.R8UI), ye === s.UNSIGNED_SHORT && (Ze = s.R16UI), ye === s.UNSIGNED_INT && (Ze = s.R32UI), ye === s.BYTE && (Ze = s.R8I), ye === s.SHORT && (Ze = s.R16I), ye === s.INT && (Ze = s.R32I)), H === s.RG && (ye === s.FLOAT && (Ze = s.RG32F), ye === s.HALF_FLOAT && (Ze = s.RG16F), ye === s.UNSIGNED_BYTE && (Ze = s.RG8)), H === s.RGBA) {
      const bt = Ve ? gp : Hn.getTransfer(Ye);
      ye === s.FLOAT && (Ze = s.RGBA32F), ye === s.HALF_FLOAT && (Ze = s.RGBA16F), ye === s.UNSIGNED_BYTE && (Ze = bt === Zn ? s.SRGB8_ALPHA8 : s.RGBA8), ye === s.UNSIGNED_SHORT_4_4_4_4 && (Ze = s.RGBA4), ye === s.UNSIGNED_SHORT_5_5_5_1 && (Ze = s.RGB5_A1);
    }
    return (Ze === s.R16F || Ze === s.R32F || Ze === s.RG16F || Ze === s.RG32F || Ze === s.RGBA16F || Ze === s.RGBA32F) && e.get("EXT_color_buffer_float"), Ze;
  }
  function O(X, H, ye) {
    return z(X, ye) === !0 || X.isFramebufferTexture && X.minFilter !== di && X.minFilter !== hi ? Math.log2(Math.max(H.width, H.height)) + 1 : X.mipmaps !== void 0 && X.mipmaps.length > 0 ? X.mipmaps.length : X.isCompressedTexture && Array.isArray(X.image) ? H.mipmaps.length : 1;
  }
  function I(X) {
    return X === di || X === Cg || X === ap ? s.NEAREST : s.LINEAR;
  }
  function Z(X) {
    const H = X.target;
    H.removeEventListener("dispose", Z), fe(H), H.isVideoTexture && T.delete(H);
  }
  function ie(X) {
    const H = X.target;
    H.removeEventListener("dispose", ie), he(H);
  }
  function fe(X) {
    const H = n.get(X);
    if (H.__webglInit === void 0)
      return;
    const ye = X.source, Ye = w.get(ye);
    if (Ye) {
      const Ve = Ye[H.__cacheKey];
      Ve.usedTimes--, Ve.usedTimes === 0 && K(X), Object.keys(Ye).length === 0 && w.delete(ye);
    }
    n.remove(X);
  }
  function K(X) {
    const H = n.get(X);
    s.deleteTexture(H.__webglTexture);
    const ye = X.source, Ye = w.get(ye);
    delete Ye[H.__cacheKey], c.memory.textures--;
  }
  function he(X) {
    const H = X.texture, ye = n.get(X), Ye = n.get(H);
    if (Ye.__webglTexture !== void 0 && (s.deleteTexture(Ye.__webglTexture), c.memory.textures--), X.depthTexture && X.depthTexture.dispose(), X.isWebGLCubeRenderTarget)
      for (let Ve = 0; Ve < 6; Ve++) {
        if (Array.isArray(ye.__webglFramebuffer[Ve]))
          for (let Ze = 0; Ze < ye.__webglFramebuffer[Ve].length; Ze++)
            s.deleteFramebuffer(ye.__webglFramebuffer[Ve][Ze]);
        else
          s.deleteFramebuffer(ye.__webglFramebuffer[Ve]);
        ye.__webglDepthbuffer && s.deleteRenderbuffer(ye.__webglDepthbuffer[Ve]);
      }
    else {
      if (Array.isArray(ye.__webglFramebuffer))
        for (let Ve = 0; Ve < ye.__webglFramebuffer.length; Ve++)
          s.deleteFramebuffer(ye.__webglFramebuffer[Ve]);
      else
        s.deleteFramebuffer(ye.__webglFramebuffer);
      if (ye.__webglDepthbuffer && s.deleteRenderbuffer(ye.__webglDepthbuffer), ye.__webglMultisampledFramebuffer && s.deleteFramebuffer(ye.__webglMultisampledFramebuffer), ye.__webglColorRenderbuffer)
        for (let Ve = 0; Ve < ye.__webglColorRenderbuffer.length; Ve++)
          ye.__webglColorRenderbuffer[Ve] && s.deleteRenderbuffer(ye.__webglColorRenderbuffer[Ve]);
      ye.__webglDepthRenderbuffer && s.deleteRenderbuffer(ye.__webglDepthRenderbuffer);
    }
    if (X.isWebGLMultipleRenderTargets)
      for (let Ve = 0, Ze = H.length; Ve < Ze; Ve++) {
        const bt = n.get(H[Ve]);
        bt.__webglTexture && (s.deleteTexture(bt.__webglTexture), c.memory.textures--), n.remove(H[Ve]);
      }
    n.remove(H), n.remove(X);
  }
  let Te = 0;
  function Me() {
    Te = 0;
  }
  function ne() {
    const X = Te;
    return X >= h && console.warn("THREE.WebGLTextures: Trying to use " + X + " texture units while this GPU supports only " + h), Te += 1, X;
  }
  function le(X) {
    const H = [];
    return H.push(X.wrapS), H.push(X.wrapT), H.push(X.wrapR || 0), H.push(X.magFilter), H.push(X.minFilter), H.push(X.anisotropy), H.push(X.internalFormat), H.push(X.format), H.push(X.type), H.push(X.generateMipmaps), H.push(X.premultiplyAlpha), H.push(X.flipY), H.push(X.unpackAlignment), H.push(X.colorSpace), H.join();
  }
  function re(X, H) {
    const ye = n.get(X);
    if (X.isVideoTexture && Zt(X), X.isRenderTargetTexture === !1 && X.version > 0 && ye.__version !== X.version) {
      const Ye = X.image;
      if (Ye === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (Ye.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        Vt(ye, X, H);
        return;
      }
    }
    t.bindTexture(s.TEXTURE_2D, ye.__webglTexture, s.TEXTURE0 + H);
  }
  function J(X, H) {
    const ye = n.get(X);
    if (X.version > 0 && ye.__version !== X.version) {
      Vt(ye, X, H);
      return;
    }
    t.bindTexture(s.TEXTURE_2D_ARRAY, ye.__webglTexture, s.TEXTURE0 + H);
  }
  function ue(X, H) {
    const ye = n.get(X);
    if (X.version > 0 && ye.__version !== X.version) {
      Vt(ye, X, H);
      return;
    }
    t.bindTexture(s.TEXTURE_3D, ye.__webglTexture, s.TEXTURE0 + H);
  }
  function Pe(X, H) {
    const ye = n.get(X);
    if (X.version > 0 && ye.__version !== X.version) {
      nn(ye, X, H);
      return;
    }
    t.bindTexture(s.TEXTURE_CUBE_MAP, ye.__webglTexture, s.TEXTURE0 + H);
  }
  const qe = {
    [dp]: s.REPEAT,
    [Mr]: s.CLAMP_TO_EDGE,
    [hp]: s.MIRRORED_REPEAT
  }, $e = {
    [di]: s.NEAREST,
    [Cg]: s.NEAREST_MIPMAP_NEAREST,
    [ap]: s.NEAREST_MIPMAP_LINEAR,
    [hi]: s.LINEAR,
    [mS]: s.LINEAR_MIPMAP_NEAREST,
    [$l]: s.LINEAR_MIPMAP_LINEAR
  }, it = {
    [Vw]: s.NEVER,
    [qw]: s.ALWAYS,
    [kw]: s.LESS,
    [Ww]: s.LEQUAL,
    [Gw]: s.EQUAL,
    [jw]: s.GEQUAL,
    [Xw]: s.GREATER,
    [Yw]: s.NOTEQUAL
  };
  function gt(X, H, ye) {
    if (ye ? (s.texParameteri(X, s.TEXTURE_WRAP_S, qe[H.wrapS]), s.texParameteri(X, s.TEXTURE_WRAP_T, qe[H.wrapT]), (X === s.TEXTURE_3D || X === s.TEXTURE_2D_ARRAY) && s.texParameteri(X, s.TEXTURE_WRAP_R, qe[H.wrapR]), s.texParameteri(X, s.TEXTURE_MAG_FILTER, $e[H.magFilter]), s.texParameteri(X, s.TEXTURE_MIN_FILTER, $e[H.minFilter])) : (s.texParameteri(X, s.TEXTURE_WRAP_S, s.CLAMP_TO_EDGE), s.texParameteri(X, s.TEXTURE_WRAP_T, s.CLAMP_TO_EDGE), (X === s.TEXTURE_3D || X === s.TEXTURE_2D_ARRAY) && s.texParameteri(X, s.TEXTURE_WRAP_R, s.CLAMP_TO_EDGE), (H.wrapS !== Mr || H.wrapT !== Mr) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), s.texParameteri(X, s.TEXTURE_MAG_FILTER, I(H.magFilter)), s.texParameteri(X, s.TEXTURE_MIN_FILTER, I(H.minFilter)), H.minFilter !== di && H.minFilter !== hi && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), H.compareFunction && (s.texParameteri(X, s.TEXTURE_COMPARE_MODE, s.COMPARE_REF_TO_TEXTURE), s.texParameteri(X, s.TEXTURE_COMPARE_FUNC, it[H.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
      const Ye = e.get("EXT_texture_filter_anisotropic");
      if (H.magFilter === di || H.minFilter !== ap && H.minFilter !== $l || H.type === Ta && e.has("OES_texture_float_linear") === !1 || f === !1 && H.type === vc && e.has("OES_texture_half_float_linear") === !1)
        return;
      (H.anisotropy > 1 || n.get(H).__currentAnisotropy) && (s.texParameterf(X, Ye.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(H.anisotropy, r.getMaxAnisotropy())), n.get(H).__currentAnisotropy = H.anisotropy);
    }
  }
  function ot(X, H) {
    let ye = !1;
    X.__webglInit === void 0 && (X.__webglInit = !0, H.addEventListener("dispose", Z));
    const Ye = H.source;
    let Ve = w.get(Ye);
    Ve === void 0 && (Ve = {}, w.set(Ye, Ve));
    const Ze = le(H);
    if (Ze !== X.__cacheKey) {
      Ve[Ze] === void 0 && (Ve[Ze] = {
        texture: s.createTexture(),
        usedTimes: 0
      }, c.memory.textures++, ye = !0), Ve[Ze].usedTimes++;
      const bt = Ve[X.__cacheKey];
      bt !== void 0 && (Ve[X.__cacheKey].usedTimes--, bt.usedTimes === 0 && K(H)), X.__cacheKey = Ze, X.__webglTexture = Ve[Ze].texture;
    }
    return ye;
  }
  function Vt(X, H, ye) {
    let Ye = s.TEXTURE_2D;
    (H.isDataArrayTexture || H.isCompressedArrayTexture) && (Ye = s.TEXTURE_2D_ARRAY), H.isData3DTexture && (Ye = s.TEXTURE_3D);
    const Ve = ot(X, H), Ze = H.source;
    t.bindTexture(Ye, X.__webglTexture, s.TEXTURE0 + ye);
    const bt = n.get(Ze);
    if (Ze.version !== bt.__version || Ve === !0) {
      t.activeTexture(s.TEXTURE0 + ye);
      const Ke = Hn.getPrimaries(Hn.workingColorSpace), Se = H.colorSpace === Ea ? null : Hn.getPrimaries(H.colorSpace), Ge = H.colorSpace === Ea || Ke === Se ? s.NONE : s.BROWSER_DEFAULT_WEBGL;
      s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, H.flipY), s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, H.premultiplyAlpha), s.pixelStorei(s.UNPACK_ALIGNMENT, H.unpackAlignment), s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL, Ge);
      const yt = F(H) && U(H.image) === !1;
      let Ne = R(H.image, yt, !1, v);
      Ne = rn(H, Ne);
      const rt = U(Ne) || f, ee = o.convert(H.format, H.colorSpace);
      let Ee = o.convert(H.type), xe = W(H.internalFormat, ee, Ee, H.colorSpace, H.isVideoTexture);
      gt(Ye, H, rt);
      let k;
      const ze = H.mipmaps, Ce = f && H.isVideoTexture !== !0, Be = bt.__version === void 0 || Ve === !0, ut = O(H, Ne, rt);
      if (H.isDepthTexture)
        xe = s.DEPTH_COMPONENT, f ? H.type === Ta ? xe = s.DEPTH_COMPONENT32F : H.type === Bo ? xe = s.DEPTH_COMPONENT24 : H.type === Zl ? xe = s.DEPTH24_STENCIL8 : xe = s.DEPTH_COMPONENT16 : H.type === Ta && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), H.format === Jl && xe === s.DEPTH_COMPONENT && H.type !== zg && H.type !== Bo && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), H.type = Bo, Ee = o.convert(H.type)), H.format === gc && xe === s.DEPTH_COMPONENT && (xe = s.DEPTH_STENCIL, H.type !== Zl && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), H.type = Zl, Ee = o.convert(H.type))), Be && (Ce ? t.texStorage2D(s.TEXTURE_2D, 1, xe, Ne.width, Ne.height) : t.texImage2D(s.TEXTURE_2D, 0, xe, Ne.width, Ne.height, 0, ee, Ee, null));
      else if (H.isDataTexture)
        if (ze.length > 0 && rt) {
          Ce && Be && t.texStorage2D(s.TEXTURE_2D, ut, xe, ze[0].width, ze[0].height);
          for (let He = 0, vt = ze.length; He < vt; He++)
            k = ze[He], Ce ? t.texSubImage2D(s.TEXTURE_2D, He, 0, 0, k.width, k.height, ee, Ee, k.data) : t.texImage2D(s.TEXTURE_2D, He, xe, k.width, k.height, 0, ee, Ee, k.data);
          H.generateMipmaps = !1;
        } else
          Ce ? (Be && t.texStorage2D(s.TEXTURE_2D, ut, xe, Ne.width, Ne.height), t.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, Ne.width, Ne.height, ee, Ee, Ne.data)) : t.texImage2D(s.TEXTURE_2D, 0, xe, Ne.width, Ne.height, 0, ee, Ee, Ne.data);
      else if (H.isCompressedTexture)
        if (H.isCompressedArrayTexture) {
          Ce && Be && t.texStorage3D(s.TEXTURE_2D_ARRAY, ut, xe, ze[0].width, ze[0].height, Ne.depth);
          for (let He = 0, vt = ze.length; He < vt; He++)
            k = ze[He], H.format !== Er ? ee !== null ? Ce ? t.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY, He, 0, 0, 0, k.width, k.height, Ne.depth, ee, k.data, 0, 0) : t.compressedTexImage3D(s.TEXTURE_2D_ARRAY, He, xe, k.width, k.height, Ne.depth, 0, k.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : Ce ? t.texSubImage3D(s.TEXTURE_2D_ARRAY, He, 0, 0, 0, k.width, k.height, Ne.depth, ee, Ee, k.data) : t.texImage3D(s.TEXTURE_2D_ARRAY, He, xe, k.width, k.height, Ne.depth, 0, ee, Ee, k.data);
        } else {
          Ce && Be && t.texStorage2D(s.TEXTURE_2D, ut, xe, ze[0].width, ze[0].height);
          for (let He = 0, vt = ze.length; He < vt; He++)
            k = ze[He], H.format !== Er ? ee !== null ? Ce ? t.compressedTexSubImage2D(s.TEXTURE_2D, He, 0, 0, k.width, k.height, ee, k.data) : t.compressedTexImage2D(s.TEXTURE_2D, He, xe, k.width, k.height, 0, k.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : Ce ? t.texSubImage2D(s.TEXTURE_2D, He, 0, 0, k.width, k.height, ee, Ee, k.data) : t.texImage2D(s.TEXTURE_2D, He, xe, k.width, k.height, 0, ee, Ee, k.data);
        }
      else if (H.isDataArrayTexture)
        Ce ? (Be && t.texStorage3D(s.TEXTURE_2D_ARRAY, ut, xe, Ne.width, Ne.height, Ne.depth), t.texSubImage3D(s.TEXTURE_2D_ARRAY, 0, 0, 0, 0, Ne.width, Ne.height, Ne.depth, ee, Ee, Ne.data)) : t.texImage3D(s.TEXTURE_2D_ARRAY, 0, xe, Ne.width, Ne.height, Ne.depth, 0, ee, Ee, Ne.data);
      else if (H.isData3DTexture)
        Ce ? (Be && t.texStorage3D(s.TEXTURE_3D, ut, xe, Ne.width, Ne.height, Ne.depth), t.texSubImage3D(s.TEXTURE_3D, 0, 0, 0, 0, Ne.width, Ne.height, Ne.depth, ee, Ee, Ne.data)) : t.texImage3D(s.TEXTURE_3D, 0, xe, Ne.width, Ne.height, Ne.depth, 0, ee, Ee, Ne.data);
      else if (H.isFramebufferTexture) {
        if (Be)
          if (Ce)
            t.texStorage2D(s.TEXTURE_2D, ut, xe, Ne.width, Ne.height);
          else {
            let He = Ne.width, vt = Ne.height;
            for (let Ut = 0; Ut < ut; Ut++)
              t.texImage2D(s.TEXTURE_2D, Ut, xe, He, vt, 0, ee, Ee, null), He >>= 1, vt >>= 1;
          }
      } else if (ze.length > 0 && rt) {
        Ce && Be && t.texStorage2D(s.TEXTURE_2D, ut, xe, ze[0].width, ze[0].height);
        for (let He = 0, vt = ze.length; He < vt; He++)
          k = ze[He], Ce ? t.texSubImage2D(s.TEXTURE_2D, He, 0, 0, ee, Ee, k) : t.texImage2D(s.TEXTURE_2D, He, xe, ee, Ee, k);
        H.generateMipmaps = !1;
      } else
        Ce ? (Be && t.texStorage2D(s.TEXTURE_2D, ut, xe, Ne.width, Ne.height), t.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, ee, Ee, Ne)) : t.texImage2D(s.TEXTURE_2D, 0, xe, ee, Ee, Ne);
      z(H, rt) && B(Ye), bt.__version = Ze.version, H.onUpdate && H.onUpdate(H);
    }
    X.__version = H.version;
  }
  function nn(X, H, ye) {
    if (H.image.length !== 6)
      return;
    const Ye = ot(X, H), Ve = H.source;
    t.bindTexture(s.TEXTURE_CUBE_MAP, X.__webglTexture, s.TEXTURE0 + ye);
    const Ze = n.get(Ve);
    if (Ve.version !== Ze.__version || Ye === !0) {
      t.activeTexture(s.TEXTURE0 + ye);
      const bt = Hn.getPrimaries(Hn.workingColorSpace), Ke = H.colorSpace === Ea ? null : Hn.getPrimaries(H.colorSpace), Se = H.colorSpace === Ea || bt === Ke ? s.NONE : s.BROWSER_DEFAULT_WEBGL;
      s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, H.flipY), s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, H.premultiplyAlpha), s.pixelStorei(s.UNPACK_ALIGNMENT, H.unpackAlignment), s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL, Se);
      const Ge = H.isCompressedTexture || H.image[0].isCompressedTexture, yt = H.image[0] && H.image[0].isDataTexture, Ne = [];
      for (let He = 0; He < 6; He++)
        !Ge && !yt ? Ne[He] = R(H.image[He], !1, !0, p) : Ne[He] = yt ? H.image[He].image : H.image[He], Ne[He] = rn(H, Ne[He]);
      const rt = Ne[0], ee = U(rt) || f, Ee = o.convert(H.format, H.colorSpace), xe = o.convert(H.type), k = W(H.internalFormat, Ee, xe, H.colorSpace), ze = f && H.isVideoTexture !== !0, Ce = Ze.__version === void 0 || Ye === !0;
      let Be = O(H, rt, ee);
      gt(s.TEXTURE_CUBE_MAP, H, ee);
      let ut;
      if (Ge) {
        ze && Ce && t.texStorage2D(s.TEXTURE_CUBE_MAP, Be, k, rt.width, rt.height);
        for (let He = 0; He < 6; He++) {
          ut = Ne[He].mipmaps;
          for (let vt = 0; vt < ut.length; vt++) {
            const Ut = ut[vt];
            H.format !== Er ? Ee !== null ? ze ? t.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, vt, 0, 0, Ut.width, Ut.height, Ee, Ut.data) : t.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, vt, k, Ut.width, Ut.height, 0, Ut.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : ze ? t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, vt, 0, 0, Ut.width, Ut.height, Ee, xe, Ut.data) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, vt, k, Ut.width, Ut.height, 0, Ee, xe, Ut.data);
          }
        }
      } else {
        ut = H.mipmaps, ze && Ce && (ut.length > 0 && Be++, t.texStorage2D(s.TEXTURE_CUBE_MAP, Be, k, Ne[0].width, Ne[0].height));
        for (let He = 0; He < 6; He++)
          if (yt) {
            ze ? t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, 0, 0, 0, Ne[He].width, Ne[He].height, Ee, xe, Ne[He].data) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, 0, k, Ne[He].width, Ne[He].height, 0, Ee, xe, Ne[He].data);
            for (let vt = 0; vt < ut.length; vt++) {
              const Nt = ut[vt].image[He].image;
              ze ? t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, vt + 1, 0, 0, Nt.width, Nt.height, Ee, xe, Nt.data) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, vt + 1, k, Nt.width, Nt.height, 0, Ee, xe, Nt.data);
            }
          } else {
            ze ? t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, 0, 0, 0, Ee, xe, Ne[He]) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, 0, k, Ee, xe, Ne[He]);
            for (let vt = 0; vt < ut.length; vt++) {
              const Ut = ut[vt];
              ze ? t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, vt + 1, 0, 0, Ee, xe, Ut.image[He]) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + He, vt + 1, k, Ee, xe, Ut.image[He]);
            }
          }
      }
      z(H, ee) && B(s.TEXTURE_CUBE_MAP), Ze.__version = Ve.version, H.onUpdate && H.onUpdate(H);
    }
    X.__version = H.version;
  }
  function Tt(X, H, ye, Ye, Ve, Ze) {
    const bt = o.convert(ye.format, ye.colorSpace), Ke = o.convert(ye.type), Se = W(ye.internalFormat, bt, Ke, ye.colorSpace);
    if (!n.get(H).__hasExternalTextures) {
      const yt = Math.max(1, H.width >> Ze), Ne = Math.max(1, H.height >> Ze);
      Ve === s.TEXTURE_3D || Ve === s.TEXTURE_2D_ARRAY ? t.texImage3D(Ve, Ze, Se, yt, Ne, H.depth, 0, bt, Ke, null) : t.texImage2D(Ve, Ze, Se, yt, Ne, 0, bt, Ke, null);
    }
    t.bindFramebuffer(s.FRAMEBUFFER, X), Dt(H) ? x.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, Ye, Ve, n.get(ye).__webglTexture, 0, at(H)) : (Ve === s.TEXTURE_2D || Ve >= s.TEXTURE_CUBE_MAP_POSITIVE_X && Ve <= s.TEXTURE_CUBE_MAP_NEGATIVE_Z) && s.framebufferTexture2D(s.FRAMEBUFFER, Ye, Ve, n.get(ye).__webglTexture, Ze), t.bindFramebuffer(s.FRAMEBUFFER, null);
  }
  function Q(X, H, ye) {
    if (s.bindRenderbuffer(s.RENDERBUFFER, X), H.depthBuffer && !H.stencilBuffer) {
      let Ye = f === !0 ? s.DEPTH_COMPONENT24 : s.DEPTH_COMPONENT16;
      if (ye || Dt(H)) {
        const Ve = H.depthTexture;
        Ve && Ve.isDepthTexture && (Ve.type === Ta ? Ye = s.DEPTH_COMPONENT32F : Ve.type === Bo && (Ye = s.DEPTH_COMPONENT24));
        const Ze = at(H);
        Dt(H) ? x.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, Ze, Ye, H.width, H.height) : s.renderbufferStorageMultisample(s.RENDERBUFFER, Ze, Ye, H.width, H.height);
      } else
        s.renderbufferStorage(s.RENDERBUFFER, Ye, H.width, H.height);
      s.framebufferRenderbuffer(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.RENDERBUFFER, X);
    } else if (H.depthBuffer && H.stencilBuffer) {
      const Ye = at(H);
      ye && Dt(H) === !1 ? s.renderbufferStorageMultisample(s.RENDERBUFFER, Ye, s.DEPTH24_STENCIL8, H.width, H.height) : Dt(H) ? x.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, Ye, s.DEPTH24_STENCIL8, H.width, H.height) : s.renderbufferStorage(s.RENDERBUFFER, s.DEPTH_STENCIL, H.width, H.height), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.RENDERBUFFER, X);
    } else {
      const Ye = H.isWebGLMultipleRenderTargets === !0 ? H.texture : [H.texture];
      for (let Ve = 0; Ve < Ye.length; Ve++) {
        const Ze = Ye[Ve], bt = o.convert(Ze.format, Ze.colorSpace), Ke = o.convert(Ze.type), Se = W(Ze.internalFormat, bt, Ke, Ze.colorSpace), Ge = at(H);
        ye && Dt(H) === !1 ? s.renderbufferStorageMultisample(s.RENDERBUFFER, Ge, Se, H.width, H.height) : Dt(H) ? x.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, Ge, Se, H.width, H.height) : s.renderbufferStorage(s.RENDERBUFFER, Se, H.width, H.height);
      }
    }
    s.bindRenderbuffer(s.RENDERBUFFER, null);
  }
  function ke(X, H) {
    if (H && H.isWebGLCubeRenderTarget)
      throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(s.FRAMEBUFFER, X), !(H.depthTexture && H.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    (!n.get(H.depthTexture).__webglTexture || H.depthTexture.image.width !== H.width || H.depthTexture.image.height !== H.height) && (H.depthTexture.image.width = H.width, H.depthTexture.image.height = H.height, H.depthTexture.needsUpdate = !0), re(H.depthTexture, 0);
    const Ye = n.get(H.depthTexture).__webglTexture, Ve = at(H);
    if (H.depthTexture.format === Jl)
      Dt(H) ? x.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.TEXTURE_2D, Ye, 0, Ve) : s.framebufferTexture2D(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.TEXTURE_2D, Ye, 0);
    else if (H.depthTexture.format === gc)
      Dt(H) ? x.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.TEXTURE_2D, Ye, 0, Ve) : s.framebufferTexture2D(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.TEXTURE_2D, Ye, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function Re(X) {
    const H = n.get(X), ye = X.isWebGLCubeRenderTarget === !0;
    if (X.depthTexture && !H.__autoAllocateDepthBuffer) {
      if (ye)
        throw new Error("target.depthTexture not supported in Cube render targets");
      ke(H.__webglFramebuffer, X);
    } else if (ye) {
      H.__webglDepthbuffer = [];
      for (let Ye = 0; Ye < 6; Ye++)
        t.bindFramebuffer(s.FRAMEBUFFER, H.__webglFramebuffer[Ye]), H.__webglDepthbuffer[Ye] = s.createRenderbuffer(), Q(H.__webglDepthbuffer[Ye], X, !1);
    } else
      t.bindFramebuffer(s.FRAMEBUFFER, H.__webglFramebuffer), H.__webglDepthbuffer = s.createRenderbuffer(), Q(H.__webglDepthbuffer, X, !1);
    t.bindFramebuffer(s.FRAMEBUFFER, null);
  }
  function Xe(X, H, ye) {
    const Ye = n.get(X);
    H !== void 0 && Tt(Ye.__webglFramebuffer, X, X.texture, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, 0), ye !== void 0 && Re(X);
  }
  function Ue(X) {
    const H = X.texture, ye = n.get(X), Ye = n.get(H);
    X.addEventListener("dispose", ie), X.isWebGLMultipleRenderTargets !== !0 && (Ye.__webglTexture === void 0 && (Ye.__webglTexture = s.createTexture()), Ye.__version = H.version, c.memory.textures++);
    const Ve = X.isWebGLCubeRenderTarget === !0, Ze = X.isWebGLMultipleRenderTargets === !0, bt = U(X) || f;
    if (Ve) {
      ye.__webglFramebuffer = [];
      for (let Ke = 0; Ke < 6; Ke++)
        if (f && H.mipmaps && H.mipmaps.length > 0) {
          ye.__webglFramebuffer[Ke] = [];
          for (let Se = 0; Se < H.mipmaps.length; Se++)
            ye.__webglFramebuffer[Ke][Se] = s.createFramebuffer();
        } else
          ye.__webglFramebuffer[Ke] = s.createFramebuffer();
    } else {
      if (f && H.mipmaps && H.mipmaps.length > 0) {
        ye.__webglFramebuffer = [];
        for (let Ke = 0; Ke < H.mipmaps.length; Ke++)
          ye.__webglFramebuffer[Ke] = s.createFramebuffer();
      } else
        ye.__webglFramebuffer = s.createFramebuffer();
      if (Ze)
        if (r.drawBuffers) {
          const Ke = X.texture;
          for (let Se = 0, Ge = Ke.length; Se < Ge; Se++) {
            const yt = n.get(Ke[Se]);
            yt.__webglTexture === void 0 && (yt.__webglTexture = s.createTexture(), c.memory.textures++);
          }
        } else
          console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
      if (f && X.samples > 0 && Dt(X) === !1) {
        const Ke = Ze ? H : [H];
        ye.__webglMultisampledFramebuffer = s.createFramebuffer(), ye.__webglColorRenderbuffer = [], t.bindFramebuffer(s.FRAMEBUFFER, ye.__webglMultisampledFramebuffer);
        for (let Se = 0; Se < Ke.length; Se++) {
          const Ge = Ke[Se];
          ye.__webglColorRenderbuffer[Se] = s.createRenderbuffer(), s.bindRenderbuffer(s.RENDERBUFFER, ye.__webglColorRenderbuffer[Se]);
          const yt = o.convert(Ge.format, Ge.colorSpace), Ne = o.convert(Ge.type), rt = W(Ge.internalFormat, yt, Ne, Ge.colorSpace, X.isXRRenderTarget === !0), ee = at(X);
          s.renderbufferStorageMultisample(s.RENDERBUFFER, ee, rt, X.width, X.height), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + Se, s.RENDERBUFFER, ye.__webglColorRenderbuffer[Se]);
        }
        s.bindRenderbuffer(s.RENDERBUFFER, null), X.depthBuffer && (ye.__webglDepthRenderbuffer = s.createRenderbuffer(), Q(ye.__webglDepthRenderbuffer, X, !0)), t.bindFramebuffer(s.FRAMEBUFFER, null);
      }
    }
    if (Ve) {
      t.bindTexture(s.TEXTURE_CUBE_MAP, Ye.__webglTexture), gt(s.TEXTURE_CUBE_MAP, H, bt);
      for (let Ke = 0; Ke < 6; Ke++)
        if (f && H.mipmaps && H.mipmaps.length > 0)
          for (let Se = 0; Se < H.mipmaps.length; Se++)
            Tt(ye.__webglFramebuffer[Ke][Se], X, H, s.COLOR_ATTACHMENT0, s.TEXTURE_CUBE_MAP_POSITIVE_X + Ke, Se);
        else
          Tt(ye.__webglFramebuffer[Ke], X, H, s.COLOR_ATTACHMENT0, s.TEXTURE_CUBE_MAP_POSITIVE_X + Ke, 0);
      z(H, bt) && B(s.TEXTURE_CUBE_MAP), t.unbindTexture();
    } else if (Ze) {
      const Ke = X.texture;
      for (let Se = 0, Ge = Ke.length; Se < Ge; Se++) {
        const yt = Ke[Se], Ne = n.get(yt);
        t.bindTexture(s.TEXTURE_2D, Ne.__webglTexture), gt(s.TEXTURE_2D, yt, bt), Tt(ye.__webglFramebuffer, X, yt, s.COLOR_ATTACHMENT0 + Se, s.TEXTURE_2D, 0), z(yt, bt) && B(s.TEXTURE_2D);
      }
      t.unbindTexture();
    } else {
      let Ke = s.TEXTURE_2D;
      if ((X.isWebGL3DRenderTarget || X.isWebGLArrayRenderTarget) && (f ? Ke = X.isWebGL3DRenderTarget ? s.TEXTURE_3D : s.TEXTURE_2D_ARRAY : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), t.bindTexture(Ke, Ye.__webglTexture), gt(Ke, H, bt), f && H.mipmaps && H.mipmaps.length > 0)
        for (let Se = 0; Se < H.mipmaps.length; Se++)
          Tt(ye.__webglFramebuffer[Se], X, H, s.COLOR_ATTACHMENT0, Ke, Se);
      else
        Tt(ye.__webglFramebuffer, X, H, s.COLOR_ATTACHMENT0, Ke, 0);
      z(H, bt) && B(Ke), t.unbindTexture();
    }
    X.depthBuffer && Re(X);
  }
  function Mt(X) {
    const H = U(X) || f, ye = X.isWebGLMultipleRenderTargets === !0 ? X.texture : [X.texture];
    for (let Ye = 0, Ve = ye.length; Ye < Ve; Ye++) {
      const Ze = ye[Ye];
      if (z(Ze, H)) {
        const bt = X.isWebGLCubeRenderTarget ? s.TEXTURE_CUBE_MAP : s.TEXTURE_2D, Ke = n.get(Ze).__webglTexture;
        t.bindTexture(bt, Ke), B(bt), t.unbindTexture();
      }
    }
  }
  function lt(X) {
    if (f && X.samples > 0 && Dt(X) === !1) {
      const H = X.isWebGLMultipleRenderTargets ? X.texture : [X.texture], ye = X.width, Ye = X.height;
      let Ve = s.COLOR_BUFFER_BIT;
      const Ze = [], bt = X.stencilBuffer ? s.DEPTH_STENCIL_ATTACHMENT : s.DEPTH_ATTACHMENT, Ke = n.get(X), Se = X.isWebGLMultipleRenderTargets === !0;
      if (Se)
        for (let Ge = 0; Ge < H.length; Ge++)
          t.bindFramebuffer(s.FRAMEBUFFER, Ke.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + Ge, s.RENDERBUFFER, null), t.bindFramebuffer(s.FRAMEBUFFER, Ke.__webglFramebuffer), s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0 + Ge, s.TEXTURE_2D, null, 0);
      t.bindFramebuffer(s.READ_FRAMEBUFFER, Ke.__webglMultisampledFramebuffer), t.bindFramebuffer(s.DRAW_FRAMEBUFFER, Ke.__webglFramebuffer);
      for (let Ge = 0; Ge < H.length; Ge++) {
        Ze.push(s.COLOR_ATTACHMENT0 + Ge), X.depthBuffer && Ze.push(bt);
        const yt = Ke.__ignoreDepthValues !== void 0 ? Ke.__ignoreDepthValues : !1;
        if (yt === !1 && (X.depthBuffer && (Ve |= s.DEPTH_BUFFER_BIT), X.stencilBuffer && (Ve |= s.STENCIL_BUFFER_BIT)), Se && s.framebufferRenderbuffer(s.READ_FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.RENDERBUFFER, Ke.__webglColorRenderbuffer[Ge]), yt === !0 && (s.invalidateFramebuffer(s.READ_FRAMEBUFFER, [bt]), s.invalidateFramebuffer(s.DRAW_FRAMEBUFFER, [bt])), Se) {
          const Ne = n.get(H[Ge]).__webglTexture;
          s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, Ne, 0);
        }
        s.blitFramebuffer(0, 0, ye, Ye, 0, 0, ye, Ye, Ve, s.NEAREST), M && s.invalidateFramebuffer(s.READ_FRAMEBUFFER, Ze);
      }
      if (t.bindFramebuffer(s.READ_FRAMEBUFFER, null), t.bindFramebuffer(s.DRAW_FRAMEBUFFER, null), Se)
        for (let Ge = 0; Ge < H.length; Ge++) {
          t.bindFramebuffer(s.FRAMEBUFFER, Ke.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + Ge, s.RENDERBUFFER, Ke.__webglColorRenderbuffer[Ge]);
          const yt = n.get(H[Ge]).__webglTexture;
          t.bindFramebuffer(s.FRAMEBUFFER, Ke.__webglFramebuffer), s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0 + Ge, s.TEXTURE_2D, yt, 0);
        }
      t.bindFramebuffer(s.DRAW_FRAMEBUFFER, Ke.__webglMultisampledFramebuffer);
    }
  }
  function at(X) {
    return Math.min(y, X.samples);
  }
  function Dt(X) {
    const H = n.get(X);
    return f && X.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && H.__useRenderToTexture !== !1;
  }
  function Zt(X) {
    const H = c.render.frame;
    T.get(X) !== H && (T.set(X, H), X.update());
  }
  function rn(X, H) {
    const ye = X.colorSpace, Ye = X.format, Ve = X.type;
    return X.isCompressedTexture === !0 || X.isVideoTexture === !0 || X.format === Lg || ye !== Ks && ye !== Ea && (Hn.getTransfer(ye) === Zn ? f === !1 ? e.has("EXT_sRGB") === !0 && Ye === Er ? (X.format = Lg, X.minFilter = hi, X.generateMipmaps = !1) : H = bS.sRGBToLinear(H) : (Ye !== Er || Ve !== Zs) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", ye)), H;
  }
  this.allocateTextureUnit = ne, this.resetTextureUnits = Me, this.setTexture2D = re, this.setTexture2DArray = J, this.setTexture3D = ue, this.setTextureCube = Pe, this.rebindTextures = Xe, this.setupRenderTarget = Ue, this.updateRenderTargetMipmap = Mt, this.updateMultisampleRenderTarget = lt, this.setupDepthRenderbuffer = Re, this.setupFrameBufferTexture = Tt, this.useMultisampledRTT = Dt;
}
function cA(s, e, t) {
  const n = t.isWebGL2;
  function r(o, c = Ea) {
    let f;
    const h = Hn.getTransfer(c);
    if (o === Zs)
      return s.UNSIGNED_BYTE;
    if (o === gS)
      return s.UNSIGNED_SHORT_4_4_4_4;
    if (o === yS)
      return s.UNSIGNED_SHORT_5_5_5_1;
    if (o === bw)
      return s.BYTE;
    if (o === ww)
      return s.SHORT;
    if (o === zg)
      return s.UNSIGNED_SHORT;
    if (o === vS)
      return s.INT;
    if (o === Bo)
      return s.UNSIGNED_INT;
    if (o === Ta)
      return s.FLOAT;
    if (o === vc)
      return n ? s.HALF_FLOAT : (f = e.get("OES_texture_half_float"), f !== null ? f.HALF_FLOAT_OES : null);
    if (o === Aw)
      return s.ALPHA;
    if (o === Er)
      return s.RGBA;
    if (o === Rw)
      return s.LUMINANCE;
    if (o === Cw)
      return s.LUMINANCE_ALPHA;
    if (o === Jl)
      return s.DEPTH_COMPONENT;
    if (o === gc)
      return s.DEPTH_STENCIL;
    if (o === Lg)
      return f = e.get("EXT_sRGB"), f !== null ? f.SRGB_ALPHA_EXT : null;
    if (o === Lw)
      return s.RED;
    if (o === _S)
      return s.RED_INTEGER;
    if (o === Pw)
      return s.RG;
    if (o === xS)
      return s.RG_INTEGER;
    if (o === SS)
      return s.RGBA_INTEGER;
    if (o === yg || o === _g || o === xg || o === Sg)
      if (h === Zn)
        if (f = e.get("WEBGL_compressed_texture_s3tc_srgb"), f !== null) {
          if (o === yg)
            return f.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (o === _g)
            return f.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (o === xg)
            return f.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (o === Sg)
            return f.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (f = e.get("WEBGL_compressed_texture_s3tc"), f !== null) {
        if (o === yg)
          return f.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (o === _g)
          return f.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (o === xg)
          return f.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (o === Sg)
          return f.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (o === Tx || o === bx || o === wx || o === Ax)
      if (f = e.get("WEBGL_compressed_texture_pvrtc"), f !== null) {
        if (o === Tx)
          return f.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (o === bx)
          return f.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (o === wx)
          return f.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (o === Ax)
          return f.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (o === Dw)
      return f = e.get("WEBGL_compressed_texture_etc1"), f !== null ? f.COMPRESSED_RGB_ETC1_WEBGL : null;
    if (o === Rx || o === Cx)
      if (f = e.get("WEBGL_compressed_texture_etc"), f !== null) {
        if (o === Rx)
          return h === Zn ? f.COMPRESSED_SRGB8_ETC2 : f.COMPRESSED_RGB8_ETC2;
        if (o === Cx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : f.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (o === Lx || o === Px || o === Dx || o === Ux || o === Nx || o === Ox || o === Ix || o === Fx || o === zx || o === Bx || o === Hx || o === Vx || o === kx || o === Gx)
      if (f = e.get("WEBGL_compressed_texture_astc"), f !== null) {
        if (o === Lx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : f.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (o === Px)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : f.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (o === Dx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : f.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (o === Ux)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : f.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (o === Nx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : f.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (o === Ox)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : f.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (o === Ix)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : f.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (o === Fx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : f.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (o === zx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : f.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (o === Bx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : f.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (o === Hx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : f.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (o === Vx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : f.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (o === kx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : f.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (o === Gx)
          return h === Zn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : f.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (o === Mg || o === Wx || o === Xx)
      if (f = e.get("EXT_texture_compression_bptc"), f !== null) {
        if (o === Mg)
          return h === Zn ? f.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : f.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (o === Wx)
          return f.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (o === Xx)
          return f.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (o === Uw || o === Yx || o === jx || o === qx)
      if (f = e.get("EXT_texture_compression_rgtc"), f !== null) {
        if (o === Mg)
          return f.COMPRESSED_RED_RGTC1_EXT;
        if (o === Yx)
          return f.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (o === jx)
          return f.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (o === qx)
          return f.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return o === Zl ? n ? s.UNSIGNED_INT_24_8 : (f = e.get("WEBGL_depth_texture"), f !== null ? f.UNSIGNED_INT_24_8_WEBGL : null) : s[o] !== void 0 ? s[o] : null;
  }
  return { convert: r };
}
class fA extends Ri {
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.cameras = e;
  }
}
class ud extends Cn {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const tI = { type: "move" };
class Y_ {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new ud(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new ud(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new Y(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new Y()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new ud(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new Y(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new Y()), this._grip;
  }
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const n of e.hand.values())
          this._getHandJoint(t, n);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  update(e, t, n) {
    let r = null, o = null, c = null;
    const f = this._targetRay, h = this._grip, p = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (p && e.hand) {
        c = !0;
        for (const C of e.hand.values()) {
          const w = t.getJointPose(C, n), E = this._getHandJoint(p, C);
          w !== null && (E.matrix.fromArray(w.transform.matrix), E.matrix.decompose(E.position, E.rotation, E.scale), E.matrixWorldNeedsUpdate = !0, E.jointRadius = w.radius), E.visible = w !== null;
        }
        const v = p.joints["index-finger-tip"], y = p.joints["thumb-tip"], x = v.position.distanceTo(y.position), M = 0.02, T = 5e-3;
        p.inputState.pinching && x > M + T ? (p.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !p.inputState.pinching && x <= M - T && (p.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        h !== null && e.gripSpace && (o = t.getPose(e.gripSpace, n), o !== null && (h.matrix.fromArray(o.transform.matrix), h.matrix.decompose(h.position, h.rotation, h.scale), h.matrixWorldNeedsUpdate = !0, o.linearVelocity ? (h.hasLinearVelocity = !0, h.linearVelocity.copy(o.linearVelocity)) : h.hasLinearVelocity = !1, o.angularVelocity ? (h.hasAngularVelocity = !0, h.angularVelocity.copy(o.angularVelocity)) : h.hasAngularVelocity = !1));
      f !== null && (r = t.getPose(e.targetRaySpace, n), r === null && o !== null && (r = o), r !== null && (f.matrix.fromArray(r.transform.matrix), f.matrix.decompose(f.position, f.rotation, f.scale), f.matrixWorldNeedsUpdate = !0, r.linearVelocity ? (f.hasLinearVelocity = !0, f.linearVelocity.copy(r.linearVelocity)) : f.hasLinearVelocity = !1, r.angularVelocity ? (f.hasAngularVelocity = !0, f.angularVelocity.copy(r.angularVelocity)) : f.hasAngularVelocity = !1, this.dispatchEvent(tI)));
    }
    return f !== null && (f.visible = r !== null), h !== null && (h.visible = o !== null), p !== null && (p.visible = c !== null), this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new ud();
      n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
    }
    return e.joints[t.jointName];
  }
}
class DS extends Ci {
  constructor(e, t, n, r, o, c, f, h, p, v) {
    if (v = v !== void 0 ? v : Jl, v !== Jl && v !== gc)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && v === Jl && (n = Bo), n === void 0 && v === gc && (n = Zl), super(null, r, o, c, f, h, v, n, p), this.isDepthTexture = !0, this.image = { width: e, height: t }, this.magFilter = f !== void 0 ? f : di, this.minFilter = h !== void 0 ? h : di, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(e) {
    return super.copy(e), this.compareFunction = e.compareFunction, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
  }
}
class nI extends Xo {
  constructor(e, t) {
    super();
    const n = this;
    let r = null, o = 1, c = null, f = "local-floor", h = 1, p = null, v = null, y = null, x = null, M = null, T = null;
    const C = t.getContextAttributes();
    let w = null, E = null;
    const L = [], R = [], U = new Ri();
    U.layers.enable(1), U.viewport = new Vn();
    const F = new Ri();
    F.layers.enable(2), F.viewport = new Vn();
    const z = [U, F], B = new fA();
    B.layers.enable(1), B.layers.enable(2);
    let W = null, O = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(J) {
      let ue = L[J];
      return ue === void 0 && (ue = new Y_(), L[J] = ue), ue.getTargetRaySpace();
    }, this.getControllerGrip = function(J) {
      let ue = L[J];
      return ue === void 0 && (ue = new Y_(), L[J] = ue), ue.getGripSpace();
    }, this.getHand = function(J) {
      let ue = L[J];
      return ue === void 0 && (ue = new Y_(), L[J] = ue), ue.getHandSpace();
    };
    function I(J) {
      const ue = R.indexOf(J.inputSource);
      if (ue === -1)
        return;
      const Pe = L[ue];
      Pe !== void 0 && (Pe.update(J.inputSource, J.frame, p || c), Pe.dispatchEvent({ type: J.type, data: J.inputSource }));
    }
    function Z() {
      r.removeEventListener("select", I), r.removeEventListener("selectstart", I), r.removeEventListener("selectend", I), r.removeEventListener("squeeze", I), r.removeEventListener("squeezestart", I), r.removeEventListener("squeezeend", I), r.removeEventListener("end", Z), r.removeEventListener("inputsourceschange", ie);
      for (let J = 0; J < L.length; J++) {
        const ue = R[J];
        ue !== null && (R[J] = null, L[J].disconnect(ue));
      }
      W = null, O = null, e.setRenderTarget(w), M = null, x = null, y = null, r = null, E = null, re.stop(), n.isPresenting = !1, n.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(J) {
      o = J, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(J) {
      f = J, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return p || c;
    }, this.setReferenceSpace = function(J) {
      p = J;
    }, this.getBaseLayer = function() {
      return x !== null ? x : M;
    }, this.getBinding = function() {
      return y;
    }, this.getFrame = function() {
      return T;
    }, this.getSession = function() {
      return r;
    }, this.setSession = async function(J) {
      if (r = J, r !== null) {
        if (w = e.getRenderTarget(), r.addEventListener("select", I), r.addEventListener("selectstart", I), r.addEventListener("selectend", I), r.addEventListener("squeeze", I), r.addEventListener("squeezestart", I), r.addEventListener("squeezeend", I), r.addEventListener("end", Z), r.addEventListener("inputsourceschange", ie), C.xrCompatible !== !0 && await t.makeXRCompatible(), r.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1) {
          const ue = {
            antialias: r.renderState.layers === void 0 ? C.antialias : !0,
            alpha: !0,
            depth: C.depth,
            stencil: C.stencil,
            framebufferScaleFactor: o
          };
          M = new XRWebGLLayer(r, t, ue), r.updateRenderState({ baseLayer: M }), E = new Za(
            M.framebufferWidth,
            M.framebufferHeight,
            {
              format: Er,
              type: Zs,
              colorSpace: e.outputColorSpace,
              stencilBuffer: C.stencil
            }
          );
        } else {
          let ue = null, Pe = null, qe = null;
          C.depth && (qe = C.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, ue = C.stencil ? gc : Jl, Pe = C.stencil ? Zl : Bo);
          const $e = {
            colorFormat: t.RGBA8,
            depthFormat: qe,
            scaleFactor: o
          };
          y = new XRWebGLBinding(r, t), x = y.createProjectionLayer($e), r.updateRenderState({ layers: [x] }), E = new Za(
            x.textureWidth,
            x.textureHeight,
            {
              format: Er,
              type: Zs,
              depthTexture: new DS(x.textureWidth, x.textureHeight, Pe, void 0, void 0, void 0, void 0, void 0, void 0, ue),
              stencilBuffer: C.stencil,
              colorSpace: e.outputColorSpace,
              samples: C.antialias ? 4 : 0
            }
          );
          const it = e.properties.get(E);
          it.__ignoreDepthValues = x.ignoreDepthValues;
        }
        E.isXRRenderTarget = !0, this.setFoveation(h), p = null, c = await r.requestReferenceSpace(f), re.setContext(r), re.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (r !== null)
        return r.environmentBlendMode;
    };
    function ie(J) {
      for (let ue = 0; ue < J.removed.length; ue++) {
        const Pe = J.removed[ue], qe = R.indexOf(Pe);
        qe >= 0 && (R[qe] = null, L[qe].disconnect(Pe));
      }
      for (let ue = 0; ue < J.added.length; ue++) {
        const Pe = J.added[ue];
        let qe = R.indexOf(Pe);
        if (qe === -1) {
          for (let it = 0; it < L.length; it++)
            if (it >= R.length) {
              R.push(Pe), qe = it;
              break;
            } else if (R[it] === null) {
              R[it] = Pe, qe = it;
              break;
            }
          if (qe === -1)
            break;
        }
        const $e = L[qe];
        $e && $e.connect(Pe);
      }
    }
    const fe = new Y(), K = new Y();
    function he(J, ue, Pe) {
      fe.setFromMatrixPosition(ue.matrixWorld), K.setFromMatrixPosition(Pe.matrixWorld);
      const qe = fe.distanceTo(K), $e = ue.projectionMatrix.elements, it = Pe.projectionMatrix.elements, gt = $e[14] / ($e[10] - 1), ot = $e[14] / ($e[10] + 1), Vt = ($e[9] + 1) / $e[5], nn = ($e[9] - 1) / $e[5], Tt = ($e[8] - 1) / $e[0], Q = (it[8] + 1) / it[0], ke = gt * Tt, Re = gt * Q, Xe = qe / (-Tt + Q), Ue = Xe * -Tt;
      ue.matrixWorld.decompose(J.position, J.quaternion, J.scale), J.translateX(Ue), J.translateZ(Xe), J.matrixWorld.compose(J.position, J.quaternion, J.scale), J.matrixWorldInverse.copy(J.matrixWorld).invert();
      const Mt = gt + Xe, lt = ot + Xe, at = ke - Ue, Dt = Re + (qe - Ue), Zt = Vt * ot / lt * Mt, rn = nn * ot / lt * Mt;
      J.projectionMatrix.makePerspective(at, Dt, Zt, rn, Mt, lt), J.projectionMatrixInverse.copy(J.projectionMatrix).invert();
    }
    function Te(J, ue) {
      ue === null ? J.matrixWorld.copy(J.matrix) : J.matrixWorld.multiplyMatrices(ue.matrixWorld, J.matrix), J.matrixWorldInverse.copy(J.matrixWorld).invert();
    }
    this.updateCamera = function(J) {
      if (r === null)
        return;
      B.near = F.near = U.near = J.near, B.far = F.far = U.far = J.far, (W !== B.near || O !== B.far) && (r.updateRenderState({
        depthNear: B.near,
        depthFar: B.far
      }), W = B.near, O = B.far);
      const ue = J.parent, Pe = B.cameras;
      Te(B, ue);
      for (let qe = 0; qe < Pe.length; qe++)
        Te(Pe[qe], ue);
      Pe.length === 2 ? he(B, U, F) : B.projectionMatrix.copy(U.projectionMatrix), Me(J, B, ue);
    };
    function Me(J, ue, Pe) {
      Pe === null ? J.matrix.copy(ue.matrixWorld) : (J.matrix.copy(Pe.matrixWorld), J.matrix.invert(), J.matrix.multiply(ue.matrixWorld)), J.matrix.decompose(J.position, J.quaternion, J.scale), J.updateMatrixWorld(!0), J.projectionMatrix.copy(ue.projectionMatrix), J.projectionMatrixInverse.copy(ue.projectionMatrixInverse), J.isPerspectiveCamera && (J.fov = hd * 2 * Math.atan(1 / J.projectionMatrix.elements[5]), J.zoom = 1);
    }
    this.getCamera = function() {
      return B;
    }, this.getFoveation = function() {
      if (!(x === null && M === null))
        return h;
    }, this.setFoveation = function(J) {
      h = J, x !== null && (x.fixedFoveation = J), M !== null && M.fixedFoveation !== void 0 && (M.fixedFoveation = J);
    };
    let ne = null;
    function le(J, ue) {
      if (v = ue.getViewerPose(p || c), T = ue, v !== null) {
        const Pe = v.views;
        M !== null && (e.setRenderTargetFramebuffer(E, M.framebuffer), e.setRenderTarget(E));
        let qe = !1;
        Pe.length !== B.cameras.length && (B.cameras.length = 0, qe = !0);
        for (let $e = 0; $e < Pe.length; $e++) {
          const it = Pe[$e];
          let gt = null;
          if (M !== null)
            gt = M.getViewport(it);
          else {
            const Vt = y.getViewSubImage(x, it);
            gt = Vt.viewport, $e === 0 && (e.setRenderTargetTextures(
              E,
              Vt.colorTexture,
              x.ignoreDepthValues ? void 0 : Vt.depthStencilTexture
            ), e.setRenderTarget(E));
          }
          let ot = z[$e];
          ot === void 0 && (ot = new Ri(), ot.layers.enable($e), ot.viewport = new Vn(), z[$e] = ot), ot.matrix.fromArray(it.transform.matrix), ot.matrix.decompose(ot.position, ot.quaternion, ot.scale), ot.projectionMatrix.fromArray(it.projectionMatrix), ot.projectionMatrixInverse.copy(ot.projectionMatrix).invert(), ot.viewport.set(gt.x, gt.y, gt.width, gt.height), $e === 0 && (B.matrix.copy(ot.matrix), B.matrix.decompose(B.position, B.quaternion, B.scale)), qe === !0 && B.cameras.push(ot);
        }
      }
      for (let Pe = 0; Pe < L.length; Pe++) {
        const qe = R[Pe], $e = L[Pe];
        qe !== null && $e !== void 0 && $e.update(qe, ue, p || c);
      }
      ne && ne(J, ue), ue.detectedPlanes && n.dispatchEvent({ type: "planesdetected", data: ue }), T = null;
    }
    const re = new aA();
    re.setAnimationLoop(le), this.setAnimationLoop = function(J) {
      ne = J;
    }, this.dispose = function() {
    };
  }
}
function iI(s, e) {
  function t(w, E) {
    w.matrixAutoUpdate === !0 && w.updateMatrix(), E.value.copy(w.matrix);
  }
  function n(w, E) {
    E.color.getRGB(w.fogColor.value, tA(s)), E.isFog ? (w.fogNear.value = E.near, w.fogFar.value = E.far) : E.isFogExp2 && (w.fogDensity.value = E.density);
  }
  function r(w, E, L, R, U) {
    E.isMeshBasicMaterial || E.isMeshLambertMaterial ? o(w, E) : E.isMeshToonMaterial ? (o(w, E), y(w, E)) : E.isMeshPhongMaterial ? (o(w, E), v(w, E)) : E.isMeshStandardMaterial ? (o(w, E), x(w, E), E.isMeshPhysicalMaterial && M(w, E, U)) : E.isMeshMatcapMaterial ? (o(w, E), T(w, E)) : E.isMeshDepthMaterial ? o(w, E) : E.isMeshDistanceMaterial ? (o(w, E), C(w, E)) : E.isMeshNormalMaterial ? o(w, E) : E.isLineBasicMaterial ? (c(w, E), E.isLineDashedMaterial && f(w, E)) : E.isPointsMaterial ? h(w, E, L, R) : E.isSpriteMaterial ? p(w, E) : E.isShadowMaterial ? (w.color.value.copy(E.color), w.opacity.value = E.opacity) : E.isShaderMaterial && (E.uniformsNeedUpdate = !1);
  }
  function o(w, E) {
    w.opacity.value = E.opacity, E.color && w.diffuse.value.copy(E.color), E.emissive && w.emissive.value.copy(E.emissive).multiplyScalar(E.emissiveIntensity), E.map && (w.map.value = E.map, t(E.map, w.mapTransform)), E.alphaMap && (w.alphaMap.value = E.alphaMap, t(E.alphaMap, w.alphaMapTransform)), E.bumpMap && (w.bumpMap.value = E.bumpMap, t(E.bumpMap, w.bumpMapTransform), w.bumpScale.value = E.bumpScale, E.side === Fr && (w.bumpScale.value *= -1)), E.normalMap && (w.normalMap.value = E.normalMap, t(E.normalMap, w.normalMapTransform), w.normalScale.value.copy(E.normalScale), E.side === Fr && w.normalScale.value.negate()), E.displacementMap && (w.displacementMap.value = E.displacementMap, t(E.displacementMap, w.displacementMapTransform), w.displacementScale.value = E.displacementScale, w.displacementBias.value = E.displacementBias), E.emissiveMap && (w.emissiveMap.value = E.emissiveMap, t(E.emissiveMap, w.emissiveMapTransform)), E.specularMap && (w.specularMap.value = E.specularMap, t(E.specularMap, w.specularMapTransform)), E.alphaTest > 0 && (w.alphaTest.value = E.alphaTest);
    const L = e.get(E).envMap;
    if (L && (w.envMap.value = L, w.flipEnvMap.value = L.isCubeTexture && L.isRenderTargetTexture === !1 ? -1 : 1, w.reflectivity.value = E.reflectivity, w.ior.value = E.ior, w.refractionRatio.value = E.refractionRatio), E.lightMap) {
      w.lightMap.value = E.lightMap;
      const R = s._useLegacyLights === !0 ? Math.PI : 1;
      w.lightMapIntensity.value = E.lightMapIntensity * R, t(E.lightMap, w.lightMapTransform);
    }
    E.aoMap && (w.aoMap.value = E.aoMap, w.aoMapIntensity.value = E.aoMapIntensity, t(E.aoMap, w.aoMapTransform));
  }
  function c(w, E) {
    w.diffuse.value.copy(E.color), w.opacity.value = E.opacity, E.map && (w.map.value = E.map, t(E.map, w.mapTransform));
  }
  function f(w, E) {
    w.dashSize.value = E.dashSize, w.totalSize.value = E.dashSize + E.gapSize, w.scale.value = E.scale;
  }
  function h(w, E, L, R) {
    w.diffuse.value.copy(E.color), w.opacity.value = E.opacity, w.size.value = E.size * L, w.scale.value = R * 0.5, E.map && (w.map.value = E.map, t(E.map, w.uvTransform)), E.alphaMap && (w.alphaMap.value = E.alphaMap, t(E.alphaMap, w.alphaMapTransform)), E.alphaTest > 0 && (w.alphaTest.value = E.alphaTest);
  }
  function p(w, E) {
    w.diffuse.value.copy(E.color), w.opacity.value = E.opacity, w.rotation.value = E.rotation, E.map && (w.map.value = E.map, t(E.map, w.mapTransform)), E.alphaMap && (w.alphaMap.value = E.alphaMap, t(E.alphaMap, w.alphaMapTransform)), E.alphaTest > 0 && (w.alphaTest.value = E.alphaTest);
  }
  function v(w, E) {
    w.specular.value.copy(E.specular), w.shininess.value = Math.max(E.shininess, 1e-4);
  }
  function y(w, E) {
    E.gradientMap && (w.gradientMap.value = E.gradientMap);
  }
  function x(w, E) {
    w.metalness.value = E.metalness, E.metalnessMap && (w.metalnessMap.value = E.metalnessMap, t(E.metalnessMap, w.metalnessMapTransform)), w.roughness.value = E.roughness, E.roughnessMap && (w.roughnessMap.value = E.roughnessMap, t(E.roughnessMap, w.roughnessMapTransform)), e.get(E).envMap && (w.envMapIntensity.value = E.envMapIntensity);
  }
  function M(w, E, L) {
    w.ior.value = E.ior, E.sheen > 0 && (w.sheenColor.value.copy(E.sheenColor).multiplyScalar(E.sheen), w.sheenRoughness.value = E.sheenRoughness, E.sheenColorMap && (w.sheenColorMap.value = E.sheenColorMap, t(E.sheenColorMap, w.sheenColorMapTransform)), E.sheenRoughnessMap && (w.sheenRoughnessMap.value = E.sheenRoughnessMap, t(E.sheenRoughnessMap, w.sheenRoughnessMapTransform))), E.clearcoat > 0 && (w.clearcoat.value = E.clearcoat, w.clearcoatRoughness.value = E.clearcoatRoughness, E.clearcoatMap && (w.clearcoatMap.value = E.clearcoatMap, t(E.clearcoatMap, w.clearcoatMapTransform)), E.clearcoatRoughnessMap && (w.clearcoatRoughnessMap.value = E.clearcoatRoughnessMap, t(E.clearcoatRoughnessMap, w.clearcoatRoughnessMapTransform)), E.clearcoatNormalMap && (w.clearcoatNormalMap.value = E.clearcoatNormalMap, t(E.clearcoatNormalMap, w.clearcoatNormalMapTransform), w.clearcoatNormalScale.value.copy(E.clearcoatNormalScale), E.side === Fr && w.clearcoatNormalScale.value.negate())), E.iridescence > 0 && (w.iridescence.value = E.iridescence, w.iridescenceIOR.value = E.iridescenceIOR, w.iridescenceThicknessMinimum.value = E.iridescenceThicknessRange[0], w.iridescenceThicknessMaximum.value = E.iridescenceThicknessRange[1], E.iridescenceMap && (w.iridescenceMap.value = E.iridescenceMap, t(E.iridescenceMap, w.iridescenceMapTransform)), E.iridescenceThicknessMap && (w.iridescenceThicknessMap.value = E.iridescenceThicknessMap, t(E.iridescenceThicknessMap, w.iridescenceThicknessMapTransform))), E.transmission > 0 && (w.transmission.value = E.transmission, w.transmissionSamplerMap.value = L.texture, w.transmissionSamplerSize.value.set(L.width, L.height), E.transmissionMap && (w.transmissionMap.value = E.transmissionMap, t(E.transmissionMap, w.transmissionMapTransform)), w.thickness.value = E.thickness, E.thicknessMap && (w.thicknessMap.value = E.thicknessMap, t(E.thicknessMap, w.thicknessMapTransform)), w.attenuationDistance.value = E.attenuationDistance, w.attenuationColor.value.copy(E.attenuationColor)), E.anisotropy > 0 && (w.anisotropyVector.value.set(E.anisotropy * Math.cos(E.anisotropyRotation), E.anisotropy * Math.sin(E.anisotropyRotation)), E.anisotropyMap && (w.anisotropyMap.value = E.anisotropyMap, t(E.anisotropyMap, w.anisotropyMapTransform))), w.specularIntensity.value = E.specularIntensity, w.specularColor.value.copy(E.specularColor), E.specularColorMap && (w.specularColorMap.value = E.specularColorMap, t(E.specularColorMap, w.specularColorMapTransform)), E.specularIntensityMap && (w.specularIntensityMap.value = E.specularIntensityMap, t(E.specularIntensityMap, w.specularIntensityMapTransform));
  }
  function T(w, E) {
    E.matcap && (w.matcap.value = E.matcap);
  }
  function C(w, E) {
    const L = e.get(E).light;
    w.referencePosition.value.setFromMatrixPosition(L.matrixWorld), w.nearDistance.value = L.shadow.camera.near, w.farDistance.value = L.shadow.camera.far;
  }
  return {
    refreshFogUniforms: n,
    refreshMaterialUniforms: r
  };
}
function rI(s, e, t, n) {
  let r = {}, o = {}, c = [];
  const f = t.isWebGL2 ? s.getParameter(s.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
  function h(L, R) {
    const U = R.program;
    n.uniformBlockBinding(L, U);
  }
  function p(L, R) {
    let U = r[L.id];
    U === void 0 && (T(L), U = v(L), r[L.id] = U, L.addEventListener("dispose", w));
    const F = R.program;
    n.updateUBOMapping(L, F);
    const z = e.render.frame;
    o[L.id] !== z && (x(L), o[L.id] = z);
  }
  function v(L) {
    const R = y();
    L.__bindingPointIndex = R;
    const U = s.createBuffer(), F = L.__size, z = L.usage;
    return s.bindBuffer(s.UNIFORM_BUFFER, U), s.bufferData(s.UNIFORM_BUFFER, F, z), s.bindBuffer(s.UNIFORM_BUFFER, null), s.bindBufferBase(s.UNIFORM_BUFFER, R, U), U;
  }
  function y() {
    for (let L = 0; L < f; L++)
      if (c.indexOf(L) === -1)
        return c.push(L), L;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function x(L) {
    const R = r[L.id], U = L.uniforms, F = L.__cache;
    s.bindBuffer(s.UNIFORM_BUFFER, R);
    for (let z = 0, B = U.length; z < B; z++) {
      const W = U[z];
      if (M(W, z, F) === !0) {
        const O = W.__offset, I = Array.isArray(W.value) ? W.value : [W.value];
        let Z = 0;
        for (let ie = 0; ie < I.length; ie++) {
          const fe = I[ie], K = C(fe);
          typeof fe == "number" ? (W.__data[0] = fe, s.bufferSubData(s.UNIFORM_BUFFER, O + Z, W.__data)) : fe.isMatrix3 ? (W.__data[0] = fe.elements[0], W.__data[1] = fe.elements[1], W.__data[2] = fe.elements[2], W.__data[3] = fe.elements[0], W.__data[4] = fe.elements[3], W.__data[5] = fe.elements[4], W.__data[6] = fe.elements[5], W.__data[7] = fe.elements[0], W.__data[8] = fe.elements[6], W.__data[9] = fe.elements[7], W.__data[10] = fe.elements[8], W.__data[11] = fe.elements[0]) : (fe.toArray(W.__data, Z), Z += K.storage / Float32Array.BYTES_PER_ELEMENT);
        }
        s.bufferSubData(s.UNIFORM_BUFFER, O, W.__data);
      }
    }
    s.bindBuffer(s.UNIFORM_BUFFER, null);
  }
  function M(L, R, U) {
    const F = L.value;
    if (U[R] === void 0) {
      if (typeof F == "number")
        U[R] = F;
      else {
        const z = Array.isArray(F) ? F : [F], B = [];
        for (let W = 0; W < z.length; W++)
          B.push(z[W].clone());
        U[R] = B;
      }
      return !0;
    } else if (typeof F == "number") {
      if (U[R] !== F)
        return U[R] = F, !0;
    } else {
      const z = Array.isArray(U[R]) ? U[R] : [U[R]], B = Array.isArray(F) ? F : [F];
      for (let W = 0; W < z.length; W++) {
        const O = z[W];
        if (O.equals(B[W]) === !1)
          return O.copy(B[W]), !0;
      }
    }
    return !1;
  }
  function T(L) {
    const R = L.uniforms;
    let U = 0;
    const F = 16;
    let z = 0;
    for (let B = 0, W = R.length; B < W; B++) {
      const O = R[B], I = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      }, Z = Array.isArray(O.value) ? O.value : [O.value];
      for (let ie = 0, fe = Z.length; ie < fe; ie++) {
        const K = Z[ie], he = C(K);
        I.boundary += he.boundary, I.storage += he.storage;
      }
      if (O.__data = new Float32Array(I.storage / Float32Array.BYTES_PER_ELEMENT), O.__offset = U, B > 0) {
        z = U % F;
        const ie = F - z;
        z !== 0 && ie - I.boundary < 0 && (U += F - z, O.__offset = U);
      }
      U += I.storage;
    }
    return z = U % F, z > 0 && (U += F - z), L.__size = U, L.__cache = {}, this;
  }
  function C(L) {
    const R = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof L == "number" ? (R.boundary = 4, R.storage = 4) : L.isVector2 ? (R.boundary = 8, R.storage = 8) : L.isVector3 || L.isColor ? (R.boundary = 16, R.storage = 12) : L.isVector4 ? (R.boundary = 16, R.storage = 16) : L.isMatrix3 ? (R.boundary = 48, R.storage = 48) : L.isMatrix4 ? (R.boundary = 64, R.storage = 64) : L.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", L), R;
  }
  function w(L) {
    const R = L.target;
    R.removeEventListener("dispose", w);
    const U = c.indexOf(R.__bindingPointIndex);
    c.splice(U, 1), s.deleteBuffer(r[R.id]), delete r[R.id], delete o[R.id];
  }
  function E() {
    for (const L in r)
      s.deleteBuffer(r[L]);
    c = [], r = {}, o = {};
  }
  return {
    bind: h,
    update: p,
    dispose: E
  };
}
class US {
  constructor(e = {}) {
    const {
      canvas: t = Qw(),
      context: n = null,
      depth: r = !0,
      stencil: o = !0,
      alpha: c = !1,
      antialias: f = !1,
      premultipliedAlpha: h = !0,
      preserveDrawingBuffer: p = !1,
      powerPreference: v = "default",
      failIfMajorPerformanceCaveat: y = !1
    } = e;
    this.isWebGLRenderer = !0;
    let x;
    n !== null ? x = n.getContextAttributes().alpha : x = c;
    const M = new Uint32Array(4), T = new Int32Array(4);
    let C = null, w = null;
    const E = [], L = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = Gi, this._useLegacyLights = !1, this.toneMapping = qs, this.toneMappingExposure = 1;
    const R = this;
    let U = !1, F = 0, z = 0, B = null, W = -1, O = null;
    const I = new Vn(), Z = new Vn();
    let ie = null;
    const fe = new Rt(0);
    let K = 0, he = t.width, Te = t.height, Me = 1, ne = null, le = null;
    const re = new Vn(0, 0, he, Te), J = new Vn(0, 0, he, Te);
    let ue = !1;
    const Pe = new kg();
    let qe = !1, $e = !1, it = null;
    const gt = new tn(), ot = new Ie(), Vt = new Y(), nn = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    function Tt() {
      return B === null ? Me : 1;
    }
    let Q = n;
    function ke(G, ae) {
      for (let pe = 0; pe < G.length; pe++) {
        const se = G[pe], de = t.getContext(se, ae);
        if (de !== null)
          return de;
      }
      return null;
    }
    try {
      const G = {
        alpha: !0,
        depth: r,
        stencil: o,
        antialias: f,
        premultipliedAlpha: h,
        preserveDrawingBuffer: p,
        powerPreference: v,
        failIfMajorPerformanceCaveat: y
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${Og}`), t.addEventListener("webglcontextlost", ze, !1), t.addEventListener("webglcontextrestored", Ce, !1), t.addEventListener("webglcontextcreationerror", Be, !1), Q === null) {
        const ae = ["webgl2", "webgl", "experimental-webgl"];
        if (R.isWebGL1Renderer === !0 && ae.shift(), Q = ke(ae, G), Q === null)
          throw ke(ae) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
      typeof WebGLRenderingContext < "u" && Q instanceof WebGLRenderingContext && console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."), Q.getShaderPrecisionFormat === void 0 && (Q.getShaderPrecisionFormat = function() {
        return { rangeMin: 1, rangeMax: 1, precision: 1 };
      });
    } catch (G) {
      throw console.error("THREE.WebGLRenderer: " + G.message), G;
    }
    let Re, Xe, Ue, Mt, lt, at, Dt, Zt, rn, X, H, ye, Ye, Ve, Ze, bt, Ke, Se, Ge, yt, Ne, rt, ee, Ee;
    function xe() {
      Re = new xN(Q), Xe = new pN(Q, Re, e), Re.init(Xe), rt = new cA(Q, Re, Xe), Ue = new $O(Q, Re, Xe), Mt = new EN(Q), lt = new VO(), at = new eI(Q, Re, Ue, lt, Xe, rt, Mt), Dt = new vN(R), Zt = new _N(R), rn = new UD(Q, Xe), ee = new dN(Q, Re, rn, Xe), X = new SN(Q, rn, Mt, ee), H = new AN(Q, X, rn, Mt), Ge = new wN(Q, Xe, at), bt = new mN(lt), ye = new HO(R, Dt, Zt, Re, Xe, ee, bt), Ye = new iI(R, lt), Ve = new GO(), Ze = new ZO(Re, Xe), Se = new fN(R, Dt, Zt, Ue, H, x, h), Ke = new QO(R, H, Xe), Ee = new rI(Q, Mt, Xe, Ue), yt = new hN(Q, Re, Mt, Xe), Ne = new MN(Q, Re, Mt, Xe), Mt.programs = ye.programs, R.capabilities = Xe, R.extensions = Re, R.properties = lt, R.renderLists = Ve, R.shadowMap = Ke, R.state = Ue, R.info = Mt;
    }
    xe();
    const k = new nI(R, Q);
    this.xr = k, this.getContext = function() {
      return Q;
    }, this.getContextAttributes = function() {
      return Q.getContextAttributes();
    }, this.forceContextLoss = function() {
      const G = Re.get("WEBGL_lose_context");
      G && G.loseContext();
    }, this.forceContextRestore = function() {
      const G = Re.get("WEBGL_lose_context");
      G && G.restoreContext();
    }, this.getPixelRatio = function() {
      return Me;
    }, this.setPixelRatio = function(G) {
      G !== void 0 && (Me = G, this.setSize(he, Te, !1));
    }, this.getSize = function(G) {
      return G.set(he, Te);
    }, this.setSize = function(G, ae, pe = !0) {
      if (k.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      he = G, Te = ae, t.width = Math.floor(G * Me), t.height = Math.floor(ae * Me), pe === !0 && (t.style.width = G + "px", t.style.height = ae + "px"), this.setViewport(0, 0, G, ae);
    }, this.getDrawingBufferSize = function(G) {
      return G.set(he * Me, Te * Me).floor();
    }, this.setDrawingBufferSize = function(G, ae, pe) {
      he = G, Te = ae, Me = pe, t.width = Math.floor(G * pe), t.height = Math.floor(ae * pe), this.setViewport(0, 0, G, ae);
    }, this.getCurrentViewport = function(G) {
      return G.copy(I);
    }, this.getViewport = function(G) {
      return G.copy(re);
    }, this.setViewport = function(G, ae, pe, se) {
      G.isVector4 ? re.set(G.x, G.y, G.z, G.w) : re.set(G, ae, pe, se), Ue.viewport(I.copy(re).multiplyScalar(Me).floor());
    }, this.getScissor = function(G) {
      return G.copy(J);
    }, this.setScissor = function(G, ae, pe, se) {
      G.isVector4 ? J.set(G.x, G.y, G.z, G.w) : J.set(G, ae, pe, se), Ue.scissor(Z.copy(J).multiplyScalar(Me).floor());
    }, this.getScissorTest = function() {
      return ue;
    }, this.setScissorTest = function(G) {
      Ue.setScissorTest(ue = G);
    }, this.setOpaqueSort = function(G) {
      ne = G;
    }, this.setTransparentSort = function(G) {
      le = G;
    }, this.getClearColor = function(G) {
      return G.copy(Se.getClearColor());
    }, this.setClearColor = function() {
      Se.setClearColor.apply(Se, arguments);
    }, this.getClearAlpha = function() {
      return Se.getClearAlpha();
    }, this.setClearAlpha = function() {
      Se.setClearAlpha.apply(Se, arguments);
    }, this.clear = function(G = !0, ae = !0, pe = !0) {
      let se = 0;
      if (G) {
        let de = !1;
        if (B !== null) {
          const tt = B.texture.format;
          de = tt === SS || tt === xS || tt === _S;
        }
        if (de) {
          const tt = B.texture.type, ft = tt === Zs || tt === Bo || tt === zg || tt === Zl || tt === gS || tt === yS, _t = Se.getClearColor(), At = Se.getClearAlpha(), Bt = _t.r, wt = _t.g, Ct = _t.b;
          ft ? (M[0] = Bt, M[1] = wt, M[2] = Ct, M[3] = At, Q.clearBufferuiv(Q.COLOR, 0, M)) : (T[0] = Bt, T[1] = wt, T[2] = Ct, T[3] = At, Q.clearBufferiv(Q.COLOR, 0, T));
        } else
          se |= Q.COLOR_BUFFER_BIT;
      }
      ae && (se |= Q.DEPTH_BUFFER_BIT), pe && (se |= Q.STENCIL_BUFFER_BIT), Q.clear(se);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", ze, !1), t.removeEventListener("webglcontextrestored", Ce, !1), t.removeEventListener("webglcontextcreationerror", Be, !1), Ve.dispose(), Ze.dispose(), lt.dispose(), Dt.dispose(), Zt.dispose(), H.dispose(), ee.dispose(), Ee.dispose(), ye.dispose(), k.dispose(), k.removeEventListener("sessionstart", Kt), k.removeEventListener("sessionend", Un), it && (it.dispose(), it = null), wn.stop();
    };
    function ze(G) {
      G.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), U = !0;
    }
    function Ce() {
      console.log("THREE.WebGLRenderer: Context Restored."), U = !1;
      const G = Mt.autoReset, ae = Ke.enabled, pe = Ke.autoUpdate, se = Ke.needsUpdate, de = Ke.type;
      xe(), Mt.autoReset = G, Ke.enabled = ae, Ke.autoUpdate = pe, Ke.needsUpdate = se, Ke.type = de;
    }
    function Be(G) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", G.statusMessage);
    }
    function ut(G) {
      const ae = G.target;
      ae.removeEventListener("dispose", ut), He(ae);
    }
    function He(G) {
      vt(G), lt.remove(G);
    }
    function vt(G) {
      const ae = lt.get(G).programs;
      ae !== void 0 && (ae.forEach(function(pe) {
        ye.releaseProgram(pe);
      }), G.isShaderMaterial && ye.releaseShaderCache(G));
    }
    this.renderBufferDirect = function(G, ae, pe, se, de, tt) {
      ae === null && (ae = nn);
      const ft = de.isMesh && de.matrixWorld.determinant() < 0, _t = $(G, ae, pe, se, de);
      Ue.setMaterial(se, ft);
      let At = pe.index, Bt = 1;
      if (se.wireframe === !0) {
        if (At = X.getWireframeAttribute(pe), At === void 0)
          return;
        Bt = 2;
      }
      const wt = pe.drawRange, Ct = pe.attributes.position;
      let yn = wt.start * Bt, Fn = (wt.start + wt.count) * Bt;
      tt !== null && (yn = Math.max(yn, tt.start * Bt), Fn = Math.min(Fn, (tt.start + tt.count) * Bt)), At !== null ? (yn = Math.max(yn, 0), Fn = Math.min(Fn, At.count)) : Ct != null && (yn = Math.max(yn, 0), Fn = Math.min(Fn, Ct.count));
      const ji = Fn - yn;
      if (ji < 0 || ji === 1 / 0)
        return;
      ee.setup(de, se, _t, pe, At);
      let ur, Nn = yt;
      if (At !== null && (ur = rn.get(At), Nn = Ne, Nn.setIndex(ur)), de.isMesh)
        se.wireframe === !0 ? (Ue.setLineWidth(se.wireframeLinewidth * Tt()), Nn.setMode(Q.LINES)) : Nn.setMode(Q.TRIANGLES);
      else if (de.isLine) {
        let Xt = se.linewidth;
        Xt === void 0 && (Xt = 1), Ue.setLineWidth(Xt * Tt()), de.isLineSegments ? Nn.setMode(Q.LINES) : de.isLineLoop ? Nn.setMode(Q.LINE_LOOP) : Nn.setMode(Q.LINE_STRIP);
      } else
        de.isPoints ? Nn.setMode(Q.POINTS) : de.isSprite && Nn.setMode(Q.TRIANGLES);
      if (de.isInstancedMesh)
        Nn.renderInstances(yn, ji, de.count);
      else if (pe.isInstancedBufferGeometry) {
        const Xt = pe._maxInstanceCount !== void 0 ? pe._maxInstanceCount : 1 / 0, An = Math.min(pe.instanceCount, Xt);
        Nn.renderInstances(yn, ji, An);
      } else
        Nn.render(yn, ji);
    }, this.compile = function(G, ae) {
      function pe(se, de, tt) {
        se.transparent === !0 && se.side === Ys && se.forceSinglePass === !1 ? (se.side = Fr, se.needsUpdate = !0, Br(se, de, tt), se.side = ko, se.needsUpdate = !0, Br(se, de, tt), se.side = Ys) : Br(se, de, tt);
      }
      w = Ze.get(G), w.init(), L.push(w), G.traverseVisible(function(se) {
        se.isLight && se.layers.test(ae.layers) && (w.pushLight(se), se.castShadow && w.pushShadow(se));
      }), w.setupLights(R._useLegacyLights), G.traverse(function(se) {
        const de = se.material;
        if (de)
          if (Array.isArray(de))
            for (let tt = 0; tt < de.length; tt++) {
              const ft = de[tt];
              pe(ft, G, se);
            }
          else
            pe(de, G, se);
      }), L.pop(), w = null;
    };
    let Ut = null;
    function Nt(G) {
      Ut && Ut(G);
    }
    function Kt() {
      wn.stop();
    }
    function Un() {
      wn.start();
    }
    const wn = new aA();
    wn.setAnimationLoop(Nt), typeof self < "u" && wn.setContext(self), this.setAnimationLoop = function(G) {
      Ut = G, k.setAnimationLoop(G), G === null ? wn.stop() : wn.start();
    }, k.addEventListener("sessionstart", Kt), k.addEventListener("sessionend", Un), this.render = function(G, ae) {
      if (ae !== void 0 && ae.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (U === !0)
        return;
      G.matrixWorldAutoUpdate === !0 && G.updateMatrixWorld(), ae.parent === null && ae.matrixWorldAutoUpdate === !0 && ae.updateMatrixWorld(), k.enabled === !0 && k.isPresenting === !0 && (k.cameraAutoUpdate === !0 && k.updateCamera(ae), ae = k.getCamera()), G.isScene === !0 && G.onBeforeRender(R, G, ae, B), w = Ze.get(G, L.length), w.init(), L.push(w), gt.multiplyMatrices(ae.projectionMatrix, ae.matrixWorldInverse), Pe.setFromProjectionMatrix(gt), $e = this.localClippingEnabled, qe = bt.init(this.clippingPlanes, $e), C = Ve.get(G, E.length), C.init(), E.push(C), Yi(G, ae, 0, R.sortObjects), C.finish(), R.sortObjects === !0 && C.sort(ne, le), this.info.render.frame++, qe === !0 && bt.beginShadows();
      const pe = w.state.shadowsArray;
      if (Ke.render(pe, G, ae), qe === !0 && bt.endShadows(), this.info.autoReset === !0 && this.info.reset(), Se.render(C, G), w.setupLights(R._useLegacyLights), ae.isArrayCamera) {
        const se = ae.cameras;
        for (let de = 0, tt = se.length; de < tt; de++) {
          const ft = se[de];
          Li(C, G, ft, ft.viewport);
        }
      } else
        Li(C, G, ae);
      B !== null && (at.updateMultisampleRenderTarget(B), at.updateRenderTargetMipmap(B)), G.isScene === !0 && G.onAfterRender(R, G, ae), ee.resetDefaultState(), W = -1, O = null, L.pop(), L.length > 0 ? w = L[L.length - 1] : w = null, E.pop(), E.length > 0 ? C = E[E.length - 1] : C = null;
    };
    function Yi(G, ae, pe, se) {
      if (G.visible === !1)
        return;
      if (G.layers.test(ae.layers)) {
        if (G.isGroup)
          pe = G.renderOrder;
        else if (G.isLOD)
          G.autoUpdate === !0 && G.update(ae);
        else if (G.isLight)
          w.pushLight(G), G.castShadow && w.pushShadow(G);
        else if (G.isSprite) {
          if (!G.frustumCulled || Pe.intersectsSprite(G)) {
            se && Vt.setFromMatrixPosition(G.matrixWorld).applyMatrix4(gt);
            const ft = H.update(G), _t = G.material;
            _t.visible && C.push(G, ft, _t, pe, Vt.z, null);
          }
        } else if ((G.isMesh || G.isLine || G.isPoints) && (!G.frustumCulled || Pe.intersectsObject(G))) {
          const ft = H.update(G), _t = G.material;
          if (se && (G.boundingSphere !== void 0 ? (G.boundingSphere === null && G.computeBoundingSphere(), Vt.copy(G.boundingSphere.center)) : (ft.boundingSphere === null && ft.computeBoundingSphere(), Vt.copy(ft.boundingSphere.center)), Vt.applyMatrix4(G.matrixWorld).applyMatrix4(gt)), Array.isArray(_t)) {
            const At = ft.groups;
            for (let Bt = 0, wt = At.length; Bt < wt; Bt++) {
              const Ct = At[Bt], yn = _t[Ct.materialIndex];
              yn && yn.visible && C.push(G, ft, yn, pe, Vt.z, Ct);
            }
          } else
            _t.visible && C.push(G, ft, _t, pe, Vt.z, null);
        }
      }
      const tt = G.children;
      for (let ft = 0, _t = tt.length; ft < _t; ft++)
        Yi(tt[ft], ae, pe, se);
    }
    function Li(G, ae, pe, se) {
      const de = G.opaque, tt = G.transmissive, ft = G.transparent;
      w.setupLightsView(pe), qe === !0 && bt.setGlobalState(R.clippingPlanes, pe), tt.length > 0 && eo(de, tt, ae, pe), se && Ue.viewport(I.copy(se)), de.length > 0 && $i(de, ae, pe), tt.length > 0 && $i(tt, ae, pe), ft.length > 0 && $i(ft, ae, pe), Ue.buffers.depth.setTest(!0), Ue.buffers.depth.setMask(!0), Ue.buffers.color.setMask(!0), Ue.setPolygonOffset(!1);
    }
    function eo(G, ae, pe, se) {
      const de = Xe.isWebGL2;
      it === null && (it = new Za(1, 1, {
        generateMipmaps: !0,
        type: Re.has("EXT_color_buffer_half_float") ? vc : Zs,
        minFilter: $l,
        samples: de ? 4 : 0
      })), R.getDrawingBufferSize(ot), de ? it.setSize(ot.x, ot.y) : it.setSize(Pg(ot.x), Pg(ot.y));
      const tt = R.getRenderTarget();
      R.setRenderTarget(it), R.getClearColor(fe), K = R.getClearAlpha(), K < 1 && R.setClearColor(16777215, 0.5), R.clear();
      const ft = R.toneMapping;
      R.toneMapping = qs, $i(G, pe, se), at.updateMultisampleRenderTarget(it), at.updateRenderTargetMipmap(it);
      let _t = !1;
      for (let At = 0, Bt = ae.length; At < Bt; At++) {
        const wt = ae[At], Ct = wt.object, yn = wt.geometry, Fn = wt.material, ji = wt.group;
        if (Fn.side === Ys && Ct.layers.test(se.layers)) {
          const ur = Fn.side;
          Fn.side = Fr, Fn.needsUpdate = !0, Ka(Ct, pe, se, yn, Fn, ji), Fn.side = ur, Fn.needsUpdate = !0, _t = !0;
        }
      }
      _t === !0 && (at.updateMultisampleRenderTarget(it), at.updateRenderTargetMipmap(it)), R.setRenderTarget(tt), R.setClearColor(fe, K), R.toneMapping = ft;
    }
    function $i(G, ae, pe) {
      const se = ae.isScene === !0 ? ae.overrideMaterial : null;
      for (let de = 0, tt = G.length; de < tt; de++) {
        const ft = G[de], _t = ft.object, At = ft.geometry, Bt = se === null ? ft.material : se, wt = ft.group;
        _t.layers.test(pe.layers) && Ka(_t, ae, pe, At, Bt, wt);
      }
    }
    function Ka(G, ae, pe, se, de, tt) {
      G.onBeforeRender(R, ae, pe, se, de, tt), G.modelViewMatrix.multiplyMatrices(pe.matrixWorldInverse, G.matrixWorld), G.normalMatrix.getNormalMatrix(G.modelViewMatrix), de.onBeforeRender(R, ae, pe, se, G, tt), de.transparent === !0 && de.side === Ys && de.forceSinglePass === !1 ? (de.side = Fr, de.needsUpdate = !0, R.renderBufferDirect(pe, ae, se, de, G, tt), de.side = ko, de.needsUpdate = !0, R.renderBufferDirect(pe, ae, se, de, G, tt), de.side = Ys) : R.renderBufferDirect(pe, ae, se, de, G, tt), G.onAfterRender(R, ae, pe, se, de, tt);
    }
    function Br(G, ae, pe) {
      ae.isScene !== !0 && (ae = nn);
      const se = lt.get(G), de = w.state.lights, tt = w.state.shadowsArray, ft = de.state.version, _t = ye.getParameters(G, de.state, tt, ae, pe), At = ye.getProgramCacheKey(_t);
      let Bt = se.programs;
      se.environment = G.isMeshStandardMaterial ? ae.environment : null, se.fog = ae.fog, se.envMap = (G.isMeshStandardMaterial ? Zt : Dt).get(G.envMap || se.environment), Bt === void 0 && (G.addEventListener("dispose", ut), Bt = /* @__PURE__ */ new Map(), se.programs = Bt);
      let wt = Bt.get(At);
      if (wt !== void 0) {
        if (se.currentProgram === wt && se.lightsStateVersion === ft)
          return Yo(G, _t), wt;
      } else
        _t.uniforms = ye.getUniforms(G), G.onBuild(pe, _t, R), G.onBeforeCompile(_t, R), wt = ye.acquireProgram(_t, At), Bt.set(At, wt), se.uniforms = _t.uniforms;
      const Ct = se.uniforms;
      (!G.isShaderMaterial && !G.isRawShaderMaterial || G.clipping === !0) && (Ct.clippingPlanes = bt.uniform), Yo(G, _t), se.needsLights = st(G), se.lightsStateVersion = ft, se.needsLights && (Ct.ambientLightColor.value = de.state.ambient, Ct.lightProbe.value = de.state.probe, Ct.directionalLights.value = de.state.directional, Ct.directionalLightShadows.value = de.state.directionalShadow, Ct.spotLights.value = de.state.spot, Ct.spotLightShadows.value = de.state.spotShadow, Ct.rectAreaLights.value = de.state.rectArea, Ct.ltc_1.value = de.state.rectAreaLTC1, Ct.ltc_2.value = de.state.rectAreaLTC2, Ct.pointLights.value = de.state.point, Ct.pointLightShadows.value = de.state.pointShadow, Ct.hemisphereLights.value = de.state.hemi, Ct.directionalShadowMap.value = de.state.directionalShadowMap, Ct.directionalShadowMatrix.value = de.state.directionalShadowMatrix, Ct.spotShadowMap.value = de.state.spotShadowMap, Ct.spotLightMatrix.value = de.state.spotLightMatrix, Ct.spotLightMap.value = de.state.spotLightMap, Ct.pointShadowMap.value = de.state.pointShadowMap, Ct.pointShadowMatrix.value = de.state.pointShadowMatrix);
      const yn = wt.getUniforms(), Fn = bg.seqWithValue(yn.seq, Ct);
      return se.currentProgram = wt, se.uniformsList = Fn, wt;
    }
    function Yo(G, ae) {
      const pe = lt.get(G);
      pe.outputColorSpace = ae.outputColorSpace, pe.instancing = ae.instancing, pe.instancingColor = ae.instancingColor, pe.skinning = ae.skinning, pe.morphTargets = ae.morphTargets, pe.morphNormals = ae.morphNormals, pe.morphColors = ae.morphColors, pe.morphTargetsCount = ae.morphTargetsCount, pe.numClippingPlanes = ae.numClippingPlanes, pe.numIntersection = ae.numClipIntersection, pe.vertexAlphas = ae.vertexAlphas, pe.vertexTangents = ae.vertexTangents, pe.toneMapping = ae.toneMapping;
    }
    function $(G, ae, pe, se, de) {
      ae.isScene !== !0 && (ae = nn), at.resetTextureUnits();
      const tt = ae.fog, ft = se.isMeshStandardMaterial ? ae.environment : null, _t = B === null ? R.outputColorSpace : B.isXRRenderTarget === !0 ? B.texture.colorSpace : Ks, At = (se.isMeshStandardMaterial ? Zt : Dt).get(se.envMap || ft), Bt = se.vertexColors === !0 && !!pe.attributes.color && pe.attributes.color.itemSize === 4, wt = !!pe.attributes.tangent && (!!se.normalMap || se.anisotropy > 0), Ct = !!pe.morphAttributes.position, yn = !!pe.morphAttributes.normal, Fn = !!pe.morphAttributes.color;
      let ji = qs;
      se.toneMapped && (B === null || B.isXRRenderTarget === !0) && (ji = R.toneMapping);
      const ur = pe.morphAttributes.position || pe.morphAttributes.normal || pe.morphAttributes.color, Nn = ur !== void 0 ? ur.length : 0, Xt = lt.get(se), An = w.state.lights;
      if (qe === !0 && ($e === !0 || G !== O)) {
        const qi = G === O && se.id === W;
        bt.setState(se, G, qi);
      }
      let Yt = !1;
      se.version === Xt.__version ? (Xt.needsLights && Xt.lightsStateVersion !== An.state.version || Xt.outputColorSpace !== _t || de.isInstancedMesh && Xt.instancing === !1 || !de.isInstancedMesh && Xt.instancing === !0 || de.isSkinnedMesh && Xt.skinning === !1 || !de.isSkinnedMesh && Xt.skinning === !0 || de.isInstancedMesh && Xt.instancingColor === !0 && de.instanceColor === null || de.isInstancedMesh && Xt.instancingColor === !1 && de.instanceColor !== null || Xt.envMap !== At || se.fog === !0 && Xt.fog !== tt || Xt.numClippingPlanes !== void 0 && (Xt.numClippingPlanes !== bt.numPlanes || Xt.numIntersection !== bt.numIntersection) || Xt.vertexAlphas !== Bt || Xt.vertexTangents !== wt || Xt.morphTargets !== Ct || Xt.morphNormals !== yn || Xt.morphColors !== Fn || Xt.toneMapping !== ji || Xe.isWebGL2 === !0 && Xt.morphTargetsCount !== Nn) && (Yt = !0) : (Yt = !0, Xt.__version = se.version);
      let Ni = Xt.currentProgram;
      Yt === !0 && (Ni = Br(se, ae, de));
      let _i = !1, xn = !1, wr = !1;
      const $n = Ni.getUniforms(), ei = Xt.uniforms;
      if (Ue.useProgram(Ni.program) && (_i = !0, xn = !0, wr = !0), se.id !== W && (W = se.id, xn = !0), _i || O !== G) {
        $n.setValue(Q, "projectionMatrix", G.projectionMatrix), $n.setValue(Q, "viewMatrix", G.matrixWorldInverse);
        const qi = $n.map.cameraPosition;
        qi !== void 0 && qi.setValue(Q, Vt.setFromMatrixPosition(G.matrixWorld)), Xe.logarithmicDepthBuffer && $n.setValue(
          Q,
          "logDepthBufFC",
          2 / (Math.log(G.far + 1) / Math.LN2)
        ), (se.isMeshPhongMaterial || se.isMeshToonMaterial || se.isMeshLambertMaterial || se.isMeshBasicMaterial || se.isMeshStandardMaterial || se.isShaderMaterial) && $n.setValue(Q, "isOrthographic", G.isOrthographicCamera === !0), O !== G && (O = G, xn = !0, wr = !0);
      }
      if (de.isSkinnedMesh) {
        $n.setOptional(Q, de, "bindMatrix"), $n.setOptional(Q, de, "bindMatrixInverse");
        const qi = de.skeleton;
        qi && (Xe.floatVertexTextures ? (qi.boneTexture === null && qi.computeBoneTexture(), $n.setValue(Q, "boneTexture", qi.boneTexture, at), $n.setValue(Q, "boneTextureSize", qi.boneTextureSize)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
      }
      const Es = pe.morphAttributes;
      if ((Es.position !== void 0 || Es.normal !== void 0 || Es.color !== void 0 && Xe.isWebGL2 === !0) && Ge.update(de, pe, Ni), (xn || Xt.receiveShadow !== de.receiveShadow) && (Xt.receiveShadow = de.receiveShadow, $n.setValue(Q, "receiveShadow", de.receiveShadow)), se.isMeshGouraudMaterial && se.envMap !== null && (ei.envMap.value = At, ei.flipEnvMap.value = At.isCubeTexture && At.isRenderTargetTexture === !1 ? -1 : 1), xn && ($n.setValue(Q, "toneMappingExposure", R.toneMappingExposure), Xt.needsLights && Fe(ei, wr), tt && se.fog === !0 && Ye.refreshFogUniforms(ei, tt), Ye.refreshMaterialUniforms(ei, se, Me, Te, it), bg.upload(Q, Xt.uniformsList, ei, at)), se.isShaderMaterial && se.uniformsNeedUpdate === !0 && (bg.upload(Q, Xt.uniformsList, ei, at), se.uniformsNeedUpdate = !1), se.isSpriteMaterial && $n.setValue(Q, "center", de.center), $n.setValue(Q, "modelViewMatrix", de.modelViewMatrix), $n.setValue(Q, "normalMatrix", de.normalMatrix), $n.setValue(Q, "modelMatrix", de.matrixWorld), se.isShaderMaterial || se.isRawShaderMaterial) {
        const qi = se.uniformsGroups;
        for (let jo = 0, Ts = qi.length; jo < Ts; jo++)
          if (Xe.isWebGL2) {
            const qo = qi[jo];
            Ee.update(qo, Ni), Ee.bind(qo, Ni);
          } else
            console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
      }
      return Ni;
    }
    function Fe(G, ae) {
      G.ambientLightColor.needsUpdate = ae, G.lightProbe.needsUpdate = ae, G.directionalLights.needsUpdate = ae, G.directionalLightShadows.needsUpdate = ae, G.pointLights.needsUpdate = ae, G.pointLightShadows.needsUpdate = ae, G.spotLights.needsUpdate = ae, G.spotLightShadows.needsUpdate = ae, G.rectAreaLights.needsUpdate = ae, G.hemisphereLights.needsUpdate = ae;
    }
    function st(G) {
      return G.isMeshLambertMaterial || G.isMeshToonMaterial || G.isMeshPhongMaterial || G.isMeshStandardMaterial || G.isShadowMaterial || G.isShaderMaterial && G.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return F;
    }, this.getActiveMipmapLevel = function() {
      return z;
    }, this.getRenderTarget = function() {
      return B;
    }, this.setRenderTargetTextures = function(G, ae, pe) {
      lt.get(G.texture).__webglTexture = ae, lt.get(G.depthTexture).__webglTexture = pe;
      const se = lt.get(G);
      se.__hasExternalTextures = !0, se.__hasExternalTextures && (se.__autoAllocateDepthBuffer = pe === void 0, se.__autoAllocateDepthBuffer || Re.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), se.__useRenderToTexture = !1));
    }, this.setRenderTargetFramebuffer = function(G, ae) {
      const pe = lt.get(G);
      pe.__webglFramebuffer = ae, pe.__useDefaultFramebuffer = ae === void 0;
    }, this.setRenderTarget = function(G, ae = 0, pe = 0) {
      B = G, F = ae, z = pe;
      let se = !0, de = null, tt = !1, ft = !1;
      if (G) {
        const At = lt.get(G);
        At.__useDefaultFramebuffer !== void 0 ? (Ue.bindFramebuffer(Q.FRAMEBUFFER, null), se = !1) : At.__webglFramebuffer === void 0 ? at.setupRenderTarget(G) : At.__hasExternalTextures && at.rebindTextures(G, lt.get(G.texture).__webglTexture, lt.get(G.depthTexture).__webglTexture);
        const Bt = G.texture;
        (Bt.isData3DTexture || Bt.isDataArrayTexture || Bt.isCompressedArrayTexture) && (ft = !0);
        const wt = lt.get(G).__webglFramebuffer;
        G.isWebGLCubeRenderTarget ? (Array.isArray(wt[ae]) ? de = wt[ae][pe] : de = wt[ae], tt = !0) : Xe.isWebGL2 && G.samples > 0 && at.useMultisampledRTT(G) === !1 ? de = lt.get(G).__webglMultisampledFramebuffer : Array.isArray(wt) ? de = wt[pe] : de = wt, I.copy(G.viewport), Z.copy(G.scissor), ie = G.scissorTest;
      } else
        I.copy(re).multiplyScalar(Me).floor(), Z.copy(J).multiplyScalar(Me).floor(), ie = ue;
      if (Ue.bindFramebuffer(Q.FRAMEBUFFER, de) && Xe.drawBuffers && se && Ue.drawBuffers(G, de), Ue.viewport(I), Ue.scissor(Z), Ue.setScissorTest(ie), tt) {
        const At = lt.get(G.texture);
        Q.framebufferTexture2D(Q.FRAMEBUFFER, Q.COLOR_ATTACHMENT0, Q.TEXTURE_CUBE_MAP_POSITIVE_X + ae, At.__webglTexture, pe);
      } else if (ft) {
        const At = lt.get(G.texture), Bt = ae || 0;
        Q.framebufferTextureLayer(Q.FRAMEBUFFER, Q.COLOR_ATTACHMENT0, At.__webglTexture, pe || 0, Bt);
      }
      W = -1;
    }, this.readRenderTargetPixels = function(G, ae, pe, se, de, tt, ft) {
      if (!(G && G.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let _t = lt.get(G).__webglFramebuffer;
      if (G.isWebGLCubeRenderTarget && ft !== void 0 && (_t = _t[ft]), _t) {
        Ue.bindFramebuffer(Q.FRAMEBUFFER, _t);
        try {
          const At = G.texture, Bt = At.format, wt = At.type;
          if (Bt !== Er && rt.convert(Bt) !== Q.getParameter(Q.IMPLEMENTATION_COLOR_READ_FORMAT)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          const Ct = wt === vc && (Re.has("EXT_color_buffer_half_float") || Xe.isWebGL2 && Re.has("EXT_color_buffer_float"));
          if (wt !== Zs && rt.convert(wt) !== Q.getParameter(Q.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
          !(wt === Ta && (Xe.isWebGL2 || Re.has("OES_texture_float") || Re.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
          !Ct) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          ae >= 0 && ae <= G.width - se && pe >= 0 && pe <= G.height - de && Q.readPixels(ae, pe, se, de, rt.convert(Bt), rt.convert(wt), tt);
        } finally {
          const At = B !== null ? lt.get(B).__webglFramebuffer : null;
          Ue.bindFramebuffer(Q.FRAMEBUFFER, At);
        }
      }
    }, this.copyFramebufferToTexture = function(G, ae, pe = 0) {
      const se = Math.pow(2, -pe), de = Math.floor(ae.image.width * se), tt = Math.floor(ae.image.height * se);
      at.setTexture2D(ae, 0), Q.copyTexSubImage2D(Q.TEXTURE_2D, pe, 0, 0, G.x, G.y, de, tt), Ue.unbindTexture();
    }, this.copyTextureToTexture = function(G, ae, pe, se = 0) {
      const de = ae.image.width, tt = ae.image.height, ft = rt.convert(pe.format), _t = rt.convert(pe.type);
      at.setTexture2D(pe, 0), Q.pixelStorei(Q.UNPACK_FLIP_Y_WEBGL, pe.flipY), Q.pixelStorei(Q.UNPACK_PREMULTIPLY_ALPHA_WEBGL, pe.premultiplyAlpha), Q.pixelStorei(Q.UNPACK_ALIGNMENT, pe.unpackAlignment), ae.isDataTexture ? Q.texSubImage2D(Q.TEXTURE_2D, se, G.x, G.y, de, tt, ft, _t, ae.image.data) : ae.isCompressedTexture ? Q.compressedTexSubImage2D(Q.TEXTURE_2D, se, G.x, G.y, ae.mipmaps[0].width, ae.mipmaps[0].height, ft, ae.mipmaps[0].data) : Q.texSubImage2D(Q.TEXTURE_2D, se, G.x, G.y, ft, _t, ae.image), se === 0 && pe.generateMipmaps && Q.generateMipmap(Q.TEXTURE_2D), Ue.unbindTexture();
    }, this.copyTextureToTexture3D = function(G, ae, pe, se, de = 0) {
      if (R.isWebGL1Renderer) {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        return;
      }
      const tt = G.max.x - G.min.x + 1, ft = G.max.y - G.min.y + 1, _t = G.max.z - G.min.z + 1, At = rt.convert(se.format), Bt = rt.convert(se.type);
      let wt;
      if (se.isData3DTexture)
        at.setTexture3D(se, 0), wt = Q.TEXTURE_3D;
      else if (se.isDataArrayTexture)
        at.setTexture2DArray(se, 0), wt = Q.TEXTURE_2D_ARRAY;
      else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      Q.pixelStorei(Q.UNPACK_FLIP_Y_WEBGL, se.flipY), Q.pixelStorei(Q.UNPACK_PREMULTIPLY_ALPHA_WEBGL, se.premultiplyAlpha), Q.pixelStorei(Q.UNPACK_ALIGNMENT, se.unpackAlignment);
      const Ct = Q.getParameter(Q.UNPACK_ROW_LENGTH), yn = Q.getParameter(Q.UNPACK_IMAGE_HEIGHT), Fn = Q.getParameter(Q.UNPACK_SKIP_PIXELS), ji = Q.getParameter(Q.UNPACK_SKIP_ROWS), ur = Q.getParameter(Q.UNPACK_SKIP_IMAGES), Nn = pe.isCompressedTexture ? pe.mipmaps[0] : pe.image;
      Q.pixelStorei(Q.UNPACK_ROW_LENGTH, Nn.width), Q.pixelStorei(Q.UNPACK_IMAGE_HEIGHT, Nn.height), Q.pixelStorei(Q.UNPACK_SKIP_PIXELS, G.min.x), Q.pixelStorei(Q.UNPACK_SKIP_ROWS, G.min.y), Q.pixelStorei(Q.UNPACK_SKIP_IMAGES, G.min.z), pe.isDataTexture || pe.isData3DTexture ? Q.texSubImage3D(wt, de, ae.x, ae.y, ae.z, tt, ft, _t, At, Bt, Nn.data) : pe.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), Q.compressedTexSubImage3D(wt, de, ae.x, ae.y, ae.z, tt, ft, _t, At, Nn.data)) : Q.texSubImage3D(wt, de, ae.x, ae.y, ae.z, tt, ft, _t, At, Bt, Nn), Q.pixelStorei(Q.UNPACK_ROW_LENGTH, Ct), Q.pixelStorei(Q.UNPACK_IMAGE_HEIGHT, yn), Q.pixelStorei(Q.UNPACK_SKIP_PIXELS, Fn), Q.pixelStorei(Q.UNPACK_SKIP_ROWS, ji), Q.pixelStorei(Q.UNPACK_SKIP_IMAGES, ur), de === 0 && se.generateMipmaps && Q.generateMipmap(wt), Ue.unbindTexture();
    }, this.initTexture = function(G) {
      G.isCubeTexture ? at.setTextureCube(G, 0) : G.isData3DTexture ? at.setTexture3D(G, 0) : G.isDataArrayTexture || G.isCompressedArrayTexture ? at.setTexture2DArray(G, 0) : at.setTexture2D(G, 0), Ue.unbindTexture();
    }, this.resetState = function() {
      F = 0, z = 0, B = null, Ue.reset(), ee.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get coordinateSystem() {
    return js;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const t = this.getContext();
    t.drawingBufferColorSpace = e === Hg ? "display-p3" : "srgb", t.unpackColorSpace = Hn.workingColorSpace === Up ? "display-p3" : "srgb";
  }
  get physicallyCorrectLights() {
    return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), !this.useLegacyLights;
  }
  set physicallyCorrectLights(e) {
    console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), this.useLegacyLights = !e;
  }
  get outputEncoding() {
    return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace === Gi ? Kl : ES;
  }
  set outputEncoding(e) {
    console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace = e === Kl ? Gi : Ks;
  }
  get useLegacyLights() {
    return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights;
  }
  set useLegacyLights(e) {
    console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights = e;
  }
}
class dA extends US {
}
dA.prototype.isWebGL1Renderer = !0;
class Wg {
  constructor(e, t = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new Rt(e), this.density = t;
  }
  clone() {
    return new Wg(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      name: this.name,
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class Xg {
  constructor(e, t = 1, n = 1e3) {
    this.isFog = !0, this.name = "", this.color = new Rt(e), this.near = t, this.far = n;
  }
  clone() {
    return new Xg(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      name: this.name,
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class Yg extends Cn {
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t;
  }
}
class jg {
  constructor(e, t) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = xp, this.updateRange = { offset: 0, count: -1 }, this.version = 0, this.uuid = ba();
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  copyAt(e, t, n) {
    e *= this.stride, n *= t.stride;
    for (let r = 0, o = this.stride; r < o; r++)
      this.array[e + r] = t.array[n + r];
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = ba()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
    return n.setUsage(this.usage), n;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = ba()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const Or = /* @__PURE__ */ new Y();
class yc {
  constructor(e, t, n, r = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = r;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.data.count; t < n; t++)
      Or.fromBufferAttribute(this, t), Or.applyMatrix4(e), this.setXYZ(t, Or.x, Or.y, Or.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Or.fromBufferAttribute(this, t), Or.applyNormalMatrix(e), this.setXYZ(t, Or.x, Or.y, Or.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Or.fromBufferAttribute(this, t), Or.transformDirection(e), this.setXYZ(t, Or.x, Or.y, Or.z);
    return this;
  }
  setX(e, t) {
    return this.normalized && (t = un(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
  }
  setY(e, t) {
    return this.normalized && (t = un(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
  }
  setZ(e, t) {
    return this.normalized && (t = un(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
  }
  setW(e, t) {
    return this.normalized && (t = un(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = ra(t, this.array)), t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = ra(t, this.array)), t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = ra(t, this.array)), t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = ra(t, this.array)), t;
  }
  setXY(e, t, n) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = un(t, this.array), n = un(n, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, r) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = un(t, this.array), n = un(n, this.array), r = un(r, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = r, this;
  }
  setXYZW(e, t, n, r, o) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = un(t, this.array), n = un(n, this.array), r = un(r, this.array), o = un(o, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = r, this.data.array[e + 3] = o, this;
  }
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const r = n * this.data.stride + this.offset;
        for (let o = 0; o < this.itemSize; o++)
          t.push(this.data.array[r + o]);
      }
      return new jn(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new yc(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const r = n * this.data.stride + this.offset;
        for (let o = 0; o < this.itemSize; o++)
          t.push(this.data.array[r + o]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class NS extends br {
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new Rt(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let Kf;
const jh = /* @__PURE__ */ new Y(), Qf = /* @__PURE__ */ new Y(), $f = /* @__PURE__ */ new Y(), ed = /* @__PURE__ */ new Ie(), qh = /* @__PURE__ */ new Ie(), hA = /* @__PURE__ */ new tn(), qv = /* @__PURE__ */ new Y(), Zh = /* @__PURE__ */ new Y(), Zv = /* @__PURE__ */ new Y(), Bb = /* @__PURE__ */ new Ie(), j_ = /* @__PURE__ */ new Ie(), Hb = /* @__PURE__ */ new Ie();
class pA extends Cn {
  constructor(e = new NS()) {
    if (super(), this.isSprite = !0, this.type = "Sprite", Kf === void 0) {
      Kf = new hn();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), n = new jg(t, 5);
      Kf.setIndex([0, 1, 2, 0, 2, 3]), Kf.setAttribute("position", new yc(n, 3, 0, !1)), Kf.setAttribute("uv", new yc(n, 2, 3, !1));
    }
    this.geometry = Kf, this.material = e, this.center = new Ie(0.5, 0.5);
  }
  raycast(e, t) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Qf.setFromMatrixScale(this.matrixWorld), hA.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), $f.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && Qf.multiplyScalar(-$f.z);
    const n = this.material.rotation;
    let r, o;
    n !== 0 && (o = Math.cos(n), r = Math.sin(n));
    const c = this.center;
    Jv(qv.set(-0.5, -0.5, 0), $f, c, Qf, r, o), Jv(Zh.set(0.5, -0.5, 0), $f, c, Qf, r, o), Jv(Zv.set(0.5, 0.5, 0), $f, c, Qf, r, o), Bb.set(0, 0), j_.set(1, 0), Hb.set(1, 1);
    let f = e.ray.intersectTriangle(qv, Zh, Zv, !1, jh);
    if (f === null && (Jv(Zh.set(-0.5, 0.5, 0), $f, c, Qf, r, o), j_.set(0, 1), f = e.ray.intersectTriangle(qv, Zv, Zh, !1, jh), f === null))
      return;
    const h = e.ray.origin.distanceTo(jh);
    h < e.near || h > e.far || t.push({
      distance: h,
      point: jh.clone(),
      uv: ia.getInterpolation(jh, qv, Zh, Zv, Bb, j_, Hb, new Ie()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function Jv(s, e, t, n, r, o) {
  ed.subVectors(s, t).addScalar(0.5).multiply(n), r !== void 0 ? (qh.x = o * ed.x - r * ed.y, qh.y = r * ed.x + o * ed.y) : qh.copy(ed), s.copy(e), s.x += qh.x, s.y += qh.y, s.applyMatrix4(hA);
}
const Kv = /* @__PURE__ */ new Y(), Vb = /* @__PURE__ */ new Y();
class mA extends Cn {
  constructor() {
    super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      levels: {
        enumerable: !0,
        value: []
      },
      isLOD: {
        value: !0
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let n = 0, r = t.length; n < r; n++) {
      const o = t[n];
      this.addLevel(o.object.clone(), o.distance, o.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  addLevel(e, t = 0, n = 0) {
    t = Math.abs(t);
    const r = this.levels;
    let o;
    for (o = 0; o < r.length && !(t < r[o].distance); o++)
      ;
    return r.splice(o, 0, { distance: t, hysteresis: n, object: e }), this.add(e), this;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let n, r;
      for (n = 1, r = t.length; n < r; n++) {
        let o = t[n].distance;
        if (t[n].object.visible && (o -= o * t[n].hysteresis), e < o)
          break;
      }
      return t[n - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    if (this.levels.length > 0) {
      Kv.setFromMatrixPosition(this.matrixWorld);
      const r = e.ray.origin.distanceTo(Kv);
      this.getObjectForDistance(r).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      Kv.setFromMatrixPosition(e.matrixWorld), Vb.setFromMatrixPosition(this.matrixWorld);
      const n = Kv.distanceTo(Vb) / e.zoom;
      t[0].object.visible = !0;
      let r, o;
      for (r = 1, o = t.length; r < o; r++) {
        let c = t[r].distance;
        if (t[r].object.visible && (c -= c * t[r].hysteresis), n >= c)
          t[r - 1].object.visible = !1, t[r].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = r - 1; r < o; r++)
        t[r].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
    const n = this.levels;
    for (let r = 0, o = n.length; r < o; r++) {
      const c = n[r];
      t.object.levels.push({
        object: c.object.uuid,
        distance: c.distance,
        hysteresis: c.hysteresis
      });
    }
    return t;
  }
}
const kb = /* @__PURE__ */ new Y(), Gb = /* @__PURE__ */ new Vn(), Wb = /* @__PURE__ */ new Vn(), aI = /* @__PURE__ */ new Y(), Xb = /* @__PURE__ */ new tn(), td = /* @__PURE__ */ new Y(), q_ = /* @__PURE__ */ new xs(), Yb = /* @__PURE__ */ new tn(), Z_ = /* @__PURE__ */ new Sc();
class vA extends lr {
  constructor(e, t) {
    super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new tn(), this.bindMatrixInverse = new tn(), this.boundingBox = null, this.boundingSphere = null;
  }
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new Qs()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      td.fromBufferAttribute(t, n), this.applyBoneTransform(n, td), this.boundingBox.expandByPoint(td);
  }
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new xs()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      td.fromBufferAttribute(t, n), this.applyBoneTransform(n, td), this.boundingSphere.expandByPoint(td);
  }
  copy(e, t) {
    return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  raycast(e, t) {
    const n = this.material, r = this.matrixWorld;
    n !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), q_.copy(this.boundingSphere), q_.applyMatrix4(r), e.ray.intersectsSphere(q_) !== !1 && (Yb.copy(r).invert(), Z_.copy(e.ray).applyMatrix4(Yb), !(this.boundingBox !== null && Z_.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, t, Z_)));
  }
  getVertexPosition(e, t) {
    return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
  }
  bind(e, t) {
    this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new Vn(), t = this.geometry.attributes.skinWeight;
    for (let n = 0, r = t.count; n < r; n++) {
      e.fromBufferAttribute(t, n);
      const o = 1 / e.manhattanLength();
      o !== 1 / 0 ? e.multiplyScalar(o) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === "attached" ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === "detached" ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(e, t) {
    const n = this.skeleton, r = this.geometry;
    Gb.fromBufferAttribute(r.attributes.skinIndex, e), Wb.fromBufferAttribute(r.attributes.skinWeight, e), kb.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
    for (let o = 0; o < 4; o++) {
      const c = Wb.getComponent(o);
      if (c !== 0) {
        const f = Gb.getComponent(o);
        Xb.multiplyMatrices(n.bones[f].matrixWorld, n.boneInverses[f]), t.addScaledVector(aI.copy(kb).applyMatrix4(Xb), c);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
  boneTransform(e, t) {
    return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."), this.applyBoneTransform(e, t);
  }
}
class OS extends Cn {
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class pc extends Ci {
  constructor(e = null, t = 1, n = 1, r, o, c, f, h, p = di, v = di, y, x) {
    super(null, c, f, h, p, v, r, o, y, x), this.isDataTexture = !0, this.image = { data: e, width: t, height: n }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const jb = /* @__PURE__ */ new tn(), sI = /* @__PURE__ */ new tn();
class qg {
  constructor(e = [], t = []) {
    this.uuid = ba(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.init();
  }
  init() {
    const e = this.bones, t = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0)
      this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let n = 0, r = this.bones.length; n < r; n++)
        this.boneInverses.push(new tn());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = new tn();
      this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && n.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
    }
  }
  update() {
    const e = this.bones, t = this.boneInverses, n = this.boneMatrices, r = this.boneTexture;
    for (let o = 0, c = e.length; o < c; o++) {
      const f = e[o] ? e[o].matrixWorld : sI;
      jb.multiplyMatrices(f, t[o]), jb.toArray(n, o * 16);
    }
    r !== null && (r.needsUpdate = !0);
  }
  clone() {
    return new qg(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = Zw(e), e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const n = new pc(t, e, e, Er, Ta);
    return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this.boneTextureSize = e, this;
  }
  getBoneByName(e) {
    for (let t = 0, n = this.bones.length; t < n; t++) {
      const r = this.bones[t];
      if (r.name === e)
        return r;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let n = 0, r = e.bones.length; n < r; n++) {
      const o = e.bones[n];
      let c = t[o];
      c === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", o), c = new OS()), this.bones.push(c), this.boneInverses.push(new tn().fromArray(e.boneInverses[n]));
    }
    return this.init(), this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones, n = this.boneInverses;
    for (let r = 0, o = t.length; r < o; r++) {
      const c = t[r];
      e.bones.push(c.uuid);
      const f = n[r];
      e.boneInverses.push(f.toArray());
    }
    return e;
  }
}
class md extends jn {
  constructor(e, t, n, r = 1) {
    super(e, t, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = r;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const nd = /* @__PURE__ */ new tn(), qb = /* @__PURE__ */ new tn(), Qv = [], Zb = /* @__PURE__ */ new Qs(), oI = /* @__PURE__ */ new tn(), Jh = /* @__PURE__ */ new lr(), Kh = /* @__PURE__ */ new xs();
class gA extends lr {
  constructor(e, t, n) {
    super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new md(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
    for (let r = 0; r < n; r++)
      this.setMatrixAt(r, oI);
  }
  computeBoundingBox() {
    const e = this.geometry, t = this.count;
    this.boundingBox === null && (this.boundingBox = new Qs()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, nd), Zb.copy(e.boundingBox).applyMatrix4(nd), this.boundingBox.union(Zb);
  }
  computeBoundingSphere() {
    const e = this.geometry, t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new xs()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, nd), Kh.copy(e.boundingSphere).applyMatrix4(nd), this.boundingSphere.union(Kh);
  }
  copy(e, t) {
    return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  raycast(e, t) {
    const n = this.matrixWorld, r = this.count;
    if (Jh.geometry = this.geometry, Jh.material = this.material, Jh.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Kh.copy(this.boundingSphere), Kh.applyMatrix4(n), e.ray.intersectsSphere(Kh) !== !1))
      for (let o = 0; o < r; o++) {
        this.getMatrixAt(o, nd), qb.multiplyMatrices(n, nd), Jh.matrixWorld = qb, Jh.raycast(e, Qv);
        for (let c = 0, f = Qv.length; c < f; c++) {
          const h = Qv[c];
          h.instanceId = o, h.object = this, t.push(h);
        }
        Qv.length = 0;
      }
  }
  setColorAt(e, t) {
    this.instanceColor === null && (this.instanceColor = new md(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  updateMorphTargets() {
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class zr extends br {
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new Rt(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const Jb = /* @__PURE__ */ new Y(), Kb = /* @__PURE__ */ new Y(), Qb = /* @__PURE__ */ new tn(), J_ = /* @__PURE__ */ new Sc(), $v = /* @__PURE__ */ new xs();
class eu extends Cn {
  constructor(e = new hn(), t = new zr()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [0];
      for (let r = 1, o = t.count; r < o; r++)
        Jb.fromBufferAttribute(t, r - 1), Kb.fromBufferAttribute(t, r), n[r] = n[r - 1], n[r] += Jb.distanceTo(Kb);
      e.setAttribute("lineDistance", new Pt(n, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(e, t) {
    const n = this.geometry, r = this.matrixWorld, o = e.params.Line.threshold, c = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), $v.copy(n.boundingSphere), $v.applyMatrix4(r), $v.radius += o, e.ray.intersectsSphere($v) === !1)
      return;
    Qb.copy(r).invert(), J_.copy(e.ray).applyMatrix4(Qb);
    const f = o / ((this.scale.x + this.scale.y + this.scale.z) / 3), h = f * f, p = new Y(), v = new Y(), y = new Y(), x = new Y(), M = this.isLineSegments ? 2 : 1, T = n.index, w = n.attributes.position;
    if (T !== null) {
      const E = Math.max(0, c.start), L = Math.min(T.count, c.start + c.count);
      for (let R = E, U = L - 1; R < U; R += M) {
        const F = T.getX(R), z = T.getX(R + 1);
        if (p.fromBufferAttribute(w, F), v.fromBufferAttribute(w, z), J_.distanceSqToSegment(p, v, x, y) > h)
          continue;
        x.applyMatrix4(this.matrixWorld);
        const W = e.ray.origin.distanceTo(x);
        W < e.near || W > e.far || t.push({
          distance: W,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: y.clone().applyMatrix4(this.matrixWorld),
          index: R,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    } else {
      const E = Math.max(0, c.start), L = Math.min(w.count, c.start + c.count);
      for (let R = E, U = L - 1; R < U; R += M) {
        if (p.fromBufferAttribute(w, R), v.fromBufferAttribute(w, R + 1), J_.distanceSqToSegment(p, v, x, y) > h)
          continue;
        x.applyMatrix4(this.matrixWorld);
        const z = e.ray.origin.distanceTo(x);
        z < e.near || z > e.far || t.push({
          distance: z,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: y.clone().applyMatrix4(this.matrixWorld),
          index: R,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const r = t[n[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, c = r.length; o < c; o++) {
          const f = r[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = o;
        }
      }
    }
  }
}
const $b = /* @__PURE__ */ new Y(), e1 = /* @__PURE__ */ new Y();
class $s extends eu {
  constructor(e, t) {
    super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [];
      for (let r = 0, o = t.count; r < o; r += 2)
        $b.fromBufferAttribute(t, r), e1.fromBufferAttribute(t, r + 1), n[r] = r === 0 ? 0 : n[r - 1], n[r + 1] = n[r] + $b.distanceTo(e1);
      e.setAttribute("lineDistance", new Pt(n, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class yA extends eu {
  constructor(e, t) {
    super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class IS extends br {
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new Rt(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const t1 = /* @__PURE__ */ new tn(), $x = /* @__PURE__ */ new Sc(), eg = /* @__PURE__ */ new xs(), tg = /* @__PURE__ */ new Y();
class _A extends Cn {
  constructor(e = new hn(), t = new IS()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  raycast(e, t) {
    const n = this.geometry, r = this.matrixWorld, o = e.params.Points.threshold, c = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), eg.copy(n.boundingSphere), eg.applyMatrix4(r), eg.radius += o, e.ray.intersectsSphere(eg) === !1)
      return;
    t1.copy(r).invert(), $x.copy(e.ray).applyMatrix4(t1);
    const f = o / ((this.scale.x + this.scale.y + this.scale.z) / 3), h = f * f, p = n.index, y = n.attributes.position;
    if (p !== null) {
      const x = Math.max(0, c.start), M = Math.min(p.count, c.start + c.count);
      for (let T = x, C = M; T < C; T++) {
        const w = p.getX(T);
        tg.fromBufferAttribute(y, w), n1(tg, w, h, r, e, t, this);
      }
    } else {
      const x = Math.max(0, c.start), M = Math.min(y.count, c.start + c.count);
      for (let T = x, C = M; T < C; T++)
        tg.fromBufferAttribute(y, T), n1(tg, T, h, r, e, t, this);
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const r = t[n[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, c = r.length; o < c; o++) {
          const f = r[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = o;
        }
      }
    }
  }
}
function n1(s, e, t, n, r, o, c) {
  const f = $x.distanceSqToPoint(s);
  if (f < t) {
    const h = new Y();
    $x.closestPointToPoint(s, h), h.applyMatrix4(n);
    const p = r.ray.origin.distanceTo(h);
    if (p < r.near || p > r.far)
      return;
    o.push({
      distance: p,
      distanceToRay: Math.sqrt(f),
      point: h,
      index: e,
      face: null,
      object: c
    });
  }
}
class lI extends Ci {
  constructor(e, t, n, r, o, c, f, h, p) {
    super(e, t, n, r, o, c, f, h, p), this.isVideoTexture = !0, this.minFilter = c !== void 0 ? c : hi, this.magFilter = o !== void 0 ? o : hi, this.generateMipmaps = !1;
    const v = this;
    function y() {
      v.needsUpdate = !0, e.requestVideoFrameCallback(y);
    }
    "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(y);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class uI extends Ci {
  constructor(e, t) {
    super({ width: e, height: t }), this.isFramebufferTexture = !0, this.magFilter = di, this.minFilter = di, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class Zg extends Ci {
  constructor(e, t, n, r, o, c, f, h, p, v, y, x) {
    super(null, c, f, h, p, v, r, o, y, x), this.isCompressedTexture = !0, this.image = { width: t, height: n }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class cI extends Zg {
  constructor(e, t, n, r, o, c) {
    super(e, t, n, o, c), this.isCompressedArrayTexture = !0, this.image.depth = r, this.wrapR = Mr;
  }
}
class fI extends Zg {
  constructor(e, t, n) {
    super(void 0, e[0].width, e[0].height, t, n, Go), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
  }
}
class dI extends Ci {
  constructor(e, t, n, r, o, c, f, h, p) {
    super(e, t, n, r, o, c, f, h, p), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class Ss {
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getPoint(n, t);
  }
  // Get sequence of points using getPoint( t )
  getPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return t;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPointAt(n / e));
    return t;
  }
  // Get total curve arc length
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let n, r = this.getPoint(0), o = 0;
    t.push(0);
    for (let c = 1; c <= e; c++)
      n = this.getPoint(c / e), o += n.distanceTo(r), t.push(o), r = n;
    return this.cacheArcLengths = t, t;
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(e, t) {
    const n = this.getLengths();
    let r = 0;
    const o = n.length;
    let c;
    t ? c = t : c = e * n[o - 1];
    let f = 0, h = o - 1, p;
    for (; f <= h; )
      if (r = Math.floor(f + (h - f) / 2), p = n[r] - c, p < 0)
        f = r + 1;
      else if (p > 0)
        h = r - 1;
      else {
        h = r;
        break;
      }
    if (r = h, n[r] === c)
      return r / (o - 1);
    const v = n[r], x = n[r + 1] - v, M = (c - v) / x;
    return (r + M) / (o - 1);
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(e, t) {
    let r = e - 1e-4, o = e + 1e-4;
    r < 0 && (r = 0), o > 1 && (o = 1);
    const c = this.getPoint(r), f = this.getPoint(o), h = t || (c.isVector2 ? new Ie() : new Y());
    return h.copy(f).sub(c).normalize(), h;
  }
  getTangentAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getTangent(n, t);
  }
  computeFrenetFrames(e, t) {
    const n = new Y(), r = [], o = [], c = [], f = new Y(), h = new tn();
    for (let M = 0; M <= e; M++) {
      const T = M / e;
      r[M] = this.getTangentAt(T, new Y());
    }
    o[0] = new Y(), c[0] = new Y();
    let p = Number.MAX_VALUE;
    const v = Math.abs(r[0].x), y = Math.abs(r[0].y), x = Math.abs(r[0].z);
    v <= p && (p = v, n.set(1, 0, 0)), y <= p && (p = y, n.set(0, 1, 0)), x <= p && n.set(0, 0, 1), f.crossVectors(r[0], n).normalize(), o[0].crossVectors(r[0], f), c[0].crossVectors(r[0], o[0]);
    for (let M = 1; M <= e; M++) {
      if (o[M] = o[M - 1].clone(), c[M] = c[M - 1].clone(), f.crossVectors(r[M - 1], r[M]), f.length() > Number.EPSILON) {
        f.normalize();
        const T = Math.acos(yi(r[M - 1].dot(r[M]), -1, 1));
        o[M].applyMatrix4(h.makeRotationAxis(f, T));
      }
      c[M].crossVectors(r[M], o[M]);
    }
    if (t === !0) {
      let M = Math.acos(yi(o[0].dot(o[e]), -1, 1));
      M /= e, r[0].dot(f.crossVectors(o[0], o[e])) > 0 && (M = -M);
      for (let T = 1; T <= e; T++)
        o[T].applyMatrix4(h.makeRotationAxis(r[T], M * T)), c[T].crossVectors(r[T], o[T]);
    }
    return {
      tangents: r,
      normals: o,
      binormals: c
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class Jg extends Ss {
  constructor(e = 0, t = 0, n = 1, r = 1, o = 0, c = Math.PI * 2, f = !1, h = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = r, this.aStartAngle = o, this.aEndAngle = c, this.aClockwise = f, this.aRotation = h;
  }
  getPoint(e, t) {
    const n = t || new Ie(), r = Math.PI * 2;
    let o = this.aEndAngle - this.aStartAngle;
    const c = Math.abs(o) < Number.EPSILON;
    for (; o < 0; )
      o += r;
    for (; o > r; )
      o -= r;
    o < Number.EPSILON && (c ? o = 0 : o = r), this.aClockwise === !0 && !c && (o === r ? o = -r : o = o - r);
    const f = this.aStartAngle + e * o;
    let h = this.aX + this.xRadius * Math.cos(f), p = this.aY + this.yRadius * Math.sin(f);
    if (this.aRotation !== 0) {
      const v = Math.cos(this.aRotation), y = Math.sin(this.aRotation), x = h - this.aX, M = p - this.aY;
      h = x * v - M * y + this.aX, p = x * y + M * v + this.aY;
    }
    return n.set(h, p);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class xA extends Jg {
  constructor(e, t, n, r, o, c) {
    super(e, t, n, n, r, o, c), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function FS() {
  let s = 0, e = 0, t = 0, n = 0;
  function r(o, c, f, h) {
    s = o, e = f, t = -3 * o + 3 * c - 2 * f - h, n = 2 * o - 2 * c + f + h;
  }
  return {
    initCatmullRom: function(o, c, f, h, p) {
      r(c, f, p * (f - o), p * (h - c));
    },
    initNonuniformCatmullRom: function(o, c, f, h, p, v, y) {
      let x = (c - o) / p - (f - o) / (p + v) + (f - c) / v, M = (f - c) / v - (h - c) / (v + y) + (h - f) / y;
      x *= v, M *= v, r(c, f, x, M);
    },
    calc: function(o) {
      const c = o * o, f = c * o;
      return s + e * o + t * c + n * f;
    }
  };
}
const ng = /* @__PURE__ */ new Y(), K_ = /* @__PURE__ */ new FS(), Q_ = /* @__PURE__ */ new FS(), $_ = /* @__PURE__ */ new FS();
class SA extends Ss {
  constructor(e = [], t = !1, n = "centripetal", r = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = r;
  }
  getPoint(e, t = new Y()) {
    const n = t, r = this.points, o = r.length, c = (o - (this.closed ? 0 : 1)) * e;
    let f = Math.floor(c), h = c - f;
    this.closed ? f += f > 0 ? 0 : (Math.floor(Math.abs(f) / o) + 1) * o : h === 0 && f === o - 1 && (f = o - 2, h = 1);
    let p, v;
    this.closed || f > 0 ? p = r[(f - 1) % o] : (ng.subVectors(r[0], r[1]).add(r[0]), p = ng);
    const y = r[f % o], x = r[(f + 1) % o];
    if (this.closed || f + 2 < o ? v = r[(f + 2) % o] : (ng.subVectors(r[o - 1], r[o - 2]).add(r[o - 1]), v = ng), this.curveType === "centripetal" || this.curveType === "chordal") {
      const M = this.curveType === "chordal" ? 0.5 : 0.25;
      let T = Math.pow(p.distanceToSquared(y), M), C = Math.pow(y.distanceToSquared(x), M), w = Math.pow(x.distanceToSquared(v), M);
      C < 1e-4 && (C = 1), T < 1e-4 && (T = C), w < 1e-4 && (w = C), K_.initNonuniformCatmullRom(p.x, y.x, x.x, v.x, T, C, w), Q_.initNonuniformCatmullRom(p.y, y.y, x.y, v.y, T, C, w), $_.initNonuniformCatmullRom(p.z, y.z, x.z, v.z, T, C, w);
    } else
      this.curveType === "catmullrom" && (K_.initCatmullRom(p.x, y.x, x.x, v.x, this.tension), Q_.initCatmullRom(p.y, y.y, x.y, v.y, this.tension), $_.initCatmullRom(p.z, y.z, x.z, v.z, this.tension));
    return n.set(
      K_.calc(h),
      Q_.calc(h),
      $_.calc(h)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const r = e.points[t];
      this.points.push(r.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const r = this.points[t];
      e.points.push(r.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const r = e.points[t];
      this.points.push(new Y().fromArray(r));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function i1(s, e, t, n, r) {
  const o = (n - e) * 0.5, c = (r - t) * 0.5, f = s * s, h = s * f;
  return (2 * t - 2 * n + o + c) * h + (-3 * t + 3 * n - 2 * o - c) * f + o * s + t;
}
function hI(s, e) {
  const t = 1 - s;
  return t * t * e;
}
function pI(s, e) {
  return 2 * (1 - s) * s * e;
}
function mI(s, e) {
  return s * s * e;
}
function lp(s, e, t, n) {
  return hI(s, e) + pI(s, t) + mI(s, n);
}
function vI(s, e) {
  const t = 1 - s;
  return t * t * t * e;
}
function gI(s, e) {
  const t = 1 - s;
  return 3 * t * t * s * e;
}
function yI(s, e) {
  return 3 * (1 - s) * s * s * e;
}
function _I(s, e) {
  return s * s * s * e;
}
function up(s, e, t, n, r) {
  return vI(s, e) + gI(s, t) + yI(s, n) + _I(s, r);
}
class zS extends Ss {
  constructor(e = new Ie(), t = new Ie(), n = new Ie(), r = new Ie()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = r;
  }
  getPoint(e, t = new Ie()) {
    const n = t, r = this.v0, o = this.v1, c = this.v2, f = this.v3;
    return n.set(
      up(e, r.x, o.x, c.x, f.x),
      up(e, r.y, o.y, c.y, f.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class MA extends Ss {
  constructor(e = new Y(), t = new Y(), n = new Y(), r = new Y()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = r;
  }
  getPoint(e, t = new Y()) {
    const n = t, r = this.v0, o = this.v1, c = this.v2, f = this.v3;
    return n.set(
      up(e, r.x, o.x, c.x, f.x),
      up(e, r.y, o.y, c.y, f.y),
      up(e, r.z, o.z, c.z, f.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class BS extends Ss {
  constructor(e = new Ie(), t = new Ie()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new Ie()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new Ie()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class EA extends Ss {
  constructor(e = new Y(), t = new Y()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new Y()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new Y()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class HS extends Ss {
  constructor(e = new Ie(), t = new Ie(), n = new Ie()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new Ie()) {
    const n = t, r = this.v0, o = this.v1, c = this.v2;
    return n.set(
      lp(e, r.x, o.x, c.x),
      lp(e, r.y, o.y, c.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class VS extends Ss {
  constructor(e = new Y(), t = new Y(), n = new Y()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new Y()) {
    const n = t, r = this.v0, o = this.v1, c = this.v2;
    return n.set(
      lp(e, r.x, o.x, c.x),
      lp(e, r.y, o.y, c.y),
      lp(e, r.z, o.z, c.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class kS extends Ss {
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  getPoint(e, t = new Ie()) {
    const n = t, r = this.points, o = (r.length - 1) * e, c = Math.floor(o), f = o - c, h = r[c === 0 ? c : c - 1], p = r[c], v = r[c > r.length - 2 ? r.length - 1 : c + 1], y = r[c > r.length - 3 ? r.length - 1 : c + 2];
    return n.set(
      i1(f, h.x, p.x, v.x, y.x),
      i1(f, h.y, p.y, v.y, y.y)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const r = e.points[t];
      this.points.push(r.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const r = this.points[t];
      e.points.push(r.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const r = e.points[t];
      this.points.push(new Ie().fromArray(r));
    }
    return this;
  }
}
var Dg = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: xA,
  CatmullRomCurve3: SA,
  CubicBezierCurve: zS,
  CubicBezierCurve3: MA,
  EllipseCurve: Jg,
  LineCurve: BS,
  LineCurve3: EA,
  QuadraticBezierCurve: HS,
  QuadraticBezierCurve3: VS,
  SplineCurve: kS
});
class TA extends Ss {
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(t)) {
      const n = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new Dg[n](t, e));
    }
    return this;
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(e, t) {
    const n = e * this.getLength(), r = this.getCurveLengths();
    let o = 0;
    for (; o < r.length; ) {
      if (r[o] >= n) {
        const c = r[o] - n, f = this.curves[o], h = f.getLength(), p = h === 0 ? 0 : 1 - c / h;
        return f.getPointAt(p, t);
      }
      o++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let n = 0, r = this.curves.length; n < r; n++)
      t += this.curves[n].getLength(), e.push(t);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let n;
    for (let r = 0, o = this.curves; r < o.length; r++) {
      const c = o[r], f = c.isEllipseCurve ? e * 2 : c.isLineCurve || c.isLineCurve3 ? 1 : c.isSplineCurve ? e * c.points.length : e, h = c.getPoints(f);
      for (let p = 0; p < h.length; p++) {
        const v = h[p];
        n && n.equals(v) || (t.push(v), n = v);
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const r = e.curves[t];
      this.curves.push(r.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let t = 0, n = this.curves.length; t < n; t++) {
      const r = this.curves[t];
      e.curves.push(r.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const r = e.curves[t];
      this.curves.push(new Dg[r.type]().fromJSON(r));
    }
    return this;
  }
}
class Ep extends TA {
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new Ie(), e && this.setFromPoints(e);
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, n = e.length; t < n; t++)
      this.lineTo(e[t].x, e[t].y);
    return this;
  }
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  lineTo(e, t) {
    const n = new BS(this.currentPoint.clone(), new Ie(e, t));
    return this.curves.push(n), this.currentPoint.set(e, t), this;
  }
  quadraticCurveTo(e, t, n, r) {
    const o = new HS(
      this.currentPoint.clone(),
      new Ie(e, t),
      new Ie(n, r)
    );
    return this.curves.push(o), this.currentPoint.set(n, r), this;
  }
  bezierCurveTo(e, t, n, r, o, c) {
    const f = new zS(
      this.currentPoint.clone(),
      new Ie(e, t),
      new Ie(n, r),
      new Ie(o, c)
    );
    return this.curves.push(f), this.currentPoint.set(o, c), this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e), n = new kS(t);
    return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
  }
  arc(e, t, n, r, o, c) {
    const f = this.currentPoint.x, h = this.currentPoint.y;
    return this.absarc(
      e + f,
      t + h,
      n,
      r,
      o,
      c
    ), this;
  }
  absarc(e, t, n, r, o, c) {
    return this.absellipse(e, t, n, n, r, o, c), this;
  }
  ellipse(e, t, n, r, o, c, f, h) {
    const p = this.currentPoint.x, v = this.currentPoint.y;
    return this.absellipse(e + p, t + v, n, r, o, c, f, h), this;
  }
  absellipse(e, t, n, r, o, c, f, h) {
    const p = new Jg(e, t, n, r, o, c, f, h);
    if (this.curves.length > 0) {
      const y = p.getPoint(0);
      y.equals(this.currentPoint) || this.lineTo(y.x, y.y);
    }
    this.curves.push(p);
    const v = p.getPoint(1);
    return this.currentPoint.copy(v), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class zp extends hn {
  constructor(e = [new Ie(0, -0.5), new Ie(0.5, 0), new Ie(0, 0.5)], t = 12, n = 0, r = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: t,
      phiStart: n,
      phiLength: r
    }, t = Math.floor(t), r = yi(r, 0, Math.PI * 2);
    const o = [], c = [], f = [], h = [], p = [], v = 1 / t, y = new Y(), x = new Ie(), M = new Y(), T = new Y(), C = new Y();
    let w = 0, E = 0;
    for (let L = 0; L <= e.length - 1; L++)
      switch (L) {
        case 0:
          w = e[L + 1].x - e[L].x, E = e[L + 1].y - e[L].y, M.x = E * 1, M.y = -w, M.z = E * 0, C.copy(M), M.normalize(), h.push(M.x, M.y, M.z);
          break;
        case e.length - 1:
          h.push(C.x, C.y, C.z);
          break;
        default:
          w = e[L + 1].x - e[L].x, E = e[L + 1].y - e[L].y, M.x = E * 1, M.y = -w, M.z = E * 0, T.copy(M), M.x += C.x, M.y += C.y, M.z += C.z, M.normalize(), h.push(M.x, M.y, M.z), C.copy(T);
      }
    for (let L = 0; L <= t; L++) {
      const R = n + L * v * r, U = Math.sin(R), F = Math.cos(R);
      for (let z = 0; z <= e.length - 1; z++) {
        y.x = e[z].x * U, y.y = e[z].y, y.z = e[z].x * F, c.push(y.x, y.y, y.z), x.x = L / t, x.y = z / (e.length - 1), f.push(x.x, x.y);
        const B = h[3 * z + 0] * U, W = h[3 * z + 1], O = h[3 * z + 0] * F;
        p.push(B, W, O);
      }
    }
    for (let L = 0; L < t; L++)
      for (let R = 0; R < e.length - 1; R++) {
        const U = R + L * e.length, F = U, z = U + e.length, B = U + e.length + 1, W = U + 1;
        o.push(F, z, W), o.push(B, W, z);
      }
    this.setIndex(o), this.setAttribute("position", new Pt(c, 3)), this.setAttribute("uv", new Pt(f, 2)), this.setAttribute("normal", new Pt(p, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new zp(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class Kg extends zp {
  constructor(e = 1, t = 1, n = 4, r = 8) {
    const o = new Ep();
    o.absarc(0, -t / 2, e, Math.PI * 1.5, 0), o.absarc(0, t / 2, e, 0, Math.PI * 0.5), super(o.getPoints(n), r), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      length: t,
      capSegments: n,
      radialSegments: r
    };
  }
  static fromJSON(e) {
    return new Kg(e.radius, e.length, e.capSegments, e.radialSegments);
  }
}
class Qg extends hn {
  constructor(e = 1, t = 32, n = 0, r = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: t,
      thetaStart: n,
      thetaLength: r
    }, t = Math.max(3, t);
    const o = [], c = [], f = [], h = [], p = new Y(), v = new Ie();
    c.push(0, 0, 0), f.push(0, 0, 1), h.push(0.5, 0.5);
    for (let y = 0, x = 3; y <= t; y++, x += 3) {
      const M = n + y / t * r;
      p.x = e * Math.cos(M), p.y = e * Math.sin(M), c.push(p.x, p.y, p.z), f.push(0, 0, 1), v.x = (c[x] / e + 1) / 2, v.y = (c[x + 1] / e + 1) / 2, h.push(v.x, v.y);
    }
    for (let y = 1; y <= t; y++)
      o.push(y, y + 1, 0);
    this.setIndex(o), this.setAttribute("position", new Pt(c, 3)), this.setAttribute("normal", new Pt(f, 3)), this.setAttribute("uv", new Pt(h, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Qg(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class _d extends hn {
  constructor(e = 1, t = 1, n = 1, r = 32, o = 1, c = !1, f = 0, h = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: n,
      radialSegments: r,
      heightSegments: o,
      openEnded: c,
      thetaStart: f,
      thetaLength: h
    };
    const p = this;
    r = Math.floor(r), o = Math.floor(o);
    const v = [], y = [], x = [], M = [];
    let T = 0;
    const C = [], w = n / 2;
    let E = 0;
    L(), c === !1 && (e > 0 && R(!0), t > 0 && R(!1)), this.setIndex(v), this.setAttribute("position", new Pt(y, 3)), this.setAttribute("normal", new Pt(x, 3)), this.setAttribute("uv", new Pt(M, 2));
    function L() {
      const U = new Y(), F = new Y();
      let z = 0;
      const B = (t - e) / n;
      for (let W = 0; W <= o; W++) {
        const O = [], I = W / o, Z = I * (t - e) + e;
        for (let ie = 0; ie <= r; ie++) {
          const fe = ie / r, K = fe * h + f, he = Math.sin(K), Te = Math.cos(K);
          F.x = Z * he, F.y = -I * n + w, F.z = Z * Te, y.push(F.x, F.y, F.z), U.set(he, B, Te).normalize(), x.push(U.x, U.y, U.z), M.push(fe, 1 - I), O.push(T++);
        }
        C.push(O);
      }
      for (let W = 0; W < r; W++)
        for (let O = 0; O < o; O++) {
          const I = C[O][W], Z = C[O + 1][W], ie = C[O + 1][W + 1], fe = C[O][W + 1];
          v.push(I, Z, fe), v.push(Z, ie, fe), z += 6;
        }
      p.addGroup(E, z, 0), E += z;
    }
    function R(U) {
      const F = T, z = new Ie(), B = new Y();
      let W = 0;
      const O = U === !0 ? e : t, I = U === !0 ? 1 : -1;
      for (let ie = 1; ie <= r; ie++)
        y.push(0, w * I, 0), x.push(0, I, 0), M.push(0.5, 0.5), T++;
      const Z = T;
      for (let ie = 0; ie <= r; ie++) {
        const K = ie / r * h + f, he = Math.cos(K), Te = Math.sin(K);
        B.x = O * Te, B.y = w * I, B.z = O * he, y.push(B.x, B.y, B.z), x.push(0, I, 0), z.x = he * 0.5 + 0.5, z.y = Te * 0.5 * I + 0.5, M.push(z.x, z.y), T++;
      }
      for (let ie = 0; ie < r; ie++) {
        const fe = F + ie, K = Z + ie;
        U === !0 ? v.push(K, K + 1, fe) : v.push(K + 1, K, fe), W += 3;
      }
      p.addGroup(E, W, U === !0 ? 1 : 2), E += W;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new _d(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class $g extends _d {
  constructor(e = 1, t = 1, n = 32, r = 1, o = !1, c = 0, f = Math.PI * 2) {
    super(0, e, t, n, r, o, c, f), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: t,
      radialSegments: n,
      heightSegments: r,
      openEnded: o,
      thetaStart: c,
      thetaLength: f
    };
  }
  static fromJSON(e) {
    return new $g(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class iu extends hn {
  constructor(e = [], t = [], n = 1, r = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: n,
      detail: r
    };
    const o = [], c = [];
    f(r), p(n), v(), this.setAttribute("position", new Pt(o, 3)), this.setAttribute("normal", new Pt(o.slice(), 3)), this.setAttribute("uv", new Pt(c, 2)), r === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function f(L) {
      const R = new Y(), U = new Y(), F = new Y();
      for (let z = 0; z < t.length; z += 3)
        M(t[z + 0], R), M(t[z + 1], U), M(t[z + 2], F), h(R, U, F, L);
    }
    function h(L, R, U, F) {
      const z = F + 1, B = [];
      for (let W = 0; W <= z; W++) {
        B[W] = [];
        const O = L.clone().lerp(U, W / z), I = R.clone().lerp(U, W / z), Z = z - W;
        for (let ie = 0; ie <= Z; ie++)
          ie === 0 && W === z ? B[W][ie] = O : B[W][ie] = O.clone().lerp(I, ie / Z);
      }
      for (let W = 0; W < z; W++)
        for (let O = 0; O < 2 * (z - W) - 1; O++) {
          const I = Math.floor(O / 2);
          O % 2 === 0 ? (x(B[W][I + 1]), x(B[W + 1][I]), x(B[W][I])) : (x(B[W][I + 1]), x(B[W + 1][I + 1]), x(B[W + 1][I]));
        }
    }
    function p(L) {
      const R = new Y();
      for (let U = 0; U < o.length; U += 3)
        R.x = o[U + 0], R.y = o[U + 1], R.z = o[U + 2], R.normalize().multiplyScalar(L), o[U + 0] = R.x, o[U + 1] = R.y, o[U + 2] = R.z;
    }
    function v() {
      const L = new Y();
      for (let R = 0; R < o.length; R += 3) {
        L.x = o[R + 0], L.y = o[R + 1], L.z = o[R + 2];
        const U = w(L) / 2 / Math.PI + 0.5, F = E(L) / Math.PI + 0.5;
        c.push(U, 1 - F);
      }
      T(), y();
    }
    function y() {
      for (let L = 0; L < c.length; L += 6) {
        const R = c[L + 0], U = c[L + 2], F = c[L + 4], z = Math.max(R, U, F), B = Math.min(R, U, F);
        z > 0.9 && B < 0.1 && (R < 0.2 && (c[L + 0] += 1), U < 0.2 && (c[L + 2] += 1), F < 0.2 && (c[L + 4] += 1));
      }
    }
    function x(L) {
      o.push(L.x, L.y, L.z);
    }
    function M(L, R) {
      const U = L * 3;
      R.x = e[U + 0], R.y = e[U + 1], R.z = e[U + 2];
    }
    function T() {
      const L = new Y(), R = new Y(), U = new Y(), F = new Y(), z = new Ie(), B = new Ie(), W = new Ie();
      for (let O = 0, I = 0; O < o.length; O += 9, I += 6) {
        L.set(o[O + 0], o[O + 1], o[O + 2]), R.set(o[O + 3], o[O + 4], o[O + 5]), U.set(o[O + 6], o[O + 7], o[O + 8]), z.set(c[I + 0], c[I + 1]), B.set(c[I + 2], c[I + 3]), W.set(c[I + 4], c[I + 5]), F.copy(L).add(R).add(U).divideScalar(3);
        const Z = w(F);
        C(z, I + 0, L, Z), C(B, I + 2, R, Z), C(W, I + 4, U, Z);
      }
    }
    function C(L, R, U, F) {
      F < 0 && L.x === 1 && (c[R] = L.x - 1), U.x === 0 && U.z === 0 && (c[R] = F / 2 / Math.PI + 0.5);
    }
    function w(L) {
      return Math.atan2(L.z, -L.x);
    }
    function E(L) {
      return Math.atan2(-L.y, Math.sqrt(L.x * L.x + L.z * L.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new iu(e.vertices, e.indices, e.radius, e.details);
  }
}
class ey extends iu {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, r = 1 / n, o = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -r,
      -n,
      0,
      -r,
      n,
      0,
      r,
      -n,
      0,
      r,
      n,
      // (±1/φ, ±φ, 0)
      -r,
      -n,
      0,
      -r,
      n,
      0,
      r,
      -n,
      0,
      r,
      n,
      0,
      // (±φ, 0, ±1/φ)
      -n,
      0,
      -r,
      n,
      0,
      -r,
      -n,
      0,
      r,
      n,
      0,
      r
    ], c = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(o, c, e, t), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new ey(e.radius, e.detail);
  }
}
const ig = /* @__PURE__ */ new Y(), rg = /* @__PURE__ */ new Y(), ex = /* @__PURE__ */ new Y(), ag = /* @__PURE__ */ new ia();
class bA extends hn {
  constructor(e = null, t = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: t
    }, e !== null) {
      const r = Math.pow(10, 4), o = Math.cos(dc * t), c = e.getIndex(), f = e.getAttribute("position"), h = c ? c.count : f.count, p = [0, 0, 0], v = ["a", "b", "c"], y = new Array(3), x = {}, M = [];
      for (let T = 0; T < h; T += 3) {
        c ? (p[0] = c.getX(T), p[1] = c.getX(T + 1), p[2] = c.getX(T + 2)) : (p[0] = T, p[1] = T + 1, p[2] = T + 2);
        const { a: C, b: w, c: E } = ag;
        if (C.fromBufferAttribute(f, p[0]), w.fromBufferAttribute(f, p[1]), E.fromBufferAttribute(f, p[2]), ag.getNormal(ex), y[0] = `${Math.round(C.x * r)},${Math.round(C.y * r)},${Math.round(C.z * r)}`, y[1] = `${Math.round(w.x * r)},${Math.round(w.y * r)},${Math.round(w.z * r)}`, y[2] = `${Math.round(E.x * r)},${Math.round(E.y * r)},${Math.round(E.z * r)}`, !(y[0] === y[1] || y[1] === y[2] || y[2] === y[0]))
          for (let L = 0; L < 3; L++) {
            const R = (L + 1) % 3, U = y[L], F = y[R], z = ag[v[L]], B = ag[v[R]], W = `${U}_${F}`, O = `${F}_${U}`;
            O in x && x[O] ? (ex.dot(x[O].normal) <= o && (M.push(z.x, z.y, z.z), M.push(B.x, B.y, B.z)), x[O] = null) : W in x || (x[W] = {
              index0: p[L],
              index1: p[R],
              normal: ex.clone()
            });
          }
      }
      for (const T in x)
        if (x[T]) {
          const { index0: C, index1: w } = x[T];
          ig.fromBufferAttribute(f, C), rg.fromBufferAttribute(f, w), M.push(ig.x, ig.y, ig.z), M.push(rg.x, rg.y, rg.z);
        }
      this.setAttribute("position", new Pt(M, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class mc extends Ep {
  constructor(e) {
    super(e), this.uuid = ba(), this.type = "Shape", this.holes = [];
  }
  getPointsHoles(e) {
    const t = [];
    for (let n = 0, r = this.holes.length; n < r; n++)
      t[n] = this.holes[n].getPoints(e);
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const r = e.holes[t];
      this.holes.push(r.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let t = 0, n = this.holes.length; t < n; t++) {
      const r = this.holes[t];
      e.holes.push(r.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const r = e.holes[t];
      this.holes.push(new Ep().fromJSON(r));
    }
    return this;
  }
}
const xI = {
  triangulate: function(s, e, t = 2) {
    const n = e && e.length, r = n ? e[0] * t : s.length;
    let o = wA(s, 0, r, t, !0);
    const c = [];
    if (!o || o.next === o.prev)
      return c;
    let f, h, p, v, y, x, M;
    if (n && (o = bI(s, e, o, t)), s.length > 80 * t) {
      f = p = s[0], h = v = s[1];
      for (let T = t; T < r; T += t)
        y = s[T], x = s[T + 1], y < f && (f = y), x < h && (h = x), y > p && (p = y), x > v && (v = x);
      M = Math.max(p - f, v - h), M = M !== 0 ? 32767 / M : 0;
    }
    return Tp(o, c, t, f, h, M, 0), c;
  }
};
function wA(s, e, t, n, r) {
  let o, c;
  if (r === II(s, e, t, n) > 0)
    for (o = e; o < t; o += n)
      c = r1(o, s[o], s[o + 1], c);
  else
    for (o = t - n; o >= e; o -= n)
      c = r1(o, s[o], s[o + 1], c);
  return c && ty(c, c.next) && (wp(c), c = c.next), c;
}
function _c(s, e) {
  if (!s)
    return s;
  e || (e = s);
  let t = s, n;
  do
    if (n = !1, !t.steiner && (ty(t, t.next) || pi(t.prev, t, t.next) === 0)) {
      if (wp(t), t = e = t.prev, t === t.next)
        break;
      n = !0;
    } else
      t = t.next;
  while (n || t !== e);
  return e;
}
function Tp(s, e, t, n, r, o, c) {
  if (!s)
    return;
  !c && o && LI(s, n, r, o);
  let f = s, h, p;
  for (; s.prev !== s.next; ) {
    if (h = s.prev, p = s.next, o ? MI(s, n, r, o) : SI(s)) {
      e.push(h.i / t | 0), e.push(s.i / t | 0), e.push(p.i / t | 0), wp(s), s = p.next, f = p.next;
      continue;
    }
    if (s = p, s === f) {
      c ? c === 1 ? (s = EI(_c(s), e, t), Tp(s, e, t, n, r, o, 2)) : c === 2 && TI(s, e, t, n, r, o) : Tp(_c(s), e, t, n, r, o, 1);
      break;
    }
  }
}
function SI(s) {
  const e = s.prev, t = s, n = s.next;
  if (pi(e, t, n) >= 0)
    return !1;
  const r = e.x, o = t.x, c = n.x, f = e.y, h = t.y, p = n.y, v = r < o ? r < c ? r : c : o < c ? o : c, y = f < h ? f < p ? f : p : h < p ? h : p, x = r > o ? r > c ? r : c : o > c ? o : c, M = f > h ? f > p ? f : p : h > p ? h : p;
  let T = n.next;
  for (; T !== e; ) {
    if (T.x >= v && T.x <= x && T.y >= y && T.y <= M && cd(r, f, o, h, c, p, T.x, T.y) && pi(T.prev, T, T.next) >= 0)
      return !1;
    T = T.next;
  }
  return !0;
}
function MI(s, e, t, n) {
  const r = s.prev, o = s, c = s.next;
  if (pi(r, o, c) >= 0)
    return !1;
  const f = r.x, h = o.x, p = c.x, v = r.y, y = o.y, x = c.y, M = f < h ? f < p ? f : p : h < p ? h : p, T = v < y ? v < x ? v : x : y < x ? y : x, C = f > h ? f > p ? f : p : h > p ? h : p, w = v > y ? v > x ? v : x : y > x ? y : x, E = eS(M, T, e, t, n), L = eS(C, w, e, t, n);
  let R = s.prevZ, U = s.nextZ;
  for (; R && R.z >= E && U && U.z <= L; ) {
    if (R.x >= M && R.x <= C && R.y >= T && R.y <= w && R !== r && R !== c && cd(f, v, h, y, p, x, R.x, R.y) && pi(R.prev, R, R.next) >= 0 || (R = R.prevZ, U.x >= M && U.x <= C && U.y >= T && U.y <= w && U !== r && U !== c && cd(f, v, h, y, p, x, U.x, U.y) && pi(U.prev, U, U.next) >= 0))
      return !1;
    U = U.nextZ;
  }
  for (; R && R.z >= E; ) {
    if (R.x >= M && R.x <= C && R.y >= T && R.y <= w && R !== r && R !== c && cd(f, v, h, y, p, x, R.x, R.y) && pi(R.prev, R, R.next) >= 0)
      return !1;
    R = R.prevZ;
  }
  for (; U && U.z <= L; ) {
    if (U.x >= M && U.x <= C && U.y >= T && U.y <= w && U !== r && U !== c && cd(f, v, h, y, p, x, U.x, U.y) && pi(U.prev, U, U.next) >= 0)
      return !1;
    U = U.nextZ;
  }
  return !0;
}
function EI(s, e, t) {
  let n = s;
  do {
    const r = n.prev, o = n.next.next;
    !ty(r, o) && AA(r, n, n.next, o) && bp(r, o) && bp(o, r) && (e.push(r.i / t | 0), e.push(n.i / t | 0), e.push(o.i / t | 0), wp(n), wp(n.next), n = s = o), n = n.next;
  } while (n !== s);
  return _c(n);
}
function TI(s, e, t, n, r, o) {
  let c = s;
  do {
    let f = c.next.next;
    for (; f !== c.prev; ) {
      if (c.i !== f.i && UI(c, f)) {
        let h = RA(c, f);
        c = _c(c, c.next), h = _c(h, h.next), Tp(c, e, t, n, r, o, 0), Tp(h, e, t, n, r, o, 0);
        return;
      }
      f = f.next;
    }
    c = c.next;
  } while (c !== s);
}
function bI(s, e, t, n) {
  const r = [];
  let o, c, f, h, p;
  for (o = 0, c = e.length; o < c; o++)
    f = e[o] * n, h = o < c - 1 ? e[o + 1] * n : s.length, p = wA(s, f, h, n, !1), p === p.next && (p.steiner = !0), r.push(DI(p));
  for (r.sort(wI), o = 0; o < r.length; o++)
    t = AI(r[o], t);
  return t;
}
function wI(s, e) {
  return s.x - e.x;
}
function AI(s, e) {
  const t = RI(s, e);
  if (!t)
    return e;
  const n = RA(t, s);
  return _c(n, n.next), _c(t, t.next);
}
function RI(s, e) {
  let t = e, n = -1 / 0, r;
  const o = s.x, c = s.y;
  do {
    if (c <= t.y && c >= t.next.y && t.next.y !== t.y) {
      const x = t.x + (c - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (x <= o && x > n && (n = x, r = t.x < t.next.x ? t : t.next, x === o))
        return r;
    }
    t = t.next;
  } while (t !== e);
  if (!r)
    return null;
  const f = r, h = r.x, p = r.y;
  let v = 1 / 0, y;
  t = r;
  do
    o >= t.x && t.x >= h && o !== t.x && cd(c < p ? o : n, c, h, p, c < p ? n : o, c, t.x, t.y) && (y = Math.abs(c - t.y) / (o - t.x), bp(t, s) && (y < v || y === v && (t.x > r.x || t.x === r.x && CI(r, t))) && (r = t, v = y)), t = t.next;
  while (t !== f);
  return r;
}
function CI(s, e) {
  return pi(s.prev, s, e.prev) < 0 && pi(e.next, s, s.next) < 0;
}
function LI(s, e, t, n) {
  let r = s;
  do
    r.z === 0 && (r.z = eS(r.x, r.y, e, t, n)), r.prevZ = r.prev, r.nextZ = r.next, r = r.next;
  while (r !== s);
  r.prevZ.nextZ = null, r.prevZ = null, PI(r);
}
function PI(s) {
  let e, t, n, r, o, c, f, h, p = 1;
  do {
    for (t = s, s = null, o = null, c = 0; t; ) {
      for (c++, n = t, f = 0, e = 0; e < p && (f++, n = n.nextZ, !!n); e++)
        ;
      for (h = p; f > 0 || h > 0 && n; )
        f !== 0 && (h === 0 || !n || t.z <= n.z) ? (r = t, t = t.nextZ, f--) : (r = n, n = n.nextZ, h--), o ? o.nextZ = r : s = r, r.prevZ = o, o = r;
      t = n;
    }
    o.nextZ = null, p *= 2;
  } while (c > 1);
  return s;
}
function eS(s, e, t, n, r) {
  return s = (s - t) * r | 0, e = (e - n) * r | 0, s = (s | s << 8) & 16711935, s = (s | s << 4) & 252645135, s = (s | s << 2) & 858993459, s = (s | s << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, s | e << 1;
}
function DI(s) {
  let e = s, t = s;
  do
    (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
  while (e !== s);
  return t;
}
function cd(s, e, t, n, r, o, c, f) {
  return (r - c) * (e - f) >= (s - c) * (o - f) && (s - c) * (n - f) >= (t - c) * (e - f) && (t - c) * (o - f) >= (r - c) * (n - f);
}
function UI(s, e) {
  return s.next.i !== e.i && s.prev.i !== e.i && !NI(s, e) && // dones't intersect other edges
  (bp(s, e) && bp(e, s) && OI(s, e) && // locally visible
  (pi(s.prev, s, e.prev) || pi(s, e.prev, e)) || // does not create opposite-facing sectors
  ty(s, e) && pi(s.prev, s, s.next) > 0 && pi(e.prev, e, e.next) > 0);
}
function pi(s, e, t) {
  return (e.y - s.y) * (t.x - e.x) - (e.x - s.x) * (t.y - e.y);
}
function ty(s, e) {
  return s.x === e.x && s.y === e.y;
}
function AA(s, e, t, n) {
  const r = og(pi(s, e, t)), o = og(pi(s, e, n)), c = og(pi(t, n, s)), f = og(pi(t, n, e));
  return !!(r !== o && c !== f || r === 0 && sg(s, t, e) || o === 0 && sg(s, n, e) || c === 0 && sg(t, s, n) || f === 0 && sg(t, e, n));
}
function sg(s, e, t) {
  return e.x <= Math.max(s.x, t.x) && e.x >= Math.min(s.x, t.x) && e.y <= Math.max(s.y, t.y) && e.y >= Math.min(s.y, t.y);
}
function og(s) {
  return s > 0 ? 1 : s < 0 ? -1 : 0;
}
function NI(s, e) {
  let t = s;
  do {
    if (t.i !== s.i && t.next.i !== s.i && t.i !== e.i && t.next.i !== e.i && AA(t, t.next, s, e))
      return !0;
    t = t.next;
  } while (t !== s);
  return !1;
}
function bp(s, e) {
  return pi(s.prev, s, s.next) < 0 ? pi(s, e, s.next) >= 0 && pi(s, s.prev, e) >= 0 : pi(s, e, s.prev) < 0 || pi(s, s.next, e) < 0;
}
function OI(s, e) {
  let t = s, n = !1;
  const r = (s.x + e.x) / 2, o = (s.y + e.y) / 2;
  do
    t.y > o != t.next.y > o && t.next.y !== t.y && r < (t.next.x - t.x) * (o - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
  while (t !== s);
  return n;
}
function RA(s, e) {
  const t = new tS(s.i, s.x, s.y), n = new tS(e.i, e.x, e.y), r = s.next, o = e.prev;
  return s.next = e, e.prev = s, t.next = r, r.prev = t, n.next = t, t.prev = n, o.next = n, n.prev = o, n;
}
function r1(s, e, t, n) {
  const r = new tS(s, e, t);
  return n ? (r.next = n.next, r.prev = n, n.next.prev = r, n.next = r) : (r.prev = r, r.next = r), r;
}
function wp(s) {
  s.next.prev = s.prev, s.prev.next = s.next, s.prevZ && (s.prevZ.nextZ = s.nextZ), s.nextZ && (s.nextZ.prevZ = s.prevZ);
}
function tS(s, e, t) {
  this.i = s, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function II(s, e, t, n) {
  let r = 0;
  for (let o = e, c = t - n; o < t; o += n)
    r += (s[c] - s[o]) * (s[o + 1] + s[c + 1]), c = o;
  return r;
}
class Js {
  // calculate area of the contour polygon
  static area(e) {
    const t = e.length;
    let n = 0;
    for (let r = t - 1, o = 0; o < t; r = o++)
      n += e[r].x * e[o].y - e[o].x * e[r].y;
    return n * 0.5;
  }
  static isClockWise(e) {
    return Js.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const n = [], r = [], o = [];
    a1(e), s1(n, e);
    let c = e.length;
    t.forEach(a1);
    for (let h = 0; h < t.length; h++)
      r.push(c), c += t[h].length, s1(n, t[h]);
    const f = xI.triangulate(n, r);
    for (let h = 0; h < f.length; h += 3)
      o.push(f.slice(h, h + 3));
    return o;
  }
}
function a1(s) {
  const e = s.length;
  e > 2 && s[e - 1].equals(s[0]) && s.pop();
}
function s1(s, e) {
  for (let t = 0; t < e.length; t++)
    s.push(e[t].x), s.push(e[t].y);
}
class ny extends hn {
  constructor(e = new mc([new Ie(0.5, 0.5), new Ie(-0.5, 0.5), new Ie(-0.5, -0.5), new Ie(0.5, -0.5)]), t = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: t
    }, e = Array.isArray(e) ? e : [e];
    const n = this, r = [], o = [];
    for (let f = 0, h = e.length; f < h; f++) {
      const p = e[f];
      c(p);
    }
    this.setAttribute("position", new Pt(r, 3)), this.setAttribute("uv", new Pt(o, 2)), this.computeVertexNormals();
    function c(f) {
      const h = [], p = t.curveSegments !== void 0 ? t.curveSegments : 12, v = t.steps !== void 0 ? t.steps : 1, y = t.depth !== void 0 ? t.depth : 1;
      let x = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, M = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2, T = t.bevelSize !== void 0 ? t.bevelSize : M - 0.1, C = t.bevelOffset !== void 0 ? t.bevelOffset : 0, w = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const E = t.extrudePath, L = t.UVGenerator !== void 0 ? t.UVGenerator : FI;
      let R, U = !1, F, z, B, W;
      E && (R = E.getSpacedPoints(v), U = !0, x = !1, F = E.computeFrenetFrames(v, !1), z = new Y(), B = new Y(), W = new Y()), x || (w = 0, M = 0, T = 0, C = 0);
      const O = f.extractPoints(p);
      let I = O.shape;
      const Z = O.holes;
      if (!Js.isClockWise(I)) {
        I = I.reverse();
        for (let Q = 0, ke = Z.length; Q < ke; Q++) {
          const Re = Z[Q];
          Js.isClockWise(Re) && (Z[Q] = Re.reverse());
        }
      }
      const fe = Js.triangulateShape(I, Z), K = I;
      for (let Q = 0, ke = Z.length; Q < ke; Q++) {
        const Re = Z[Q];
        I = I.concat(Re);
      }
      function he(Q, ke, Re) {
        return ke || console.error("THREE.ExtrudeGeometry: vec does not exist"), Q.clone().addScaledVector(ke, Re);
      }
      const Te = I.length, Me = fe.length;
      function ne(Q, ke, Re) {
        let Xe, Ue, Mt;
        const lt = Q.x - ke.x, at = Q.y - ke.y, Dt = Re.x - Q.x, Zt = Re.y - Q.y, rn = lt * lt + at * at, X = lt * Zt - at * Dt;
        if (Math.abs(X) > Number.EPSILON) {
          const H = Math.sqrt(rn), ye = Math.sqrt(Dt * Dt + Zt * Zt), Ye = ke.x - at / H, Ve = ke.y + lt / H, Ze = Re.x - Zt / ye, bt = Re.y + Dt / ye, Ke = ((Ze - Ye) * Zt - (bt - Ve) * Dt) / (lt * Zt - at * Dt);
          Xe = Ye + lt * Ke - Q.x, Ue = Ve + at * Ke - Q.y;
          const Se = Xe * Xe + Ue * Ue;
          if (Se <= 2)
            return new Ie(Xe, Ue);
          Mt = Math.sqrt(Se / 2);
        } else {
          let H = !1;
          lt > Number.EPSILON ? Dt > Number.EPSILON && (H = !0) : lt < -Number.EPSILON ? Dt < -Number.EPSILON && (H = !0) : Math.sign(at) === Math.sign(Zt) && (H = !0), H ? (Xe = -at, Ue = lt, Mt = Math.sqrt(rn)) : (Xe = lt, Ue = at, Mt = Math.sqrt(rn / 2));
        }
        return new Ie(Xe / Mt, Ue / Mt);
      }
      const le = [];
      for (let Q = 0, ke = K.length, Re = ke - 1, Xe = Q + 1; Q < ke; Q++, Re++, Xe++)
        Re === ke && (Re = 0), Xe === ke && (Xe = 0), le[Q] = ne(K[Q], K[Re], K[Xe]);
      const re = [];
      let J, ue = le.concat();
      for (let Q = 0, ke = Z.length; Q < ke; Q++) {
        const Re = Z[Q];
        J = [];
        for (let Xe = 0, Ue = Re.length, Mt = Ue - 1, lt = Xe + 1; Xe < Ue; Xe++, Mt++, lt++)
          Mt === Ue && (Mt = 0), lt === Ue && (lt = 0), J[Xe] = ne(Re[Xe], Re[Mt], Re[lt]);
        re.push(J), ue = ue.concat(J);
      }
      for (let Q = 0; Q < w; Q++) {
        const ke = Q / w, Re = M * Math.cos(ke * Math.PI / 2), Xe = T * Math.sin(ke * Math.PI / 2) + C;
        for (let Ue = 0, Mt = K.length; Ue < Mt; Ue++) {
          const lt = he(K[Ue], le[Ue], Xe);
          gt(lt.x, lt.y, -Re);
        }
        for (let Ue = 0, Mt = Z.length; Ue < Mt; Ue++) {
          const lt = Z[Ue];
          J = re[Ue];
          for (let at = 0, Dt = lt.length; at < Dt; at++) {
            const Zt = he(lt[at], J[at], Xe);
            gt(Zt.x, Zt.y, -Re);
          }
        }
      }
      const Pe = T + C;
      for (let Q = 0; Q < Te; Q++) {
        const ke = x ? he(I[Q], ue[Q], Pe) : I[Q];
        U ? (B.copy(F.normals[0]).multiplyScalar(ke.x), z.copy(F.binormals[0]).multiplyScalar(ke.y), W.copy(R[0]).add(B).add(z), gt(W.x, W.y, W.z)) : gt(ke.x, ke.y, 0);
      }
      for (let Q = 1; Q <= v; Q++)
        for (let ke = 0; ke < Te; ke++) {
          const Re = x ? he(I[ke], ue[ke], Pe) : I[ke];
          U ? (B.copy(F.normals[Q]).multiplyScalar(Re.x), z.copy(F.binormals[Q]).multiplyScalar(Re.y), W.copy(R[Q]).add(B).add(z), gt(W.x, W.y, W.z)) : gt(Re.x, Re.y, y / v * Q);
        }
      for (let Q = w - 1; Q >= 0; Q--) {
        const ke = Q / w, Re = M * Math.cos(ke * Math.PI / 2), Xe = T * Math.sin(ke * Math.PI / 2) + C;
        for (let Ue = 0, Mt = K.length; Ue < Mt; Ue++) {
          const lt = he(K[Ue], le[Ue], Xe);
          gt(lt.x, lt.y, y + Re);
        }
        for (let Ue = 0, Mt = Z.length; Ue < Mt; Ue++) {
          const lt = Z[Ue];
          J = re[Ue];
          for (let at = 0, Dt = lt.length; at < Dt; at++) {
            const Zt = he(lt[at], J[at], Xe);
            U ? gt(Zt.x, Zt.y + R[v - 1].y, R[v - 1].x + Re) : gt(Zt.x, Zt.y, y + Re);
          }
        }
      }
      qe(), $e();
      function qe() {
        const Q = r.length / 3;
        if (x) {
          let ke = 0, Re = Te * ke;
          for (let Xe = 0; Xe < Me; Xe++) {
            const Ue = fe[Xe];
            ot(Ue[2] + Re, Ue[1] + Re, Ue[0] + Re);
          }
          ke = v + w * 2, Re = Te * ke;
          for (let Xe = 0; Xe < Me; Xe++) {
            const Ue = fe[Xe];
            ot(Ue[0] + Re, Ue[1] + Re, Ue[2] + Re);
          }
        } else {
          for (let ke = 0; ke < Me; ke++) {
            const Re = fe[ke];
            ot(Re[2], Re[1], Re[0]);
          }
          for (let ke = 0; ke < Me; ke++) {
            const Re = fe[ke];
            ot(Re[0] + Te * v, Re[1] + Te * v, Re[2] + Te * v);
          }
        }
        n.addGroup(Q, r.length / 3 - Q, 0);
      }
      function $e() {
        const Q = r.length / 3;
        let ke = 0;
        it(K, ke), ke += K.length;
        for (let Re = 0, Xe = Z.length; Re < Xe; Re++) {
          const Ue = Z[Re];
          it(Ue, ke), ke += Ue.length;
        }
        n.addGroup(Q, r.length / 3 - Q, 1);
      }
      function it(Q, ke) {
        let Re = Q.length;
        for (; --Re >= 0; ) {
          const Xe = Re;
          let Ue = Re - 1;
          Ue < 0 && (Ue = Q.length - 1);
          for (let Mt = 0, lt = v + w * 2; Mt < lt; Mt++) {
            const at = Te * Mt, Dt = Te * (Mt + 1), Zt = ke + Xe + at, rn = ke + Ue + at, X = ke + Ue + Dt, H = ke + Xe + Dt;
            Vt(Zt, rn, X, H);
          }
        }
      }
      function gt(Q, ke, Re) {
        h.push(Q), h.push(ke), h.push(Re);
      }
      function ot(Q, ke, Re) {
        nn(Q), nn(ke), nn(Re);
        const Xe = r.length / 3, Ue = L.generateTopUV(n, r, Xe - 3, Xe - 2, Xe - 1);
        Tt(Ue[0]), Tt(Ue[1]), Tt(Ue[2]);
      }
      function Vt(Q, ke, Re, Xe) {
        nn(Q), nn(ke), nn(Xe), nn(ke), nn(Re), nn(Xe);
        const Ue = r.length / 3, Mt = L.generateSideWallUV(n, r, Ue - 6, Ue - 3, Ue - 2, Ue - 1);
        Tt(Mt[0]), Tt(Mt[1]), Tt(Mt[3]), Tt(Mt[1]), Tt(Mt[2]), Tt(Mt[3]);
      }
      function nn(Q) {
        r.push(h[Q * 3 + 0]), r.push(h[Q * 3 + 1]), r.push(h[Q * 3 + 2]);
      }
      function Tt(Q) {
        o.push(Q.x), o.push(Q.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
    return zI(t, n, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let o = 0, c = e.shapes.length; o < c; o++) {
      const f = t[e.shapes[o]];
      n.push(f);
    }
    const r = e.options.extrudePath;
    return r !== void 0 && (e.options.extrudePath = new Dg[r.type]().fromJSON(r)), new ny(n, e.options);
  }
}
const FI = {
  generateTopUV: function(s, e, t, n, r) {
    const o = e[t * 3], c = e[t * 3 + 1], f = e[n * 3], h = e[n * 3 + 1], p = e[r * 3], v = e[r * 3 + 1];
    return [
      new Ie(o, c),
      new Ie(f, h),
      new Ie(p, v)
    ];
  },
  generateSideWallUV: function(s, e, t, n, r, o) {
    const c = e[t * 3], f = e[t * 3 + 1], h = e[t * 3 + 2], p = e[n * 3], v = e[n * 3 + 1], y = e[n * 3 + 2], x = e[r * 3], M = e[r * 3 + 1], T = e[r * 3 + 2], C = e[o * 3], w = e[o * 3 + 1], E = e[o * 3 + 2];
    return Math.abs(f - v) < Math.abs(c - p) ? [
      new Ie(c, 1 - h),
      new Ie(p, 1 - y),
      new Ie(x, 1 - T),
      new Ie(C, 1 - E)
    ] : [
      new Ie(f, 1 - h),
      new Ie(v, 1 - y),
      new Ie(M, 1 - T),
      new Ie(w, 1 - E)
    ];
  }
};
function zI(s, e, t) {
  if (t.shapes = [], Array.isArray(s))
    for (let n = 0, r = s.length; n < r; n++) {
      const o = s[n];
      t.shapes.push(o.uuid);
    }
  else
    t.shapes.push(s.uuid);
  return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
class iy extends iu {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, r = [
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      0,
      0,
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      n,
      0,
      -1,
      n,
      0,
      1,
      -n,
      0,
      -1,
      -n,
      0,
      1
    ], o = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(r, o, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new iy(e.radius, e.detail);
  }
}
class Bp extends iu {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], r = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(n, r, e, t), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Bp(e.radius, e.detail);
  }
}
class ry extends hn {
  constructor(e = 0.5, t = 1, n = 32, r = 1, o = 0, c = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: n,
      phiSegments: r,
      thetaStart: o,
      thetaLength: c
    }, n = Math.max(3, n), r = Math.max(1, r);
    const f = [], h = [], p = [], v = [];
    let y = e;
    const x = (t - e) / r, M = new Y(), T = new Ie();
    for (let C = 0; C <= r; C++) {
      for (let w = 0; w <= n; w++) {
        const E = o + w / n * c;
        M.x = y * Math.cos(E), M.y = y * Math.sin(E), h.push(M.x, M.y, M.z), p.push(0, 0, 1), T.x = (M.x / t + 1) / 2, T.y = (M.y / t + 1) / 2, v.push(T.x, T.y);
      }
      y += x;
    }
    for (let C = 0; C < r; C++) {
      const w = C * (n + 1);
      for (let E = 0; E < n; E++) {
        const L = E + w, R = L, U = L + n + 1, F = L + n + 2, z = L + 1;
        f.push(R, U, z), f.push(U, F, z);
      }
    }
    this.setIndex(f), this.setAttribute("position", new Pt(h, 3)), this.setAttribute("normal", new Pt(p, 3)), this.setAttribute("uv", new Pt(v, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new ry(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class ay extends hn {
  constructor(e = new mc([new Ie(0, 0.5), new Ie(-0.5, -0.5), new Ie(0.5, -0.5)]), t = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const n = [], r = [], o = [], c = [];
    let f = 0, h = 0;
    if (Array.isArray(e) === !1)
      p(e);
    else
      for (let v = 0; v < e.length; v++)
        p(e[v]), this.addGroup(f, h, v), f += h, h = 0;
    this.setIndex(n), this.setAttribute("position", new Pt(r, 3)), this.setAttribute("normal", new Pt(o, 3)), this.setAttribute("uv", new Pt(c, 2));
    function p(v) {
      const y = r.length / 3, x = v.extractPoints(t);
      let M = x.shape;
      const T = x.holes;
      Js.isClockWise(M) === !1 && (M = M.reverse());
      for (let w = 0, E = T.length; w < E; w++) {
        const L = T[w];
        Js.isClockWise(L) === !0 && (T[w] = L.reverse());
      }
      const C = Js.triangulateShape(M, T);
      for (let w = 0, E = T.length; w < E; w++) {
        const L = T[w];
        M = M.concat(L);
      }
      for (let w = 0, E = M.length; w < E; w++) {
        const L = M[w];
        r.push(L.x, L.y, 0), o.push(0, 0, 1), c.push(L.x, L.y);
      }
      for (let w = 0, E = C.length; w < E; w++) {
        const L = C[w], R = L[0] + y, U = L[1] + y, F = L[2] + y;
        n.push(R, U, F), h += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes;
    return BI(t, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let r = 0, o = e.shapes.length; r < o; r++) {
      const c = t[e.shapes[r]];
      n.push(c);
    }
    return new ay(n, e.curveSegments);
  }
}
function BI(s, e) {
  if (e.shapes = [], Array.isArray(s))
    for (let t = 0, n = s.length; t < n; t++) {
      const r = s[t];
      e.shapes.push(r.uuid);
    }
  else
    e.shapes.push(s.uuid);
  return e;
}
class Hp extends hn {
  constructor(e = 1, t = 32, n = 16, r = 0, o = Math.PI * 2, c = 0, f = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: n,
      phiStart: r,
      phiLength: o,
      thetaStart: c,
      thetaLength: f
    }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
    const h = Math.min(c + f, Math.PI);
    let p = 0;
    const v = [], y = new Y(), x = new Y(), M = [], T = [], C = [], w = [];
    for (let E = 0; E <= n; E++) {
      const L = [], R = E / n;
      let U = 0;
      E === 0 && c === 0 ? U = 0.5 / t : E === n && h === Math.PI && (U = -0.5 / t);
      for (let F = 0; F <= t; F++) {
        const z = F / t;
        y.x = -e * Math.cos(r + z * o) * Math.sin(c + R * f), y.y = e * Math.cos(c + R * f), y.z = e * Math.sin(r + z * o) * Math.sin(c + R * f), T.push(y.x, y.y, y.z), x.copy(y).normalize(), C.push(x.x, x.y, x.z), w.push(z + U, 1 - R), L.push(p++);
      }
      v.push(L);
    }
    for (let E = 0; E < n; E++)
      for (let L = 0; L < t; L++) {
        const R = v[E][L + 1], U = v[E][L], F = v[E + 1][L], z = v[E + 1][L + 1];
        (E !== 0 || c > 0) && M.push(R, U, z), (E !== n - 1 || h < Math.PI) && M.push(U, F, z);
      }
    this.setIndex(M), this.setAttribute("position", new Pt(T, 3)), this.setAttribute("normal", new Pt(C, 3)), this.setAttribute("uv", new Pt(w, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Hp(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class sy extends iu {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], r = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(n, r, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new sy(e.radius, e.detail);
  }
}
class oy extends hn {
  constructor(e = 1, t = 0.4, n = 12, r = 48, o = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: n,
      tubularSegments: r,
      arc: o
    }, n = Math.floor(n), r = Math.floor(r);
    const c = [], f = [], h = [], p = [], v = new Y(), y = new Y(), x = new Y();
    for (let M = 0; M <= n; M++)
      for (let T = 0; T <= r; T++) {
        const C = T / r * o, w = M / n * Math.PI * 2;
        y.x = (e + t * Math.cos(w)) * Math.cos(C), y.y = (e + t * Math.cos(w)) * Math.sin(C), y.z = t * Math.sin(w), f.push(y.x, y.y, y.z), v.x = e * Math.cos(C), v.y = e * Math.sin(C), x.subVectors(y, v).normalize(), h.push(x.x, x.y, x.z), p.push(T / r), p.push(M / n);
      }
    for (let M = 1; M <= n; M++)
      for (let T = 1; T <= r; T++) {
        const C = (r + 1) * M + T - 1, w = (r + 1) * (M - 1) + T - 1, E = (r + 1) * (M - 1) + T, L = (r + 1) * M + T;
        c.push(C, w, L), c.push(w, E, L);
      }
    this.setIndex(c), this.setAttribute("position", new Pt(f, 3)), this.setAttribute("normal", new Pt(h, 3)), this.setAttribute("uv", new Pt(p, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new oy(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class ly extends hn {
  constructor(e = 1, t = 0.4, n = 64, r = 8, o = 2, c = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: n,
      radialSegments: r,
      p: o,
      q: c
    }, n = Math.floor(n), r = Math.floor(r);
    const f = [], h = [], p = [], v = [], y = new Y(), x = new Y(), M = new Y(), T = new Y(), C = new Y(), w = new Y(), E = new Y();
    for (let R = 0; R <= n; ++R) {
      const U = R / n * o * Math.PI * 2;
      L(U, o, c, e, M), L(U + 0.01, o, c, e, T), w.subVectors(T, M), E.addVectors(T, M), C.crossVectors(w, E), E.crossVectors(C, w), C.normalize(), E.normalize();
      for (let F = 0; F <= r; ++F) {
        const z = F / r * Math.PI * 2, B = -t * Math.cos(z), W = t * Math.sin(z);
        y.x = M.x + (B * E.x + W * C.x), y.y = M.y + (B * E.y + W * C.y), y.z = M.z + (B * E.z + W * C.z), h.push(y.x, y.y, y.z), x.subVectors(y, M).normalize(), p.push(x.x, x.y, x.z), v.push(R / n), v.push(F / r);
      }
    }
    for (let R = 1; R <= n; R++)
      for (let U = 1; U <= r; U++) {
        const F = (r + 1) * (R - 1) + (U - 1), z = (r + 1) * R + (U - 1), B = (r + 1) * R + U, W = (r + 1) * (R - 1) + U;
        f.push(F, z, W), f.push(z, B, W);
      }
    this.setIndex(f), this.setAttribute("position", new Pt(h, 3)), this.setAttribute("normal", new Pt(p, 3)), this.setAttribute("uv", new Pt(v, 2));
    function L(R, U, F, z, B) {
      const W = Math.cos(R), O = Math.sin(R), I = F / U * R, Z = Math.cos(I);
      B.x = z * (2 + Z) * 0.5 * W, B.y = z * (2 + Z) * O * 0.5, B.z = z * Math.sin(I) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new ly(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class uy extends hn {
  constructor(e = new VS(new Y(-1, -1, 0), new Y(-1, 1, 0), new Y(1, 1, 0)), t = 64, n = 1, r = 8, o = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: t,
      radius: n,
      radialSegments: r,
      closed: o
    };
    const c = e.computeFrenetFrames(t, o);
    this.tangents = c.tangents, this.normals = c.normals, this.binormals = c.binormals;
    const f = new Y(), h = new Y(), p = new Ie();
    let v = new Y();
    const y = [], x = [], M = [], T = [];
    C(), this.setIndex(T), this.setAttribute("position", new Pt(y, 3)), this.setAttribute("normal", new Pt(x, 3)), this.setAttribute("uv", new Pt(M, 2));
    function C() {
      for (let R = 0; R < t; R++)
        w(R);
      w(o === !1 ? t : 0), L(), E();
    }
    function w(R) {
      v = e.getPointAt(R / t, v);
      const U = c.normals[R], F = c.binormals[R];
      for (let z = 0; z <= r; z++) {
        const B = z / r * Math.PI * 2, W = Math.sin(B), O = -Math.cos(B);
        h.x = O * U.x + W * F.x, h.y = O * U.y + W * F.y, h.z = O * U.z + W * F.z, h.normalize(), x.push(h.x, h.y, h.z), f.x = v.x + n * h.x, f.y = v.y + n * h.y, f.z = v.z + n * h.z, y.push(f.x, f.y, f.z);
      }
    }
    function E() {
      for (let R = 1; R <= t; R++)
        for (let U = 1; U <= r; U++) {
          const F = (r + 1) * (R - 1) + (U - 1), z = (r + 1) * R + (U - 1), B = (r + 1) * R + U, W = (r + 1) * (R - 1) + U;
          T.push(F, z, W), T.push(z, B, W);
        }
    }
    function L() {
      for (let R = 0; R <= t; R++)
        for (let U = 0; U <= r; U++)
          p.x = R / t, p.y = U / r, M.push(p.x, p.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  static fromJSON(e) {
    return new uy(
      new Dg[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class CA extends hn {
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const t = [], n = /* @__PURE__ */ new Set(), r = new Y(), o = new Y();
      if (e.index !== null) {
        const c = e.attributes.position, f = e.index;
        let h = e.groups;
        h.length === 0 && (h = [{ start: 0, count: f.count, materialIndex: 0 }]);
        for (let p = 0, v = h.length; p < v; ++p) {
          const y = h[p], x = y.start, M = y.count;
          for (let T = x, C = x + M; T < C; T += 3)
            for (let w = 0; w < 3; w++) {
              const E = f.getX(T + w), L = f.getX(T + (w + 1) % 3);
              r.fromBufferAttribute(c, E), o.fromBufferAttribute(c, L), o1(r, o, n) === !0 && (t.push(r.x, r.y, r.z), t.push(o.x, o.y, o.z));
            }
        }
      } else {
        const c = e.attributes.position;
        for (let f = 0, h = c.count / 3; f < h; f++)
          for (let p = 0; p < 3; p++) {
            const v = 3 * f + p, y = 3 * f + (p + 1) % 3;
            r.fromBufferAttribute(c, v), o.fromBufferAttribute(c, y), o1(r, o, n) === !0 && (t.push(r.x, r.y, r.z), t.push(o.x, o.y, o.z));
          }
      }
      this.setAttribute("position", new Pt(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function o1(s, e, t) {
  const n = `${s.x},${s.y},${s.z}-${e.x},${e.y},${e.z}`, r = `${e.x},${e.y},${e.z}-${s.x},${s.y},${s.z}`;
  return t.has(n) === !0 || t.has(r) === !0 ? !1 : (t.add(n), t.add(r), !0);
}
var l1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: Mc,
  CapsuleGeometry: Kg,
  CircleGeometry: Qg,
  ConeGeometry: $g,
  CylinderGeometry: _d,
  DodecahedronGeometry: ey,
  EdgesGeometry: bA,
  ExtrudeGeometry: ny,
  IcosahedronGeometry: iy,
  LatheGeometry: zp,
  OctahedronGeometry: Bp,
  PlaneGeometry: Fp,
  PolyhedronGeometry: iu,
  RingGeometry: ry,
  ShapeGeometry: ay,
  SphereGeometry: Hp,
  TetrahedronGeometry: sy,
  TorusGeometry: oy,
  TorusKnotGeometry: ly,
  TubeGeometry: uy,
  WireframeGeometry: CA
});
class LA extends br {
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new Rt(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class PA extends Ja {
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class GS extends br {
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new Rt(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Rt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = tu, this.normalScale = new Ie(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class DA extends GS {
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new Ie(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return yi(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new Rt(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new Rt(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new Rt(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
  }
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(e) {
    this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class UA extends br {
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new Rt(16777215), this.specular = new Rt(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Rt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = tu, this.normalScale = new Ie(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Dp, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class NA extends br {
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new Rt(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Rt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = tu, this.normalScale = new Ie(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class OA extends br {
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = tu, this.normalScale = new Ie(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class IA extends br {
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new Rt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Rt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = tu, this.normalScale = new Ie(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Dp, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class FA extends br {
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new Rt(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = tu, this.normalScale = new Ie(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class zA extends zr {
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function cc(s, e, t) {
  return !s || // let 'undefined' and 'null' pass
  !t && s.constructor === e ? s : typeof e.BYTES_PER_ELEMENT == "number" ? new e(s) : Array.prototype.slice.call(s);
}
function BA(s) {
  return ArrayBuffer.isView(s) && !(s instanceof DataView);
}
function HA(s) {
  function e(r, o) {
    return s[r] - s[o];
  }
  const t = s.length, n = new Array(t);
  for (let r = 0; r !== t; ++r)
    n[r] = r;
  return n.sort(e), n;
}
function nS(s, e, t) {
  const n = s.length, r = new s.constructor(n);
  for (let o = 0, c = 0; c !== n; ++o) {
    const f = t[o] * e;
    for (let h = 0; h !== e; ++h)
      r[c++] = s[f + h];
  }
  return r;
}
function WS(s, e, t, n) {
  let r = 1, o = s[0];
  for (; o !== void 0 && o[n] === void 0; )
    o = s[r++];
  if (o === void 0)
    return;
  let c = o[n];
  if (c !== void 0)
    if (Array.isArray(c))
      do
        c = o[n], c !== void 0 && (e.push(o.time), t.push.apply(t, c)), o = s[r++];
      while (o !== void 0);
    else if (c.toArray !== void 0)
      do
        c = o[n], c !== void 0 && (e.push(o.time), c.toArray(t, t.length)), o = s[r++];
      while (o !== void 0);
    else
      do
        c = o[n], c !== void 0 && (e.push(o.time), t.push(c)), o = s[r++];
      while (o !== void 0);
}
function HI(s, e, t, n, r = 30) {
  const o = s.clone();
  o.name = e;
  const c = [];
  for (let h = 0; h < o.tracks.length; ++h) {
    const p = o.tracks[h], v = p.getValueSize(), y = [], x = [];
    for (let M = 0; M < p.times.length; ++M) {
      const T = p.times[M] * r;
      if (!(T < t || T >= n)) {
        y.push(p.times[M]);
        for (let C = 0; C < v; ++C)
          x.push(p.values[M * v + C]);
      }
    }
    y.length !== 0 && (p.times = cc(y, p.times.constructor), p.values = cc(x, p.values.constructor), c.push(p));
  }
  o.tracks = c;
  let f = 1 / 0;
  for (let h = 0; h < o.tracks.length; ++h)
    f > o.tracks[h].times[0] && (f = o.tracks[h].times[0]);
  for (let h = 0; h < o.tracks.length; ++h)
    o.tracks[h].shift(-1 * f);
  return o.resetDuration(), o;
}
function VI(s, e = 0, t = s, n = 30) {
  n <= 0 && (n = 30);
  const r = t.tracks.length, o = e / n;
  for (let c = 0; c < r; ++c) {
    const f = t.tracks[c], h = f.ValueTypeName;
    if (h === "bool" || h === "string")
      continue;
    const p = s.tracks.find(function(E) {
      return E.name === f.name && E.ValueTypeName === h;
    });
    if (p === void 0)
      continue;
    let v = 0;
    const y = f.getValueSize();
    f.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (v = y / 3);
    let x = 0;
    const M = p.getValueSize();
    p.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (x = M / 3);
    const T = f.times.length - 1;
    let C;
    if (o <= f.times[0]) {
      const E = v, L = y - v;
      C = f.values.slice(E, L);
    } else if (o >= f.times[T]) {
      const E = T * y + v, L = E + y - v;
      C = f.values.slice(E, L);
    } else {
      const E = f.createInterpolant(), L = v, R = y - v;
      E.evaluate(o), C = E.resultBuffer.slice(L, R);
    }
    h === "quaternion" && new Tr().fromArray(C).normalize().conjugate().toArray(C);
    const w = p.times.length;
    for (let E = 0; E < w; ++E) {
      const L = E * M + x;
      if (h === "quaternion")
        Tr.multiplyQuaternionsFlat(
          p.values,
          L,
          C,
          0,
          p.values,
          L
        );
      else {
        const R = M - x * 2;
        for (let U = 0; U < R; ++U)
          p.values[L + U] -= C[U];
      }
    }
  }
  return s.blendMode = MS, s;
}
const kI = {
  convertArray: cc,
  isTypedArray: BA,
  getKeyframeOrder: HA,
  sortedArray: nS,
  flattenJSON: WS,
  subclip: HI,
  makeClipAdditive: VI
};
class Vp {
  constructor(e, t, n, r) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = r !== void 0 ? r : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let n = this._cachedIndex, r = t[n], o = t[n - 1];
    e: {
      t: {
        let c;
        n: {
          i:
            if (!(e < r)) {
              for (let f = n + 2; ; ) {
                if (r === void 0) {
                  if (e < o)
                    break i;
                  return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
                }
                if (n === f)
                  break;
                if (o = r, r = t[++n], e < r)
                  break t;
              }
              c = t.length;
              break n;
            }
          if (!(e >= o)) {
            const f = t[1];
            e < f && (n = 2, o = f);
            for (let h = n - 2; ; ) {
              if (o === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (n === h)
                break;
              if (r = o, o = t[--n - 1], e >= o)
                break t;
            }
            c = n, n = 0;
            break n;
          }
          break e;
        }
        for (; n < c; ) {
          const f = n + c >>> 1;
          e < t[f] ? c = f : n = f + 1;
        }
        if (r = t[n], o = t[n - 1], o === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (r === void 0)
          return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
      }
      this._cachedIndex = n, this.intervalChanged_(n, o, r);
    }
    return this.interpolate_(n, o, e, r);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer, n = this.sampleValues, r = this.valueSize, o = e * r;
    for (let c = 0; c !== r; ++c)
      t[c] = n[o + c];
    return t;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
}
class VA extends Vp {
  constructor(e, t, n, r) {
    super(e, t, n, r), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: oc,
      endingEnd: oc
    };
  }
  intervalChanged_(e, t, n) {
    const r = this.parameterPositions;
    let o = e - 2, c = e + 1, f = r[o], h = r[c];
    if (f === void 0)
      switch (this.getSettings_().endingStart) {
        case lc:
          o = e, f = 2 * t - n;
          break;
        case vp:
          o = r.length - 2, f = t + r[o] - r[o + 1];
          break;
        default:
          o = e, f = n;
      }
    if (h === void 0)
      switch (this.getSettings_().endingEnd) {
        case lc:
          c = e, h = 2 * n - t;
          break;
        case vp:
          c = 1, h = n + r[1] - r[0];
          break;
        default:
          c = e - 1, h = t;
      }
    const p = (n - t) * 0.5, v = this.valueSize;
    this._weightPrev = p / (t - f), this._weightNext = p / (h - n), this._offsetPrev = o * v, this._offsetNext = c * v;
  }
  interpolate_(e, t, n, r) {
    const o = this.resultBuffer, c = this.sampleValues, f = this.valueSize, h = e * f, p = h - f, v = this._offsetPrev, y = this._offsetNext, x = this._weightPrev, M = this._weightNext, T = (n - t) / (r - t), C = T * T, w = C * T, E = -x * w + 2 * x * C - x * T, L = (1 + x) * w + (-1.5 - 2 * x) * C + (-0.5 + x) * T + 1, R = (-1 - M) * w + (1.5 + M) * C + 0.5 * T, U = M * w - M * C;
    for (let F = 0; F !== f; ++F)
      o[F] = E * c[v + F] + L * c[p + F] + R * c[h + F] + U * c[y + F];
    return o;
  }
}
class XS extends Vp {
  constructor(e, t, n, r) {
    super(e, t, n, r);
  }
  interpolate_(e, t, n, r) {
    const o = this.resultBuffer, c = this.sampleValues, f = this.valueSize, h = e * f, p = h - f, v = (n - t) / (r - t), y = 1 - v;
    for (let x = 0; x !== f; ++x)
      o[x] = c[p + x] * y + c[h + x] * v;
    return o;
  }
}
class kA extends Vp {
  constructor(e, t, n, r) {
    super(e, t, n, r);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class Ms {
  constructor(e, t, n, r) {
    if (e === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = cc(t, this.TimeBufferType), this.values = cc(n, this.ValueBufferType), this.setInterpolation(r || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(e) {
    const t = e.constructor;
    let n;
    if (t.toJSON !== this.toJSON)
      n = t.toJSON(e);
    else {
      n = {
        name: e.name,
        times: cc(e.times, Array),
        values: cc(e.values, Array)
      };
      const r = e.getInterpolation();
      r !== e.DefaultInterpolation && (n.interpolation = r);
    }
    return n.type = e.ValueTypeName, n;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new kA(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new XS(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new VA(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case pp:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case mp:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case Eg:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(n);
      return console.warn("THREE.KeyframeTrack:", n), this;
    }
    return this.createInterpolant = t, this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return pp;
      case this.InterpolantFactoryMethodLinear:
        return mp;
      case this.InterpolantFactoryMethodSmooth:
        return Eg;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let n = 0, r = t.length; n !== r; ++n)
        t[n] += e;
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let n = 0, r = t.length; n !== r; ++n)
        t[n] *= e;
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(e, t) {
    const n = this.times, r = n.length;
    let o = 0, c = r - 1;
    for (; o !== r && n[o] < e; )
      ++o;
    for (; c !== -1 && n[c] > t; )
      --c;
    if (++c, o !== 0 || c !== r) {
      o >= c && (c = Math.max(c, 1), o = c - 1);
      const f = this.getValueSize();
      this.times = n.slice(o, c), this.values = this.values.slice(o * f, c * f);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const n = this.times, r = this.values, o = n.length;
    o === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let c = null;
    for (let f = 0; f !== o; f++) {
      const h = n[f];
      if (typeof h == "number" && isNaN(h)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, f, h), e = !1;
        break;
      }
      if (c !== null && c > h) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, f, h, c), e = !1;
        break;
      }
      c = h;
    }
    if (r !== void 0 && BA(r))
      for (let f = 0, h = r.length; f !== h; ++f) {
        const p = r[f];
        if (isNaN(p)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, f, p), e = !1;
          break;
        }
      }
    return e;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const e = this.times.slice(), t = this.values.slice(), n = this.getValueSize(), r = this.getInterpolation() === Eg, o = e.length - 1;
    let c = 1;
    for (let f = 1; f < o; ++f) {
      let h = !1;
      const p = e[f], v = e[f + 1];
      if (p !== v && (f !== 1 || p !== e[0]))
        if (r)
          h = !0;
        else {
          const y = f * n, x = y - n, M = y + n;
          for (let T = 0; T !== n; ++T) {
            const C = t[y + T];
            if (C !== t[x + T] || C !== t[M + T]) {
              h = !0;
              break;
            }
          }
        }
      if (h) {
        if (f !== c) {
          e[c] = e[f];
          const y = f * n, x = c * n;
          for (let M = 0; M !== n; ++M)
            t[x + M] = t[y + M];
        }
        ++c;
      }
    }
    if (o > 0) {
      e[c] = e[o];
      for (let f = o * n, h = c * n, p = 0; p !== n; ++p)
        t[h + p] = t[f + p];
      ++c;
    }
    return c !== e.length ? (this.times = e.slice(0, c), this.values = t.slice(0, c * n)) : (this.times = e, this.values = t), this;
  }
  clone() {
    const e = this.times.slice(), t = this.values.slice(), n = this.constructor, r = new n(this.name, e, t);
    return r.createInterpolant = this.createInterpolant, r;
  }
}
Ms.prototype.TimeBufferType = Float32Array;
Ms.prototype.ValueBufferType = Float32Array;
Ms.prototype.DefaultInterpolation = mp;
class Ec extends Ms {
}
Ec.prototype.ValueTypeName = "bool";
Ec.prototype.ValueBufferType = Array;
Ec.prototype.DefaultInterpolation = pp;
Ec.prototype.InterpolantFactoryMethodLinear = void 0;
Ec.prototype.InterpolantFactoryMethodSmooth = void 0;
class YS extends Ms {
}
YS.prototype.ValueTypeName = "color";
class Ap extends Ms {
}
Ap.prototype.ValueTypeName = "number";
class GA extends Vp {
  constructor(e, t, n, r) {
    super(e, t, n, r);
  }
  interpolate_(e, t, n, r) {
    const o = this.resultBuffer, c = this.sampleValues, f = this.valueSize, h = (n - t) / (r - t);
    let p = e * f;
    for (let v = p + f; p !== v; p += 4)
      Tr.slerpFlat(o, 0, c, p - f, c, p, h);
    return o;
  }
}
class xd extends Ms {
  InterpolantFactoryMethodLinear(e) {
    return new GA(this.times, this.values, this.getValueSize(), e);
  }
}
xd.prototype.ValueTypeName = "quaternion";
xd.prototype.DefaultInterpolation = mp;
xd.prototype.InterpolantFactoryMethodSmooth = void 0;
class Tc extends Ms {
}
Tc.prototype.ValueTypeName = "string";
Tc.prototype.ValueBufferType = Array;
Tc.prototype.DefaultInterpolation = pp;
Tc.prototype.InterpolantFactoryMethodLinear = void 0;
Tc.prototype.InterpolantFactoryMethodSmooth = void 0;
class Rp extends Ms {
}
Rp.prototype.ValueTypeName = "vector";
class Cp {
  constructor(e, t = -1, n, r = Bg) {
    this.name = e, this.tracks = n, this.duration = t, this.blendMode = r, this.uuid = ba(), this.duration < 0 && this.resetDuration();
  }
  static parse(e) {
    const t = [], n = e.tracks, r = 1 / (e.fps || 1);
    for (let c = 0, f = n.length; c !== f; ++c)
      t.push(WI(n[c]).scale(r));
    const o = new this(e.name, e.duration, t, e.blendMode);
    return o.uuid = e.uuid, o;
  }
  static toJSON(e) {
    const t = [], n = e.tracks, r = {
      name: e.name,
      duration: e.duration,
      tracks: t,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let o = 0, c = n.length; o !== c; ++o)
      t.push(Ms.toJSON(n[o]));
    return r;
  }
  static CreateFromMorphTargetSequence(e, t, n, r) {
    const o = t.length, c = [];
    for (let f = 0; f < o; f++) {
      let h = [], p = [];
      h.push(
        (f + o - 1) % o,
        f,
        (f + 1) % o
      ), p.push(0, 1, 0);
      const v = HA(h);
      h = nS(h, 1, v), p = nS(p, 1, v), !r && h[0] === 0 && (h.push(o), p.push(p[0])), c.push(
        new Ap(
          ".morphTargetInfluences[" + t[f].name + "]",
          h,
          p
        ).scale(1 / n)
      );
    }
    return new this(e, -1, c);
  }
  static findByName(e, t) {
    let n = e;
    if (!Array.isArray(e)) {
      const r = e;
      n = r.geometry && r.geometry.animations || r.animations;
    }
    for (let r = 0; r < n.length; r++)
      if (n[r].name === t)
        return n[r];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, n) {
    const r = {}, o = /^([\w-]*?)([\d]+)$/;
    for (let f = 0, h = e.length; f < h; f++) {
      const p = e[f], v = p.name.match(o);
      if (v && v.length > 1) {
        const y = v[1];
        let x = r[y];
        x || (r[y] = x = []), x.push(p);
      }
    }
    const c = [];
    for (const f in r)
      c.push(this.CreateFromMorphTargetSequence(f, r[f], t, n));
    return c;
  }
  // parse the animation.hierarchy format
  static parseAnimation(e, t) {
    if (!e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const n = function(y, x, M, T, C) {
      if (M.length !== 0) {
        const w = [], E = [];
        WS(M, w, E, T), w.length !== 0 && C.push(new y(x, w, E));
      }
    }, r = [], o = e.name || "default", c = e.fps || 30, f = e.blendMode;
    let h = e.length || -1;
    const p = e.hierarchy || [];
    for (let y = 0; y < p.length; y++) {
      const x = p[y].keys;
      if (!(!x || x.length === 0))
        if (x[0].morphTargets) {
          const M = {};
          let T;
          for (T = 0; T < x.length; T++)
            if (x[T].morphTargets)
              for (let C = 0; C < x[T].morphTargets.length; C++)
                M[x[T].morphTargets[C]] = -1;
          for (const C in M) {
            const w = [], E = [];
            for (let L = 0; L !== x[T].morphTargets.length; ++L) {
              const R = x[T];
              w.push(R.time), E.push(R.morphTarget === C ? 1 : 0);
            }
            r.push(new Ap(".morphTargetInfluence[" + C + "]", w, E));
          }
          h = M.length * c;
        } else {
          const M = ".bones[" + t[y].name + "]";
          n(
            Rp,
            M + ".position",
            x,
            "pos",
            r
          ), n(
            xd,
            M + ".quaternion",
            x,
            "rot",
            r
          ), n(
            Rp,
            M + ".scale",
            x,
            "scl",
            r
          );
        }
    }
    return r.length === 0 ? null : new this(o, h, r, f);
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let n = 0, r = e.length; n !== r; ++n) {
      const o = this.tracks[n];
      t = Math.max(t, o.times[o.times.length - 1]);
    }
    return this.duration = t, this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++)
      e = e && this.tracks[t].validate();
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++)
      e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function GI(s) {
  switch (s.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return Ap;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return Rp;
    case "color":
      return YS;
    case "quaternion":
      return xd;
    case "bool":
    case "boolean":
      return Ec;
    case "string":
      return Tc;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + s);
}
function WI(s) {
  if (s.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = GI(s.type);
  if (s.times === void 0) {
    const t = [], n = [];
    WS(s.keys, t, n, "value"), s.times = t, s.values = n;
  }
  return e.parse !== void 0 ? e.parse(s) : new e(s.name, s.times, s.values, s.interpolation);
}
const xc = {
  enabled: !1,
  files: {},
  add: function(s, e) {
    this.enabled !== !1 && (this.files[s] = e);
  },
  get: function(s) {
    if (this.enabled !== !1)
      return this.files[s];
  },
  remove: function(s) {
    delete this.files[s];
  },
  clear: function() {
    this.files = {};
  }
};
class jS {
  constructor(e, t, n) {
    const r = this;
    let o = !1, c = 0, f = 0, h;
    const p = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(v) {
      f++, o === !1 && r.onStart !== void 0 && r.onStart(v, c, f), o = !0;
    }, this.itemEnd = function(v) {
      c++, r.onProgress !== void 0 && r.onProgress(v, c, f), c === f && (o = !1, r.onLoad !== void 0 && r.onLoad());
    }, this.itemError = function(v) {
      r.onError !== void 0 && r.onError(v);
    }, this.resolveURL = function(v) {
      return h ? h(v) : v;
    }, this.setURLModifier = function(v) {
      return h = v, this;
    }, this.addHandler = function(v, y) {
      return p.push(v, y), this;
    }, this.removeHandler = function(v) {
      const y = p.indexOf(v);
      return y !== -1 && p.splice(y, 2), this;
    }, this.getHandler = function(v) {
      for (let y = 0, x = p.length; y < x; y += 2) {
        const M = p[y], T = p[y + 1];
        if (M.global && (M.lastIndex = 0), M.test(v))
          return T;
      }
      return null;
    };
  }
}
const WA = /* @__PURE__ */ new jS();
class aa {
  constructor(e) {
    this.manager = e !== void 0 ? e : WA, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  load() {
  }
  loadAsync(e, t) {
    const n = this;
    return new Promise(function(r, o) {
      n.load(e, r, t, o);
    });
  }
  parse() {
  }
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  setPath(e) {
    return this.path = e, this;
  }
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
}
aa.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const Io = {};
class XI extends Error {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
class Wo extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = xc.get(e);
    if (o !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        t && t(o), this.manager.itemEnd(e);
      }, 0), o;
    if (Io[e] !== void 0) {
      Io[e].push({
        onLoad: t,
        onProgress: n,
        onError: r
      });
      return;
    }
    Io[e] = [], Io[e].push({
      onLoad: t,
      onProgress: n,
      onError: r
    });
    const c = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    }), f = this.mimeType, h = this.responseType;
    fetch(c).then((p) => {
      if (p.status === 200 || p.status === 0) {
        if (p.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || p.body === void 0 || p.body.getReader === void 0)
          return p;
        const v = Io[e], y = p.body.getReader(), x = p.headers.get("Content-Length") || p.headers.get("X-File-Size"), M = x ? parseInt(x) : 0, T = M !== 0;
        let C = 0;
        const w = new ReadableStream({
          start(E) {
            L();
            function L() {
              y.read().then(({ done: R, value: U }) => {
                if (R)
                  E.close();
                else {
                  C += U.byteLength;
                  const F = new ProgressEvent("progress", { lengthComputable: T, loaded: C, total: M });
                  for (let z = 0, B = v.length; z < B; z++) {
                    const W = v[z];
                    W.onProgress && W.onProgress(F);
                  }
                  E.enqueue(U), L();
                }
              });
            }
          }
        });
        return new Response(w);
      } else
        throw new XI(`fetch for "${p.url}" responded with ${p.status}: ${p.statusText}`, p);
    }).then((p) => {
      switch (h) {
        case "arraybuffer":
          return p.arrayBuffer();
        case "blob":
          return p.blob();
        case "document":
          return p.text().then((v) => new DOMParser().parseFromString(v, f));
        case "json":
          return p.json();
        default:
          if (f === void 0)
            return p.text();
          {
            const y = /charset="?([^;"\s]*)"?/i.exec(f), x = y && y[1] ? y[1].toLowerCase() : void 0, M = new TextDecoder(x);
            return p.arrayBuffer().then((T) => M.decode(T));
          }
      }
    }).then((p) => {
      xc.add(e, p);
      const v = Io[e];
      delete Io[e];
      for (let y = 0, x = v.length; y < x; y++) {
        const M = v[y];
        M.onLoad && M.onLoad(p);
      }
    }).catch((p) => {
      const v = Io[e];
      if (v === void 0)
        throw this.manager.itemError(e), p;
      delete Io[e];
      for (let y = 0, x = v.length; y < x; y++) {
        const M = v[y];
        M.onError && M.onError(p);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  setResponseType(e) {
    return this.responseType = e, this;
  }
  setMimeType(e) {
    return this.mimeType = e, this;
  }
}
class YI extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = new Wo(this.manager);
    c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials), c.load(e, function(f) {
      try {
        t(o.parse(JSON.parse(f)));
      } catch (h) {
        r ? r(h) : console.error(h), o.manager.itemError(e);
      }
    }, n, r);
  }
  parse(e) {
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const r = Cp.parse(e[n]);
      t.push(r);
    }
    return t;
  }
}
class jI extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = [], f = new Zg(), h = new Wo(this.manager);
    h.setPath(this.path), h.setResponseType("arraybuffer"), h.setRequestHeader(this.requestHeader), h.setWithCredentials(o.withCredentials);
    let p = 0;
    function v(y) {
      h.load(e[y], function(x) {
        const M = o.parse(x, !0);
        c[y] = {
          width: M.width,
          height: M.height,
          format: M.format,
          mipmaps: M.mipmaps
        }, p += 1, p === 6 && (M.mipmapCount === 1 && (f.minFilter = hi), f.image = c, f.format = M.format, f.needsUpdate = !0, t && t(f));
      }, n, r);
    }
    if (Array.isArray(e))
      for (let y = 0, x = e.length; y < x; ++y)
        v(y);
    else
      h.load(e, function(y) {
        const x = o.parse(y, !0);
        if (x.isCubemap) {
          const M = x.mipmaps.length / x.mipmapCount;
          for (let T = 0; T < M; T++) {
            c[T] = { mipmaps: [] };
            for (let C = 0; C < x.mipmapCount; C++)
              c[T].mipmaps.push(x.mipmaps[T * x.mipmapCount + C]), c[T].format = x.format, c[T].width = x.width, c[T].height = x.height;
          }
          f.image = c;
        } else
          f.image.width = x.width, f.image.height = x.height, f.mipmaps = x.mipmaps;
        x.mipmapCount === 1 && (f.minFilter = hi), f.format = x.format, f.needsUpdate = !0, t && t(f);
      }, n, r);
    return f;
  }
}
class Lp extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = this, c = xc.get(e);
    if (c !== void 0)
      return o.manager.itemStart(e), setTimeout(function() {
        t && t(c), o.manager.itemEnd(e);
      }, 0), c;
    const f = Mp("img");
    function h() {
      v(), xc.add(e, this), t && t(this), o.manager.itemEnd(e);
    }
    function p(y) {
      v(), r && r(y), o.manager.itemError(e), o.manager.itemEnd(e);
    }
    function v() {
      f.removeEventListener("load", h, !1), f.removeEventListener("error", p, !1);
    }
    return f.addEventListener("load", h, !1), f.addEventListener("error", p, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (f.crossOrigin = this.crossOrigin), o.manager.itemStart(e), f.src = e, f;
  }
}
class qI extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = new Ip();
    o.colorSpace = Gi;
    const c = new Lp(this.manager);
    c.setCrossOrigin(this.crossOrigin), c.setPath(this.path);
    let f = 0;
    function h(p) {
      c.load(e[p], function(v) {
        o.images[p] = v, f++, f === 6 && (o.needsUpdate = !0, t && t(o));
      }, void 0, r);
    }
    for (let p = 0; p < e.length; ++p)
      h(p);
    return o;
  }
}
class ZI extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = new pc(), f = new Wo(this.manager);
    return f.setResponseType("arraybuffer"), f.setRequestHeader(this.requestHeader), f.setPath(this.path), f.setWithCredentials(o.withCredentials), f.load(e, function(h) {
      let p;
      try {
        p = o.parse(h);
      } catch (v) {
        if (r !== void 0)
          r(v);
        else {
          console.error(v);
          return;
        }
      }
      p.image !== void 0 ? c.image = p.image : p.data !== void 0 && (c.image.width = p.width, c.image.height = p.height, c.image.data = p.data), c.wrapS = p.wrapS !== void 0 ? p.wrapS : Mr, c.wrapT = p.wrapT !== void 0 ? p.wrapT : Mr, c.magFilter = p.magFilter !== void 0 ? p.magFilter : hi, c.minFilter = p.minFilter !== void 0 ? p.minFilter : hi, c.anisotropy = p.anisotropy !== void 0 ? p.anisotropy : 1, p.colorSpace !== void 0 ? c.colorSpace = p.colorSpace : p.encoding !== void 0 && (c.encoding = p.encoding), p.flipY !== void 0 && (c.flipY = p.flipY), p.format !== void 0 && (c.format = p.format), p.type !== void 0 && (c.type = p.type), p.mipmaps !== void 0 && (c.mipmaps = p.mipmaps, c.minFilter = $l), p.mipmapCount === 1 && (c.minFilter = hi), p.generateMipmaps !== void 0 && (c.generateMipmaps = p.generateMipmaps), c.needsUpdate = !0, t && t(c, p);
    }, n, r), c;
  }
}
class JI extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = new Ci(), c = new Lp(this.manager);
    return c.setCrossOrigin(this.crossOrigin), c.setPath(this.path), c.load(e, function(f) {
      o.image = f, o.needsUpdate = !0, t !== void 0 && t(o);
    }, n, r), o;
  }
}
class ru extends Cn {
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new Rt(e), this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
  }
}
class XA extends ru {
  constructor(e, t, n) {
    super(e, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Cn.DEFAULT_UP), this.updateMatrix(), this.groundColor = new Rt(t);
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const tx = /* @__PURE__ */ new tn(), u1 = /* @__PURE__ */ new Y(), c1 = /* @__PURE__ */ new Y();
class qS {
  constructor(e) {
    this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new Ie(512, 512), this.map = null, this.mapPass = null, this.matrix = new tn(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new kg(), this._frameExtents = new Ie(1, 1), this._viewportCount = 1, this._viewports = [
      new Vn(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera, n = this.matrix;
    u1.setFromMatrixPosition(e.matrixWorld), t.position.copy(u1), c1.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(c1), t.updateMatrixWorld(), tx.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(tx), n.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), n.multiply(tx);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class KI extends qS {
  constructor() {
    super(new Ri(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera, n = hd * 2 * e.angle * this.focus, r = this.mapSize.width / this.mapSize.height, o = e.distance || t.far;
    (n !== t.fov || r !== t.aspect || o !== t.far) && (t.fov = n, t.aspect = r, t.far = o, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class YA extends ru {
  constructor(e, t, n = 0, r = Math.PI / 3, o = 0, c = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Cn.DEFAULT_UP), this.updateMatrix(), this.target = new Cn(), this.distance = n, this.angle = r, this.penumbra = o, this.decay = c, this.map = null, this.shadow = new KI();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const f1 = /* @__PURE__ */ new tn(), Qh = /* @__PURE__ */ new Y(), nx = /* @__PURE__ */ new Y();
class QI extends qS {
  constructor() {
    super(new Ri(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new Ie(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new Vn(2, 1, 1, 1),
      // negative X
      new Vn(0, 1, 1, 1),
      // positive Z
      new Vn(3, 1, 1, 1),
      // negative Z
      new Vn(1, 1, 1, 1),
      // positive Y
      new Vn(3, 0, 1, 1),
      // negative Y
      new Vn(1, 0, 1, 1)
    ], this._cubeDirections = [
      new Y(1, 0, 0),
      new Y(-1, 0, 0),
      new Y(0, 0, 1),
      new Y(0, 0, -1),
      new Y(0, 1, 0),
      new Y(0, -1, 0)
    ], this._cubeUps = [
      new Y(0, 1, 0),
      new Y(0, 1, 0),
      new Y(0, 1, 0),
      new Y(0, 1, 0),
      new Y(0, 0, 1),
      new Y(0, 0, -1)
    ];
  }
  updateMatrices(e, t = 0) {
    const n = this.camera, r = this.matrix, o = e.distance || n.far;
    o !== n.far && (n.far = o, n.updateProjectionMatrix()), Qh.setFromMatrixPosition(e.matrixWorld), n.position.copy(Qh), nx.copy(n.position), nx.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(nx), n.updateMatrixWorld(), r.makeTranslation(-Qh.x, -Qh.y, -Qh.z), f1.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(f1);
  }
}
class jA extends ru {
  constructor(e, t, n = 0, r = 2) {
    super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = r, this.shadow = new QI();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class $I extends qS {
  constructor() {
    super(new Vo(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class qA extends ru {
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Cn.DEFAULT_UP), this.updateMatrix(), this.target = new Cn(), this.shadow = new $I();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class ZA extends ru {
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class JA extends ru {
  constructor(e, t, n = 10, r = 10) {
    super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = r;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.width = this.width, t.object.height = this.height, t;
  }
}
class KA {
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new Y());
  }
  set(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].copy(e[t]);
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(e, t) {
    const n = e.x, r = e.y, o = e.z, c = this.coefficients;
    return t.copy(c[0]).multiplyScalar(0.282095), t.addScaledVector(c[1], 0.488603 * r), t.addScaledVector(c[2], 0.488603 * o), t.addScaledVector(c[3], 0.488603 * n), t.addScaledVector(c[4], 1.092548 * (n * r)), t.addScaledVector(c[5], 1.092548 * (r * o)), t.addScaledVector(c[6], 0.315392 * (3 * o * o - 1)), t.addScaledVector(c[7], 1.092548 * (n * o)), t.addScaledVector(c[8], 0.546274 * (n * n - r * r)), t;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(e, t) {
    const n = e.x, r = e.y, o = e.z, c = this.coefficients;
    return t.copy(c[0]).multiplyScalar(0.886227), t.addScaledVector(c[1], 2 * 0.511664 * r), t.addScaledVector(c[2], 2 * 0.511664 * o), t.addScaledVector(c[3], 2 * 0.511664 * n), t.addScaledVector(c[4], 2 * 0.429043 * n * r), t.addScaledVector(c[5], 2 * 0.429043 * r * o), t.addScaledVector(c[6], 0.743125 * o * o - 0.247708), t.addScaledVector(c[7], 2 * 0.429043 * n * o), t.addScaledVector(c[8], 0.429043 * (n * n - r * r)), t;
  }
  add(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  addScaledSH(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].addScaledVector(e.coefficients[n], t);
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].multiplyScalar(e);
    return this;
  }
  lerp(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].lerp(e.coefficients[n], t);
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++)
      if (!this.coefficients[t].equals(e.coefficients[t]))
        return !1;
    return !0;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const n = this.coefficients;
    for (let r = 0; r < 9; r++)
      n[r].fromArray(e, t + r * 3);
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.coefficients;
    for (let r = 0; r < 9; r++)
      n[r].toArray(e, t + r * 3);
    return e;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(e, t) {
    const n = e.x, r = e.y, o = e.z;
    t[0] = 0.282095, t[1] = 0.488603 * r, t[2] = 0.488603 * o, t[3] = 0.488603 * n, t[4] = 1.092548 * n * r, t[5] = 1.092548 * r * o, t[6] = 0.315392 * (3 * o * o - 1), t[7] = 1.092548 * n * o, t[8] = 0.546274 * (n * n - r * r);
  }
}
class QA extends ru {
  constructor(e = new KA(), t = 1) {
    super(void 0, t), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.sh = this.sh.toArray(), t;
  }
}
class cy extends aa {
  constructor(e) {
    super(e), this.textures = {};
  }
  load(e, t, n, r) {
    const o = this, c = new Wo(o.manager);
    c.setPath(o.path), c.setRequestHeader(o.requestHeader), c.setWithCredentials(o.withCredentials), c.load(e, function(f) {
      try {
        t(o.parse(JSON.parse(f)));
      } catch (h) {
        r ? r(h) : console.error(h), o.manager.itemError(e);
      }
    }, n, r);
  }
  parse(e) {
    const t = this.textures;
    function n(o) {
      return t[o] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", o), t[o];
    }
    const r = cy.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (r.uuid = e.uuid), e.name !== void 0 && (r.name = e.name), e.color !== void 0 && r.color !== void 0 && r.color.setHex(e.color), e.roughness !== void 0 && (r.roughness = e.roughness), e.metalness !== void 0 && (r.metalness = e.metalness), e.sheen !== void 0 && (r.sheen = e.sheen), e.sheenColor !== void 0 && (r.sheenColor = new Rt().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (r.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && r.emissive !== void 0 && r.emissive.setHex(e.emissive), e.specular !== void 0 && r.specular !== void 0 && r.specular.setHex(e.specular), e.specularIntensity !== void 0 && (r.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && r.specularColor !== void 0 && r.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (r.shininess = e.shininess), e.clearcoat !== void 0 && (r.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (r.clearcoatRoughness = e.clearcoatRoughness), e.iridescence !== void 0 && (r.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (r.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (r.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (r.transmission = e.transmission), e.thickness !== void 0 && (r.thickness = e.thickness), e.attenuationDistance !== void 0 && (r.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && r.attenuationColor !== void 0 && r.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (r.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (r.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (r.fog = e.fog), e.flatShading !== void 0 && (r.flatShading = e.flatShading), e.blending !== void 0 && (r.blending = e.blending), e.combine !== void 0 && (r.combine = e.combine), e.side !== void 0 && (r.side = e.side), e.shadowSide !== void 0 && (r.shadowSide = e.shadowSide), e.opacity !== void 0 && (r.opacity = e.opacity), e.transparent !== void 0 && (r.transparent = e.transparent), e.alphaTest !== void 0 && (r.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (r.alphaHash = e.alphaHash), e.depthTest !== void 0 && (r.depthTest = e.depthTest), e.depthWrite !== void 0 && (r.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (r.colorWrite = e.colorWrite), e.stencilWrite !== void 0 && (r.stencilWrite = e.stencilWrite), e.stencilWriteMask !== void 0 && (r.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (r.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (r.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (r.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (r.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (r.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (r.stencilZPass = e.stencilZPass), e.wireframe !== void 0 && (r.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (r.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (r.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (r.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (r.rotation = e.rotation), e.linewidth !== void 0 && (r.linewidth = e.linewidth), e.dashSize !== void 0 && (r.dashSize = e.dashSize), e.gapSize !== void 0 && (r.gapSize = e.gapSize), e.scale !== void 0 && (r.scale = e.scale), e.polygonOffset !== void 0 && (r.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (r.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (r.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (r.dithering = e.dithering), e.alphaToCoverage !== void 0 && (r.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (r.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (r.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (r.visible = e.visible), e.toneMapped !== void 0 && (r.toneMapped = e.toneMapped), e.userData !== void 0 && (r.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? r.vertexColors = e.vertexColors > 0 : r.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const o in e.uniforms) {
        const c = e.uniforms[o];
        switch (r.uniforms[o] = {}, c.type) {
          case "t":
            r.uniforms[o].value = n(c.value);
            break;
          case "c":
            r.uniforms[o].value = new Rt().setHex(c.value);
            break;
          case "v2":
            r.uniforms[o].value = new Ie().fromArray(c.value);
            break;
          case "v3":
            r.uniforms[o].value = new Y().fromArray(c.value);
            break;
          case "v4":
            r.uniforms[o].value = new Vn().fromArray(c.value);
            break;
          case "m3":
            r.uniforms[o].value = new cn().fromArray(c.value);
            break;
          case "m4":
            r.uniforms[o].value = new tn().fromArray(c.value);
            break;
          default:
            r.uniforms[o].value = c.value;
        }
      }
    if (e.defines !== void 0 && (r.defines = e.defines), e.vertexShader !== void 0 && (r.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (r.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (r.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const o in e.extensions)
        r.extensions[o] = e.extensions[o];
    if (e.lights !== void 0 && (r.lights = e.lights), e.clipping !== void 0 && (r.clipping = e.clipping), e.size !== void 0 && (r.size = e.size), e.sizeAttenuation !== void 0 && (r.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (r.map = n(e.map)), e.matcap !== void 0 && (r.matcap = n(e.matcap)), e.alphaMap !== void 0 && (r.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (r.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (r.bumpScale = e.bumpScale), e.normalMap !== void 0 && (r.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (r.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let o = e.normalScale;
      Array.isArray(o) === !1 && (o = [o, o]), r.normalScale = new Ie().fromArray(o);
    }
    return e.displacementMap !== void 0 && (r.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (r.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (r.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (r.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (r.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (r.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (r.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (r.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (r.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (r.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (r.envMap = n(e.envMap)), e.envMapIntensity !== void 0 && (r.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (r.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (r.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (r.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (r.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (r.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (r.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (r.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (r.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (r.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (r.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (r.clearcoatNormalScale = new Ie().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (r.iridescenceMap = n(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (r.iridescenceThicknessMap = n(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (r.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (r.thicknessMap = n(e.thicknessMap)), e.anisotropyMap !== void 0 && (r.anisotropyMap = n(e.anisotropyMap)), e.sheenColorMap !== void 0 && (r.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (r.sheenRoughnessMap = n(e.sheenRoughnessMap)), r;
  }
  setTextures(e) {
    return this.textures = e, this;
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: LA,
      SpriteMaterial: NS,
      RawShaderMaterial: PA,
      ShaderMaterial: Ja,
      PointsMaterial: IS,
      MeshPhysicalMaterial: DA,
      MeshStandardMaterial: GS,
      MeshPhongMaterial: UA,
      MeshToonMaterial: NA,
      MeshNormalMaterial: OA,
      MeshLambertMaterial: IA,
      MeshDepthMaterial: LS,
      MeshDistanceMaterial: PS,
      MeshBasicMaterial: nu,
      MeshMatcapMaterial: FA,
      LineDashedMaterial: zA,
      LineBasicMaterial: zr,
      Material: br
    };
    return new t[e]();
  }
}
class iS {
  static decodeText(e) {
    if (typeof TextDecoder < "u")
      return new TextDecoder().decode(e);
    let t = "";
    for (let n = 0, r = e.length; n < r; n++)
      t += String.fromCharCode(e[n]);
    try {
      return decodeURIComponent(escape(t));
    } catch {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class $A extends hn {
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class eR extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = new Wo(o.manager);
    c.setPath(o.path), c.setRequestHeader(o.requestHeader), c.setWithCredentials(o.withCredentials), c.load(e, function(f) {
      try {
        t(o.parse(JSON.parse(f)));
      } catch (h) {
        r ? r(h) : console.error(h), o.manager.itemError(e);
      }
    }, n, r);
  }
  parse(e) {
    const t = {}, n = {};
    function r(M, T) {
      if (t[T] !== void 0)
        return t[T];
      const w = M.interleavedBuffers[T], E = o(M, w.buffer), L = od(w.type, E), R = new jg(L, w.stride);
      return R.uuid = w.uuid, t[T] = R, R;
    }
    function o(M, T) {
      if (n[T] !== void 0)
        return n[T];
      const w = M.arrayBuffers[T], E = new Uint32Array(w).buffer;
      return n[T] = E, E;
    }
    const c = e.isInstancedBufferGeometry ? new $A() : new hn(), f = e.data.index;
    if (f !== void 0) {
      const M = od(f.type, f.array);
      c.setIndex(new jn(M, 1));
    }
    const h = e.data.attributes;
    for (const M in h) {
      const T = h[M];
      let C;
      if (T.isInterleavedBufferAttribute) {
        const w = r(e.data, T.data);
        C = new yc(w, T.itemSize, T.offset, T.normalized);
      } else {
        const w = od(T.type, T.array), E = T.isInstancedBufferAttribute ? md : jn;
        C = new E(w, T.itemSize, T.normalized);
      }
      T.name !== void 0 && (C.name = T.name), T.usage !== void 0 && C.setUsage(T.usage), T.updateRange !== void 0 && (C.updateRange.offset = T.updateRange.offset, C.updateRange.count = T.updateRange.count), c.setAttribute(M, C);
    }
    const p = e.data.morphAttributes;
    if (p)
      for (const M in p) {
        const T = p[M], C = [];
        for (let w = 0, E = T.length; w < E; w++) {
          const L = T[w];
          let R;
          if (L.isInterleavedBufferAttribute) {
            const U = r(e.data, L.data);
            R = new yc(U, L.itemSize, L.offset, L.normalized);
          } else {
            const U = od(L.type, L.array);
            R = new jn(U, L.itemSize, L.normalized);
          }
          L.name !== void 0 && (R.name = L.name), C.push(R);
        }
        c.morphAttributes[M] = C;
      }
    e.data.morphTargetsRelative && (c.morphTargetsRelative = !0);
    const y = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (y !== void 0)
      for (let M = 0, T = y.length; M !== T; ++M) {
        const C = y[M];
        c.addGroup(C.start, C.count, C.materialIndex);
      }
    const x = e.data.boundingSphere;
    if (x !== void 0) {
      const M = new Y();
      x.center !== void 0 && M.fromArray(x.center), c.boundingSphere = new xs(M, x.radius);
    }
    return e.name && (c.name = e.name), e.userData && (c.userData = e.userData), c;
  }
}
class eF extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = this.path === "" ? iS.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || c;
    const f = new Wo(this.manager);
    f.setPath(this.path), f.setRequestHeader(this.requestHeader), f.setWithCredentials(this.withCredentials), f.load(e, function(h) {
      let p = null;
      try {
        p = JSON.parse(h);
      } catch (y) {
        r !== void 0 && r(y), console.error("THREE:ObjectLoader: Can't parse " + e + ".", y.message);
        return;
      }
      const v = p.metadata;
      if (v === void 0 || v.type === void 0 || v.type.toLowerCase() === "geometry") {
        r !== void 0 && r(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      o.parse(p, t);
    }, n, r);
  }
  async loadAsync(e, t) {
    const n = this, r = this.path === "" ? iS.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || r;
    const o = new Wo(this.manager);
    o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials);
    const c = await o.loadAsync(e, t), f = JSON.parse(c), h = f.metadata;
    if (h === void 0 || h.type === void 0 || h.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await n.parseAsync(f);
  }
  parse(e, t) {
    const n = this.parseAnimations(e.animations), r = this.parseShapes(e.shapes), o = this.parseGeometries(e.geometries, r), c = this.parseImages(e.images, function() {
      t !== void 0 && t(p);
    }), f = this.parseTextures(e.textures, c), h = this.parseMaterials(e.materials, f), p = this.parseObject(e.object, o, h, f, n), v = this.parseSkeletons(e.skeletons, p);
    if (this.bindSkeletons(p, v), t !== void 0) {
      let y = !1;
      for (const x in c)
        if (c[x].data instanceof HTMLImageElement) {
          y = !0;
          break;
        }
      y === !1 && t(p);
    }
    return p;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), r = this.parseGeometries(e.geometries, n), o = await this.parseImagesAsync(e.images), c = this.parseTextures(e.textures, o), f = this.parseMaterials(e.materials, c), h = this.parseObject(e.object, r, f, c, t), p = this.parseSkeletons(e.skeletons, h);
    return this.bindSkeletons(h, p), h;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0, r = e.length; n < r; n++) {
        const o = new mc().fromJSON(e[n]);
        t[o.uuid] = o;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const n = {}, r = {};
    if (t.traverse(function(o) {
      o.isBone && (r[o.uuid] = o);
    }), e !== void 0)
      for (let o = 0, c = e.length; o < c; o++) {
        const f = new qg().fromJSON(e[o], r);
        n[f.uuid] = f;
      }
    return n;
  }
  parseGeometries(e, t) {
    const n = {};
    if (e !== void 0) {
      const r = new eR();
      for (let o = 0, c = e.length; o < c; o++) {
        let f;
        const h = e[o];
        switch (h.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            f = r.parse(h);
            break;
          default:
            h.type in l1 ? f = l1[h.type].fromJSON(h, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${h.type}"`);
        }
        f.uuid = h.uuid, h.name !== void 0 && (f.name = h.name), h.userData !== void 0 && (f.userData = h.userData), n[h.uuid] = f;
      }
    }
    return n;
  }
  parseMaterials(e, t) {
    const n = {}, r = {};
    if (e !== void 0) {
      const o = new cy();
      o.setTextures(t);
      for (let c = 0, f = e.length; c < f; c++) {
        const h = e[c];
        n[h.uuid] === void 0 && (n[h.uuid] = o.parse(h)), r[h.uuid] = n[h.uuid];
      }
    }
    return r;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0; n < e.length; n++) {
        const r = e[n], o = Cp.parse(r);
        t[o.uuid] = o;
      }
    return t;
  }
  parseImages(e, t) {
    const n = this, r = {};
    let o;
    function c(h) {
      return n.manager.itemStart(h), o.load(h, function() {
        n.manager.itemEnd(h);
      }, void 0, function() {
        n.manager.itemError(h), n.manager.itemEnd(h);
      });
    }
    function f(h) {
      if (typeof h == "string") {
        const p = h, v = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(p) ? p : n.resourcePath + p;
        return c(v);
      } else
        return h.data ? {
          data: od(h.type, h.data),
          width: h.width,
          height: h.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const h = new jS(t);
      o = new Lp(h), o.setCrossOrigin(this.crossOrigin);
      for (let p = 0, v = e.length; p < v; p++) {
        const y = e[p], x = y.url;
        if (Array.isArray(x)) {
          const M = [];
          for (let T = 0, C = x.length; T < C; T++) {
            const w = x[T], E = f(w);
            E !== null && (E instanceof HTMLImageElement ? M.push(E) : M.push(new pc(E.data, E.width, E.height)));
          }
          r[y.uuid] = new uc(M);
        } else {
          const M = f(y.url);
          r[y.uuid] = new uc(M);
        }
      }
    }
    return r;
  }
  async parseImagesAsync(e) {
    const t = this, n = {};
    let r;
    async function o(c) {
      if (typeof c == "string") {
        const f = c, h = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(f) ? f : t.resourcePath + f;
        return await r.loadAsync(h);
      } else
        return c.data ? {
          data: od(c.type, c.data),
          width: c.width,
          height: c.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      r = new Lp(this.manager), r.setCrossOrigin(this.crossOrigin);
      for (let c = 0, f = e.length; c < f; c++) {
        const h = e[c], p = h.url;
        if (Array.isArray(p)) {
          const v = [];
          for (let y = 0, x = p.length; y < x; y++) {
            const M = p[y], T = await o(M);
            T !== null && (T instanceof HTMLImageElement ? v.push(T) : v.push(new pc(T.data, T.width, T.height)));
          }
          n[h.uuid] = new uc(v);
        } else {
          const v = await o(h.url);
          n[h.uuid] = new uc(v);
        }
      }
    }
    return n;
  }
  parseTextures(e, t) {
    function n(o, c) {
      return typeof o == "number" ? o : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", o), c[o]);
    }
    const r = {};
    if (e !== void 0)
      for (let o = 0, c = e.length; o < c; o++) {
        const f = e[o];
        f.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', f.uuid), t[f.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", f.image);
        const h = t[f.image], p = h.data;
        let v;
        Array.isArray(p) ? (v = new Ip(), p.length === 6 && (v.needsUpdate = !0)) : (p && p.data ? v = new pc() : v = new Ci(), p && (v.needsUpdate = !0)), v.source = h, v.uuid = f.uuid, f.name !== void 0 && (v.name = f.name), f.mapping !== void 0 && (v.mapping = n(f.mapping, tF)), f.channel !== void 0 && (v.channel = f.channel), f.offset !== void 0 && v.offset.fromArray(f.offset), f.repeat !== void 0 && v.repeat.fromArray(f.repeat), f.center !== void 0 && v.center.fromArray(f.center), f.rotation !== void 0 && (v.rotation = f.rotation), f.wrap !== void 0 && (v.wrapS = n(f.wrap[0], d1), v.wrapT = n(f.wrap[1], d1)), f.format !== void 0 && (v.format = f.format), f.internalFormat !== void 0 && (v.internalFormat = f.internalFormat), f.type !== void 0 && (v.type = f.type), f.colorSpace !== void 0 && (v.colorSpace = f.colorSpace), f.encoding !== void 0 && (v.encoding = f.encoding), f.minFilter !== void 0 && (v.minFilter = n(f.minFilter, h1)), f.magFilter !== void 0 && (v.magFilter = n(f.magFilter, h1)), f.anisotropy !== void 0 && (v.anisotropy = f.anisotropy), f.flipY !== void 0 && (v.flipY = f.flipY), f.generateMipmaps !== void 0 && (v.generateMipmaps = f.generateMipmaps), f.premultiplyAlpha !== void 0 && (v.premultiplyAlpha = f.premultiplyAlpha), f.unpackAlignment !== void 0 && (v.unpackAlignment = f.unpackAlignment), f.compareFunction !== void 0 && (v.compareFunction = f.compareFunction), f.userData !== void 0 && (v.userData = f.userData), r[f.uuid] = v;
      }
    return r;
  }
  parseObject(e, t, n, r, o) {
    let c;
    function f(x) {
      return t[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", x), t[x];
    }
    function h(x) {
      if (x !== void 0) {
        if (Array.isArray(x)) {
          const M = [];
          for (let T = 0, C = x.length; T < C; T++) {
            const w = x[T];
            n[w] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", w), M.push(n[w]);
          }
          return M;
        }
        return n[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", x), n[x];
      }
    }
    function p(x) {
      return r[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", x), r[x];
    }
    let v, y;
    switch (e.type) {
      case "Scene":
        c = new Yg(), e.background !== void 0 && (Number.isInteger(e.background) ? c.background = new Rt(e.background) : c.background = p(e.background)), e.environment !== void 0 && (c.environment = p(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? c.fog = new Xg(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (c.fog = new Wg(e.fog.color, e.fog.density)), e.fog.name !== "" && (c.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (c.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (c.backgroundIntensity = e.backgroundIntensity);
        break;
      case "PerspectiveCamera":
        c = new Ri(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (c.focus = e.focus), e.zoom !== void 0 && (c.zoom = e.zoom), e.filmGauge !== void 0 && (c.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (c.filmOffset = e.filmOffset), e.view !== void 0 && (c.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        c = new Vo(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (c.zoom = e.zoom), e.view !== void 0 && (c.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        c = new ZA(e.color, e.intensity);
        break;
      case "DirectionalLight":
        c = new qA(e.color, e.intensity);
        break;
      case "PointLight":
        c = new jA(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        c = new JA(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        c = new YA(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
        break;
      case "HemisphereLight":
        c = new XA(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        c = new QA().fromJSON(e);
        break;
      case "SkinnedMesh":
        v = f(e.geometry), y = h(e.material), c = new vA(v, y), e.bindMode !== void 0 && (c.bindMode = e.bindMode), e.bindMatrix !== void 0 && c.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (c.skeleton = e.skeleton);
        break;
      case "Mesh":
        v = f(e.geometry), y = h(e.material), c = new lr(v, y);
        break;
      case "InstancedMesh":
        v = f(e.geometry), y = h(e.material);
        const x = e.count, M = e.instanceMatrix, T = e.instanceColor;
        c = new gA(v, y, x), c.instanceMatrix = new md(new Float32Array(M.array), 16), T !== void 0 && (c.instanceColor = new md(new Float32Array(T.array), T.itemSize));
        break;
      case "LOD":
        c = new mA();
        break;
      case "Line":
        c = new eu(f(e.geometry), h(e.material));
        break;
      case "LineLoop":
        c = new yA(f(e.geometry), h(e.material));
        break;
      case "LineSegments":
        c = new $s(f(e.geometry), h(e.material));
        break;
      case "PointCloud":
      case "Points":
        c = new _A(f(e.geometry), h(e.material));
        break;
      case "Sprite":
        c = new pA(h(e.material));
        break;
      case "Group":
        c = new ud();
        break;
      case "Bone":
        c = new OS();
        break;
      default:
        c = new Cn();
    }
    if (c.uuid = e.uuid, e.name !== void 0 && (c.name = e.name), e.matrix !== void 0 ? (c.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (c.matrixAutoUpdate = e.matrixAutoUpdate), c.matrixAutoUpdate && c.matrix.decompose(c.position, c.quaternion, c.scale)) : (e.position !== void 0 && c.position.fromArray(e.position), e.rotation !== void 0 && c.rotation.fromArray(e.rotation), e.quaternion !== void 0 && c.quaternion.fromArray(e.quaternion), e.scale !== void 0 && c.scale.fromArray(e.scale)), e.up !== void 0 && c.up.fromArray(e.up), e.castShadow !== void 0 && (c.castShadow = e.castShadow), e.receiveShadow !== void 0 && (c.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (c.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (c.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (c.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && c.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (c.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (c.visible = e.visible), e.frustumCulled !== void 0 && (c.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (c.renderOrder = e.renderOrder), e.userData !== void 0 && (c.userData = e.userData), e.layers !== void 0 && (c.layers.mask = e.layers), e.children !== void 0) {
      const x = e.children;
      for (let M = 0; M < x.length; M++)
        c.add(this.parseObject(x[M], t, n, r, o));
    }
    if (e.animations !== void 0) {
      const x = e.animations;
      for (let M = 0; M < x.length; M++) {
        const T = x[M];
        c.animations.push(o[T]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (c.autoUpdate = e.autoUpdate);
      const x = e.levels;
      for (let M = 0; M < x.length; M++) {
        const T = x[M], C = c.getObjectByProperty("uuid", T.object);
        C !== void 0 && c.addLevel(C, T.distance, T.hysteresis);
      }
    }
    return c;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 && e.traverse(function(n) {
      if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
        const r = t[n.skeleton];
        r === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(r, n.bindMatrix);
      }
    });
  }
}
const tF = {
  UVMapping: Fg,
  CubeReflectionMapping: Go,
  CubeRefractionMapping: Ql,
  EquirectangularReflectionMapping: cp,
  EquirectangularRefractionMapping: fp,
  CubeUVReflectionMapping: gd
}, d1 = {
  RepeatWrapping: dp,
  ClampToEdgeWrapping: Mr,
  MirroredRepeatWrapping: hp
}, h1 = {
  NearestFilter: di,
  NearestMipmapNearestFilter: Cg,
  NearestMipmapLinearFilter: ap,
  LinearFilter: hi,
  LinearMipmapNearestFilter: mS,
  LinearMipmapLinearFilter: $l
};
class nF extends aa {
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  setOptions(e) {
    return this.options = e, this;
  }
  load(e, t, n, r) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = this, c = xc.get(e);
    if (c !== void 0)
      return o.manager.itemStart(e), setTimeout(function() {
        t && t(c), o.manager.itemEnd(e);
      }, 0), c;
    const f = {};
    f.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", f.headers = this.requestHeader, fetch(e, f).then(function(h) {
      return h.blob();
    }).then(function(h) {
      return createImageBitmap(h, Object.assign(o.options, { colorSpaceConversion: "none" }));
    }).then(function(h) {
      xc.add(e, h), t && t(h), o.manager.itemEnd(e);
    }).catch(function(h) {
      r && r(h), o.manager.itemError(e), o.manager.itemEnd(e);
    }), o.manager.itemStart(e);
  }
}
let lg;
class ZS {
  static getContext() {
    return lg === void 0 && (lg = new (window.AudioContext || window.webkitAudioContext)()), lg;
  }
  static setContext(e) {
    lg = e;
  }
}
class iF extends aa {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = new Wo(this.manager);
    c.setResponseType("arraybuffer"), c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials), c.load(e, function(h) {
      try {
        const p = h.slice(0);
        ZS.getContext().decodeAudioData(p, function(y) {
          t(y);
        }, f);
      } catch (p) {
        f(p);
      }
    }, n, r);
    function f(h) {
      r ? r(h) : console.error(h), o.manager.itemError(e);
    }
  }
}
const p1 = /* @__PURE__ */ new tn(), m1 = /* @__PURE__ */ new tn(), Ku = /* @__PURE__ */ new tn();
class rF {
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new Ri(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new Ri(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(e) {
    const t = this._cache;
    if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
      t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, Ku.copy(e.projectionMatrix);
      const r = t.eyeSep / 2, o = r * t.near / t.focus, c = t.near * Math.tan(dc * t.fov * 0.5) / t.zoom;
      let f, h;
      m1.elements[12] = -r, p1.elements[12] = r, f = -c * t.aspect + o, h = c * t.aspect + o, Ku.elements[0] = 2 * t.near / (h - f), Ku.elements[8] = (h + f) / (h - f), this.cameraL.projectionMatrix.copy(Ku), f = -c * t.aspect - o, h = c * t.aspect - o, Ku.elements[0] = 2 * t.near / (h - f), Ku.elements[8] = (h + f) / (h - f), this.cameraR.projectionMatrix.copy(Ku);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(m1), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(p1);
  }
}
class JS {
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  start() {
    this.startTime = v1(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const t = v1();
      e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
    }
    return e;
  }
}
function v1() {
  return (typeof performance > "u" ? Date : performance).now();
}
const Qu = /* @__PURE__ */ new Y(), g1 = /* @__PURE__ */ new Tr(), aF = /* @__PURE__ */ new Y(), $u = /* @__PURE__ */ new Y();
class sF extends Cn {
  constructor() {
    super(), this.type = "AudioListener", this.context = ZS.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new JS();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener, n = this.up;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Qu, g1, aF), $u.set(0, 0, -1).applyQuaternion(g1), t.positionX) {
      const r = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(Qu.x, r), t.positionY.linearRampToValueAtTime(Qu.y, r), t.positionZ.linearRampToValueAtTime(Qu.z, r), t.forwardX.linearRampToValueAtTime($u.x, r), t.forwardY.linearRampToValueAtTime($u.y, r), t.forwardZ.linearRampToValueAtTime($u.z, r), t.upX.linearRampToValueAtTime(n.x, r), t.upY.linearRampToValueAtTime(n.y, r), t.upZ.linearRampToValueAtTime(n.z, r);
    } else
      t.setPosition(Qu.x, Qu.y, Qu.z), t.setOrientation($u.x, $u.y, $u.z, n.x, n.y, n.z);
  }
}
class tR extends Cn {
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  stop() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let e = 1, t = this.filters.length; e < t; e++)
          this.filters[e - 1].disconnect(this.filters[e]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else
        this.source.disconnect(this.getOutput());
      return this._connected = !1, this;
    }
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  setDetune(e) {
    if (this.detune = e, this.source.detune !== void 0)
      return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = !1;
  }
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
}
const ec = /* @__PURE__ */ new Y(), y1 = /* @__PURE__ */ new Tr(), oF = /* @__PURE__ */ new Y(), tc = /* @__PURE__ */ new Y();
class lF extends tR {
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  connect() {
    super.connect(), this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect(), this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  setDirectionalCone(e, t, n) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1)
      return;
    this.matrixWorld.decompose(ec, y1, oF), tc.set(0, 0, 1).applyQuaternion(y1);
    const t = this.panner;
    if (t.positionX) {
      const n = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(ec.x, n), t.positionY.linearRampToValueAtTime(ec.y, n), t.positionZ.linearRampToValueAtTime(ec.z, n), t.orientationX.linearRampToValueAtTime(tc.x, n), t.orientationY.linearRampToValueAtTime(tc.y, n), t.orientationZ.linearRampToValueAtTime(tc.z, n);
    } else
      t.setPosition(ec.x, ec.y, ec.z), t.setOrientation(tc.x, tc.y, tc.z);
  }
}
class uF {
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let n = 0; n < t.length; n++)
      e += t[n];
    return e / t.length;
  }
}
class nR {
  constructor(e, t, n) {
    this.binding = e, this.valueSize = n;
    let r, o, c;
    switch (t) {
      case "quaternion":
        r = this._slerp, o = this._slerpAdditive, c = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        r = this._select, o = this._select, c = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
        break;
      default:
        r = this._lerp, o = this._lerpAdditive, c = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
    }
    this._mixBufferRegion = r, this._mixBufferRegionAdditive = o, this._setIdentity = c, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate(e, t) {
    const n = this.buffer, r = this.valueSize, o = e * r + r;
    let c = this.cumulativeWeight;
    if (c === 0) {
      for (let f = 0; f !== r; ++f)
        n[o + f] = n[f];
      c = t;
    } else {
      c += t;
      const f = t / c;
      this._mixBufferRegion(n, o, 0, f, r);
    }
    this.cumulativeWeight = c;
  }
  // accumulate data in the 'incoming' region into 'add'
  accumulateAdditive(e) {
    const t = this.buffer, n = this.valueSize, r = n * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, r, 0, e, n), this.cumulativeWeightAdditive += e;
  }
  // apply the state of 'accu<i>' to the binding when accus differ
  apply(e) {
    const t = this.valueSize, n = this.buffer, r = e * t + t, o = this.cumulativeWeight, c = this.cumulativeWeightAdditive, f = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, o < 1) {
      const h = t * this._origIndex;
      this._mixBufferRegion(
        n,
        r,
        h,
        1 - o,
        t
      );
    }
    c > 0 && this._mixBufferRegionAdditive(n, r, this._addIndex * t, 1, t);
    for (let h = t, p = t + t; h !== p; ++h)
      if (n[h] !== n[h + t]) {
        f.setValue(n, r);
        break;
      }
  }
  // remember the state of the bound property and copy it to both accus
  saveOriginalState() {
    const e = this.binding, t = this.buffer, n = this.valueSize, r = n * this._origIndex;
    e.getValue(t, r);
    for (let o = n, c = r; o !== c; ++o)
      t[o] = t[r + o % n];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, t = e + this.valueSize;
    for (let n = e; n < t; n++)
      this.buffer[n] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
    for (let n = 0; n < this.valueSize; n++)
      this.buffer[t + n] = this.buffer[e + n];
  }
  // mix functions
  _select(e, t, n, r, o) {
    if (r >= 0.5)
      for (let c = 0; c !== o; ++c)
        e[t + c] = e[n + c];
  }
  _slerp(e, t, n, r) {
    Tr.slerpFlat(e, t, e, t, e, n, r);
  }
  _slerpAdditive(e, t, n, r, o) {
    const c = this._workIndex * o;
    Tr.multiplyQuaternionsFlat(e, c, e, t, e, n), Tr.slerpFlat(e, t, e, t, e, c, r);
  }
  _lerp(e, t, n, r, o) {
    const c = 1 - r;
    for (let f = 0; f !== o; ++f) {
      const h = t + f;
      e[h] = e[h] * c + e[n + f] * r;
    }
  }
  _lerpAdditive(e, t, n, r, o) {
    for (let c = 0; c !== o; ++c) {
      const f = t + c;
      e[f] = e[f] + e[n + c] * r;
    }
  }
}
const KS = "\\[\\]\\.:\\/", cF = new RegExp("[" + KS + "]", "g"), QS = "[^" + KS + "]", fF = "[^" + KS.replace("\\.", "") + "]", dF = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", QS), hF = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", fF), pF = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", QS), mF = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", QS), vF = new RegExp(
  "^" + dF + hF + pF + mF + "$"
), gF = ["material", "materials", "bones", "map"];
class yF {
  constructor(e, t, n) {
    const r = n || bn.parseTrackName(t);
    this._targetGroup = e, this._bindings = e.subscribe_(t, r);
  }
  getValue(e, t) {
    this.bind();
    const n = this._targetGroup.nCachedObjects_, r = this._bindings[n];
    r !== void 0 && r.getValue(e, t);
  }
  setValue(e, t) {
    const n = this._bindings;
    for (let r = this._targetGroup.nCachedObjects_, o = n.length; r !== o; ++r)
      n[r].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].unbind();
  }
}
class bn {
  constructor(e, t, n) {
    this.path = t, this.parsedPath = n || bn.parseTrackName(t), this.node = bn.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  static create(e, t, n) {
    return e && e.isAnimationObjectGroup ? new bn.Composite(e, t, n) : new bn(e, t, n);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(cF, "");
  }
  static parseTrackName(e) {
    const t = vF.exec(e);
    if (t === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const n = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    }, r = n.nodeName && n.nodeName.lastIndexOf(".");
    if (r !== void 0 && r !== -1) {
      const o = n.nodeName.substring(r + 1);
      gF.indexOf(o) !== -1 && (n.nodeName = n.nodeName.substring(0, r), n.objectName = o);
    }
    if (n.propertyName === null || n.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return n;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid)
      return e;
    if (e.skeleton) {
      const n = e.skeleton.getBoneByName(t);
      if (n !== void 0)
        return n;
    }
    if (e.children) {
      const n = function(o) {
        for (let c = 0; c < o.length; c++) {
          const f = o[c];
          if (f.name === t || f.uuid === t)
            return f;
          const h = n(f.children);
          if (h)
            return h;
        }
        return null;
      }, r = n(e.children);
      if (r)
        return r;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let r = 0, o = n.length; r !== o; ++r)
      e[t++] = n[r];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let r = 0, o = n.length; r !== o; ++r)
      n[r] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let r = 0, o = n.length; r !== o; ++r)
      n[r] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let r = 0, o = n.length; r !== o; ++r)
      n[r] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let e = this.node;
    const t = this.parsedPath, n = t.objectName, r = t.propertyName;
    let o = t.propertyIndex;
    if (e || (e = bn.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (n) {
      let p = t.objectIndex;
      switch (n) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let v = 0; v < e.length; v++)
            if (e[v].name === p) {
              p = v;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[n];
      }
      if (p !== void 0) {
        if (e[p] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[p];
      }
    }
    const c = e[r];
    if (c === void 0) {
      const p = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + p + "." + r + " but it wasn't found.", e);
      return;
    }
    let f = this.Versioning.None;
    this.targetObject = e, e.needsUpdate !== void 0 ? f = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (f = this.Versioning.MatrixWorldNeedsUpdate);
    let h = this.BindingType.Direct;
    if (o !== void 0) {
      if (r === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[o] !== void 0 && (o = e.morphTargetDictionary[o]);
      }
      h = this.BindingType.ArrayElement, this.resolvedProperty = c, this.propertyIndex = o;
    } else
      c.fromArray !== void 0 && c.toArray !== void 0 ? (h = this.BindingType.HasFromToArray, this.resolvedProperty = c) : Array.isArray(c) ? (h = this.BindingType.EntireArray, this.resolvedProperty = c) : this.propertyName = r;
    this.getValue = this.GetterByBindingType[h], this.setValue = this.SetterByBindingTypeAndVersioning[h][f];
  }
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
bn.Composite = yF;
bn.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
bn.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
bn.prototype.GetterByBindingType = [
  bn.prototype._getValue_direct,
  bn.prototype._getValue_array,
  bn.prototype._getValue_arrayElement,
  bn.prototype._getValue_toArray
];
bn.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    bn.prototype._setValue_direct,
    bn.prototype._setValue_direct_setNeedsUpdate,
    bn.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    bn.prototype._setValue_array,
    bn.prototype._setValue_array_setNeedsUpdate,
    bn.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    bn.prototype._setValue_arrayElement,
    bn.prototype._setValue_arrayElement_setNeedsUpdate,
    bn.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    bn.prototype._setValue_fromArray,
    bn.prototype._setValue_fromArray_setNeedsUpdate,
    bn.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class _F {
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = ba(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let n = 0, r = arguments.length; n !== r; ++n)
      e[arguments[n].uuid] = n;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  add() {
    const e = this._objects, t = this._indicesByUUID, n = this._paths, r = this._parsedPaths, o = this._bindings, c = o.length;
    let f, h = e.length, p = this.nCachedObjects_;
    for (let v = 0, y = arguments.length; v !== y; ++v) {
      const x = arguments[v], M = x.uuid;
      let T = t[M];
      if (T === void 0) {
        T = h++, t[M] = T, e.push(x);
        for (let C = 0, w = c; C !== w; ++C)
          o[C].push(new bn(x, n[C], r[C]));
      } else if (T < p) {
        f = e[T];
        const C = --p, w = e[C];
        t[w.uuid] = T, e[T] = w, t[M] = C, e[C] = x;
        for (let E = 0, L = c; E !== L; ++E) {
          const R = o[E], U = R[C];
          let F = R[T];
          R[T] = U, F === void 0 && (F = new bn(x, n[E], r[E])), R[C] = F;
        }
      } else
        e[T] !== f && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = p;
  }
  remove() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, r = n.length;
    let o = this.nCachedObjects_;
    for (let c = 0, f = arguments.length; c !== f; ++c) {
      const h = arguments[c], p = h.uuid, v = t[p];
      if (v !== void 0 && v >= o) {
        const y = o++, x = e[y];
        t[x.uuid] = v, e[v] = x, t[p] = y, e[y] = h;
        for (let M = 0, T = r; M !== T; ++M) {
          const C = n[M], w = C[y], E = C[v];
          C[v] = w, C[y] = E;
        }
      }
    }
    this.nCachedObjects_ = o;
  }
  // remove & forget
  uncache() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, r = n.length;
    let o = this.nCachedObjects_, c = e.length;
    for (let f = 0, h = arguments.length; f !== h; ++f) {
      const p = arguments[f], v = p.uuid, y = t[v];
      if (y !== void 0)
        if (delete t[v], y < o) {
          const x = --o, M = e[x], T = --c, C = e[T];
          t[M.uuid] = y, e[y] = M, t[C.uuid] = x, e[x] = C, e.pop();
          for (let w = 0, E = r; w !== E; ++w) {
            const L = n[w], R = L[x], U = L[T];
            L[y] = R, L[x] = U, L.pop();
          }
        } else {
          const x = --c, M = e[x];
          x > 0 && (t[M.uuid] = y), e[y] = M, e.pop();
          for (let T = 0, C = r; T !== C; ++T) {
            const w = n[T];
            w[y] = w[x], w.pop();
          }
        }
    }
    this.nCachedObjects_ = o;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const n = this._bindingsIndicesByPath;
    let r = n[e];
    const o = this._bindings;
    if (r !== void 0)
      return o[r];
    const c = this._paths, f = this._parsedPaths, h = this._objects, p = h.length, v = this.nCachedObjects_, y = new Array(p);
    r = o.length, n[e] = r, c.push(e), f.push(t), o.push(y);
    for (let x = v, M = h.length; x !== M; ++x) {
      const T = h[x];
      y[x] = new bn(T, e, t);
    }
    return y;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, n = t[e];
    if (n !== void 0) {
      const r = this._paths, o = this._parsedPaths, c = this._bindings, f = c.length - 1, h = c[f], p = e[f];
      t[p] = n, c[n] = h, c.pop(), o[n] = o[f], o.pop(), r[n] = r[f], r.pop();
    }
  }
}
class iR {
  constructor(e, t, n = null, r = t.blendMode) {
    this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = r;
    const o = t.tracks, c = o.length, f = new Array(c), h = {
      endingStart: oc,
      endingEnd: oc
    };
    for (let p = 0; p !== c; ++p) {
      const v = o[p].createInterpolant(null);
      f[p] = v, v.settings = h;
    }
    this._interpolantSettings = h, this._interpolants = f, this._propertyBindings = new Array(c), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = Ow, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  // State & Scheduling
  play() {
    return this._mixer._activateAction(this), this;
  }
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  // return true when play has been called
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    return this._startTime = e, this;
  }
  setLoop(e, t) {
    return this.loop = e, this.repetitions = t, this;
  }
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  // return the weight considering fading and .enabled
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, n) {
    if (e.fadeOut(t), this.fadeIn(t), n) {
      const r = this._clip.duration, o = e._clip.duration, c = o / r, f = r / o;
      e.warp(1, c, t), this.warp(f, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, n) {
    return e.crossFadeFrom(this, t, n);
  }
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  // return the time scale considering warping and .paused
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, n) {
    const r = this._mixer, o = r.time, c = this.timeScale;
    let f = this._timeScaleInterpolant;
    f === null && (f = r._lendControlInterpolant(), this._timeScaleInterpolant = f);
    const h = f.parameterPositions, p = f.sampleValues;
    return h[0] = o, h[1] = o + n, p[0] = e / c, p[1] = t / c, this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Object Accessors
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, n, r) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const o = this._startTime;
    if (o !== null) {
      const h = (e - o) * n;
      h < 0 || n === 0 ? t = 0 : (this._startTime = null, t = n * h);
    }
    t *= this._updateTimeScale(e);
    const c = this._updateTime(t), f = this._updateWeight(e);
    if (f > 0) {
      const h = this._interpolants, p = this._propertyBindings;
      switch (this.blendMode) {
        case MS:
          for (let v = 0, y = h.length; v !== y; ++v)
            h[v].evaluate(c), p[v].accumulateAdditive(f);
          break;
        case Bg:
        default:
          for (let v = 0, y = h.length; v !== y; ++v)
            h[v].evaluate(c), p[v].accumulate(r, f);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const n = this._weightInterpolant;
      if (n !== null) {
        const r = n.evaluate(e)[0];
        t *= r, e > n.parameterPositions[1] && (this.stopFading(), r === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = t, t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const n = this._timeScaleInterpolant;
      if (n !== null) {
        const r = n.evaluate(e)[0];
        t *= r, e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
      }
    }
    return this._effectiveTimeScale = t, t;
  }
  _updateTime(e) {
    const t = this._clip.duration, n = this.loop;
    let r = this.time + e, o = this._loopCount;
    const c = n === Iw;
    if (e === 0)
      return o === -1 ? r : c && (o & 1) === 1 ? t - r : r;
    if (n === Nw) {
      o === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (r >= t)
          r = t;
        else if (r < 0)
          r = 0;
        else {
          this.time = r;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = r, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (o === -1 && (e >= 0 ? (o = 0, this._setEndings(!0, this.repetitions === 0, c)) : this._setEndings(this.repetitions === 0, !0, c)), r >= t || r < 0) {
        const f = Math.floor(r / t);
        r -= t * f, o += Math.abs(f);
        const h = this.repetitions - o;
        if (h <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, r = e > 0 ? t : 0, this.time = r, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (h === 1) {
            const p = e < 0;
            this._setEndings(p, !p, c);
          } else
            this._setEndings(!1, !1, c);
          this._loopCount = o, this.time = r, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: f
          });
        }
      } else
        this.time = r;
      if (c && (o & 1) === 1)
        return t - r;
    }
    return r;
  }
  _setEndings(e, t, n) {
    const r = this._interpolantSettings;
    n ? (r.endingStart = lc, r.endingEnd = lc) : (e ? r.endingStart = this.zeroSlopeAtStart ? lc : oc : r.endingStart = vp, t ? r.endingEnd = this.zeroSlopeAtEnd ? lc : oc : r.endingEnd = vp);
  }
  _scheduleFading(e, t, n) {
    const r = this._mixer, o = r.time;
    let c = this._weightInterpolant;
    c === null && (c = r._lendControlInterpolant(), this._weightInterpolant = c);
    const f = c.parameterPositions, h = c.sampleValues;
    return f[0] = o, h[0] = t, f[1] = o + e, h[1] = n, this;
  }
}
const xF = new Float32Array(1);
class SF extends Xo {
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, t) {
    const n = e._localRoot || this._root, r = e._clip.tracks, o = r.length, c = e._propertyBindings, f = e._interpolants, h = n.uuid, p = this._bindingsByRootAndName;
    let v = p[h];
    v === void 0 && (v = {}, p[h] = v);
    for (let y = 0; y !== o; ++y) {
      const x = r[y], M = x.name;
      let T = v[M];
      if (T !== void 0)
        ++T.referenceCount, c[y] = T;
      else {
        if (T = c[y], T !== void 0) {
          T._cacheIndex === null && (++T.referenceCount, this._addInactiveBinding(T, h, M));
          continue;
        }
        const C = t && t._propertyBindings[y].binding.parsedPath;
        T = new nR(
          bn.create(n, M, C),
          x.ValueTypeName,
          x.getValueSize()
        ), ++T.referenceCount, this._addInactiveBinding(T, h, M), c[y] = T;
      }
      f[y].resultBuffer = T.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const n = (e._localRoot || this._root).uuid, r = e._clip.uuid, o = this._actionsByClip[r];
        this._bindAction(
          e,
          o && o.knownActions[0]
        ), this._addInactiveAction(e, r, n);
      }
      const t = e._propertyBindings;
      for (let n = 0, r = t.length; n !== r; ++n) {
        const o = t[n];
        o.useCount++ === 0 && (this._lendBinding(o), o.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let n = 0, r = t.length; n !== r; ++n) {
        const o = t[n];
        --o.useCount === 0 && (o.restoreOriginalState(), this._takeBackBinding(o));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, n) {
    const r = this._actions, o = this._actionsByClip;
    let c = o[t];
    if (c === void 0)
      c = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, o[t] = c;
    else {
      const f = c.knownActions;
      e._byClipCacheIndex = f.length, f.push(e);
    }
    e._cacheIndex = r.length, r.push(e), c.actionByRoot[n] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, n = t[t.length - 1], r = e._cacheIndex;
    n._cacheIndex = r, t[r] = n, t.pop(), e._cacheIndex = null;
    const o = e._clip.uuid, c = this._actionsByClip, f = c[o], h = f.knownActions, p = h[h.length - 1], v = e._byClipCacheIndex;
    p._byClipCacheIndex = v, h[v] = p, h.pop(), e._byClipCacheIndex = null;
    const y = f.actionByRoot, x = (e._localRoot || this._root).uuid;
    delete y[x], h.length === 0 && delete c[o], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let n = 0, r = t.length; n !== r; ++n) {
      const o = t[n];
      --o.referenceCount === 0 && this._removeInactiveBinding(o);
    }
  }
  _lendAction(e) {
    const t = this._actions, n = e._cacheIndex, r = this._nActiveActions++, o = t[r];
    e._cacheIndex = r, t[r] = e, o._cacheIndex = n, t[n] = o;
  }
  _takeBackAction(e) {
    const t = this._actions, n = e._cacheIndex, r = --this._nActiveActions, o = t[r];
    e._cacheIndex = r, t[r] = e, o._cacheIndex = n, t[n] = o;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, n) {
    const r = this._bindingsByRootAndName, o = this._bindings;
    let c = r[t];
    c === void 0 && (c = {}, r[t] = c), c[n] = e, e._cacheIndex = o.length, o.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, n = e.binding, r = n.rootNode.uuid, o = n.path, c = this._bindingsByRootAndName, f = c[r], h = t[t.length - 1], p = e._cacheIndex;
    h._cacheIndex = p, t[p] = h, t.pop(), delete f[o], Object.keys(f).length === 0 && delete c[r];
  }
  _lendBinding(e) {
    const t = this._bindings, n = e._cacheIndex, r = this._nActiveBindings++, o = t[r];
    e._cacheIndex = r, t[r] = e, o._cacheIndex = n, t[n] = o;
  }
  _takeBackBinding(e) {
    const t = this._bindings, n = e._cacheIndex, r = --this._nActiveBindings, o = t[r];
    e._cacheIndex = r, t[r] = e, o._cacheIndex = n, t[n] = o;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let n = e[t];
    return n === void 0 && (n = new XS(
      new Float32Array(2),
      new Float32Array(2),
      1,
      xF
    ), n.__cacheIndex = t, e[t] = n), n;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, n = e.__cacheIndex, r = --this._nActiveControlInterpolants, o = t[r];
    e.__cacheIndex = r, t[r] = e, o.__cacheIndex = n, t[n] = o;
  }
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction(e, t, n) {
    const r = t || this._root, o = r.uuid;
    let c = typeof e == "string" ? Cp.findByName(r, e) : e;
    const f = c !== null ? c.uuid : e, h = this._actionsByClip[f];
    let p = null;
    if (n === void 0 && (c !== null ? n = c.blendMode : n = Bg), h !== void 0) {
      const y = h.actionByRoot[o];
      if (y !== void 0 && y.blendMode === n)
        return y;
      p = h.knownActions[0], c === null && (c = p._clip);
    }
    if (c === null)
      return null;
    const v = new iR(this, c, t, n);
    return this._bindAction(v, p), this._addInactiveAction(v, f, o), v;
  }
  // get an existing action
  existingAction(e, t) {
    const n = t || this._root, r = n.uuid, o = typeof e == "string" ? Cp.findByName(n, e) : e, c = o ? o.uuid : e, f = this._actionsByClip[c];
    return f !== void 0 && f.actionByRoot[r] || null;
  }
  // deactivates all previously scheduled actions
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let n = t - 1; n >= 0; --n)
      e[n].stop();
    return this;
  }
  // advance the time and update apply the animation
  update(e) {
    e *= this.timeScale;
    const t = this._actions, n = this._nActiveActions, r = this.time += e, o = Math.sign(e), c = this._accuIndex ^= 1;
    for (let p = 0; p !== n; ++p)
      t[p]._update(r, e, o, c);
    const f = this._bindings, h = this._nActiveBindings;
    for (let p = 0; p !== h; ++p)
      f[p].apply(c);
    return this;
  }
  // Allows you to seek to a specific time in an animation.
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++)
      this._actions[t].time = 0;
    return this.update(e);
  }
  // return this mixer's root target object
  getRoot() {
    return this._root;
  }
  // free all resources specific to a particular clip
  uncacheClip(e) {
    const t = this._actions, n = e.uuid, r = this._actionsByClip, o = r[n];
    if (o !== void 0) {
      const c = o.knownActions;
      for (let f = 0, h = c.length; f !== h; ++f) {
        const p = c[f];
        this._deactivateAction(p);
        const v = p._cacheIndex, y = t[t.length - 1];
        p._cacheIndex = null, p._byClipCacheIndex = null, y._cacheIndex = v, t[v] = y, t.pop(), this._removeInactiveBindingsForAction(p);
      }
      delete r[n];
    }
  }
  // free all resources specific to a particular root target object
  uncacheRoot(e) {
    const t = e.uuid, n = this._actionsByClip;
    for (const c in n) {
      const f = n[c].actionByRoot, h = f[t];
      h !== void 0 && (this._deactivateAction(h), this._removeInactiveAction(h));
    }
    const r = this._bindingsByRootAndName, o = r[t];
    if (o !== void 0)
      for (const c in o) {
        const f = o[c];
        f.restoreOriginalState(), this._removeInactiveBinding(f);
      }
  }
  // remove a targeted clip from the cache
  uncacheAction(e, t) {
    const n = this.existingAction(e, t);
    n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
  }
}
class $S {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new $S(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let MF = 0;
class EF extends Xo {
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: MF++ }), this.name = "", this.usage = xp, this.uniforms = [];
  }
  add(e) {
    return this.uniforms.push(e), this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  setName(e) {
    return this.name = e, this;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this;
  }
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let n = 0, r = t.length; n < r; n++)
      this.uniforms.push(t[n].clone());
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class TF extends jg {
  constructor(e, t, n = 1) {
    super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const t = super.clone(e);
    return t.meshPerAttribute = this.meshPerAttribute, t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
  }
}
class bF {
  constructor(e, t, n, r, o) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = r, this.count = o, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setBuffer(e) {
    return this.buffer = e, this;
  }
  setType(e, t) {
    return this.type = e, this.elementSize = t, this;
  }
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  setCount(e) {
    return this.count = e, this;
  }
}
class eM {
  constructor(e, t, n = 0, r = 1 / 0) {
    this.ray = new Sc(e, t), this.near = n, this.far = r, this.camera = null, this.layers = new hc(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  intersectObject(e, t = !0, n = []) {
    return rS(e, this, n, t), n.sort(_1), n;
  }
  intersectObjects(e, t = !0, n = []) {
    for (let r = 0, o = e.length; r < o; r++)
      rS(e[r], this, n, t);
    return n.sort(_1), n;
  }
}
function _1(s, e) {
  return s.distance - e.distance;
}
function rS(s, e, t, n) {
  if (s.layers.test(e.layers) && s.raycast(e, t), n === !0) {
    const r = s.children;
    for (let o = 0, c = r.length; o < c; o++)
      rS(r[o], e, t, !0);
  }
}
class aS {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(yi(t / this.radius, -1, 1))), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class wF {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const x1 = /* @__PURE__ */ new Ie();
class AF {
  constructor(e = new Ie(1 / 0, 1 / 0), t = new Ie(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = x1.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, x1).distanceTo(e);
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const S1 = /* @__PURE__ */ new Y(), ug = /* @__PURE__ */ new Y();
class RF {
  constructor(e = new Y(), t = new Y()) {
    this.start = e, this.end = t;
  }
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    S1.subVectors(e, this.start), ug.subVectors(this.end, this.start);
    const n = ug.dot(ug);
    let o = ug.dot(S1) / n;
    return t && (o = yi(o, 0, 1)), o;
  }
  closestPointToPoint(e, t, n) {
    const r = this.closestPointToPointParameter(e, t);
    return this.delta(n).multiplyScalar(r).add(this.start);
  }
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const M1 = /* @__PURE__ */ new Y();
class CF extends Cn {
  constructor(e, t) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
    const n = new hn(), r = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let c = 0, f = 1, h = 32; c < h; c++, f++) {
      const p = c / h * Math.PI * 2, v = f / h * Math.PI * 2;
      r.push(
        Math.cos(p),
        Math.sin(p),
        1,
        Math.cos(v),
        Math.sin(v),
        1
      );
    }
    n.setAttribute("position", new Pt(r, 3));
    const o = new zr({ fog: !1, toneMapped: !1 });
    this.cone = new $s(n, o), this.add(this.cone), this.update();
  }
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1);
    const e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e), M1.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(M1), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const Xl = /* @__PURE__ */ new Y(), cg = /* @__PURE__ */ new tn(), ix = /* @__PURE__ */ new tn();
class LF extends $s {
  constructor(e) {
    const t = rR(e), n = new hn(), r = [], o = [], c = new Rt(0, 0, 1), f = new Rt(0, 1, 0);
    for (let p = 0; p < t.length; p++) {
      const v = t[p];
      v.parent && v.parent.isBone && (r.push(0, 0, 0), r.push(0, 0, 0), o.push(c.r, c.g, c.b), o.push(f.r, f.g, f.b));
    }
    n.setAttribute("position", new Pt(r, 3)), n.setAttribute("color", new Pt(o, 3));
    const h = new zr({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(n, h), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
  }
  updateMatrixWorld(e) {
    const t = this.bones, n = this.geometry, r = n.getAttribute("position");
    ix.copy(this.root.matrixWorld).invert();
    for (let o = 0, c = 0; o < t.length; o++) {
      const f = t[o];
      f.parent && f.parent.isBone && (cg.multiplyMatrices(ix, f.matrixWorld), Xl.setFromMatrixPosition(cg), r.setXYZ(c, Xl.x, Xl.y, Xl.z), cg.multiplyMatrices(ix, f.parent.matrixWorld), Xl.setFromMatrixPosition(cg), r.setXYZ(c + 1, Xl.x, Xl.y, Xl.z), c += 2);
    }
    n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function rR(s) {
  const e = [];
  s.isBone === !0 && e.push(s);
  for (let t = 0; t < s.children.length; t++)
    e.push.apply(e, rR(s.children[t]));
  return e;
}
class PF extends lr {
  constructor(e, t, n) {
    const r = new Hp(t, 4, 2), o = new nu({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(r, o), this.light = e, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const DF = /* @__PURE__ */ new Y(), E1 = /* @__PURE__ */ new Rt(), T1 = /* @__PURE__ */ new Rt();
class UF extends Cn {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper";
    const r = new Bp(t);
    r.rotateY(Math.PI * 0.5), this.material = new nu({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const o = r.getAttribute("position"), c = new Float32Array(o.count * 3);
    r.setAttribute("color", new jn(c, 3)), this.add(new lr(r, this.material)), this.update();
  }
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      E1.copy(this.light.color), T1.copy(this.light.groundColor);
      for (let n = 0, r = t.count; n < r; n++) {
        const o = n < r / 2 ? E1 : T1;
        t.setXYZ(n, o.r, o.g, o.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(DF.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class NF extends $s {
  constructor(e = 10, t = 10, n = 4473924, r = 8947848) {
    n = new Rt(n), r = new Rt(r);
    const o = t / 2, c = e / t, f = e / 2, h = [], p = [];
    for (let x = 0, M = 0, T = -f; x <= t; x++, T += c) {
      h.push(-f, 0, T, f, 0, T), h.push(T, 0, -f, T, 0, f);
      const C = x === o ? n : r;
      C.toArray(p, M), M += 3, C.toArray(p, M), M += 3, C.toArray(p, M), M += 3, C.toArray(p, M), M += 3;
    }
    const v = new hn();
    v.setAttribute("position", new Pt(h, 3)), v.setAttribute("color", new Pt(p, 3));
    const y = new zr({ vertexColors: !0, toneMapped: !1 });
    super(v, y), this.type = "GridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class OF extends $s {
  constructor(e = 10, t = 16, n = 8, r = 64, o = 4473924, c = 8947848) {
    o = new Rt(o), c = new Rt(c);
    const f = [], h = [];
    if (t > 1)
      for (let y = 0; y < t; y++) {
        const x = y / t * (Math.PI * 2), M = Math.sin(x) * e, T = Math.cos(x) * e;
        f.push(0, 0, 0), f.push(M, 0, T);
        const C = y & 1 ? o : c;
        h.push(C.r, C.g, C.b), h.push(C.r, C.g, C.b);
      }
    for (let y = 0; y < n; y++) {
      const x = y & 1 ? o : c, M = e - e / n * y;
      for (let T = 0; T < r; T++) {
        let C = T / r * (Math.PI * 2), w = Math.sin(C) * M, E = Math.cos(C) * M;
        f.push(w, 0, E), h.push(x.r, x.g, x.b), C = (T + 1) / r * (Math.PI * 2), w = Math.sin(C) * M, E = Math.cos(C) * M, f.push(w, 0, E), h.push(x.r, x.g, x.b);
      }
    }
    const p = new hn();
    p.setAttribute("position", new Pt(f, 3)), p.setAttribute("color", new Pt(h, 3));
    const v = new zr({ vertexColors: !0, toneMapped: !1 });
    super(p, v), this.type = "PolarGridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const b1 = /* @__PURE__ */ new Y(), fg = /* @__PURE__ */ new Y(), w1 = /* @__PURE__ */ new Y();
class IF extends Cn {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
    let r = new hn();
    r.setAttribute("position", new Pt([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const o = new zr({ fog: !1, toneMapped: !1 });
    this.lightPlane = new eu(r, o), this.add(this.lightPlane), r = new hn(), r.setAttribute("position", new Pt([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new eu(r, o), this.add(this.targetLine), this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), b1.setFromMatrixPosition(this.light.matrixWorld), fg.setFromMatrixPosition(this.light.target.matrixWorld), w1.subVectors(fg, b1), this.lightPlane.lookAt(fg), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(fg), this.targetLine.scale.z = w1.length();
  }
}
const dg = /* @__PURE__ */ new Y(), gi = /* @__PURE__ */ new Op();
class FF extends $s {
  constructor(e) {
    const t = new hn(), n = new zr({ color: 16777215, vertexColors: !0, toneMapped: !1 }), r = [], o = [], c = {};
    f("n1", "n2"), f("n2", "n4"), f("n4", "n3"), f("n3", "n1"), f("f1", "f2"), f("f2", "f4"), f("f4", "f3"), f("f3", "f1"), f("n1", "f1"), f("n2", "f2"), f("n3", "f3"), f("n4", "f4"), f("p", "n1"), f("p", "n2"), f("p", "n3"), f("p", "n4"), f("u1", "u2"), f("u2", "u3"), f("u3", "u1"), f("c", "t"), f("p", "c"), f("cn1", "cn2"), f("cn3", "cn4"), f("cf1", "cf2"), f("cf3", "cf4");
    function f(T, C) {
      h(T), h(C);
    }
    function h(T) {
      r.push(0, 0, 0), o.push(0, 0, 0), c[T] === void 0 && (c[T] = []), c[T].push(r.length / 3 - 1);
    }
    t.setAttribute("position", new Pt(r, 3)), t.setAttribute("color", new Pt(o, 3)), super(t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = c, this.update();
    const p = new Rt(16755200), v = new Rt(16711680), y = new Rt(43775), x = new Rt(16777215), M = new Rt(3355443);
    this.setColors(p, v, y, x, M);
  }
  setColors(e, t, n, r, o) {
    const f = this.geometry.getAttribute("color");
    f.setXYZ(0, e.r, e.g, e.b), f.setXYZ(1, e.r, e.g, e.b), f.setXYZ(2, e.r, e.g, e.b), f.setXYZ(3, e.r, e.g, e.b), f.setXYZ(4, e.r, e.g, e.b), f.setXYZ(5, e.r, e.g, e.b), f.setXYZ(6, e.r, e.g, e.b), f.setXYZ(7, e.r, e.g, e.b), f.setXYZ(8, e.r, e.g, e.b), f.setXYZ(9, e.r, e.g, e.b), f.setXYZ(10, e.r, e.g, e.b), f.setXYZ(11, e.r, e.g, e.b), f.setXYZ(12, e.r, e.g, e.b), f.setXYZ(13, e.r, e.g, e.b), f.setXYZ(14, e.r, e.g, e.b), f.setXYZ(15, e.r, e.g, e.b), f.setXYZ(16, e.r, e.g, e.b), f.setXYZ(17, e.r, e.g, e.b), f.setXYZ(18, e.r, e.g, e.b), f.setXYZ(19, e.r, e.g, e.b), f.setXYZ(20, e.r, e.g, e.b), f.setXYZ(21, e.r, e.g, e.b), f.setXYZ(22, e.r, e.g, e.b), f.setXYZ(23, e.r, e.g, e.b), f.setXYZ(24, t.r, t.g, t.b), f.setXYZ(25, t.r, t.g, t.b), f.setXYZ(26, t.r, t.g, t.b), f.setXYZ(27, t.r, t.g, t.b), f.setXYZ(28, t.r, t.g, t.b), f.setXYZ(29, t.r, t.g, t.b), f.setXYZ(30, t.r, t.g, t.b), f.setXYZ(31, t.r, t.g, t.b), f.setXYZ(32, n.r, n.g, n.b), f.setXYZ(33, n.r, n.g, n.b), f.setXYZ(34, n.r, n.g, n.b), f.setXYZ(35, n.r, n.g, n.b), f.setXYZ(36, n.r, n.g, n.b), f.setXYZ(37, n.r, n.g, n.b), f.setXYZ(38, r.r, r.g, r.b), f.setXYZ(39, r.r, r.g, r.b), f.setXYZ(40, o.r, o.g, o.b), f.setXYZ(41, o.r, o.g, o.b), f.setXYZ(42, o.r, o.g, o.b), f.setXYZ(43, o.r, o.g, o.b), f.setXYZ(44, o.r, o.g, o.b), f.setXYZ(45, o.r, o.g, o.b), f.setXYZ(46, o.r, o.g, o.b), f.setXYZ(47, o.r, o.g, o.b), f.setXYZ(48, o.r, o.g, o.b), f.setXYZ(49, o.r, o.g, o.b), f.needsUpdate = !0;
  }
  update() {
    const e = this.geometry, t = this.pointMap, n = 1, r = 1;
    gi.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), Ai("c", t, e, gi, 0, 0, -1), Ai("t", t, e, gi, 0, 0, 1), Ai("n1", t, e, gi, -n, -r, -1), Ai("n2", t, e, gi, n, -r, -1), Ai("n3", t, e, gi, -n, r, -1), Ai("n4", t, e, gi, n, r, -1), Ai("f1", t, e, gi, -n, -r, 1), Ai("f2", t, e, gi, n, -r, 1), Ai("f3", t, e, gi, -n, r, 1), Ai("f4", t, e, gi, n, r, 1), Ai("u1", t, e, gi, n * 0.7, r * 1.1, -1), Ai("u2", t, e, gi, -n * 0.7, r * 1.1, -1), Ai("u3", t, e, gi, 0, r * 2, -1), Ai("cf1", t, e, gi, -n, 0, 1), Ai("cf2", t, e, gi, n, 0, 1), Ai("cf3", t, e, gi, 0, -r, 1), Ai("cf4", t, e, gi, 0, r, 1), Ai("cn1", t, e, gi, -n, 0, -1), Ai("cn2", t, e, gi, n, 0, -1), Ai("cn3", t, e, gi, 0, -r, -1), Ai("cn4", t, e, gi, 0, r, -1), e.getAttribute("position").needsUpdate = !0;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function Ai(s, e, t, n, r, o, c) {
  dg.set(r, o, c).unproject(n);
  const f = e[s];
  if (f !== void 0) {
    const h = t.getAttribute("position");
    for (let p = 0, v = f.length; p < v; p++)
      h.setXYZ(f[p], dg.x, dg.y, dg.z);
  }
}
const hg = /* @__PURE__ */ new Qs();
class zF extends $s {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r = new Float32Array(8 * 3), o = new hn();
    o.setIndex(new jn(n, 1)), o.setAttribute("position", new jn(r, 3)), super(o, new zr({ color: t, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  update(e) {
    if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && hg.setFromObject(this.object), hg.isEmpty())
      return;
    const t = hg.min, n = hg.max, r = this.geometry.attributes.position, o = r.array;
    o[0] = n.x, o[1] = n.y, o[2] = n.z, o[3] = t.x, o[4] = n.y, o[5] = n.z, o[6] = t.x, o[7] = t.y, o[8] = n.z, o[9] = n.x, o[10] = t.y, o[11] = n.z, o[12] = n.x, o[13] = n.y, o[14] = t.z, o[15] = t.x, o[16] = n.y, o[17] = t.z, o[18] = t.x, o[19] = t.y, o[20] = t.z, o[21] = n.x, o[22] = t.y, o[23] = t.z, r.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), this.object = e.object, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class BF extends $s {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], o = new hn();
    o.setIndex(new jn(n, 1)), o.setAttribute("position", new Pt(r, 3)), super(o, new zr({ color: t, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class HF extends eu {
  constructor(e, t = 1, n = 16776960) {
    const r = n, o = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], c = new hn();
    c.setAttribute("position", new Pt(o, 3)), c.computeBoundingSphere(), super(c, new zr({ color: r, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = t;
    const f = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], h = new hn();
    h.setAttribute("position", new Pt(f, 3)), h.computeBoundingSphere(), this.add(new lr(h, new nu({ color: r, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const A1 = /* @__PURE__ */ new Y();
let pg, rx;
class VF extends Cn {
  // dir is assumed to be normalized
  constructor(e = new Y(0, 0, 1), t = new Y(0, 0, 0), n = 1, r = 16776960, o = n * 0.2, c = o * 0.2) {
    super(), this.type = "ArrowHelper", pg === void 0 && (pg = new hn(), pg.setAttribute("position", new Pt([0, 0, 0, 0, 1, 0], 3)), rx = new _d(0, 0.5, 1, 5, 1), rx.translate(0, -0.5, 0)), this.position.copy(t), this.line = new eu(pg, new zr({ color: r, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new lr(rx, new nu({ color: r, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, o, c);
  }
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      A1.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(A1, t);
    }
  }
  setLength(e, t = e * 0.2, n = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class kF extends $s {
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], n = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], r = new hn();
    r.setAttribute("position", new Pt(t, 3)), r.setAttribute("color", new Pt(n, 3));
    const o = new zr({ vertexColors: !0, toneMapped: !1 });
    super(r, o), this.type = "AxesHelper";
  }
  setColors(e, t, n) {
    const r = new Rt(), o = this.geometry.attributes.color.array;
    return r.set(e), r.toArray(o, 0), r.toArray(o, 3), r.set(t), r.toArray(o, 6), r.toArray(o, 9), r.set(n), r.toArray(o, 12), r.toArray(o, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class GF {
  constructor() {
    this.type = "ShapePath", this.color = new Rt(), this.subPaths = [], this.currentPath = null;
  }
  moveTo(e, t) {
    return this.currentPath = new Ep(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  quadraticCurveTo(e, t, n, r) {
    return this.currentPath.quadraticCurveTo(e, t, n, r), this;
  }
  bezierCurveTo(e, t, n, r, o, c) {
    return this.currentPath.bezierCurveTo(e, t, n, r, o, c), this;
  }
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  toShapes(e) {
    function t(E) {
      const L = [];
      for (let R = 0, U = E.length; R < U; R++) {
        const F = E[R], z = new mc();
        z.curves = F.curves, L.push(z);
      }
      return L;
    }
    function n(E, L) {
      const R = L.length;
      let U = !1;
      for (let F = R - 1, z = 0; z < R; F = z++) {
        let B = L[F], W = L[z], O = W.x - B.x, I = W.y - B.y;
        if (Math.abs(I) > Number.EPSILON) {
          if (I < 0 && (B = L[z], O = -O, W = L[F], I = -I), E.y < B.y || E.y > W.y)
            continue;
          if (E.y === B.y) {
            if (E.x === B.x)
              return !0;
          } else {
            const Z = I * (E.x - B.x) - O * (E.y - B.y);
            if (Z === 0)
              return !0;
            if (Z < 0)
              continue;
            U = !U;
          }
        } else {
          if (E.y !== B.y)
            continue;
          if (W.x <= E.x && E.x <= B.x || B.x <= E.x && E.x <= W.x)
            return !0;
        }
      }
      return U;
    }
    const r = Js.isClockWise, o = this.subPaths;
    if (o.length === 0)
      return [];
    let c, f, h;
    const p = [];
    if (o.length === 1)
      return f = o[0], h = new mc(), h.curves = f.curves, p.push(h), p;
    let v = !r(o[0].getPoints());
    v = e ? !v : v;
    const y = [], x = [];
    let M = [], T = 0, C;
    x[T] = void 0, M[T] = [];
    for (let E = 0, L = o.length; E < L; E++)
      f = o[E], C = f.getPoints(), c = r(C), c = e ? !c : c, c ? (!v && x[T] && T++, x[T] = { s: new mc(), p: C }, x[T].s.curves = f.curves, v && T++, M[T] = []) : M[T].push({ h: f, p: C[0] });
    if (!x[0])
      return t(o);
    if (x.length > 1) {
      let E = !1, L = 0;
      for (let R = 0, U = x.length; R < U; R++)
        y[R] = [];
      for (let R = 0, U = x.length; R < U; R++) {
        const F = M[R];
        for (let z = 0; z < F.length; z++) {
          const B = F[z];
          let W = !0;
          for (let O = 0; O < x.length; O++)
            n(B.p, x[O].p) && (R !== O && L++, W ? (W = !1, y[O].push(B)) : E = !0);
          W && y[R].push(B);
        }
      }
      L > 0 && E === !1 && (M = y);
    }
    let w;
    for (let E = 0, L = x.length; E < L; E++) {
      h = x[E].s, p.push(h), w = M[E];
      for (let R = 0, U = w.length; R < U; R++)
        h.holes.push(w[R].h);
    }
    return p;
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: Og
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = Og);
const WF = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: pS,
  AddEquation: ac,
  AddOperation: xw,
  AdditiveAnimationBlendMode: MS,
  AdditiveBlending: Ag,
  AlphaFormat: Aw,
  AlwaysCompare: qw,
  AlwaysDepth: hw,
  AlwaysStencilFunc: Hw,
  AmbientLight: ZA,
  AnimationAction: iR,
  AnimationClip: Cp,
  AnimationLoader: YI,
  AnimationMixer: SF,
  AnimationObjectGroup: _F,
  AnimationUtils: kI,
  ArcCurve: xA,
  ArrayCamera: fA,
  ArrowHelper: VF,
  Audio: tR,
  AudioAnalyser: uF,
  AudioContext: ZS,
  AudioListener: sF,
  AudioLoader: iF,
  AxesHelper: kF,
  BackSide: Fr,
  BasicDepthPacking: Fw,
  BasicShadowMap: $1,
  Bone: OS,
  BooleanKeyframeTrack: Ec,
  Box2: AF,
  Box3: Qs,
  Box3Helper: BF,
  BoxGeometry: Mc,
  BoxHelper: zF,
  BufferAttribute: jn,
  BufferGeometry: hn,
  BufferGeometryLoader: eR,
  ByteType: bw,
  Cache: xc,
  Camera: Op,
  CameraHelper: FF,
  CanvasTexture: dI,
  CapsuleGeometry: Kg,
  CatmullRomCurve3: SA,
  CineonToneMapping: Ew,
  CircleGeometry: Qg,
  ClampToEdgeWrapping: Mr,
  Clock: JS,
  Color: Rt,
  ColorKeyframeTrack: YS,
  ColorManagement: Hn,
  CompressedArrayTexture: cI,
  CompressedCubeTexture: fI,
  CompressedTexture: Zg,
  CompressedTextureLoader: jI,
  ConeGeometry: $g,
  CubeCamera: iA,
  CubeReflectionMapping: Go,
  CubeRefractionMapping: Ql,
  CubeTexture: Ip,
  CubeTextureLoader: qI,
  CubeUVReflectionMapping: gd,
  CubicBezierCurve: zS,
  CubicBezierCurve3: MA,
  CubicInterpolant: VA,
  CullFaceBack: _x,
  CullFaceFront: Q1,
  CullFaceFrontBack: c2,
  CullFaceNone: K1,
  Curve: Ss,
  CurvePath: TA,
  CustomBlending: ew,
  CustomToneMapping: Tw,
  CylinderGeometry: _d,
  Cylindrical: wF,
  Data3DTexture: wS,
  DataArrayTexture: Vg,
  DataTexture: pc,
  DataTextureLoader: ZI,
  DataUtils: yD,
  DecrementStencilOp: M2,
  DecrementWrapStencilOp: T2,
  DefaultLoadingManager: WA,
  DepthFormat: Jl,
  DepthStencilFormat: gc,
  DepthTexture: DS,
  DirectionalLight: qA,
  DirectionalLightHelper: IF,
  DiscreteInterpolant: kA,
  DisplayP3ColorSpace: Hg,
  DodecahedronGeometry: ey,
  DoubleSide: Ys,
  DstAlphaFactor: ow,
  DstColorFactor: uw,
  DynamicCopyUsage: B2,
  DynamicDrawUsage: U2,
  DynamicReadUsage: I2,
  EdgesGeometry: bA,
  EllipseCurve: Jg,
  EqualCompare: Gw,
  EqualDepth: mw,
  EqualStencilFunc: R2,
  EquirectangularReflectionMapping: cp,
  EquirectangularRefractionMapping: fp,
  Euler: Np,
  EventDispatcher: Xo,
  ExtrudeGeometry: ny,
  FileLoader: Wo,
  Float16BufferAttribute: TD,
  Float32BufferAttribute: Pt,
  Float64BufferAttribute: bD,
  FloatType: Ta,
  Fog: Xg,
  FogExp2: Wg,
  FramebufferTexture: uI,
  FrontSide: ko,
  Frustum: kg,
  GLBufferAttribute: bF,
  GLSL1: V2,
  GLSL3: Zx,
  GreaterCompare: Xw,
  GreaterDepth: gw,
  GreaterEqualCompare: jw,
  GreaterEqualDepth: vw,
  GreaterEqualStencilFunc: D2,
  GreaterStencilFunc: L2,
  GridHelper: NF,
  Group: ud,
  HalfFloatType: vc,
  HemisphereLight: XA,
  HemisphereLightHelper: UF,
  IcosahedronGeometry: iy,
  ImageBitmapLoader: nF,
  ImageLoader: Lp,
  ImageUtils: bS,
  IncrementStencilOp: S2,
  IncrementWrapStencilOp: E2,
  InstancedBufferAttribute: md,
  InstancedBufferGeometry: $A,
  InstancedInterleavedBuffer: TF,
  InstancedMesh: gA,
  Int16BufferAttribute: MD,
  Int32BufferAttribute: ED,
  Int8BufferAttribute: _D,
  IntType: vS,
  InterleavedBuffer: jg,
  InterleavedBufferAttribute: yc,
  Interpolant: Vp,
  InterpolateDiscrete: pp,
  InterpolateLinear: mp,
  InterpolateSmooth: Eg,
  InvertStencilOp: b2,
  KeepStencilOp: Tg,
  KeyframeTrack: Ms,
  LOD: mA,
  LatheGeometry: zp,
  Layers: hc,
  LessCompare: kw,
  LessDepth: pw,
  LessEqualCompare: Ww,
  LessEqualDepth: Rg,
  LessEqualStencilFunc: C2,
  LessStencilFunc: A2,
  Light: ru,
  LightProbe: QA,
  Line: eu,
  Line3: RF,
  LineBasicMaterial: zr,
  LineCurve: BS,
  LineCurve3: EA,
  LineDashedMaterial: zA,
  LineLoop: yA,
  LineSegments: $s,
  LinearDisplayP3ColorSpace: Up,
  LinearEncoding: ES,
  LinearFilter: hi,
  LinearInterpolant: XS,
  LinearMipMapLinearFilter: m2,
  LinearMipMapNearestFilter: p2,
  LinearMipmapLinearFilter: $l,
  LinearMipmapNearestFilter: mS,
  LinearSRGBColorSpace: Ks,
  LinearToneMapping: Sw,
  LinearTransfer: gp,
  Loader: aa,
  LoaderUtils: iS,
  LoadingManager: jS,
  LoopOnce: Nw,
  LoopPingPong: Iw,
  LoopRepeat: Ow,
  LuminanceAlphaFormat: Cw,
  LuminanceFormat: Rw,
  MOUSE: nc,
  Material: br,
  MaterialLoader: cy,
  MathUtils: Jw,
  Matrix3: cn,
  Matrix4: tn,
  MaxEquation: Ex,
  Mesh: lr,
  MeshBasicMaterial: nu,
  MeshDepthMaterial: LS,
  MeshDistanceMaterial: PS,
  MeshLambertMaterial: IA,
  MeshMatcapMaterial: FA,
  MeshNormalMaterial: OA,
  MeshPhongMaterial: UA,
  MeshPhysicalMaterial: DA,
  MeshStandardMaterial: GS,
  MeshToonMaterial: NA,
  MinEquation: Mx,
  MirroredRepeatWrapping: hp,
  MixOperation: _w,
  MultiplyBlending: Sx,
  MultiplyOperation: Dp,
  NearestFilter: di,
  NearestMipMapLinearFilter: h2,
  NearestMipMapNearestFilter: d2,
  NearestMipmapLinearFilter: ap,
  NearestMipmapNearestFilter: Cg,
  NeverCompare: Vw,
  NeverDepth: dw,
  NeverStencilFunc: w2,
  NoBlending: Ho,
  NoColorSpace: Ea,
  NoToneMapping: qs,
  NormalAnimationBlendMode: Bg,
  NormalBlending: ql,
  NotEqualCompare: Yw,
  NotEqualDepth: yw,
  NotEqualStencilFunc: P2,
  NumberKeyframeTrack: Ap,
  Object3D: Cn,
  ObjectLoader: eF,
  ObjectSpaceNormalMap: Bw,
  OctahedronGeometry: Bp,
  OneFactor: rw,
  OneMinusDstAlphaFactor: lw,
  OneMinusDstColorFactor: cw,
  OneMinusSrcAlphaFactor: hS,
  OneMinusSrcColorFactor: sw,
  OrthographicCamera: Vo,
  P3Primaries: _p,
  PCFShadowMap: Ig,
  PCFSoftShadowMap: rp,
  PMREMGenerator: Kx,
  Path: Ep,
  PerspectiveCamera: Ri,
  Plane: Fo,
  PlaneGeometry: Fp,
  PlaneHelper: HF,
  PointLight: jA,
  PointLightHelper: PF,
  Points: _A,
  PointsMaterial: IS,
  PolarGridHelper: OF,
  PolyhedronGeometry: iu,
  PositionalAudio: lF,
  PropertyBinding: bn,
  PropertyMixer: nR,
  QuadraticBezierCurve: HS,
  QuadraticBezierCurve3: VS,
  Quaternion: Tr,
  QuaternionKeyframeTrack: xd,
  QuaternionLinearInterpolant: GA,
  RED_GREEN_RGTC2_Format: jx,
  RED_RGTC1_Format: Uw,
  REVISION: Og,
  RGBADepthPacking: zw,
  RGBAFormat: Er,
  RGBAIntegerFormat: SS,
  RGBA_ASTC_10x10_Format: Vx,
  RGBA_ASTC_10x5_Format: zx,
  RGBA_ASTC_10x6_Format: Bx,
  RGBA_ASTC_10x8_Format: Hx,
  RGBA_ASTC_12x10_Format: kx,
  RGBA_ASTC_12x12_Format: Gx,
  RGBA_ASTC_4x4_Format: Lx,
  RGBA_ASTC_5x4_Format: Px,
  RGBA_ASTC_5x5_Format: Dx,
  RGBA_ASTC_6x5_Format: Ux,
  RGBA_ASTC_6x6_Format: Nx,
  RGBA_ASTC_8x5_Format: Ox,
  RGBA_ASTC_8x6_Format: Ix,
  RGBA_ASTC_8x8_Format: Fx,
  RGBA_BPTC_Format: Mg,
  RGBA_ETC2_EAC_Format: Cx,
  RGBA_PVRTC_2BPPV1_Format: Ax,
  RGBA_PVRTC_4BPPV1_Format: wx,
  RGBA_S3TC_DXT1_Format: _g,
  RGBA_S3TC_DXT3_Format: xg,
  RGBA_S3TC_DXT5_Format: Sg,
  RGB_BPTC_SIGNED_Format: Wx,
  RGB_BPTC_UNSIGNED_Format: Xx,
  RGB_ETC1_Format: Dw,
  RGB_ETC2_Format: Rx,
  RGB_PVRTC_2BPPV1_Format: bx,
  RGB_PVRTC_4BPPV1_Format: Tx,
  RGB_S3TC_DXT1_Format: yg,
  RGFormat: Pw,
  RGIntegerFormat: xS,
  RawShaderMaterial: PA,
  Ray: Sc,
  Raycaster: eM,
  Rec709Primaries: yp,
  RectAreaLight: JA,
  RedFormat: Lw,
  RedIntegerFormat: _S,
  ReinhardToneMapping: Mw,
  RenderTarget: $w,
  RepeatWrapping: dp,
  ReplaceStencilOp: x2,
  ReverseSubtractEquation: nw,
  RingGeometry: ry,
  SIGNED_RED_GREEN_RGTC2_Format: qx,
  SIGNED_RED_RGTC1_Format: Yx,
  SRGBColorSpace: Gi,
  SRGBTransfer: Zn,
  Scene: Yg,
  ShaderChunk: ln,
  ShaderLib: _s,
  ShaderMaterial: Ja,
  ShadowMaterial: LA,
  Shape: mc,
  ShapeGeometry: ay,
  ShapePath: GF,
  ShapeUtils: Js,
  ShortType: ww,
  Skeleton: qg,
  SkeletonHelper: LF,
  SkinnedMesh: vA,
  Source: uc,
  Sphere: xs,
  SphereGeometry: Hp,
  Spherical: aS,
  SphericalHarmonics3: KA,
  SplineCurve: kS,
  SpotLight: YA,
  SpotLightHelper: CF,
  Sprite: pA,
  SpriteMaterial: NS,
  SrcAlphaFactor: dS,
  SrcAlphaSaturateFactor: fw,
  SrcColorFactor: aw,
  StaticCopyUsage: z2,
  StaticDrawUsage: xp,
  StaticReadUsage: O2,
  StereoCamera: rF,
  StreamCopyUsage: H2,
  StreamDrawUsage: N2,
  StreamReadUsage: F2,
  StringKeyframeTrack: Tc,
  SubtractEquation: tw,
  SubtractiveBlending: xx,
  TOUCH: ic,
  TangentSpaceNormalMap: tu,
  TetrahedronGeometry: sy,
  Texture: Ci,
  TextureLoader: JI,
  TorusGeometry: oy,
  TorusKnotGeometry: ly,
  Triangle: ia,
  TriangleFanDrawMode: y2,
  TriangleStripDrawMode: g2,
  TrianglesDrawMode: v2,
  TubeGeometry: uy,
  TwoPassDoubleSide: f2,
  UVMapping: Fg,
  Uint16BufferAttribute: AS,
  Uint32BufferAttribute: RS,
  Uint8BufferAttribute: xD,
  Uint8ClampedBufferAttribute: SD,
  Uniform: $S,
  UniformsGroup: EF,
  UniformsLib: dt,
  UniformsUtils: nA,
  UnsignedByteType: Zs,
  UnsignedInt248Type: Zl,
  UnsignedIntType: Bo,
  UnsignedShort4444Type: gS,
  UnsignedShort5551Type: yS,
  UnsignedShortType: zg,
  VSMShadowMap: vs,
  Vector2: Ie,
  Vector3: Y,
  Vector4: Vn,
  VectorKeyframeTrack: Rp,
  VideoTexture: lI,
  WebGL1Renderer: dA,
  WebGL3DRenderTarget: sD,
  WebGLArrayRenderTarget: aD,
  WebGLCoordinateSystem: js,
  WebGLCubeRenderTarget: rA,
  WebGLMultipleRenderTargets: oD,
  WebGLRenderTarget: Za,
  WebGLRenderer: US,
  WebGLUtils: cA,
  WebGPUCoordinateSystem: Sp,
  WireframeGeometry: CA,
  WrapAroundEnding: vp,
  ZeroCurvatureEnding: oc,
  ZeroFactor: iw,
  ZeroSlopeEnding: lc,
  ZeroStencilOp: _2,
  _SRGBAFormat: Lg,
  createCanvasElement: Qw,
  sRGBEncoding: Kl
}, Symbol.toStringTag, { value: "Module" }));
var sS = { exports: {} }, Yl = {};
/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var R1;
function XF() {
  return R1 || (R1 = 1, Yl.ConcurrentRoot = 1, Yl.ContinuousEventPriority = 4, Yl.DefaultEventPriority = 16, Yl.DiscreteEventPriority = 1, Yl.IdleEventPriority = 536870912, Yl.LegacyRoot = 0), Yl;
}
var jl = {};
/**
 * @license React
 * react-reconciler-constants.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var C1;
function YF() {
  return C1 || (C1 = 1, process.env.NODE_ENV !== "production" && function() {
    var s = (
      /*                        */
      1
    ), e = (
      /*            */
      4
    ), t = (
      /*                    */
      16
    ), n = (
      /*                       */
      536870912
    ), r = s, o = e, c = t, f = n, h = 0, p = 1;
    jl.ConcurrentRoot = p, jl.ContinuousEventPriority = o, jl.DefaultEventPriority = c, jl.DiscreteEventPriority = r, jl.IdleEventPriority = f, jl.LegacyRoot = h;
  }()), jl;
}
process.env.NODE_ENV === "production" ? sS.exports = XF() : sS.exports = YF();
var fd = sS.exports;
function jF(s) {
  let e;
  const t = /* @__PURE__ */ new Set(), n = (p, v) => {
    const y = typeof p == "function" ? p(e) : p;
    if (y !== e) {
      const x = e;
      e = v ? y : Object.assign({}, e, y), t.forEach((M) => M(e, x));
    }
  }, r = () => e, o = (p, v = r, y = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let x = v(e);
    function M() {
      const T = v(e);
      if (!y(x, T)) {
        const C = x;
        p(x = T, C);
      }
    }
    return t.add(M), () => t.delete(M);
  }, h = { setState: n, getState: r, subscribe: (p, v, y) => v || y ? o(p, v, y) : (t.add(p), () => t.delete(p)), destroy: () => t.clear() };
  return e = s(n, r, h), h;
}
const qF = typeof window > "u" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent), L1 = qF ? fc : s2;
function aR(s) {
  const e = typeof s == "function" ? jF(s) : s, t = (n = e.getState, r = Object.is) => {
    const [, o] = r2((w) => w + 1, 0), c = e.getState(), f = ys(c), h = ys(n), p = ys(r), v = ys(!1), y = ys();
    y.current === void 0 && (y.current = n(c));
    let x, M = !1;
    (f.current !== c || h.current !== n || p.current !== r || v.current) && (x = n(c), M = !r(y.current, x)), L1(() => {
      M && (y.current = x), f.current = c, h.current = n, p.current = r, v.current = !1;
    });
    const T = ys(c);
    L1(() => {
      const w = () => {
        try {
          const L = e.getState(), R = h.current(L);
          p.current(y.current, R) || (f.current = L, y.current = R, o());
        } catch {
          v.current = !0, o();
        }
      }, E = e.subscribe(w);
      return e.getState() !== T.current && w(), E;
    }, []);
    const C = M ? x : y.current;
    return a2(C), C;
  };
  return Object.assign(t, e), t[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const n = [t, e];
    return {
      next() {
        const r = n.length <= 0;
        return { value: n.shift(), done: r };
      }
    };
  }, t;
}
var oS = { exports: {} }, lS = { exports: {} }, ax = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var P1;
function ZF() {
  return P1 || (P1 = 1, function(s) {
    function e(ne, le) {
      var re = ne.length;
      ne.push(le);
      e:
        for (; 0 < re; ) {
          var J = re - 1 >>> 1, ue = ne[J];
          if (0 < r(ue, le))
            ne[J] = le, ne[re] = ue, re = J;
          else
            break e;
        }
    }
    function t(ne) {
      return ne.length === 0 ? null : ne[0];
    }
    function n(ne) {
      if (ne.length === 0)
        return null;
      var le = ne[0], re = ne.pop();
      if (re !== le) {
        ne[0] = re;
        e:
          for (var J = 0, ue = ne.length, Pe = ue >>> 1; J < Pe; ) {
            var qe = 2 * (J + 1) - 1, $e = ne[qe], it = qe + 1, gt = ne[it];
            if (0 > r($e, re))
              it < ue && 0 > r(gt, $e) ? (ne[J] = gt, ne[it] = re, J = it) : (ne[J] = $e, ne[qe] = re, J = qe);
            else if (it < ue && 0 > r(gt, re))
              ne[J] = gt, ne[it] = re, J = it;
            else
              break e;
          }
      }
      return le;
    }
    function r(ne, le) {
      var re = ne.sortIndex - le.sortIndex;
      return re !== 0 ? re : ne.id - le.id;
    }
    if (typeof performance == "object" && typeof performance.now == "function") {
      var o = performance;
      s.unstable_now = function() {
        return o.now();
      };
    } else {
      var c = Date, f = c.now();
      s.unstable_now = function() {
        return c.now() - f;
      };
    }
    var h = [], p = [], v = 1, y = null, x = 3, M = !1, T = !1, C = !1, w = typeof setTimeout == "function" ? setTimeout : null, E = typeof clearTimeout == "function" ? clearTimeout : null, L = typeof setImmediate < "u" ? setImmediate : null;
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function R(ne) {
      for (var le = t(p); le !== null; ) {
        if (le.callback === null)
          n(p);
        else if (le.startTime <= ne)
          n(p), le.sortIndex = le.expirationTime, e(h, le);
        else
          break;
        le = t(p);
      }
    }
    function U(ne) {
      if (C = !1, R(ne), !T)
        if (t(h) !== null)
          T = !0, Te(F);
        else {
          var le = t(p);
          le !== null && Me(U, le.startTime - ne);
        }
    }
    function F(ne, le) {
      T = !1, C && (C = !1, E(W), W = -1), M = !0;
      var re = x;
      try {
        for (R(le), y = t(h); y !== null && (!(y.expirationTime > le) || ne && !Z()); ) {
          var J = y.callback;
          if (typeof J == "function") {
            y.callback = null, x = y.priorityLevel;
            var ue = J(y.expirationTime <= le);
            le = s.unstable_now(), typeof ue == "function" ? y.callback = ue : y === t(h) && n(h), R(le);
          } else
            n(h);
          y = t(h);
        }
        if (y !== null)
          var Pe = !0;
        else {
          var qe = t(p);
          qe !== null && Me(U, qe.startTime - le), Pe = !1;
        }
        return Pe;
      } finally {
        y = null, x = re, M = !1;
      }
    }
    var z = !1, B = null, W = -1, O = 5, I = -1;
    function Z() {
      return !(s.unstable_now() - I < O);
    }
    function ie() {
      if (B !== null) {
        var ne = s.unstable_now();
        I = ne;
        var le = !0;
        try {
          le = B(!0, ne);
        } finally {
          le ? fe() : (z = !1, B = null);
        }
      } else
        z = !1;
    }
    var fe;
    if (typeof L == "function")
      fe = function() {
        L(ie);
      };
    else if (typeof MessageChannel < "u") {
      var K = new MessageChannel(), he = K.port2;
      K.port1.onmessage = ie, fe = function() {
        he.postMessage(null);
      };
    } else
      fe = function() {
        w(ie, 0);
      };
    function Te(ne) {
      B = ne, z || (z = !0, fe());
    }
    function Me(ne, le) {
      W = w(function() {
        ne(s.unstable_now());
      }, le);
    }
    s.unstable_IdlePriority = 5, s.unstable_ImmediatePriority = 1, s.unstable_LowPriority = 4, s.unstable_NormalPriority = 3, s.unstable_Profiling = null, s.unstable_UserBlockingPriority = 2, s.unstable_cancelCallback = function(ne) {
      ne.callback = null;
    }, s.unstable_continueExecution = function() {
      T || M || (T = !0, Te(F));
    }, s.unstable_forceFrameRate = function(ne) {
      0 > ne || 125 < ne ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : O = 0 < ne ? Math.floor(1e3 / ne) : 5;
    }, s.unstable_getCurrentPriorityLevel = function() {
      return x;
    }, s.unstable_getFirstCallbackNode = function() {
      return t(h);
    }, s.unstable_next = function(ne) {
      switch (x) {
        case 1:
        case 2:
        case 3:
          var le = 3;
          break;
        default:
          le = x;
      }
      var re = x;
      x = le;
      try {
        return ne();
      } finally {
        x = re;
      }
    }, s.unstable_pauseExecution = function() {
    }, s.unstable_requestPaint = function() {
    }, s.unstable_runWithPriority = function(ne, le) {
      switch (ne) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          ne = 3;
      }
      var re = x;
      x = ne;
      try {
        return le();
      } finally {
        x = re;
      }
    }, s.unstable_scheduleCallback = function(ne, le, re) {
      var J = s.unstable_now();
      switch (typeof re == "object" && re !== null ? (re = re.delay, re = typeof re == "number" && 0 < re ? J + re : J) : re = J, ne) {
        case 1:
          var ue = -1;
          break;
        case 2:
          ue = 250;
          break;
        case 5:
          ue = 1073741823;
          break;
        case 4:
          ue = 1e4;
          break;
        default:
          ue = 5e3;
      }
      return ue = re + ue, ne = { id: v++, callback: le, priorityLevel: ne, startTime: re, expirationTime: ue, sortIndex: -1 }, re > J ? (ne.sortIndex = re, e(p, ne), t(h) === null && ne === t(p) && (C ? (E(W), W = -1) : C = !0, Me(U, re - J))) : (ne.sortIndex = ue, e(h, ne), T || M || (T = !0, Te(F))), ne;
    }, s.unstable_shouldYield = Z, s.unstable_wrapCallback = function(ne) {
      var le = x;
      return function() {
        var re = x;
        x = le;
        try {
          return ne.apply(this, arguments);
        } finally {
          x = re;
        }
      };
    };
  }(ax)), ax;
}
var sx = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var D1;
function JF() {
  return D1 || (D1 = 1, function(s) {
    process.env.NODE_ENV !== "production" && function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var e = !1, t = !1, n = 5;
      function r(Se, Ge) {
        var yt = Se.length;
        Se.push(Ge), f(Se, Ge, yt);
      }
      function o(Se) {
        return Se.length === 0 ? null : Se[0];
      }
      function c(Se) {
        if (Se.length === 0)
          return null;
        var Ge = Se[0], yt = Se.pop();
        return yt !== Ge && (Se[0] = yt, h(Se, yt, 0)), Ge;
      }
      function f(Se, Ge, yt) {
        for (var Ne = yt; Ne > 0; ) {
          var rt = Ne - 1 >>> 1, ee = Se[rt];
          if (p(ee, Ge) > 0)
            Se[rt] = Ge, Se[Ne] = ee, Ne = rt;
          else
            return;
        }
      }
      function h(Se, Ge, yt) {
        for (var Ne = yt, rt = Se.length, ee = rt >>> 1; Ne < ee; ) {
          var Ee = (Ne + 1) * 2 - 1, xe = Se[Ee], k = Ee + 1, ze = Se[k];
          if (p(xe, Ge) < 0)
            k < rt && p(ze, xe) < 0 ? (Se[Ne] = ze, Se[k] = Ge, Ne = k) : (Se[Ne] = xe, Se[Ee] = Ge, Ne = Ee);
          else if (k < rt && p(ze, Ge) < 0)
            Se[Ne] = ze, Se[k] = Ge, Ne = k;
          else
            return;
        }
      }
      function p(Se, Ge) {
        var yt = Se.sortIndex - Ge.sortIndex;
        return yt !== 0 ? yt : Se.id - Ge.id;
      }
      var v = 1, y = 2, x = 3, M = 4, T = 5;
      function C(Se, Ge) {
      }
      var w = typeof performance == "object" && typeof performance.now == "function";
      if (w) {
        var E = performance;
        s.unstable_now = function() {
          return E.now();
        };
      } else {
        var L = Date, R = L.now();
        s.unstable_now = function() {
          return L.now() - R;
        };
      }
      var U = 1073741823, F = -1, z = 250, B = 5e3, W = 1e4, O = U, I = [], Z = [], ie = 1, fe = null, K = x, he = !1, Te = !1, Me = !1, ne = typeof setTimeout == "function" ? setTimeout : null, le = typeof clearTimeout == "function" ? clearTimeout : null, re = typeof setImmediate < "u" ? setImmediate : null;
      typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function J(Se) {
        for (var Ge = o(Z); Ge !== null; ) {
          if (Ge.callback === null)
            c(Z);
          else if (Ge.startTime <= Se)
            c(Z), Ge.sortIndex = Ge.expirationTime, r(I, Ge);
          else
            return;
          Ge = o(Z);
        }
      }
      function ue(Se) {
        if (Me = !1, J(Se), !Te)
          if (o(I) !== null)
            Te = !0, Ye(Pe);
          else {
            var Ge = o(Z);
            Ge !== null && Ve(ue, Ge.startTime - Se);
          }
      }
      function Pe(Se, Ge) {
        Te = !1, Me && (Me = !1, Ze()), he = !0;
        var yt = K;
        try {
          var Ne;
          if (!t)
            return qe(Se, Ge);
        } finally {
          fe = null, K = yt, he = !1;
        }
      }
      function qe(Se, Ge) {
        var yt = Ge;
        for (J(yt), fe = o(I); fe !== null && !e && !(fe.expirationTime > yt && (!Se || at())); ) {
          var Ne = fe.callback;
          if (typeof Ne == "function") {
            fe.callback = null, K = fe.priorityLevel;
            var rt = fe.expirationTime <= yt, ee = Ne(rt);
            yt = s.unstable_now(), typeof ee == "function" ? fe.callback = ee : fe === o(I) && c(I), J(yt);
          } else
            c(I);
          fe = o(I);
        }
        if (fe !== null)
          return !0;
        var Ee = o(Z);
        return Ee !== null && Ve(ue, Ee.startTime - yt), !1;
      }
      function $e(Se, Ge) {
        switch (Se) {
          case v:
          case y:
          case x:
          case M:
          case T:
            break;
          default:
            Se = x;
        }
        var yt = K;
        K = Se;
        try {
          return Ge();
        } finally {
          K = yt;
        }
      }
      function it(Se) {
        var Ge;
        switch (K) {
          case v:
          case y:
          case x:
            Ge = x;
            break;
          default:
            Ge = K;
            break;
        }
        var yt = K;
        K = Ge;
        try {
          return Se();
        } finally {
          K = yt;
        }
      }
      function gt(Se) {
        var Ge = K;
        return function() {
          var yt = K;
          K = Ge;
          try {
            return Se.apply(this, arguments);
          } finally {
            K = yt;
          }
        };
      }
      function ot(Se, Ge, yt) {
        var Ne = s.unstable_now(), rt;
        if (typeof yt == "object" && yt !== null) {
          var ee = yt.delay;
          typeof ee == "number" && ee > 0 ? rt = Ne + ee : rt = Ne;
        } else
          rt = Ne;
        var Ee;
        switch (Se) {
          case v:
            Ee = F;
            break;
          case y:
            Ee = z;
            break;
          case T:
            Ee = O;
            break;
          case M:
            Ee = W;
            break;
          case x:
          default:
            Ee = B;
            break;
        }
        var xe = rt + Ee, k = {
          id: ie++,
          callback: Ge,
          priorityLevel: Se,
          startTime: rt,
          expirationTime: xe,
          sortIndex: -1
        };
        return rt > Ne ? (k.sortIndex = rt, r(Z, k), o(I) === null && k === o(Z) && (Me ? Ze() : Me = !0, Ve(ue, rt - Ne))) : (k.sortIndex = xe, r(I, k), !Te && !he && (Te = !0, Ye(Pe))), k;
      }
      function Vt() {
      }
      function nn() {
        !Te && !he && (Te = !0, Ye(Pe));
      }
      function Tt() {
        return o(I);
      }
      function Q(Se) {
        Se.callback = null;
      }
      function ke() {
        return K;
      }
      var Re = !1, Xe = null, Ue = -1, Mt = n, lt = -1;
      function at() {
        var Se = s.unstable_now() - lt;
        return !(Se < Mt);
      }
      function Dt() {
      }
      function Zt(Se) {
        if (Se < 0 || Se > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        Se > 0 ? Mt = Math.floor(1e3 / Se) : Mt = n;
      }
      var rn = function() {
        if (Xe !== null) {
          var Se = s.unstable_now();
          lt = Se;
          var Ge = !0, yt = !0;
          try {
            yt = Xe(Ge, Se);
          } finally {
            yt ? X() : (Re = !1, Xe = null);
          }
        } else
          Re = !1;
      }, X;
      if (typeof re == "function")
        X = function() {
          re(rn);
        };
      else if (typeof MessageChannel < "u") {
        var H = new MessageChannel(), ye = H.port2;
        H.port1.onmessage = rn, X = function() {
          ye.postMessage(null);
        };
      } else
        X = function() {
          ne(rn, 0);
        };
      function Ye(Se) {
        Xe = Se, Re || (Re = !0, X());
      }
      function Ve(Se, Ge) {
        Ue = ne(function() {
          Se(s.unstable_now());
        }, Ge);
      }
      function Ze() {
        le(Ue), Ue = -1;
      }
      var bt = Dt, Ke = null;
      s.unstable_IdlePriority = T, s.unstable_ImmediatePriority = v, s.unstable_LowPriority = M, s.unstable_NormalPriority = x, s.unstable_Profiling = Ke, s.unstable_UserBlockingPriority = y, s.unstable_cancelCallback = Q, s.unstable_continueExecution = nn, s.unstable_forceFrameRate = Zt, s.unstable_getCurrentPriorityLevel = ke, s.unstable_getFirstCallbackNode = Tt, s.unstable_next = it, s.unstable_pauseExecution = Vt, s.unstable_requestPaint = bt, s.unstable_runWithPriority = $e, s.unstable_scheduleCallback = ot, s.unstable_shouldYield = at, s.unstable_wrapCallback = gt, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }();
  }(sx)), sx;
}
process.env.NODE_ENV === "production" ? lS.exports = ZF() : lS.exports = JF();
var Ug = lS.exports;
/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ox, U1;
function KF() {
  return U1 || (U1 = 1, ox = function(e) {
    var t = {}, n = Ng, r = Ug, o = Object.assign;
    function c(l) {
      for (var u = "https://reactjs.org/docs/error-decoder.html?invariant=" + l, g = 1; g < arguments.length; g++)
        u += "&args[]=" + encodeURIComponent(arguments[g]);
      return "Minified React error #" + l + "; visit " + u + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var f = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, h = Symbol.for("react.element"), p = Symbol.for("react.portal"), v = Symbol.for("react.fragment"), y = Symbol.for("react.strict_mode"), x = Symbol.for("react.profiler"), M = Symbol.for("react.provider"), T = Symbol.for("react.context"), C = Symbol.for("react.forward_ref"), w = Symbol.for("react.suspense"), E = Symbol.for("react.suspense_list"), L = Symbol.for("react.memo"), R = Symbol.for("react.lazy"), U = Symbol.for("react.offscreen"), F = Symbol.iterator;
    function z(l) {
      return l === null || typeof l != "object" ? null : (l = F && l[F] || l["@@iterator"], typeof l == "function" ? l : null);
    }
    function B(l) {
      if (l == null)
        return null;
      if (typeof l == "function")
        return l.displayName || l.name || null;
      if (typeof l == "string")
        return l;
      switch (l) {
        case v:
          return "Fragment";
        case p:
          return "Portal";
        case x:
          return "Profiler";
        case y:
          return "StrictMode";
        case w:
          return "Suspense";
        case E:
          return "SuspenseList";
      }
      if (typeof l == "object")
        switch (l.$$typeof) {
          case T:
            return (l.displayName || "Context") + ".Consumer";
          case M:
            return (l._context.displayName || "Context") + ".Provider";
          case C:
            var u = l.render;
            return l = l.displayName, l || (l = u.displayName || u.name || "", l = l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef"), l;
          case L:
            return u = l.displayName || null, u !== null ? u : B(l.type) || "Memo";
          case R:
            u = l._payload, l = l._init;
            try {
              return B(l(u));
            } catch {
            }
        }
      return null;
    }
    function W(l) {
      var u = l.type;
      switch (l.tag) {
        case 24:
          return "Cache";
        case 9:
          return (u.displayName || "Context") + ".Consumer";
        case 10:
          return (u._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return l = u.render, l = l.displayName || l.name || "", u.displayName || (l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return u;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return B(u);
        case 8:
          return u === y ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if (typeof u == "function")
            return u.displayName || u.name || null;
          if (typeof u == "string")
            return u;
      }
      return null;
    }
    function O(l) {
      var u = l, g = l;
      if (l.alternate)
        for (; u.return; )
          u = u.return;
      else {
        l = u;
        do
          u = l, u.flags & 4098 && (g = u.return), l = u.return;
        while (l);
      }
      return u.tag === 3 ? g : null;
    }
    function I(l) {
      if (O(l) !== l)
        throw Error(c(188));
    }
    function Z(l) {
      var u = l.alternate;
      if (!u) {
        if (u = O(l), u === null)
          throw Error(c(188));
        return u !== l ? null : l;
      }
      for (var g = l, S = u; ; ) {
        var A = g.return;
        if (A === null)
          break;
        var D = A.alternate;
        if (D === null) {
          if (S = A.return, S !== null) {
            g = S;
            continue;
          }
          break;
        }
        if (A.child === D.child) {
          for (D = A.child; D; ) {
            if (D === g)
              return I(A), l;
            if (D === S)
              return I(A), u;
            D = D.sibling;
          }
          throw Error(c(188));
        }
        if (g.return !== S.return)
          g = A, S = D;
        else {
          for (var j = !1, oe = A.child; oe; ) {
            if (oe === g) {
              j = !0, g = A, S = D;
              break;
            }
            if (oe === S) {
              j = !0, S = A, g = D;
              break;
            }
            oe = oe.sibling;
          }
          if (!j) {
            for (oe = D.child; oe; ) {
              if (oe === g) {
                j = !0, g = D, S = A;
                break;
              }
              if (oe === S) {
                j = !0, S = D, g = A;
                break;
              }
              oe = oe.sibling;
            }
            if (!j)
              throw Error(c(189));
          }
        }
        if (g.alternate !== S)
          throw Error(c(190));
      }
      if (g.tag !== 3)
        throw Error(c(188));
      return g.stateNode.current === g ? l : u;
    }
    function ie(l) {
      return l = Z(l), l !== null ? fe(l) : null;
    }
    function fe(l) {
      if (l.tag === 5 || l.tag === 6)
        return l;
      for (l = l.child; l !== null; ) {
        var u = fe(l);
        if (u !== null)
          return u;
        l = l.sibling;
      }
      return null;
    }
    function K(l) {
      if (l.tag === 5 || l.tag === 6)
        return l;
      for (l = l.child; l !== null; ) {
        if (l.tag !== 4) {
          var u = K(l);
          if (u !== null)
            return u;
        }
        l = l.sibling;
      }
      return null;
    }
    var he = Array.isArray, Te = e.getPublicInstance, Me = e.getRootHostContext, ne = e.getChildHostContext, le = e.prepareForCommit, re = e.resetAfterCommit, J = e.createInstance, ue = e.appendInitialChild, Pe = e.finalizeInitialChildren, qe = e.prepareUpdate, $e = e.shouldSetTextContent, it = e.createTextInstance, gt = e.scheduleTimeout, ot = e.cancelTimeout, Vt = e.noTimeout, nn = e.isPrimaryRenderer, Tt = e.supportsMutation, Q = e.supportsPersistence, ke = e.supportsHydration, Re = e.getInstanceFromNode, Xe = e.preparePortalMount, Ue = e.getCurrentEventPriority, Mt = e.detachDeletedInstance, lt = e.supportsMicrotasks, at = e.scheduleMicrotask, Dt = e.supportsTestSelectors, Zt = e.findFiberRoot, rn = e.getBoundingRect, X = e.getTextContent, H = e.isHiddenSubtree, ye = e.matchAccessibilityRole, Ye = e.setFocusIfFocusable, Ve = e.setupIntersectionObserver, Ze = e.appendChild, bt = e.appendChildToContainer, Ke = e.commitTextUpdate, Se = e.commitMount, Ge = e.commitUpdate, yt = e.insertBefore, Ne = e.insertInContainerBefore, rt = e.removeChild, ee = e.removeChildFromContainer, Ee = e.resetTextContent, xe = e.hideInstance, k = e.hideTextInstance, ze = e.unhideInstance, Ce = e.unhideTextInstance, Be = e.clearContainer, ut = e.cloneInstance, He = e.createContainerChildSet, vt = e.appendChildToContainerChildSet, Ut = e.finalizeContainerChildren, Nt = e.replaceContainerChildren, Kt = e.cloneHiddenInstance, Un = e.cloneHiddenTextInstance, wn = e.canHydrateInstance, Yi = e.canHydrateTextInstance, Li = e.canHydrateSuspenseInstance, eo = e.isSuspenseInstancePending, $i = e.isSuspenseInstanceFallback, Ka = e.registerSuspenseInstanceRetry, Br = e.getNextHydratableSibling, Yo = e.getFirstHydratableChild, $ = e.getFirstHydratableChildWithinContainer, Fe = e.getFirstHydratableChildWithinSuspenseInstance, st = e.hydrateInstance, G = e.hydrateTextInstance, ae = e.hydrateSuspenseInstance, pe = e.getNextHydratableInstanceAfterSuspenseInstance, se = e.commitHydratedContainer, de = e.commitHydratedSuspenseInstance, tt = e.clearSuspenseBoundary, ft = e.clearSuspenseBoundaryFromContainer, _t = e.shouldDeleteUnhydratedTailInstances, At = e.didNotMatchHydratedContainerTextInstance, Bt = e.didNotMatchHydratedTextInstance, wt;
    function Ct(l) {
      if (wt === void 0)
        try {
          throw Error();
        } catch (g) {
          var u = g.stack.trim().match(/\n( *(at )?)/);
          wt = u && u[1] || "";
        }
      return `
` + wt + l;
    }
    var yn = !1;
    function Fn(l, u) {
      if (!l || yn)
        return "";
      yn = !0;
      var g = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (u)
          if (u = function() {
            throw Error();
          }, Object.defineProperty(u.prototype, "props", { set: function() {
            throw Error();
          } }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(u, []);
            } catch (Je) {
              var S = Je;
            }
            Reflect.construct(l, [], u);
          } else {
            try {
              u.call();
            } catch (Je) {
              S = Je;
            }
            l.call(u.prototype);
          }
        else {
          try {
            throw Error();
          } catch (Je) {
            S = Je;
          }
          l();
        }
      } catch (Je) {
        if (Je && S && typeof Je.stack == "string") {
          for (var A = Je.stack.split(`
`), D = S.stack.split(`
`), j = A.length - 1, oe = D.length - 1; 1 <= j && 0 <= oe && A[j] !== D[oe]; )
            oe--;
          for (; 1 <= j && 0 <= oe; j--, oe--)
            if (A[j] !== D[oe]) {
              if (j !== 1 || oe !== 1)
                do
                  if (j--, oe--, 0 > oe || A[j] !== D[oe]) {
                    var Ae = `
` + A[j].replace(" at new ", " at ");
                    return l.displayName && Ae.includes("<anonymous>") && (Ae = Ae.replace("<anonymous>", l.displayName)), Ae;
                  }
                while (1 <= j && 0 <= oe);
              break;
            }
        }
      } finally {
        yn = !1, Error.prepareStackTrace = g;
      }
      return (l = l ? l.displayName || l.name : "") ? Ct(l) : "";
    }
    var ji = Object.prototype.hasOwnProperty, ur = [], Nn = -1;
    function Xt(l) {
      return { current: l };
    }
    function An(l) {
      0 > Nn || (l.current = ur[Nn], ur[Nn] = null, Nn--);
    }
    function Yt(l, u) {
      Nn++, ur[Nn] = l.current, l.current = u;
    }
    var Ni = {}, _i = Xt(Ni), xn = Xt(!1), wr = Ni;
    function $n(l, u) {
      var g = l.type.contextTypes;
      if (!g)
        return Ni;
      var S = l.stateNode;
      if (S && S.__reactInternalMemoizedUnmaskedChildContext === u)
        return S.__reactInternalMemoizedMaskedChildContext;
      var A = {}, D;
      for (D in g)
        A[D] = u[D];
      return S && (l = l.stateNode, l.__reactInternalMemoizedUnmaskedChildContext = u, l.__reactInternalMemoizedMaskedChildContext = A), A;
    }
    function ei(l) {
      return l = l.childContextTypes, l != null;
    }
    function Es() {
      An(xn), An(_i);
    }
    function qi(l, u, g) {
      if (_i.current !== Ni)
        throw Error(c(168));
      Yt(_i, u), Yt(xn, g);
    }
    function jo(l, u, g) {
      var S = l.stateNode;
      if (u = u.childContextTypes, typeof S.getChildContext != "function")
        return g;
      S = S.getChildContext();
      for (var A in S)
        if (!(A in u))
          throw Error(c(108, W(l) || "Unknown", A));
      return o({}, g, S);
    }
    function Ts(l) {
      return l = (l = l.stateNode) && l.__reactInternalMemoizedMergedChildContext || Ni, wr = _i.current, Yt(_i, l), Yt(xn, xn.current), !0;
    }
    function qo(l, u, g) {
      var S = l.stateNode;
      if (!S)
        throw Error(c(169));
      g ? (l = jo(l, u, wr), S.__reactInternalMemoizedMergedChildContext = l, An(xn), An(_i), Yt(_i, l)) : An(xn), Yt(xn, g);
    }
    var Hr = Math.clz32 ? Math.clz32 : Wp, Sd = Math.log, Gp = Math.LN2;
    function Wp(l) {
      return l >>>= 0, l === 0 ? 32 : 31 - (Sd(l) / Gp | 0) | 0;
    }
    var bc = 64, Zo = 4194304;
    function bs(l) {
      switch (l & -l) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return l & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return l & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return l;
      }
    }
    function wc(l, u) {
      var g = l.pendingLanes;
      if (g === 0)
        return 0;
      var S = 0, A = l.suspendedLanes, D = l.pingedLanes, j = g & 268435455;
      if (j !== 0) {
        var oe = j & ~A;
        oe !== 0 ? S = bs(oe) : (D &= j, D !== 0 && (S = bs(D)));
      } else
        j = g & ~A, j !== 0 ? S = bs(j) : D !== 0 && (S = bs(D));
      if (S === 0)
        return 0;
      if (u !== 0 && u !== S && !(u & A) && (A = S & -S, D = u & -u, A >= D || A === 16 && (D & 4194240) !== 0))
        return u;
      if (S & 4 && (S |= g & 16), u = l.entangledLanes, u !== 0)
        for (l = l.entanglements, u &= S; 0 < u; )
          g = 31 - Hr(u), A = 1 << g, S |= l[g], u &= ~A;
      return S;
    }
    function sa(l, u) {
      switch (l) {
        case 1:
        case 2:
        case 4:
          return u + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return u + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function au(l, u) {
      for (var g = l.suspendedLanes, S = l.pingedLanes, A = l.expirationTimes, D = l.pendingLanes; 0 < D; ) {
        var j = 31 - Hr(D), oe = 1 << j, Ae = A[j];
        Ae === -1 ? (!(oe & g) || oe & S) && (A[j] = sa(oe, u)) : Ae <= u && (l.expiredLanes |= oe), D &= ~oe;
      }
    }
    function er(l) {
      return l = l.pendingLanes & -1073741825, l !== 0 ? l : l & 1073741824 ? 1073741824 : 0;
    }
    function Md(l) {
      for (var u = [], g = 0; 31 > g; g++)
        u.push(l);
      return u;
    }
    function su(l, u, g) {
      l.pendingLanes |= u, u !== 536870912 && (l.suspendedLanes = 0, l.pingedLanes = 0), l = l.eventTimes, u = 31 - Hr(u), l[u] = g;
    }
    function fy(l, u) {
      var g = l.pendingLanes & ~u;
      l.pendingLanes = u, l.suspendedLanes = 0, l.pingedLanes = 0, l.expiredLanes &= u, l.mutableReadLanes &= u, l.entangledLanes &= u, u = l.entanglements;
      var S = l.eventTimes;
      for (l = l.expirationTimes; 0 < g; ) {
        var A = 31 - Hr(g), D = 1 << A;
        u[A] = 0, S[A] = -1, l[A] = -1, g &= ~D;
      }
    }
    function Ed(l, u) {
      var g = l.entangledLanes |= u;
      for (l = l.entanglements; g; ) {
        var S = 31 - Hr(g), A = 1 << S;
        A & u | l[S] & u && (l[S] |= u), g &= ~A;
      }
    }
    var Sn = 0;
    function Xp(l) {
      return l &= -l, 1 < l ? 4 < l ? l & 268435455 ? 16 : 536870912 : 4 : 1;
    }
    var ws = r.unstable_scheduleCallback, Yp = r.unstable_cancelCallback, dy = r.unstable_shouldYield, hy = r.unstable_requestPaint, ti = r.unstable_now, Td = r.unstable_ImmediatePriority, py = r.unstable_UserBlockingPriority, bd = r.unstable_NormalPriority, my = r.unstable_IdlePriority, Ac = null, wa = null;
    function vy(l) {
      if (wa && typeof wa.onCommitFiberRoot == "function")
        try {
          wa.onCommitFiberRoot(Ac, l, void 0, (l.current.flags & 128) === 128);
        } catch {
        }
    }
    function gy(l, u) {
      return l === u && (l !== 0 || 1 / l === 1 / u) || l !== l && u !== u;
    }
    var Aa = typeof Object.is == "function" ? Object.is : gy, Qa = null, Rc = !1, wd = !1;
    function Ad(l) {
      Qa === null ? Qa = [l] : Qa.push(l);
    }
    function yy(l) {
      Rc = !0, Ad(l);
    }
    function Ra() {
      if (!wd && Qa !== null) {
        wd = !0;
        var l = 0, u = Sn;
        try {
          var g = Qa;
          for (Sn = 1; l < g.length; l++) {
            var S = g[l];
            do
              S = S(!0);
            while (S !== null);
          }
          Qa = null, Rc = !1;
        } catch (A) {
          throw Qa !== null && (Qa = Qa.slice(l + 1)), ws(Td, Ra), A;
        } finally {
          Sn = u, wd = !1;
        }
      }
      return null;
    }
    var _y = f.ReactCurrentBatchConfig;
    function Cc(l, u) {
      if (Aa(l, u))
        return !0;
      if (typeof l != "object" || l === null || typeof u != "object" || u === null)
        return !1;
      var g = Object.keys(l), S = Object.keys(u);
      if (g.length !== S.length)
        return !1;
      for (S = 0; S < g.length; S++) {
        var A = g[S];
        if (!ji.call(u, A) || !Aa(l[A], u[A]))
          return !1;
      }
      return !0;
    }
    function xy(l) {
      switch (l.tag) {
        case 5:
          return Ct(l.type);
        case 16:
          return Ct("Lazy");
        case 13:
          return Ct("Suspense");
        case 19:
          return Ct("SuspenseList");
        case 0:
        case 2:
        case 15:
          return l = Fn(l.type, !1), l;
        case 11:
          return l = Fn(l.type.render, !1), l;
        case 1:
          return l = Fn(l.type, !0), l;
        default:
          return "";
      }
    }
    function oa(l, u) {
      if (l && l.defaultProps) {
        u = o({}, u), l = l.defaultProps;
        for (var g in l)
          u[g] === void 0 && (u[g] = l[g]);
        return u;
      }
      return u;
    }
    var ou = Xt(null), lu = null, Jo = null, Lc = null;
    function Rd() {
      Lc = Jo = lu = null;
    }
    function Cd(l, u, g) {
      nn ? (Yt(ou, u._currentValue), u._currentValue = g) : (Yt(ou, u._currentValue2), u._currentValue2 = g);
    }
    function Pc(l) {
      var u = ou.current;
      An(ou), nn ? l._currentValue = u : l._currentValue2 = u;
    }
    function Ld(l, u, g) {
      for (; l !== null; ) {
        var S = l.alternate;
        if ((l.childLanes & u) !== u ? (l.childLanes |= u, S !== null && (S.childLanes |= u)) : S !== null && (S.childLanes & u) !== u && (S.childLanes |= u), l === g)
          break;
        l = l.return;
      }
    }
    function Ko(l, u) {
      lu = l, Lc = Jo = null, l = l.dependencies, l !== null && l.firstContext !== null && (l.lanes & u && (Zi = !0), l.firstContext = null);
    }
    function Vr(l) {
      var u = nn ? l._currentValue : l._currentValue2;
      if (Lc !== l)
        if (l = { context: l, memoizedValue: u, next: null }, Jo === null) {
          if (lu === null)
            throw Error(c(308));
          Jo = l, lu.dependencies = { lanes: 0, firstContext: l };
        } else
          Jo = Jo.next = l;
      return u;
    }
    var la = null, Ca = !1;
    function Pd(l) {
      l.updateQueue = { baseState: l.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function uu(l, u) {
      l = l.updateQueue, u.updateQueue === l && (u.updateQueue = { baseState: l.baseState, firstBaseUpdate: l.firstBaseUpdate, lastBaseUpdate: l.lastBaseUpdate, shared: l.shared, effects: l.effects });
    }
    function $a(l, u) {
      return { eventTime: l, lane: u, tag: 0, payload: null, callback: null, next: null };
    }
    function As(l, u) {
      var g = l.updateQueue;
      g !== null && (g = g.shared, mi !== null && l.mode & 1 && !(an & 2) ? (l = g.interleaved, l === null ? (u.next = u, la === null ? la = [g] : la.push(g)) : (u.next = l.next, l.next = u), g.interleaved = u) : (l = g.pending, l === null ? u.next = u : (u.next = l.next, l.next = u), g.pending = u));
    }
    function Dc(l, u, g) {
      if (u = u.updateQueue, u !== null && (u = u.shared, (g & 4194240) !== 0)) {
        var S = u.lanes;
        S &= l.pendingLanes, g |= S, u.lanes = g, Ed(l, g);
      }
    }
    function jp(l, u) {
      var g = l.updateQueue, S = l.alternate;
      if (S !== null && (S = S.updateQueue, g === S)) {
        var A = null, D = null;
        if (g = g.firstBaseUpdate, g !== null) {
          do {
            var j = { eventTime: g.eventTime, lane: g.lane, tag: g.tag, payload: g.payload, callback: g.callback, next: null };
            D === null ? A = D = j : D = D.next = j, g = g.next;
          } while (g !== null);
          D === null ? A = D = u : D = D.next = u;
        } else
          A = D = u;
        g = { baseState: S.baseState, firstBaseUpdate: A, lastBaseUpdate: D, shared: S.shared, effects: S.effects }, l.updateQueue = g;
        return;
      }
      l = g.lastBaseUpdate, l === null ? g.firstBaseUpdate = u : l.next = u, g.lastBaseUpdate = u;
    }
    function Uc(l, u, g, S) {
      var A = l.updateQueue;
      Ca = !1;
      var D = A.firstBaseUpdate, j = A.lastBaseUpdate, oe = A.shared.pending;
      if (oe !== null) {
        A.shared.pending = null;
        var Ae = oe, Je = Ae.next;
        Ae.next = null, j === null ? D = Je : j.next = Je, j = Ae;
        var nt = l.alternate;
        nt !== null && (nt = nt.updateQueue, oe = nt.lastBaseUpdate, oe !== j && (oe === null ? nt.firstBaseUpdate = Je : oe.next = Je, nt.lastBaseUpdate = Ae));
      }
      if (D !== null) {
        var Wt = A.baseState;
        j = 0, nt = Je = Ae = null, oe = D;
        do {
          var zt = oe.lane, Bn = oe.eventTime;
          if ((S & zt) === zt) {
            nt !== null && (nt = nt.next = {
              eventTime: Bn,
              lane: 0,
              tag: oe.tag,
              payload: oe.payload,
              callback: oe.callback,
              next: null
            });
            e: {
              var Ot = l, zi = oe;
              switch (zt = u, Bn = g, zi.tag) {
                case 1:
                  if (Ot = zi.payload, typeof Ot == "function") {
                    Wt = Ot.call(Bn, Wt, zt);
                    break e;
                  }
                  Wt = Ot;
                  break e;
                case 3:
                  Ot.flags = Ot.flags & -65537 | 128;
                case 0:
                  if (Ot = zi.payload, zt = typeof Ot == "function" ? Ot.call(Bn, Wt, zt) : Ot, zt == null)
                    break e;
                  Wt = o({}, Wt, zt);
                  break e;
                case 2:
                  Ca = !0;
              }
            }
            oe.callback !== null && oe.lane !== 0 && (l.flags |= 64, zt = A.effects, zt === null ? A.effects = [oe] : zt.push(oe));
          } else
            Bn = { eventTime: Bn, lane: zt, tag: oe.tag, payload: oe.payload, callback: oe.callback, next: null }, nt === null ? (Je = nt = Bn, Ae = Wt) : nt = nt.next = Bn, j |= zt;
          if (oe = oe.next, oe === null) {
            if (oe = A.shared.pending, oe === null)
              break;
            zt = oe, oe = zt.next, zt.next = null, A.lastBaseUpdate = zt, A.shared.pending = null;
          }
        } while (1);
        if (nt === null && (Ae = Wt), A.baseState = Ae, A.firstBaseUpdate = Je, A.lastBaseUpdate = nt, u = A.shared.interleaved, u !== null) {
          A = u;
          do
            j |= A.lane, A = A.next;
          while (A !== u);
        } else
          D === null && (A.shared.lanes = 0);
        Fa |= j, l.lanes = j, l.memoizedState = Wt;
      }
    }
    function qp(l, u, g) {
      if (l = u.effects, u.effects = null, l !== null)
        for (u = 0; u < l.length; u++) {
          var S = l[u], A = S.callback;
          if (A !== null) {
            if (S.callback = null, S = g, typeof A != "function")
              throw Error(c(191, A));
            A.call(S);
          }
        }
    }
    var Zp = new n.Component().refs;
    function Nc(l, u, g, S) {
      u = l.memoizedState, g = g(S, u), g = g == null ? u : o({}, u, g), l.memoizedState = g, l.lanes === 0 && (l.updateQueue.baseState = g);
    }
    var Oc = { isMounted: function(l) {
      return (l = l._reactInternals) ? O(l) === l : !1;
    }, enqueueSetState: function(l, u, g) {
      l = l._reactInternals;
      var S = Ji(), A = Os(l), D = $a(S, A);
      D.payload = u, g != null && (D.callback = g), As(l, D), u = qr(l, A, S), u !== null && Dc(u, l, A);
    }, enqueueReplaceState: function(l, u, g) {
      l = l._reactInternals;
      var S = Ji(), A = Os(l), D = $a(S, A);
      D.tag = 1, D.payload = u, g != null && (D.callback = g), As(l, D), u = qr(l, A, S), u !== null && Dc(u, l, A);
    }, enqueueForceUpdate: function(l, u) {
      l = l._reactInternals;
      var g = Ji(), S = Os(l), A = $a(
        g,
        S
      );
      A.tag = 2, u != null && (A.callback = u), As(l, A), u = qr(l, S, g), u !== null && Dc(u, l, S);
    } };
    function Jp(l, u, g, S, A, D, j) {
      return l = l.stateNode, typeof l.shouldComponentUpdate == "function" ? l.shouldComponentUpdate(S, D, j) : u.prototype && u.prototype.isPureReactComponent ? !Cc(g, S) || !Cc(A, D) : !0;
    }
    function Kp(l, u, g) {
      var S = !1, A = Ni, D = u.contextType;
      return typeof D == "object" && D !== null ? D = Vr(D) : (A = ei(u) ? wr : _i.current, S = u.contextTypes, D = (S = S != null) ? $n(l, A) : Ni), u = new u(g, D), l.memoizedState = u.state !== null && u.state !== void 0 ? u.state : null, u.updater = Oc, l.stateNode = u, u._reactInternals = l, S && (l = l.stateNode, l.__reactInternalMemoizedUnmaskedChildContext = A, l.__reactInternalMemoizedMaskedChildContext = D), u;
    }
    function Qp(l, u, g, S) {
      l = u.state, typeof u.componentWillReceiveProps == "function" && u.componentWillReceiveProps(g, S), typeof u.UNSAFE_componentWillReceiveProps == "function" && u.UNSAFE_componentWillReceiveProps(g, S), u.state !== l && Oc.enqueueReplaceState(u, u.state, null);
    }
    function Dd(l, u, g, S) {
      var A = l.stateNode;
      A.props = g, A.state = l.memoizedState, A.refs = Zp, Pd(l);
      var D = u.contextType;
      typeof D == "object" && D !== null ? A.context = Vr(D) : (D = ei(u) ? wr : _i.current, A.context = $n(l, D)), A.state = l.memoizedState, D = u.getDerivedStateFromProps, typeof D == "function" && (Nc(l, u, D, g), A.state = l.memoizedState), typeof u.getDerivedStateFromProps == "function" || typeof A.getSnapshotBeforeUpdate == "function" || typeof A.UNSAFE_componentWillMount != "function" && typeof A.componentWillMount != "function" || (u = A.state, typeof A.componentWillMount == "function" && A.componentWillMount(), typeof A.UNSAFE_componentWillMount == "function" && A.UNSAFE_componentWillMount(), u !== A.state && Oc.enqueueReplaceState(A, A.state, null), Uc(l, g, A, S), A.state = l.memoizedState), typeof A.componentDidMount == "function" && (l.flags |= 4194308);
    }
    var Qo = [], $o = 0, Ic = null, Fc = 0, kr = [], Gr = 0, to = null, es = 1, ts = "";
    function no(l, u) {
      Qo[$o++] = Fc, Qo[$o++] = Ic, Ic = l, Fc = u;
    }
    function $p(l, u, g) {
      kr[Gr++] = es, kr[Gr++] = ts, kr[Gr++] = to, to = l;
      var S = es;
      l = ts;
      var A = 32 - Hr(S) - 1;
      S &= ~(1 << A), g += 1;
      var D = 32 - Hr(u) + A;
      if (30 < D) {
        var j = A - A % 5;
        D = (S & (1 << j) - 1).toString(32), S >>= j, A -= j, es = 1 << 32 - Hr(u) + A | g << A | S, ts = D + l;
      } else
        es = 1 << D | g << A | S, ts = l;
    }
    function Ud(l) {
      l.return !== null && (no(l, 1), $p(l, 1, 0));
    }
    function Nd(l) {
      for (; l === Ic; )
        Ic = Qo[--$o], Qo[$o] = null, Fc = Qo[--$o], Qo[$o] = null;
      for (; l === to; )
        to = kr[--Gr], kr[Gr] = null, ts = kr[--Gr], kr[Gr] = null, es = kr[--Gr], kr[Gr] = null;
    }
    var Ar = null, Oi = null, Wn = !1, el = !1, Wr = null;
    function Od(l, u) {
      var g = Ki(5, null, null, 0);
      g.elementType = "DELETED", g.stateNode = u, g.return = l, u = l.deletions, u === null ? (l.deletions = [g], l.flags |= 16) : u.push(g);
    }
    function Id(l, u) {
      switch (l.tag) {
        case 5:
          return u = wn(u, l.type, l.pendingProps), u !== null ? (l.stateNode = u, Ar = l, Oi = Yo(u), !0) : !1;
        case 6:
          return u = Yi(u, l.pendingProps), u !== null ? (l.stateNode = u, Ar = l, Oi = null, !0) : !1;
        case 13:
          if (u = Li(u), u !== null) {
            var g = to !== null ? { id: es, overflow: ts } : null;
            return l.memoizedState = { dehydrated: u, treeContext: g, retryLane: 1073741824 }, g = Ki(18, null, null, 0), g.stateNode = u, g.return = l, l.child = g, Ar = l, Oi = null, !0;
          }
          return !1;
        default:
          return !1;
      }
    }
    function zc(l) {
      return (l.mode & 1) !== 0 && (l.flags & 128) === 0;
    }
    function Bc(l) {
      if (Wn) {
        var u = Oi;
        if (u) {
          var g = u;
          if (!Id(l, u)) {
            if (zc(l))
              throw Error(c(418));
            u = Br(g);
            var S = Ar;
            u && Id(l, u) ? Od(S, g) : (l.flags = l.flags & -4097 | 2, Wn = !1, Ar = l);
          }
        } else {
          if (zc(l))
            throw Error(c(418));
          l.flags = l.flags & -4097 | 2, Wn = !1, Ar = l;
        }
      }
    }
    function Fd(l) {
      for (l = l.return; l !== null && l.tag !== 5 && l.tag !== 3 && l.tag !== 13; )
        l = l.return;
      Ar = l;
    }
    function cu(l) {
      if (!ke || l !== Ar)
        return !1;
      if (!Wn)
        return Fd(l), Wn = !0, !1;
      if (l.tag !== 3 && (l.tag !== 5 || _t(l.type) && !$e(l.type, l.memoizedProps))) {
        var u = Oi;
        if (u) {
          if (zc(l)) {
            for (l = Oi; l; )
              l = Br(l);
            throw Error(c(418));
          }
          for (; u; )
            Od(l, u), u = Br(u);
        }
      }
      if (Fd(l), l.tag === 13) {
        if (!ke)
          throw Error(c(316));
        if (l = l.memoizedState, l = l !== null ? l.dehydrated : null, !l)
          throw Error(c(317));
        Oi = pe(l);
      } else
        Oi = Ar ? Br(l.stateNode) : null;
      return !0;
    }
    function tl() {
      ke && (Oi = Ar = null, el = Wn = !1);
    }
    function fu(l) {
      Wr === null ? Wr = [l] : Wr.push(l);
    }
    function io(l, u, g) {
      if (l = g.ref, l !== null && typeof l != "function" && typeof l != "object") {
        if (g._owner) {
          if (g = g._owner, g) {
            if (g.tag !== 1)
              throw Error(c(309));
            var S = g.stateNode;
          }
          if (!S)
            throw Error(c(147, l));
          var A = S, D = "" + l;
          return u !== null && u.ref !== null && typeof u.ref == "function" && u.ref._stringRef === D ? u.ref : (u = function(j) {
            var oe = A.refs;
            oe === Zp && (oe = A.refs = {}), j === null ? delete oe[D] : oe[D] = j;
          }, u._stringRef = D, u);
        }
        if (typeof l != "string")
          throw Error(c(284));
        if (!g._owner)
          throw Error(c(290, l));
      }
      return l;
    }
    function ua(l, u) {
      throw l = Object.prototype.toString.call(u), Error(c(31, l === "[object Object]" ? "object with keys {" + Object.keys(u).join(", ") + "}" : l));
    }
    function Hc(l) {
      var u = l._init;
      return u(l._payload);
    }
    function du(l) {
      function u(ge, ce) {
        if (l) {
          var be = ge.deletions;
          be === null ? (ge.deletions = [ce], ge.flags |= 16) : be.push(ce);
        }
      }
      function g(ge, ce) {
        if (!l)
          return null;
        for (; ce !== null; )
          u(ge, ce), ce = ce.sibling;
        return null;
      }
      function S(ge, ce) {
        for (ge = /* @__PURE__ */ new Map(); ce !== null; )
          ce.key !== null ? ge.set(ce.key, ce) : ge.set(ce.index, ce), ce = ce.sibling;
        return ge;
      }
      function A(ge, ce) {
        return ge = pr(ge, ce), ge.index = 0, ge.sibling = null, ge;
      }
      function D(ge, ce, be) {
        return ge.index = be, l ? (be = ge.alternate, be !== null ? (be = be.index, be < ce ? (ge.flags |= 2, ce) : be) : (ge.flags |= 2, ce)) : (ge.flags |= 1048576, ce);
      }
      function j(ge) {
        return l && ge.alternate === null && (ge.flags |= 2), ge;
      }
      function oe(ge, ce, be, pt) {
        return ce === null || ce.tag !== 6 ? (ce = hf(be, ge.mode, pt), ce.return = ge, ce) : (ce = A(ce, be), ce.return = ge, ce);
      }
      function Ae(ge, ce, be, pt) {
        var Lt = be.type;
        return Lt === v ? nt(ge, ce, be.props.children, pt, be.key) : ce !== null && (ce.elementType === Lt || typeof Lt == "object" && Lt !== null && Lt.$$typeof === R && Hc(Lt) === ce.type) ? (pt = A(ce, be.props), pt.ref = io(ge, ce, be), pt.return = ge, pt) : (pt = Mo(be.type, be.key, be.props, null, ge.mode, pt), pt.ref = io(ge, ce, be), pt.return = ge, pt);
      }
      function Je(ge, ce, be, pt) {
        return ce === null || ce.tag !== 4 || ce.stateNode.containerInfo !== be.containerInfo || ce.stateNode.implementation !== be.implementation ? (ce = Uu(be, ge.mode, pt), ce.return = ge, ce) : (ce = A(ce, be.children || []), ce.return = ge, ce);
      }
      function nt(ge, ce, be, pt, Lt) {
        return ce === null || ce.tag !== 7 ? (ce = Fs(be, ge.mode, pt, Lt), ce.return = ge, ce) : (ce = A(ce, be), ce.return = ge, ce);
      }
      function Wt(ge, ce, be) {
        if (typeof ce == "string" && ce !== "" || typeof ce == "number")
          return ce = hf("" + ce, ge.mode, be), ce.return = ge, ce;
        if (typeof ce == "object" && ce !== null) {
          switch (ce.$$typeof) {
            case h:
              return be = Mo(ce.type, ce.key, ce.props, null, ge.mode, be), be.ref = io(ge, null, ce), be.return = ge, be;
            case p:
              return ce = Uu(ce, ge.mode, be), ce.return = ge, ce;
            case R:
              var pt = ce._init;
              return Wt(ge, pt(ce._payload), be);
          }
          if (he(ce) || z(ce))
            return ce = Fs(ce, ge.mode, be, null), ce.return = ge, ce;
          ua(ge, ce);
        }
        return null;
      }
      function zt(ge, ce, be, pt) {
        var Lt = ce !== null ? ce.key : null;
        if (typeof be == "string" && be !== "" || typeof be == "number")
          return Lt !== null ? null : oe(ge, ce, "" + be, pt);
        if (typeof be == "object" && be !== null) {
          switch (be.$$typeof) {
            case h:
              return be.key === Lt ? Ae(ge, ce, be, pt) : null;
            case p:
              return be.key === Lt ? Je(ge, ce, be, pt) : null;
            case R:
              return Lt = be._init, zt(
                ge,
                ce,
                Lt(be._payload),
                pt
              );
          }
          if (he(be) || z(be))
            return Lt !== null ? null : nt(ge, ce, be, pt, null);
          ua(ge, be);
        }
        return null;
      }
      function Bn(ge, ce, be, pt, Lt) {
        if (typeof pt == "string" && pt !== "" || typeof pt == "number")
          return ge = ge.get(be) || null, oe(ce, ge, "" + pt, Lt);
        if (typeof pt == "object" && pt !== null) {
          switch (pt.$$typeof) {
            case h:
              return ge = ge.get(pt.key === null ? be : pt.key) || null, Ae(ce, ge, pt, Lt);
            case p:
              return ge = ge.get(pt.key === null ? be : pt.key) || null, Je(ce, ge, pt, Lt);
            case R:
              var $t = pt._init;
              return Bn(ge, ce, be, $t(pt._payload), Lt);
          }
          if (he(pt) || z(pt))
            return ge = ge.get(be) || null, nt(ce, ge, pt, Lt, null);
          ua(ce, pt);
        }
        return null;
      }
      function Ot(ge, ce, be, pt) {
        for (var Lt = null, $t = null, Ht = ce, sn = ce = 0, si = null; Ht !== null && sn < be.length; sn++) {
          Ht.index > sn ? (si = Ht, Ht = null) : si = Ht.sibling;
          var gn = zt(ge, Ht, be[sn], pt);
          if (gn === null) {
            Ht === null && (Ht = si);
            break;
          }
          l && Ht && gn.alternate === null && u(ge, Ht), ce = D(gn, ce, sn), $t === null ? Lt = gn : $t.sibling = gn, $t = gn, Ht = si;
        }
        if (sn === be.length)
          return g(ge, Ht), Wn && no(ge, sn), Lt;
        if (Ht === null) {
          for (; sn < be.length; sn++)
            Ht = Wt(ge, be[sn], pt), Ht !== null && (ce = D(Ht, ce, sn), $t === null ? Lt = Ht : $t.sibling = Ht, $t = Ht);
          return Wn && no(ge, sn), Lt;
        }
        for (Ht = S(ge, Ht); sn < be.length; sn++)
          si = Bn(Ht, ge, sn, be[sn], pt), si !== null && (l && si.alternate !== null && Ht.delete(si.key === null ? sn : si.key), ce = D(si, ce, sn), $t === null ? Lt = si : $t.sibling = si, $t = si);
        return l && Ht.forEach(function(zs) {
          return u(ge, zs);
        }), Wn && no(ge, sn), Lt;
      }
      function zi(ge, ce, be, pt) {
        var Lt = z(be);
        if (typeof Lt != "function")
          throw Error(c(150));
        if (be = Lt.call(be), be == null)
          throw Error(c(151));
        for (var $t = Lt = null, Ht = ce, sn = ce = 0, si = null, gn = be.next(); Ht !== null && !gn.done; sn++, gn = be.next()) {
          Ht.index > sn ? (si = Ht, Ht = null) : si = Ht.sibling;
          var zs = zt(ge, Ht, gn.value, pt);
          if (zs === null) {
            Ht === null && (Ht = si);
            break;
          }
          l && Ht && zs.alternate === null && u(ge, Ht), ce = D(zs, ce, sn), $t === null ? Lt = zs : $t.sibling = zs, $t = zs, Ht = si;
        }
        if (gn.done)
          return g(
            ge,
            Ht
          ), Wn && no(ge, sn), Lt;
        if (Ht === null) {
          for (; !gn.done; sn++, gn = be.next())
            gn = Wt(ge, gn.value, pt), gn !== null && (ce = D(gn, ce, sn), $t === null ? Lt = gn : $t.sibling = gn, $t = gn);
          return Wn && no(ge, sn), Lt;
        }
        for (Ht = S(ge, Ht); !gn.done; sn++, gn = be.next())
          gn = Bn(Ht, ge, sn, gn.value, pt), gn !== null && (l && gn.alternate !== null && Ht.delete(gn.key === null ? sn : gn.key), ce = D(gn, ce, sn), $t === null ? Lt = gn : $t.sibling = gn, $t = gn);
        return l && Ht.forEach(function(pf) {
          return u(ge, pf);
        }), Wn && no(ge, sn), Lt;
      }
      function tr(ge, ce, be, pt) {
        if (typeof be == "object" && be !== null && be.type === v && be.key === null && (be = be.props.children), typeof be == "object" && be !== null) {
          switch (be.$$typeof) {
            case h:
              e: {
                for (var Lt = be.key, $t = ce; $t !== null; ) {
                  if ($t.key === Lt) {
                    if (Lt = be.type, Lt === v) {
                      if ($t.tag === 7) {
                        g(ge, $t.sibling), ce = A($t, be.props.children), ce.return = ge, ge = ce;
                        break e;
                      }
                    } else if ($t.elementType === Lt || typeof Lt == "object" && Lt !== null && Lt.$$typeof === R && Hc(Lt) === $t.type) {
                      g(ge, $t.sibling), ce = A($t, be.props), ce.ref = io(ge, $t, be), ce.return = ge, ge = ce;
                      break e;
                    }
                    g(ge, $t);
                    break;
                  } else
                    u(ge, $t);
                  $t = $t.sibling;
                }
                be.type === v ? (ce = Fs(be.props.children, ge.mode, pt, be.key), ce.return = ge, ge = ce) : (pt = Mo(be.type, be.key, be.props, null, ge.mode, pt), pt.ref = io(ge, ce, be), pt.return = ge, ge = pt);
              }
              return j(ge);
            case p:
              e: {
                for ($t = be.key; ce !== null; ) {
                  if (ce.key === $t)
                    if (ce.tag === 4 && ce.stateNode.containerInfo === be.containerInfo && ce.stateNode.implementation === be.implementation) {
                      g(ge, ce.sibling), ce = A(ce, be.children || []), ce.return = ge, ge = ce;
                      break e;
                    } else {
                      g(ge, ce);
                      break;
                    }
                  else
                    u(ge, ce);
                  ce = ce.sibling;
                }
                ce = Uu(be, ge.mode, pt), ce.return = ge, ge = ce;
              }
              return j(ge);
            case R:
              return $t = be._init, tr(ge, ce, $t(be._payload), pt);
          }
          if (he(be))
            return Ot(ge, ce, be, pt);
          if (z(be))
            return zi(ge, ce, be, pt);
          ua(ge, be);
        }
        return typeof be == "string" && be !== "" || typeof be == "number" ? (be = "" + be, ce !== null && ce.tag === 6 ? (g(ge, ce.sibling), ce = A(ce, be), ce.return = ge, ge = ce) : (g(ge, ce), ce = hf(be, ge.mode, pt), ce.return = ge, ge = ce), j(ge)) : g(ge, ce);
      }
      return tr;
    }
    var nl = du(!0), Vc = du(!1), hu = {}, cr = Xt(hu), pu = Xt(hu), Rs = Xt(hu);
    function ca(l) {
      if (l === hu)
        throw Error(c(174));
      return l;
    }
    function kc(l, u) {
      Yt(Rs, u), Yt(pu, l), Yt(cr, hu), l = Me(u), An(cr), Yt(cr, l);
    }
    function ro() {
      An(cr), An(pu), An(Rs);
    }
    function mu(l) {
      var u = ca(Rs.current), g = ca(cr.current);
      u = ne(g, l.type, u), g !== u && (Yt(pu, l), Yt(cr, u));
    }
    function Rr(l) {
      pu.current === l && (An(cr), An(pu));
    }
    var Xn = Xt(0);
    function ao(l) {
      for (var u = l; u !== null; ) {
        if (u.tag === 13) {
          var g = u.memoizedState;
          if (g !== null && (g = g.dehydrated, g === null || eo(g) || $i(g)))
            return u;
        } else if (u.tag === 19 && u.memoizedProps.revealOrder !== void 0) {
          if (u.flags & 128)
            return u;
        } else if (u.child !== null) {
          u.child.return = u, u = u.child;
          continue;
        }
        if (u === l)
          break;
        for (; u.sibling === null; ) {
          if (u.return === null || u.return === l)
            return null;
          u = u.return;
        }
        u.sibling.return = u.return, u = u.sibling;
      }
      return null;
    }
    var fa = [];
    function La() {
      for (var l = 0; l < fa.length; l++) {
        var u = fa[l];
        nn ? u._workInProgressVersionPrimary = null : u._workInProgressVersionSecondary = null;
      }
      fa.length = 0;
    }
    var xi = f.ReactCurrentDispatcher, On = f.ReactCurrentBatchConfig, Cs = 0, mn = null, qn = null, zn = null, il = !1, Pa = !1, rl = 0, al = 0;
    function Si() {
      throw Error(c(321));
    }
    function Xr(l, u) {
      if (u === null)
        return !1;
      for (var g = 0; g < u.length && g < l.length; g++)
        if (!Aa(l[g], u[g]))
          return !1;
      return !0;
    }
    function sl(l, u, g, S, A, D) {
      if (Cs = D, mn = u, u.memoizedState = null, u.updateQueue = null, u.lanes = 0, xi.current = l === null || l.memoizedState === null ? Vd : kd, l = g(S, A), Pa) {
        D = 0;
        do {
          if (Pa = !1, rl = 0, 25 <= D)
            throw Error(c(301));
          D += 1, zn = qn = null, u.updateQueue = null, xi.current = Gd, l = g(S, A);
        } while (Pa);
      }
      if (xi.current = fl, u = qn !== null && qn.next !== null, Cs = 0, zn = qn = mn = null, il = !1, u)
        throw Error(c(300));
      return l;
    }
    function vu() {
      var l = rl !== 0;
      return rl = 0, l;
    }
    function Da() {
      var l = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      return zn === null ? mn.memoizedState = zn = l : zn = zn.next = l, zn;
    }
    function da() {
      if (qn === null) {
        var l = mn.alternate;
        l = l !== null ? l.memoizedState : null;
      } else
        l = qn.next;
      var u = zn === null ? mn.memoizedState : zn.next;
      if (u !== null)
        zn = u, qn = l;
      else {
        if (l === null)
          throw Error(c(310));
        qn = l, l = { memoizedState: qn.memoizedState, baseState: qn.baseState, baseQueue: qn.baseQueue, queue: qn.queue, next: null }, zn === null ? mn.memoizedState = zn = l : zn = zn.next = l;
      }
      return zn;
    }
    function Ua(l, u) {
      return typeof u == "function" ? u(l) : u;
    }
    function gu(l) {
      var u = da(), g = u.queue;
      if (g === null)
        throw Error(c(311));
      g.lastRenderedReducer = l;
      var S = qn, A = S.baseQueue, D = g.pending;
      if (D !== null) {
        if (A !== null) {
          var j = A.next;
          A.next = D.next, D.next = j;
        }
        S.baseQueue = A = D, g.pending = null;
      }
      if (A !== null) {
        D = A.next, S = S.baseState;
        var oe = j = null, Ae = null, Je = D;
        do {
          var nt = Je.lane;
          if ((Cs & nt) === nt)
            Ae !== null && (Ae = Ae.next = { lane: 0, action: Je.action, hasEagerState: Je.hasEagerState, eagerState: Je.eagerState, next: null }), S = Je.hasEagerState ? Je.eagerState : l(S, Je.action);
          else {
            var Wt = {
              lane: nt,
              action: Je.action,
              hasEagerState: Je.hasEagerState,
              eagerState: Je.eagerState,
              next: null
            };
            Ae === null ? (oe = Ae = Wt, j = S) : Ae = Ae.next = Wt, mn.lanes |= nt, Fa |= nt;
          }
          Je = Je.next;
        } while (Je !== null && Je !== D);
        Ae === null ? j = S : Ae.next = oe, Aa(S, u.memoizedState) || (Zi = !0), u.memoizedState = S, u.baseState = j, u.baseQueue = Ae, g.lastRenderedState = S;
      }
      if (l = g.interleaved, l !== null) {
        A = l;
        do
          D = A.lane, mn.lanes |= D, Fa |= D, A = A.next;
        while (A !== l);
      } else
        A === null && (g.lanes = 0);
      return [u.memoizedState, g.dispatch];
    }
    function Gc(l) {
      var u = da(), g = u.queue;
      if (g === null)
        throw Error(c(311));
      g.lastRenderedReducer = l;
      var S = g.dispatch, A = g.pending, D = u.memoizedState;
      if (A !== null) {
        g.pending = null;
        var j = A = A.next;
        do
          D = l(D, j.action), j = j.next;
        while (j !== A);
        Aa(D, u.memoizedState) || (Zi = !0), u.memoizedState = D, u.baseQueue === null && (u.baseState = D), g.lastRenderedState = D;
      }
      return [D, S];
    }
    function so() {
    }
    function zd(l, u) {
      var g = mn, S = da(), A = u(), D = !Aa(S.memoizedState, A);
      if (D && (S.memoizedState = A, Zi = !0), S = S.queue, We(_n.bind(null, g, S, l), [l]), S.getSnapshot !== u || D || zn !== null && zn.memoizedState.tag & 1) {
        if (g.flags |= 2048, ol(9, Ln.bind(null, g, S, A, u), void 0, null), mi === null)
          throw Error(c(349));
        Cs & 30 || jt(g, u, A);
      }
      return A;
    }
    function jt(l, u, g) {
      l.flags |= 16384, l = { getSnapshot: u, value: g }, u = mn.updateQueue, u === null ? (u = { lastEffect: null, stores: null }, mn.updateQueue = u, u.stores = [l]) : (g = u.stores, g === null ? u.stores = [l] : g.push(l));
    }
    function Ln(l, u, g, S) {
      u.value = g, u.getSnapshot = S, ni(u) && qr(l, 1, -1);
    }
    function _n(l, u, g) {
      return g(function() {
        ni(u) && qr(l, 1, -1);
      });
    }
    function ni(l) {
      var u = l.getSnapshot;
      l = l.value;
      try {
        var g = u();
        return !Aa(l, g);
      } catch {
        return !0;
      }
    }
    function Yr(l) {
      var u = Da();
      return typeof l == "function" && (l = l()), u.memoizedState = u.baseState = l, l = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Ua, lastRenderedState: l }, u.queue = l, l = l.dispatch = Hd.bind(null, mn, l), [u.memoizedState, l];
    }
    function ol(l, u, g, S) {
      return l = { tag: l, create: u, destroy: g, deps: S, next: null }, u = mn.updateQueue, u === null ? (u = { lastEffect: null, stores: null }, mn.updateQueue = u, u.lastEffect = l.next = l) : (g = u.lastEffect, g === null ? u.lastEffect = l.next = l : (S = g.next, g.next = l, l.next = S, u.lastEffect = l)), l;
    }
    function em() {
      return da().memoizedState;
    }
    function Wc(l, u, g, S) {
      var A = Da();
      mn.flags |= l, A.memoizedState = ol(1 | u, g, void 0, S === void 0 ? null : S);
    }
    function Xc(l, u, g, S) {
      var A = da();
      S = S === void 0 ? null : S;
      var D = void 0;
      if (qn !== null) {
        var j = qn.memoizedState;
        if (D = j.destroy, S !== null && Xr(S, j.deps)) {
          A.memoizedState = ol(u, g, D, S);
          return;
        }
      }
      mn.flags |= l, A.memoizedState = ol(1 | u, g, D, S);
    }
    function yu(l, u) {
      return Wc(8390656, 8, l, u);
    }
    function We(l, u) {
      return Xc(2048, 8, l, u);
    }
    function Mi(l, u) {
      return Xc(4, 2, l, u);
    }
    function fn(l, u) {
      return Xc(4, 4, l, u);
    }
    function oo(l, u) {
      if (typeof u == "function")
        return l = l(), u(l), function() {
          u(null);
        };
      if (u != null)
        return l = l(), u.current = l, function() {
          u.current = null;
        };
    }
    function ns(l, u, g) {
      return g = g != null ? g.concat([l]) : null, Xc(4, 4, oo.bind(null, u, l), g);
    }
    function is() {
    }
    function Na(l, u) {
      var g = da();
      u = u === void 0 ? null : u;
      var S = g.memoizedState;
      return S !== null && u !== null && Xr(u, S[1]) ? S[0] : (g.memoizedState = [l, u], l);
    }
    function ll(l, u) {
      var g = da();
      u = u === void 0 ? null : u;
      var S = g.memoizedState;
      return S !== null && u !== null && Xr(u, S[1]) ? S[0] : (l = l(), g.memoizedState = [l, u], l);
    }
    function ul(l, u) {
      var g = Sn;
      Sn = g !== 0 && 4 > g ? g : 4, l(!0);
      var S = On.transition;
      On.transition = {};
      try {
        l(!1), u();
      } finally {
        Sn = g, On.transition = S;
      }
    }
    function cl() {
      return da().memoizedState;
    }
    function Bd(l, u, g) {
      var S = Os(l);
      g = { lane: S, action: g, hasEagerState: !1, eagerState: null, next: null }, Yc(l) ? jc(u, g) : (qc(l, u, g), g = Ji(), l = qr(l, S, g), l !== null && Zc(l, u, S));
    }
    function Hd(l, u, g) {
      var S = Os(l), A = { lane: S, action: g, hasEagerState: !1, eagerState: null, next: null };
      if (Yc(l))
        jc(u, A);
      else {
        qc(l, u, A);
        var D = l.alternate;
        if (l.lanes === 0 && (D === null || D.lanes === 0) && (D = u.lastRenderedReducer, D !== null))
          try {
            var j = u.lastRenderedState, oe = D(j, g);
            if (A.hasEagerState = !0, A.eagerState = oe, Aa(oe, j))
              return;
          } catch {
          } finally {
          }
        g = Ji(), l = qr(l, S, g), l !== null && Zc(l, u, S);
      }
    }
    function Yc(l) {
      var u = l.alternate;
      return l === mn || u !== null && u === mn;
    }
    function jc(l, u) {
      Pa = il = !0;
      var g = l.pending;
      g === null ? u.next = u : (u.next = g.next, g.next = u), l.pending = u;
    }
    function qc(l, u, g) {
      mi !== null && l.mode & 1 && !(an & 2) ? (l = u.interleaved, l === null ? (g.next = g, la === null ? la = [u] : la.push(u)) : (g.next = l.next, l.next = g), u.interleaved = g) : (l = u.pending, l === null ? g.next = g : (g.next = l.next, l.next = g), u.pending = g);
    }
    function Zc(l, u, g) {
      if (g & 4194240) {
        var S = u.lanes;
        S &= l.pendingLanes, g |= S, u.lanes = g, Ed(l, g);
      }
    }
    var fl = { readContext: Vr, useCallback: Si, useContext: Si, useEffect: Si, useImperativeHandle: Si, useInsertionEffect: Si, useLayoutEffect: Si, useMemo: Si, useReducer: Si, useRef: Si, useState: Si, useDebugValue: Si, useDeferredValue: Si, useTransition: Si, useMutableSource: Si, useSyncExternalStore: Si, useId: Si, unstable_isNewReconciler: !1 }, Vd = { readContext: Vr, useCallback: function(l, u) {
      return Da().memoizedState = [l, u === void 0 ? null : u], l;
    }, useContext: Vr, useEffect: yu, useImperativeHandle: function(l, u, g) {
      return g = g != null ? g.concat([l]) : null, Wc(
        4194308,
        4,
        oo.bind(null, u, l),
        g
      );
    }, useLayoutEffect: function(l, u) {
      return Wc(4194308, 4, l, u);
    }, useInsertionEffect: function(l, u) {
      return Wc(4, 2, l, u);
    }, useMemo: function(l, u) {
      var g = Da();
      return u = u === void 0 ? null : u, l = l(), g.memoizedState = [l, u], l;
    }, useReducer: function(l, u, g) {
      var S = Da();
      return u = g !== void 0 ? g(u) : u, S.memoizedState = S.baseState = u, l = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: l, lastRenderedState: u }, S.queue = l, l = l.dispatch = Bd.bind(null, mn, l), [S.memoizedState, l];
    }, useRef: function(l) {
      var u = Da();
      return l = { current: l }, u.memoizedState = l;
    }, useState: Yr, useDebugValue: is, useDeferredValue: function(l) {
      var u = Yr(l), g = u[0], S = u[1];
      return yu(function() {
        var A = On.transition;
        On.transition = {};
        try {
          S(l);
        } finally {
          On.transition = A;
        }
      }, [l]), g;
    }, useTransition: function() {
      var l = Yr(!1), u = l[0];
      return l = ul.bind(null, l[1]), Da().memoizedState = l, [u, l];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(l, u, g) {
      var S = mn, A = Da();
      if (Wn) {
        if (g === void 0)
          throw Error(c(407));
        g = g();
      } else {
        if (g = u(), mi === null)
          throw Error(c(349));
        Cs & 30 || jt(S, u, g);
      }
      A.memoizedState = g;
      var D = { value: g, getSnapshot: u };
      return A.queue = D, yu(_n.bind(null, S, D, l), [l]), S.flags |= 2048, ol(9, Ln.bind(null, S, D, g, u), void 0, null), g;
    }, useId: function() {
      var l = Da(), u = mi.identifierPrefix;
      if (Wn) {
        var g = ts, S = es;
        g = (S & ~(1 << 32 - Hr(S) - 1)).toString(32) + g, u = ":" + u + "R" + g, g = rl++, 0 < g && (u += "H" + g.toString(32)), u += ":";
      } else
        g = al++, u = ":" + u + "r" + g.toString(32) + ":";
      return l.memoizedState = u;
    }, unstable_isNewReconciler: !1 }, kd = {
      readContext: Vr,
      useCallback: Na,
      useContext: Vr,
      useEffect: We,
      useImperativeHandle: ns,
      useInsertionEffect: Mi,
      useLayoutEffect: fn,
      useMemo: ll,
      useReducer: gu,
      useRef: em,
      useState: function() {
        return gu(Ua);
      },
      useDebugValue: is,
      useDeferredValue: function(l) {
        var u = gu(Ua), g = u[0], S = u[1];
        return We(function() {
          var A = On.transition;
          On.transition = {};
          try {
            S(l);
          } finally {
            On.transition = A;
          }
        }, [l]), g;
      },
      useTransition: function() {
        var l = gu(Ua)[0], u = da().memoizedState;
        return [l, u];
      },
      useMutableSource: so,
      useSyncExternalStore: zd,
      useId: cl,
      unstable_isNewReconciler: !1
    }, Gd = {
      readContext: Vr,
      useCallback: Na,
      useContext: Vr,
      useEffect: We,
      useImperativeHandle: ns,
      useInsertionEffect: Mi,
      useLayoutEffect: fn,
      useMemo: ll,
      useReducer: Gc,
      useRef: em,
      useState: function() {
        return Gc(Ua);
      },
      useDebugValue: is,
      useDeferredValue: function(l) {
        var u = Gc(Ua), g = u[0], S = u[1];
        return We(function() {
          var A = On.transition;
          On.transition = {};
          try {
            S(l);
          } finally {
            On.transition = A;
          }
        }, [l]), g;
      },
      useTransition: function() {
        var l = Gc(Ua)[0], u = da().memoizedState;
        return [l, u];
      },
      useMutableSource: so,
      useSyncExternalStore: zd,
      useId: cl,
      unstable_isNewReconciler: !1
    };
    function _u(l, u) {
      try {
        var g = "", S = u;
        do
          g += xy(S), S = S.return;
        while (S);
        var A = g;
      } catch (D) {
        A = `
Error generating stack: ` + D.message + `
` + D.stack;
      }
      return { value: l, source: u, stack: A };
    }
    function xu(l, u) {
      try {
        console.error(u.value);
      } catch (g) {
        setTimeout(function() {
          throw g;
        });
      }
    }
    var Wd = typeof WeakMap == "function" ? WeakMap : Map;
    function Jc(l, u, g) {
      g = $a(-1, g), g.tag = 3, g.payload = { element: null };
      var S = u.value;
      return g.callback = function() {
        wu || (wu = !0, uf = S), xu(l, u);
      }, g;
    }
    function Kc(l, u, g) {
      g = $a(-1, g), g.tag = 3;
      var S = l.type.getDerivedStateFromError;
      if (typeof S == "function") {
        var A = u.value;
        g.payload = function() {
          return S(A);
        }, g.callback = function() {
          xu(l, u);
        };
      }
      var D = l.stateNode;
      return D !== null && typeof D.componentDidCatch == "function" && (g.callback = function() {
        xu(l, u), typeof S != "function" && (Us === null ? Us = /* @__PURE__ */ new Set([this]) : Us.add(this));
        var j = u.stack;
        this.componentDidCatch(u.value, { componentStack: j !== null ? j : "" });
      }), g;
    }
    function Su(l, u, g) {
      var S = l.pingCache;
      if (S === null) {
        S = l.pingCache = new Wd();
        var A = /* @__PURE__ */ new Set();
        S.set(u, A);
      } else
        A = S.get(u), A === void 0 && (A = /* @__PURE__ */ new Set(), S.set(u, A));
      A.has(g) || (A.add(g), l = za.bind(null, l, u, g), u.then(l, l));
    }
    function lo(l) {
      do {
        var u;
        if ((u = l.tag === 13) && (u = l.memoizedState, u = u !== null ? u.dehydrated !== null : !0), u)
          return l;
        l = l.return;
      } while (l !== null);
      return null;
    }
    function Qc(l, u, g, S, A) {
      return l.mode & 1 ? (l.flags |= 65536, l.lanes = A, l) : (l === u ? l.flags |= 65536 : (l.flags |= 128, g.flags |= 131072, g.flags &= -52805, g.tag === 1 && (g.alternate === null ? g.tag = 17 : (u = $a(-1, 1), u.tag = 2, As(g, u))), g.lanes |= 1), l);
    }
    function jr(l) {
      l.flags |= 4;
    }
    function $c(l, u) {
      if (l !== null && l.child === u.child)
        return !0;
      if (u.flags & 16)
        return !1;
      for (l = u.child; l !== null; ) {
        if (l.flags & 12854 || l.subtreeFlags & 12854)
          return !1;
        l = l.sibling;
      }
      return !0;
    }
    var uo, dl, Ls, Mu;
    if (Tt)
      uo = function(l, u) {
        for (var g = u.child; g !== null; ) {
          if (g.tag === 5 || g.tag === 6)
            ue(l, g.stateNode);
          else if (g.tag !== 4 && g.child !== null) {
            g.child.return = g, g = g.child;
            continue;
          }
          if (g === u)
            break;
          for (; g.sibling === null; ) {
            if (g.return === null || g.return === u)
              return;
            g = g.return;
          }
          g.sibling.return = g.return, g = g.sibling;
        }
      }, dl = function() {
      }, Ls = function(l, u, g, S, A) {
        if (l = l.memoizedProps, l !== S) {
          var D = u.stateNode, j = ca(cr.current);
          g = qe(D, g, l, S, A, j), (u.updateQueue = g) && jr(u);
        }
      }, Mu = function(l, u, g, S) {
        g !== S && jr(u);
      };
    else if (Q) {
      uo = function(l, u, g, S) {
        for (var A = u.child; A !== null; ) {
          if (A.tag === 5) {
            var D = A.stateNode;
            g && S && (D = Kt(D, A.type, A.memoizedProps, A)), ue(l, D);
          } else if (A.tag === 6)
            D = A.stateNode, g && S && (D = Un(D, A.memoizedProps, A)), ue(l, D);
          else if (A.tag !== 4) {
            if (A.tag === 22 && A.memoizedState !== null)
              D = A.child, D !== null && (D.return = A), uo(l, A, !0, !0);
            else if (A.child !== null) {
              A.child.return = A, A = A.child;
              continue;
            }
          }
          if (A === u)
            break;
          for (; A.sibling === null; ) {
            if (A.return === null || A.return === u)
              return;
            A = A.return;
          }
          A.sibling.return = A.return, A = A.sibling;
        }
      };
      var hl = function(l, u, g, S) {
        for (var A = u.child; A !== null; ) {
          if (A.tag === 5) {
            var D = A.stateNode;
            g && S && (D = Kt(D, A.type, A.memoizedProps, A)), vt(l, D);
          } else if (A.tag === 6)
            D = A.stateNode, g && S && (D = Un(D, A.memoizedProps, A)), vt(l, D);
          else if (A.tag !== 4) {
            if (A.tag === 22 && A.memoizedState !== null)
              D = A.child, D !== null && (D.return = A), hl(l, A, !0, !0);
            else if (A.child !== null) {
              A.child.return = A, A = A.child;
              continue;
            }
          }
          if (A === u)
            break;
          for (; A.sibling === null; ) {
            if (A.return === null || A.return === u)
              return;
            A = A.return;
          }
          A.sibling.return = A.return, A = A.sibling;
        }
      };
      dl = function(l, u) {
        var g = u.stateNode;
        if (!$c(l, u)) {
          l = g.containerInfo;
          var S = He(l);
          hl(S, u, !1, !1), g.pendingChildren = S, jr(u), Ut(l, S);
        }
      }, Ls = function(l, u, g, S, A) {
        var D = l.stateNode, j = l.memoizedProps;
        if ((l = $c(l, u)) && j === S)
          u.stateNode = D;
        else {
          var oe = u.stateNode, Ae = ca(cr.current), Je = null;
          j !== S && (Je = qe(oe, g, j, S, A, Ae)), l && Je === null ? u.stateNode = D : (D = ut(D, Je, g, j, S, u, l, oe), Pe(D, g, S, A, Ae) && jr(u), u.stateNode = D, l ? jr(u) : uo(D, u, !1, !1));
        }
      }, Mu = function(l, u, g, S) {
        g !== S ? (l = ca(Rs.current), g = ca(cr.current), u.stateNode = it(S, l, g, u), jr(u)) : u.stateNode = l.stateNode;
      };
    } else
      dl = function() {
      }, Ls = function() {
      }, Mu = function() {
      };
    function ha(l, u) {
      if (!Wn)
        switch (l.tailMode) {
          case "hidden":
            u = l.tail;
            for (var g = null; u !== null; )
              u.alternate !== null && (g = u), u = u.sibling;
            g === null ? l.tail = null : g.sibling = null;
            break;
          case "collapsed":
            g = l.tail;
            for (var S = null; g !== null; )
              g.alternate !== null && (S = g), g = g.sibling;
            S === null ? u || l.tail === null ? l.tail = null : l.tail.sibling = null : S.sibling = null;
        }
    }
    function In(l) {
      var u = l.alternate !== null && l.alternate.child === l.child, g = 0, S = 0;
      if (u)
        for (var A = l.child; A !== null; )
          g |= A.lanes | A.childLanes, S |= A.subtreeFlags & 14680064, S |= A.flags & 14680064, A.return = l, A = A.sibling;
      else
        for (A = l.child; A !== null; )
          g |= A.lanes | A.childLanes, S |= A.subtreeFlags, S |= A.flags, A.return = l, A = A.sibling;
      return l.subtreeFlags |= S, l.childLanes = g, u;
    }
    function Sy(l, u, g) {
      var S = u.pendingProps;
      switch (Nd(u), u.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return In(u), null;
        case 1:
          return ei(u.type) && Es(), In(u), null;
        case 3:
          return S = u.stateNode, ro(), An(xn), An(_i), La(), S.pendingContext && (S.context = S.pendingContext, S.pendingContext = null), (l === null || l.child === null) && (cu(u) ? jr(u) : l === null || l.memoizedState.isDehydrated && !(u.flags & 256) || (u.flags |= 1024, Wr !== null && (Cu(Wr), Wr = null))), dl(l, u), In(u), null;
        case 5:
          Rr(u), g = ca(Rs.current);
          var A = u.type;
          if (l !== null && u.stateNode != null)
            Ls(l, u, A, S, g), l.ref !== u.ref && (u.flags |= 512, u.flags |= 2097152);
          else {
            if (!S) {
              if (u.stateNode === null)
                throw Error(c(166));
              return In(u), null;
            }
            if (l = ca(cr.current), cu(u)) {
              if (!ke)
                throw Error(c(175));
              l = st(u.stateNode, u.type, u.memoizedProps, g, l, u, !el), u.updateQueue = l, l !== null && jr(u);
            } else {
              var D = J(A, S, g, l, u);
              uo(D, u, !1, !1), u.stateNode = D, Pe(D, A, S, g, l) && jr(u);
            }
            u.ref !== null && (u.flags |= 512, u.flags |= 2097152);
          }
          return In(u), null;
        case 6:
          if (l && u.stateNode != null)
            Mu(l, u, l.memoizedProps, S);
          else {
            if (typeof S != "string" && u.stateNode === null)
              throw Error(c(166));
            if (l = ca(Rs.current), g = ca(cr.current), cu(u)) {
              if (!ke)
                throw Error(c(176));
              if (l = u.stateNode, S = u.memoizedProps, (g = G(l, S, u, !el)) && (A = Ar, A !== null))
                switch (D = (A.mode & 1) !== 0, A.tag) {
                  case 3:
                    At(A.stateNode.containerInfo, l, S, D);
                    break;
                  case 5:
                    Bt(A.type, A.memoizedProps, A.stateNode, l, S, D);
                }
              g && jr(u);
            } else
              u.stateNode = it(S, l, g, u);
          }
          return In(u), null;
        case 13:
          if (An(Xn), S = u.memoizedState, Wn && Oi !== null && u.mode & 1 && !(u.flags & 128)) {
            for (l = Oi; l; )
              l = Br(l);
            return tl(), u.flags |= 98560, u;
          }
          if (S !== null && S.dehydrated !== null) {
            if (S = cu(u), l === null) {
              if (!S)
                throw Error(c(318));
              if (!ke)
                throw Error(c(344));
              if (l = u.memoizedState, l = l !== null ? l.dehydrated : null, !l)
                throw Error(c(317));
              ae(l, u);
            } else
              tl(), !(u.flags & 128) && (u.memoizedState = null), u.flags |= 4;
            return In(u), null;
          }
          return Wr !== null && (Cu(Wr), Wr = null), u.flags & 128 ? (u.lanes = g, u) : (S = S !== null, g = !1, l === null ? cu(u) : g = l.memoizedState !== null, S && !g && (u.child.flags |= 8192, u.mode & 1 && (l === null || Xn.current & 1 ? Ti === 0 && (Ti = 3) : uh())), u.updateQueue !== null && (u.flags |= 4), In(u), null);
        case 4:
          return ro(), dl(l, u), l === null && Xe(u.stateNode.containerInfo), In(u), null;
        case 10:
          return Pc(u.type._context), In(u), null;
        case 17:
          return ei(u.type) && Es(), In(u), null;
        case 19:
          if (An(Xn), A = u.memoizedState, A === null)
            return In(u), null;
          if (S = (u.flags & 128) !== 0, D = A.rendering, D === null)
            if (S)
              ha(A, !1);
            else {
              if (Ti !== 0 || l !== null && l.flags & 128)
                for (l = u.child; l !== null; ) {
                  if (D = ao(l), D !== null) {
                    for (u.flags |= 128, ha(A, !1), l = D.updateQueue, l !== null && (u.updateQueue = l, u.flags |= 4), u.subtreeFlags = 0, l = g, S = u.child; S !== null; )
                      g = S, A = l, g.flags &= 14680066, D = g.alternate, D === null ? (g.childLanes = 0, g.lanes = A, g.child = null, g.subtreeFlags = 0, g.memoizedProps = null, g.memoizedState = null, g.updateQueue = null, g.dependencies = null, g.stateNode = null) : (g.childLanes = D.childLanes, g.lanes = D.lanes, g.child = D.child, g.subtreeFlags = 0, g.deletions = null, g.memoizedProps = D.memoizedProps, g.memoizedState = D.memoizedState, g.updateQueue = D.updateQueue, g.type = D.type, A = D.dependencies, g.dependencies = A === null ? null : { lanes: A.lanes, firstContext: A.firstContext }), S = S.sibling;
                    return Yt(Xn, Xn.current & 1 | 2), u.child;
                  }
                  l = l.sibling;
                }
              A.tail !== null && ti() > ah && (u.flags |= 128, S = !0, ha(A, !1), u.lanes = 4194304);
            }
          else {
            if (!S)
              if (l = ao(D), l !== null) {
                if (u.flags |= 128, S = !0, l = l.updateQueue, l !== null && (u.updateQueue = l, u.flags |= 4), ha(A, !0), A.tail === null && A.tailMode === "hidden" && !D.alternate && !Wn)
                  return In(u), null;
              } else
                2 * ti() - A.renderingStartTime > ah && g !== 1073741824 && (u.flags |= 128, S = !0, ha(A, !1), u.lanes = 4194304);
            A.isBackwards ? (D.sibling = u.child, u.child = D) : (l = A.last, l !== null ? l.sibling = D : u.child = D, A.last = D);
          }
          return A.tail !== null ? (u = A.tail, A.rendering = u, A.tail = u.sibling, A.renderingStartTime = ti(), u.sibling = null, l = Xn.current, Yt(Xn, S ? l & 1 | 2 : l & 1), u) : (In(u), null);
        case 22:
        case 23:
          return Zr(), S = u.memoizedState !== null, l !== null && l.memoizedState !== null !== S && (u.flags |= 8192), S && u.mode & 1 ? Lr & 1073741824 && (In(u), Tt && u.subtreeFlags & 6 && (u.flags |= 8192)) : In(u), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(c(156, u.tag));
    }
    var kn = f.ReactCurrentOwner, Zi = !1;
    function Pi(l, u, g, S) {
      u.child = l === null ? Vc(u, null, g, S) : nl(u, l.child, g, S);
    }
    function pl(l, u, g, S, A) {
      g = g.render;
      var D = u.ref;
      return Ko(u, A), S = sl(l, u, g, S, D, A), g = vu(), l !== null && !Zi ? (u.updateQueue = l.updateQueue, u.flags &= -2053, l.lanes &= ~A, ii(l, u, A)) : (Wn && g && Ud(u), u.flags |= 1, Pi(l, u, S, A), u.child);
    }
    function Eu(l, u, g, S, A) {
      if (l === null) {
        var D = g.type;
        return typeof D == "function" && !So(D) && D.defaultProps === void 0 && g.compare === null && g.defaultProps === void 0 ? (u.tag = 15, u.type = D, tm(l, u, D, S, A)) : (l = Mo(g.type, null, S, u, u.mode, A), l.ref = u.ref, l.return = u, u.child = l);
      }
      if (D = l.child, !(l.lanes & A)) {
        var j = D.memoizedProps;
        if (g = g.compare, g = g !== null ? g : Cc, g(j, S) && l.ref === u.ref)
          return ii(l, u, A);
      }
      return u.flags |= 1, l = pr(D, S), l.ref = u.ref, l.return = u, u.child = l;
    }
    function tm(l, u, g, S, A) {
      if (l !== null && Cc(l.memoizedProps, S) && l.ref === u.ref)
        if (Zi = !1, (l.lanes & A) !== 0)
          l.flags & 131072 && (Zi = !0);
        else
          return u.lanes = l.lanes, ii(l, u, A);
      return Xd(l, u, g, S, A);
    }
    function nm(l, u, g) {
      var S = u.pendingProps, A = S.children, D = l !== null ? l.memoizedState : null;
      if (S.mode === "hidden")
        if (!(u.mode & 1))
          u.memoizedState = { baseLanes: 0, cachePool: null }, Yt(Sl, Lr), Lr |= g;
        else if (g & 1073741824)
          u.memoizedState = { baseLanes: 0, cachePool: null }, S = D !== null ? D.baseLanes : g, Yt(Sl, Lr), Lr |= S;
        else
          return l = D !== null ? D.baseLanes | g : g, u.lanes = u.childLanes = 1073741824, u.memoizedState = { baseLanes: l, cachePool: null }, u.updateQueue = null, Yt(Sl, Lr), Lr |= l, null;
      else
        D !== null ? (S = D.baseLanes | g, u.memoizedState = null) : S = g, Yt(Sl, Lr), Lr |= S;
      return Pi(l, u, A, g), u.child;
    }
    function im(l, u) {
      var g = u.ref;
      (l === null && g !== null || l !== null && l.ref !== g) && (u.flags |= 512, u.flags |= 2097152);
    }
    function Xd(l, u, g, S, A) {
      var D = ei(g) ? wr : _i.current;
      return D = $n(u, D), Ko(u, A), g = sl(l, u, g, S, D, A), S = vu(), l !== null && !Zi ? (u.updateQueue = l.updateQueue, u.flags &= -2053, l.lanes &= ~A, ii(l, u, A)) : (Wn && S && Ud(u), u.flags |= 1, Pi(l, u, g, A), u.child);
    }
    function ef(l, u, g, S, A) {
      if (ei(g)) {
        var D = !0;
        Ts(u);
      } else
        D = !1;
      if (Ko(u, A), u.stateNode === null)
        l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), Kp(u, g, S), Dd(u, g, S, A), S = !0;
      else if (l === null) {
        var j = u.stateNode, oe = u.memoizedProps;
        j.props = oe;
        var Ae = j.context, Je = g.contextType;
        typeof Je == "object" && Je !== null ? Je = Vr(Je) : (Je = ei(g) ? wr : _i.current, Je = $n(u, Je));
        var nt = g.getDerivedStateFromProps, Wt = typeof nt == "function" || typeof j.getSnapshotBeforeUpdate == "function";
        Wt || typeof j.UNSAFE_componentWillReceiveProps != "function" && typeof j.componentWillReceiveProps != "function" || (oe !== S || Ae !== Je) && Qp(u, j, S, Je), Ca = !1;
        var zt = u.memoizedState;
        j.state = zt, Uc(u, S, j, A), Ae = u.memoizedState, oe !== S || zt !== Ae || xn.current || Ca ? (typeof nt == "function" && (Nc(u, g, nt, S), Ae = u.memoizedState), (oe = Ca || Jp(u, g, oe, S, zt, Ae, Je)) ? (Wt || typeof j.UNSAFE_componentWillMount != "function" && typeof j.componentWillMount != "function" || (typeof j.componentWillMount == "function" && j.componentWillMount(), typeof j.UNSAFE_componentWillMount == "function" && j.UNSAFE_componentWillMount()), typeof j.componentDidMount == "function" && (u.flags |= 4194308)) : (typeof j.componentDidMount == "function" && (u.flags |= 4194308), u.memoizedProps = S, u.memoizedState = Ae), j.props = S, j.state = Ae, j.context = Je, S = oe) : (typeof j.componentDidMount == "function" && (u.flags |= 4194308), S = !1);
      } else {
        j = u.stateNode, uu(l, u), oe = u.memoizedProps, Je = u.type === u.elementType ? oe : oa(u.type, oe), j.props = Je, Wt = u.pendingProps, zt = j.context, Ae = g.contextType, typeof Ae == "object" && Ae !== null ? Ae = Vr(Ae) : (Ae = ei(g) ? wr : _i.current, Ae = $n(u, Ae));
        var Bn = g.getDerivedStateFromProps;
        (nt = typeof Bn == "function" || typeof j.getSnapshotBeforeUpdate == "function") || typeof j.UNSAFE_componentWillReceiveProps != "function" && typeof j.componentWillReceiveProps != "function" || (oe !== Wt || zt !== Ae) && Qp(u, j, S, Ae), Ca = !1, zt = u.memoizedState, j.state = zt, Uc(u, S, j, A);
        var Ot = u.memoizedState;
        oe !== Wt || zt !== Ot || xn.current || Ca ? (typeof Bn == "function" && (Nc(u, g, Bn, S), Ot = u.memoizedState), (Je = Ca || Jp(u, g, Je, S, zt, Ot, Ae) || !1) ? (nt || typeof j.UNSAFE_componentWillUpdate != "function" && typeof j.componentWillUpdate != "function" || (typeof j.componentWillUpdate == "function" && j.componentWillUpdate(
          S,
          Ot,
          Ae
        ), typeof j.UNSAFE_componentWillUpdate == "function" && j.UNSAFE_componentWillUpdate(S, Ot, Ae)), typeof j.componentDidUpdate == "function" && (u.flags |= 4), typeof j.getSnapshotBeforeUpdate == "function" && (u.flags |= 1024)) : (typeof j.componentDidUpdate != "function" || oe === l.memoizedProps && zt === l.memoizedState || (u.flags |= 4), typeof j.getSnapshotBeforeUpdate != "function" || oe === l.memoizedProps && zt === l.memoizedState || (u.flags |= 1024), u.memoizedProps = S, u.memoizedState = Ot), j.props = S, j.state = Ot, j.context = Ae, S = Je) : (typeof j.componentDidUpdate != "function" || oe === l.memoizedProps && zt === l.memoizedState || (u.flags |= 4), typeof j.getSnapshotBeforeUpdate != "function" || oe === l.memoizedProps && zt === l.memoizedState || (u.flags |= 1024), S = !1);
      }
      return Yd(l, u, g, S, D, A);
    }
    function Yd(l, u, g, S, A, D) {
      im(l, u);
      var j = (u.flags & 128) !== 0;
      if (!S && !j)
        return A && qo(u, g, !1), ii(l, u, D);
      S = u.stateNode, kn.current = u;
      var oe = j && typeof g.getDerivedStateFromError != "function" ? null : S.render();
      return u.flags |= 1, l !== null && j ? (u.child = nl(u, l.child, null, D), u.child = nl(u, null, oe, D)) : Pi(l, u, oe, D), u.memoizedState = S.state, A && qo(u, g, !0), u.child;
    }
    function tf(l) {
      var u = l.stateNode;
      u.pendingContext ? qi(l, u.pendingContext, u.pendingContext !== u.context) : u.context && qi(l, u.context, !1), kc(l, u.containerInfo);
    }
    function jd(l, u, g, S, A) {
      return tl(), fu(A), u.flags |= 256, Pi(l, u, g, S), u.child;
    }
    var nf = { dehydrated: null, treeContext: null, retryLane: 0 };
    function co(l) {
      return { baseLanes: l, cachePool: null };
    }
    function rm(l, u, g) {
      var S = u.pendingProps, A = Xn.current, D = !1, j = (u.flags & 128) !== 0, oe;
      if ((oe = j) || (oe = l !== null && l.memoizedState === null ? !1 : (A & 2) !== 0), oe ? (D = !0, u.flags &= -129) : (l === null || l.memoizedState !== null) && (A |= 1), Yt(Xn, A & 1), l === null)
        return Bc(u), l = u.memoizedState, l !== null && (l = l.dehydrated, l !== null) ? (u.mode & 1 ? $i(l) ? u.lanes = 8 : u.lanes = 1073741824 : u.lanes = 1, null) : (A = S.children, l = S.fallback, D ? (S = u.mode, D = u.child, A = { mode: "hidden", children: A }, !(S & 1) && D !== null ? (D.childLanes = 0, D.pendingProps = A) : D = Du(A, S, 0, null), l = Fs(l, S, g, null), D.return = u, l.return = u, D.sibling = l, u.child = D, u.child.memoizedState = co(g), u.memoizedState = nf, l) : rf(u, A));
      if (A = l.memoizedState, A !== null) {
        if (oe = A.dehydrated, oe !== null) {
          if (j)
            return u.flags & 256 ? (u.flags &= -257, Oa(l, u, g, Error(c(422)))) : u.memoizedState !== null ? (u.child = l.child, u.flags |= 128, null) : (D = S.fallback, A = u.mode, S = Du({ mode: "visible", children: S.children }, A, 0, null), D = Fs(D, A, g, null), D.flags |= 2, S.return = u, D.return = u, S.sibling = D, u.child = S, u.mode & 1 && nl(
              u,
              l.child,
              null,
              g
            ), u.child.memoizedState = co(g), u.memoizedState = nf, D);
          if (!(u.mode & 1))
            u = Oa(l, u, g, null);
          else if ($i(oe))
            u = Oa(l, u, g, Error(c(419)));
          else if (S = (g & l.childLanes) !== 0, Zi || S) {
            if (S = mi, S !== null) {
              switch (g & -g) {
                case 4:
                  D = 2;
                  break;
                case 16:
                  D = 8;
                  break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                  D = 32;
                  break;
                case 536870912:
                  D = 268435456;
                  break;
                default:
                  D = 0;
              }
              S = D & (S.suspendedLanes | g) ? 0 : D, S !== 0 && S !== A.retryLane && (A.retryLane = S, qr(l, S, -1));
            }
            uh(), u = Oa(l, u, g, Error(c(421)));
          } else
            eo(oe) ? (u.flags |= 128, u.child = l.child, u = by.bind(null, l), Ka(oe, u), u = null) : (g = A.treeContext, ke && (Oi = Fe(oe), Ar = u, Wn = !0, Wr = null, el = !1, g !== null && (kr[Gr++] = es, kr[Gr++] = ts, kr[Gr++] = to, es = g.id, ts = g.overflow, to = u)), u = rf(u, u.pendingProps.children), u.flags |= 4096);
          return u;
        }
        return D ? (S = sm(l, u, S.children, S.fallback, g), D = u.child, A = l.child.memoizedState, D.memoizedState = A === null ? co(g) : { baseLanes: A.baseLanes | g, cachePool: null }, D.childLanes = l.childLanes & ~g, u.memoizedState = nf, S) : (g = am(l, u, S.children, g), u.memoizedState = null, g);
      }
      return D ? (S = sm(l, u, S.children, S.fallback, g), D = u.child, A = l.child.memoizedState, D.memoizedState = A === null ? co(g) : { baseLanes: A.baseLanes | g, cachePool: null }, D.childLanes = l.childLanes & ~g, u.memoizedState = nf, S) : (g = am(l, u, S.children, g), u.memoizedState = null, g);
    }
    function rf(l, u) {
      return u = Du({ mode: "visible", children: u }, l.mode, 0, null), u.return = l, l.child = u;
    }
    function am(l, u, g, S) {
      var A = l.child;
      return l = A.sibling, g = pr(A, { mode: "visible", children: g }), !(u.mode & 1) && (g.lanes = S), g.return = u, g.sibling = null, l !== null && (S = u.deletions, S === null ? (u.deletions = [l], u.flags |= 16) : S.push(l)), u.child = g;
    }
    function sm(l, u, g, S, A) {
      var D = u.mode;
      l = l.child;
      var j = l.sibling, oe = { mode: "hidden", children: g };
      return !(D & 1) && u.child !== l ? (g = u.child, g.childLanes = 0, g.pendingProps = oe, u.deletions = null) : (g = pr(l, oe), g.subtreeFlags = l.subtreeFlags & 14680064), j !== null ? S = pr(j, S) : (S = Fs(S, D, A, null), S.flags |= 2), S.return = u, g.return = u, g.sibling = S, u.child = g, S;
    }
    function Oa(l, u, g, S) {
      return S !== null && fu(S), nl(u, l.child, null, g), l = rf(u, u.pendingProps.children), l.flags |= 2, u.memoizedState = null, l;
    }
    function ml(l, u, g) {
      l.lanes |= u;
      var S = l.alternate;
      S !== null && (S.lanes |= u), Ld(l.return, u, g);
    }
    function rs(l, u, g, S, A) {
      var D = l.memoizedState;
      D === null ? l.memoizedState = { isBackwards: u, rendering: null, renderingStartTime: 0, last: S, tail: g, tailMode: A } : (D.isBackwards = u, D.rendering = null, D.renderingStartTime = 0, D.last = S, D.tail = g, D.tailMode = A);
    }
    function af(l, u, g) {
      var S = u.pendingProps, A = S.revealOrder, D = S.tail;
      if (Pi(l, u, S.children, g), S = Xn.current, S & 2)
        S = S & 1 | 2, u.flags |= 128;
      else {
        if (l !== null && l.flags & 128)
          e:
            for (l = u.child; l !== null; ) {
              if (l.tag === 13)
                l.memoizedState !== null && ml(l, g, u);
              else if (l.tag === 19)
                ml(l, g, u);
              else if (l.child !== null) {
                l.child.return = l, l = l.child;
                continue;
              }
              if (l === u)
                break e;
              for (; l.sibling === null; ) {
                if (l.return === null || l.return === u)
                  break e;
                l = l.return;
              }
              l.sibling.return = l.return, l = l.sibling;
            }
        S &= 1;
      }
      if (Yt(Xn, S), !(u.mode & 1))
        u.memoizedState = null;
      else
        switch (A) {
          case "forwards":
            for (g = u.child, A = null; g !== null; )
              l = g.alternate, l !== null && ao(l) === null && (A = g), g = g.sibling;
            g = A, g === null ? (A = u.child, u.child = null) : (A = g.sibling, g.sibling = null), rs(u, !1, A, g, D);
            break;
          case "backwards":
            for (g = null, A = u.child, u.child = null; A !== null; ) {
              if (l = A.alternate, l !== null && ao(l) === null) {
                u.child = A;
                break;
              }
              l = A.sibling, A.sibling = g, g = A, A = l;
            }
            rs(u, !0, g, null, D);
            break;
          case "together":
            rs(u, !1, null, null, void 0);
            break;
          default:
            u.memoizedState = null;
        }
      return u.child;
    }
    function ii(l, u, g) {
      if (l !== null && (u.dependencies = l.dependencies), Fa |= u.lanes, !(g & u.childLanes))
        return null;
      if (l !== null && u.child !== l.child)
        throw Error(c(153));
      if (u.child !== null) {
        for (l = u.child, g = pr(l, l.pendingProps), u.child = g, g.return = u; l.sibling !== null; )
          l = l.sibling, g = g.sibling = pr(l, l.pendingProps), g.return = u;
        g.sibling = null;
      }
      return u.child;
    }
    function vl(l, u, g) {
      switch (u.tag) {
        case 3:
          tf(u), tl();
          break;
        case 5:
          mu(u);
          break;
        case 1:
          ei(u.type) && Ts(u);
          break;
        case 4:
          kc(u, u.stateNode.containerInfo);
          break;
        case 10:
          Cd(u, u.type._context, u.memoizedProps.value);
          break;
        case 13:
          var S = u.memoizedState;
          if (S !== null)
            return S.dehydrated !== null ? (Yt(Xn, Xn.current & 1), u.flags |= 128, null) : g & u.child.childLanes ? rm(l, u, g) : (Yt(Xn, Xn.current & 1), l = ii(l, u, g), l !== null ? l.sibling : null);
          Yt(Xn, Xn.current & 1);
          break;
        case 19:
          if (S = (g & u.childLanes) !== 0, l.flags & 128) {
            if (S)
              return af(
                l,
                u,
                g
              );
            u.flags |= 128;
          }
          var A = u.memoizedState;
          if (A !== null && (A.rendering = null, A.tail = null, A.lastEffect = null), Yt(Xn, Xn.current), S)
            break;
          return null;
        case 22:
        case 23:
          return u.lanes = 0, nm(l, u, g);
      }
      return ii(l, u, g);
    }
    function Qt(l, u) {
      switch (Nd(u), u.tag) {
        case 1:
          return ei(u.type) && Es(), l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
        case 3:
          return ro(), An(xn), An(_i), La(), l = u.flags, l & 65536 && !(l & 128) ? (u.flags = l & -65537 | 128, u) : null;
        case 5:
          return Rr(u), null;
        case 13:
          if (An(Xn), l = u.memoizedState, l !== null && l.dehydrated !== null) {
            if (u.alternate === null)
              throw Error(c(340));
            tl();
          }
          return l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
        case 19:
          return An(Xn), null;
        case 4:
          return ro(), null;
        case 10:
          return Pc(u.type._context), null;
        case 22:
        case 23:
          return Zr(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var fo = !1, Ps = !1, sM = typeof WeakSet == "function" ? WeakSet : Set, mt = null;
    function gl(l, u) {
      var g = l.ref;
      if (g !== null)
        if (typeof g == "function")
          try {
            g(null);
          } catch (S) {
            En(l, u, S);
          }
        else
          g.current = null;
    }
    function ho(l, u, g) {
      try {
        g();
      } catch (S) {
        En(l, u, S);
      }
    }
    var om = !1;
    function lm(l, u) {
      for (le(l.containerInfo), mt = u; mt !== null; )
        if (l = mt, u = l.child, (l.subtreeFlags & 1028) !== 0 && u !== null)
          u.return = l, mt = u;
        else
          for (; mt !== null; ) {
            l = mt;
            try {
              var g = l.alternate;
              if (l.flags & 1024)
                switch (l.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (g !== null) {
                      var S = g.memoizedProps, A = g.memoizedState, D = l.stateNode, j = D.getSnapshotBeforeUpdate(l.elementType === l.type ? S : oa(l.type, S), A);
                      D.__reactInternalSnapshotBeforeUpdate = j;
                    }
                    break;
                  case 3:
                    Tt && Be(l.stateNode.containerInfo);
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error(c(163));
                }
            } catch (oe) {
              En(l, l.return, oe);
            }
            if (u = l.sibling, u !== null) {
              u.return = l.return, mt = u;
              break;
            }
            mt = l.return;
          }
      return g = om, om = !1, g;
    }
    function po(l, u, g) {
      var S = u.updateQueue;
      if (S = S !== null ? S.lastEffect : null, S !== null) {
        var A = S = S.next;
        do {
          if ((A.tag & l) === l) {
            var D = A.destroy;
            A.destroy = void 0, D !== void 0 && ho(u, g, D);
          }
          A = A.next;
        } while (A !== S);
      }
    }
    function mo(l, u) {
      if (u = u.updateQueue, u = u !== null ? u.lastEffect : null, u !== null) {
        var g = u = u.next;
        do {
          if ((g.tag & l) === l) {
            var S = g.create;
            g.destroy = S();
          }
          g = g.next;
        } while (g !== u);
      }
    }
    function qd(l) {
      var u = l.ref;
      if (u !== null) {
        var g = l.stateNode;
        switch (l.tag) {
          case 5:
            l = Te(g);
            break;
          default:
            l = g;
        }
        typeof u == "function" ? u(l) : u.current = l;
      }
    }
    function Zd(l, u, g) {
      if (wa && typeof wa.onCommitFiberUnmount == "function")
        try {
          wa.onCommitFiberUnmount(Ac, u);
        } catch {
        }
      switch (u.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          if (l = u.updateQueue, l !== null && (l = l.lastEffect, l !== null)) {
            var S = l = l.next;
            do {
              var A = S, D = A.destroy;
              A = A.tag, D !== void 0 && (A & 2 || A & 4) && ho(u, g, D), S = S.next;
            } while (S !== l);
          }
          break;
        case 1:
          if (gl(u, g), l = u.stateNode, typeof l.componentWillUnmount == "function")
            try {
              l.props = u.memoizedProps, l.state = u.memoizedState, l.componentWillUnmount();
            } catch (j) {
              En(
                u,
                g,
                j
              );
            }
          break;
        case 5:
          gl(u, g);
          break;
        case 4:
          Tt ? Ei(l, u, g) : Q && Q && (u = u.stateNode.containerInfo, g = He(u), Nt(u, g));
      }
    }
    function Jd(l, u, g) {
      for (var S = u; ; )
        if (Zd(l, S, g), S.child === null || Tt && S.tag === 4) {
          if (S === u)
            break;
          for (; S.sibling === null; ) {
            if (S.return === null || S.return === u)
              return;
            S = S.return;
          }
          S.sibling.return = S.return, S = S.sibling;
        } else
          S.child.return = S, S = S.child;
    }
    function pa(l) {
      var u = l.alternate;
      u !== null && (l.alternate = null, pa(u)), l.child = null, l.deletions = null, l.sibling = null, l.tag === 5 && (u = l.stateNode, u !== null && Mt(u)), l.stateNode = null, l.return = null, l.dependencies = null, l.memoizedProps = null, l.memoizedState = null, l.pendingProps = null, l.stateNode = null, l.updateQueue = null;
    }
    function yl(l) {
      return l.tag === 5 || l.tag === 3 || l.tag === 4;
    }
    function _l(l) {
      e:
        for (; ; ) {
          for (; l.sibling === null; ) {
            if (l.return === null || yl(l.return))
              return null;
            l = l.return;
          }
          for (l.sibling.return = l.return, l = l.sibling; l.tag !== 5 && l.tag !== 6 && l.tag !== 18; ) {
            if (l.flags & 2 || l.child === null || l.tag === 4)
              continue e;
            l.child.return = l, l = l.child;
          }
          if (!(l.flags & 2))
            return l.stateNode;
        }
    }
    function sf(l) {
      if (Tt) {
        e: {
          for (var u = l.return; u !== null; ) {
            if (yl(u))
              break e;
            u = u.return;
          }
          throw Error(c(160));
        }
        var g = u;
        switch (g.tag) {
          case 5:
            u = g.stateNode, g.flags & 32 && (Ee(u), g.flags &= -33), g = _l(l), Cr(l, g, u);
            break;
          case 3:
          case 4:
            u = g.stateNode.containerInfo, g = _l(l), vo(l, g, u);
            break;
          default:
            throw Error(c(161));
        }
      }
    }
    function vo(l, u, g) {
      var S = l.tag;
      if (S === 5 || S === 6)
        l = l.stateNode, u ? Ne(g, l, u) : bt(g, l);
      else if (S !== 4 && (l = l.child, l !== null))
        for (vo(l, u, g), l = l.sibling; l !== null; )
          vo(l, u, g), l = l.sibling;
    }
    function Cr(l, u, g) {
      var S = l.tag;
      if (S === 5 || S === 6)
        l = l.stateNode, u ? yt(g, l, u) : Ze(g, l);
      else if (S !== 4 && (l = l.child, l !== null))
        for (Cr(l, u, g), l = l.sibling; l !== null; )
          Cr(l, u, g), l = l.sibling;
    }
    function Ei(l, u, g) {
      for (var S = u, A = !1, D, j; ; ) {
        if (!A) {
          A = S.return;
          e:
            for (; ; ) {
              if (A === null)
                throw Error(c(160));
              switch (D = A.stateNode, A.tag) {
                case 5:
                  j = !1;
                  break e;
                case 3:
                  D = D.containerInfo, j = !0;
                  break e;
                case 4:
                  D = D.containerInfo, j = !0;
                  break e;
              }
              A = A.return;
            }
          A = !0;
        }
        if (S.tag === 5 || S.tag === 6)
          Jd(l, S, g), j ? ee(D, S.stateNode) : rt(D, S.stateNode);
        else if (S.tag === 18)
          j ? ft(D, S.stateNode) : tt(D, S.stateNode);
        else if (S.tag === 4) {
          if (S.child !== null) {
            D = S.stateNode.containerInfo, j = !0, S.child.return = S, S = S.child;
            continue;
          }
        } else if (Zd(l, S, g), S.child !== null) {
          S.child.return = S, S = S.child;
          continue;
        }
        if (S === u)
          break;
        for (; S.sibling === null; ) {
          if (S.return === null || S.return === u)
            return;
          S = S.return, S.tag === 4 && (A = !1);
        }
        S.sibling.return = S.return, S = S.sibling;
      }
    }
    function Kd(l, u) {
      if (Tt) {
        switch (u.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            po(3, u, u.return), mo(3, u), po(5, u, u.return);
            return;
          case 1:
            return;
          case 5:
            var g = u.stateNode;
            if (g != null) {
              var S = u.memoizedProps;
              l = l !== null ? l.memoizedProps : S;
              var A = u.type, D = u.updateQueue;
              u.updateQueue = null, D !== null && Ge(g, D, A, l, S, u);
            }
            return;
          case 6:
            if (u.stateNode === null)
              throw Error(c(162));
            g = u.memoizedProps, Ke(u.stateNode, l !== null ? l.memoizedProps : g, g);
            return;
          case 3:
            ke && l !== null && l.memoizedState.isDehydrated && se(u.stateNode.containerInfo);
            return;
          case 12:
            return;
          case 13:
            of(u);
            return;
          case 19:
            of(u);
            return;
          case 17:
            return;
        }
        throw Error(c(163));
      }
      switch (u.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          po(3, u, u.return), mo(3, u), po(5, u, u.return);
          return;
        case 12:
          return;
        case 13:
          of(u);
          return;
        case 19:
          of(u);
          return;
        case 3:
          ke && l !== null && l.memoizedState.isDehydrated && se(u.stateNode.containerInfo);
          break;
        case 22:
        case 23:
          return;
      }
      e:
        if (Q) {
          switch (u.tag) {
            case 1:
            case 5:
            case 6:
              break e;
            case 3:
            case 4:
              u = u.stateNode, Nt(u.containerInfo, u.pendingChildren);
              break e;
          }
          throw Error(c(163));
        }
    }
    function of(l) {
      var u = l.updateQueue;
      if (u !== null) {
        l.updateQueue = null;
        var g = l.stateNode;
        g === null && (g = l.stateNode = new sM()), u.forEach(function(S) {
          var A = xo.bind(null, l, S);
          g.has(S) || (g.add(S), S.then(A, A));
        });
      }
    }
    function My(l, u) {
      for (mt = u; mt !== null; ) {
        u = mt;
        var g = u.deletions;
        if (g !== null)
          for (var S = 0; S < g.length; S++) {
            var A = g[S];
            try {
              var D = l;
              Tt ? Ei(D, A, u) : Jd(D, A, u);
              var j = A.alternate;
              j !== null && (j.return = null), A.return = null;
            } catch (Lt) {
              En(A, u, Lt);
            }
          }
        if (g = u.child, u.subtreeFlags & 12854 && g !== null)
          g.return = u, mt = g;
        else
          for (; mt !== null; ) {
            u = mt;
            try {
              var oe = u.flags;
              if (oe & 32 && Tt && Ee(u.stateNode), oe & 512) {
                var Ae = u.alternate;
                if (Ae !== null) {
                  var Je = Ae.ref;
                  Je !== null && (typeof Je == "function" ? Je(null) : Je.current = null);
                }
              }
              if (oe & 8192)
                switch (u.tag) {
                  case 13:
                    if (u.memoizedState !== null) {
                      var nt = u.alternate;
                      (nt === null || nt.memoizedState === null) && (rh = ti());
                    }
                    break;
                  case 22:
                    var Wt = u.memoizedState !== null, zt = u.alternate, Bn = zt !== null && zt.memoizedState !== null;
                    if (g = u, Tt) {
                      e:
                        if (S = g, A = Wt, D = null, Tt)
                          for (var Ot = S; ; ) {
                            if (Ot.tag === 5) {
                              if (D === null) {
                                D = Ot;
                                var zi = Ot.stateNode;
                                A ? xe(zi) : ze(Ot.stateNode, Ot.memoizedProps);
                              }
                            } else if (Ot.tag === 6) {
                              if (D === null) {
                                var tr = Ot.stateNode;
                                A ? k(tr) : Ce(tr, Ot.memoizedProps);
                              }
                            } else if ((Ot.tag !== 22 && Ot.tag !== 23 || Ot.memoizedState === null || Ot === S) && Ot.child !== null) {
                              Ot.child.return = Ot, Ot = Ot.child;
                              continue;
                            }
                            if (Ot === S)
                              break;
                            for (; Ot.sibling === null; ) {
                              if (Ot.return === null || Ot.return === S)
                                break e;
                              D === Ot && (D = null), Ot = Ot.return;
                            }
                            D === Ot && (D = null), Ot.sibling.return = Ot.return, Ot = Ot.sibling;
                          }
                    }
                    if (Wt && !Bn && g.mode & 1) {
                      mt = g;
                      for (var ge = g.child; ge !== null; ) {
                        for (g = mt = ge; mt !== null; ) {
                          S = mt;
                          var ce = S.child;
                          switch (S.tag) {
                            case 0:
                            case 11:
                            case 14:
                            case 15:
                              po(4, S, S.return);
                              break;
                            case 1:
                              gl(S, S.return);
                              var be = S.stateNode;
                              if (typeof be.componentWillUnmount == "function") {
                                var pt = S.return;
                                try {
                                  be.props = S.memoizedProps, be.state = S.memoizedState, be.componentWillUnmount();
                                } catch (Lt) {
                                  En(
                                    S,
                                    pt,
                                    Lt
                                  );
                                }
                              }
                              break;
                            case 5:
                              gl(S, S.return);
                              break;
                            case 22:
                              if (S.memoizedState !== null) {
                                cm(g);
                                continue;
                              }
                          }
                          ce !== null ? (ce.return = S, mt = ce) : cm(g);
                        }
                        ge = ge.sibling;
                      }
                    }
                }
              switch (oe & 4102) {
                case 2:
                  sf(u), u.flags &= -3;
                  break;
                case 6:
                  sf(u), u.flags &= -3, Kd(u.alternate, u);
                  break;
                case 4096:
                  u.flags &= -4097;
                  break;
                case 4100:
                  u.flags &= -4097, Kd(u.alternate, u);
                  break;
                case 4:
                  Kd(u.alternate, u);
              }
            } catch (Lt) {
              En(u, u.return, Lt);
            }
            if (g = u.sibling, g !== null) {
              g.return = u.return, mt = g;
              break;
            }
            mt = u.return;
          }
      }
    }
    function um(l, u, g) {
      mt = l, Qd(l);
    }
    function Qd(l, u, g) {
      for (var S = (l.mode & 1) !== 0; mt !== null; ) {
        var A = mt, D = A.child;
        if (A.tag === 22 && S) {
          var j = A.memoizedState !== null || fo;
          if (!j) {
            var oe = A.alternate, Ae = oe !== null && oe.memoizedState !== null || Ps;
            oe = fo;
            var Je = Ps;
            if (fo = j, (Ps = Ae) && !Je)
              for (mt = A; mt !== null; )
                j = mt, Ae = j.child, j.tag === 22 && j.memoizedState !== null ? fm(A) : Ae !== null ? (Ae.return = j, mt = Ae) : fm(A);
            for (; D !== null; )
              mt = D, Qd(D), D = D.sibling;
            mt = A, fo = oe, Ps = Je;
          }
          $d(l);
        } else
          A.subtreeFlags & 8772 && D !== null ? (D.return = A, mt = D) : $d(l);
      }
    }
    function $d(l) {
      for (; mt !== null; ) {
        var u = mt;
        if (u.flags & 8772) {
          var g = u.alternate;
          try {
            if (u.flags & 8772)
              switch (u.tag) {
                case 0:
                case 11:
                case 15:
                  Ps || mo(5, u);
                  break;
                case 1:
                  var S = u.stateNode;
                  if (u.flags & 4 && !Ps)
                    if (g === null)
                      S.componentDidMount();
                    else {
                      var A = u.elementType === u.type ? g.memoizedProps : oa(u.type, g.memoizedProps);
                      S.componentDidUpdate(A, g.memoizedState, S.__reactInternalSnapshotBeforeUpdate);
                    }
                  var D = u.updateQueue;
                  D !== null && qp(u, D, S);
                  break;
                case 3:
                  var j = u.updateQueue;
                  if (j !== null) {
                    if (g = null, u.child !== null)
                      switch (u.child.tag) {
                        case 5:
                          g = Te(u.child.stateNode);
                          break;
                        case 1:
                          g = u.child.stateNode;
                      }
                    qp(u, j, g);
                  }
                  break;
                case 5:
                  var oe = u.stateNode;
                  g === null && u.flags & 4 && Se(oe, u.type, u.memoizedProps, u);
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (ke && u.memoizedState === null) {
                    var Ae = u.alternate;
                    if (Ae !== null) {
                      var Je = Ae.memoizedState;
                      if (Je !== null) {
                        var nt = Je.dehydrated;
                        nt !== null && de(nt);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                  break;
                default:
                  throw Error(c(163));
              }
            Ps || u.flags & 512 && qd(u);
          } catch (Wt) {
            En(u, u.return, Wt);
          }
        }
        if (u === l) {
          mt = null;
          break;
        }
        if (g = u.sibling, g !== null) {
          g.return = u.return, mt = g;
          break;
        }
        mt = u.return;
      }
    }
    function cm(l) {
      for (; mt !== null; ) {
        var u = mt;
        if (u === l) {
          mt = null;
          break;
        }
        var g = u.sibling;
        if (g !== null) {
          g.return = u.return, mt = g;
          break;
        }
        mt = u.return;
      }
    }
    function fm(l) {
      for (; mt !== null; ) {
        var u = mt;
        try {
          switch (u.tag) {
            case 0:
            case 11:
            case 15:
              var g = u.return;
              try {
                mo(4, u);
              } catch (Ae) {
                En(u, g, Ae);
              }
              break;
            case 1:
              var S = u.stateNode;
              if (typeof S.componentDidMount == "function") {
                var A = u.return;
                try {
                  S.componentDidMount();
                } catch (Ae) {
                  En(u, A, Ae);
                }
              }
              var D = u.return;
              try {
                qd(u);
              } catch (Ae) {
                En(u, D, Ae);
              }
              break;
            case 5:
              var j = u.return;
              try {
                qd(u);
              } catch (Ae) {
                En(u, j, Ae);
              }
          }
        } catch (Ae) {
          En(u, u.return, Ae);
        }
        if (u === l) {
          mt = null;
          break;
        }
        var oe = u.sibling;
        if (oe !== null) {
          oe.return = u.return, mt = oe;
          break;
        }
        mt = u.return;
      }
    }
    var lf = 0, ri = 1, go = 2, Tu = 3, as = 4;
    if (typeof Symbol == "function" && Symbol.for) {
      var xl = Symbol.for;
      lf = xl("selector.component"), ri = xl("selector.has_pseudo_class"), go = xl("selector.role"), Tu = xl("selector.test_id"), as = xl("selector.text");
    }
    function eh(l) {
      var u = Re(l);
      if (u != null) {
        if (typeof u.memoizedProps["data-testname"] != "string")
          throw Error(c(364));
        return u;
      }
      if (l = Zt(l), l === null)
        throw Error(c(362));
      return l.stateNode.current;
    }
    function th(l, u) {
      switch (u.$$typeof) {
        case lf:
          if (l.type === u.value)
            return !0;
          break;
        case ri:
          e: {
            u = u.value, l = [l, 0];
            for (var g = 0; g < l.length; ) {
              var S = l[g++], A = l[g++], D = u[A];
              if (S.tag !== 5 || !H(S)) {
                for (; D != null && th(S, D); )
                  A++, D = u[A];
                if (A === u.length) {
                  u = !0;
                  break e;
                } else
                  for (S = S.child; S !== null; )
                    l.push(S, A), S = S.sibling;
              }
            }
            u = !1;
          }
          return u;
        case go:
          if (l.tag === 5 && ye(l.stateNode, u.value))
            return !0;
          break;
        case as:
          if ((l.tag === 5 || l.tag === 6) && (l = X(l), l !== null && 0 <= l.indexOf(u.value)))
            return !0;
          break;
        case Tu:
          if (l.tag === 5 && (l = l.memoizedProps["data-testname"], typeof l == "string" && l.toLowerCase() === u.value.toLowerCase()))
            return !0;
          break;
        default:
          throw Error(c(365));
      }
      return !1;
    }
    function Ds(l) {
      switch (l.$$typeof) {
        case lf:
          return "<" + (B(l.value) || "Unknown") + ">";
        case ri:
          return ":has(" + (Ds(l) || "") + ")";
        case go:
          return '[role="' + l.value + '"]';
        case as:
          return '"' + l.value + '"';
        case Tu:
          return '[data-testname="' + l.value + '"]';
        default:
          throw Error(c(365));
      }
    }
    function Ii(l, u) {
      var g = [];
      l = [l, 0];
      for (var S = 0; S < l.length; ) {
        var A = l[S++], D = l[S++], j = u[D];
        if (A.tag !== 5 || !H(A)) {
          for (; j != null && th(A, j); )
            D++, j = u[D];
          if (D === u.length)
            g.push(A);
          else
            for (A = A.child; A !== null; )
              l.push(A, D), A = A.sibling;
        }
      }
      return g;
    }
    function ht(l, u) {
      if (!Dt)
        throw Error(c(363));
      l = eh(l), l = Ii(l, u), u = [], l = Array.from(l);
      for (var g = 0; g < l.length; ) {
        var S = l[g++];
        if (S.tag === 5)
          H(S) || u.push(S.stateNode);
        else
          for (S = S.child; S !== null; )
            l.push(S), S = S.sibling;
      }
      return u;
    }
    var Ia = Math.ceil, fr = f.ReactCurrentDispatcher, nh = f.ReactCurrentOwner, ai = f.ReactCurrentBatchConfig, an = 0, mi = null, vi = null, vn = 0, Lr = 0, Sl = Xt(0), Ti = 0, Ml = null, Fa = 0, ss = 0, ih = 0, bu = null, dr = null, rh = 0, ah = 1 / 0;
    function El() {
      ah = ti() + 500;
    }
    var wu = !1, uf = null, Us = null, cf = !1, Ns = null, ff = 0, Au = 0, sh = null, Ru = -1, df = 0;
    function Ji() {
      return an & 6 ? ti() : Ru !== -1 ? Ru : Ru = ti();
    }
    function Os(l) {
      return l.mode & 1 ? an & 2 && vn !== 0 ? vn & -vn : _y.transition !== null ? (df === 0 && (l = bc, bc <<= 1, !(bc & 4194240) && (bc = 64), df = l), df) : (l = Sn, l !== 0 ? l : Ue()) : 1;
    }
    function qr(l, u, g) {
      if (50 < Au)
        throw Au = 0, sh = null, Error(c(185));
      var S = Tl(l, u);
      return S === null ? null : (su(S, u, g), (!(an & 2) || S !== mi) && (S === mi && (!(an & 2) && (ss |= u), Ti === 4 && os(S, vn)), hr(S, g), u === 1 && an === 0 && !(l.mode & 1) && (El(), Rc && Ra())), S);
    }
    function Tl(l, u) {
      l.lanes |= u;
      var g = l.alternate;
      for (g !== null && (g.lanes |= u), g = l, l = l.return; l !== null; )
        l.childLanes |= u, g = l.alternate, g !== null && (g.childLanes |= u), g = l, l = l.return;
      return g.tag === 3 ? g.stateNode : null;
    }
    function hr(l, u) {
      var g = l.callbackNode;
      au(l, u);
      var S = wc(l, l === mi ? vn : 0);
      if (S === 0)
        g !== null && Yp(g), l.callbackNode = null, l.callbackPriority = 0;
      else if (u = S & -S, l.callbackPriority !== u) {
        if (g != null && Yp(g), u === 1)
          l.tag === 0 ? yy(dm.bind(null, l)) : Ad(dm.bind(null, l)), lt ? at(function() {
            an === 0 && Ra();
          }) : ws(Td, Ra), g = null;
        else {
          switch (Xp(S)) {
            case 1:
              g = Td;
              break;
            case 4:
              g = py;
              break;
            case 16:
              g = bd;
              break;
            case 536870912:
              g = my;
              break;
            default:
              g = bd;
          }
          g = wl(g, Pr.bind(null, l));
        }
        l.callbackPriority = u, l.callbackNode = g;
      }
    }
    function Pr(l, u) {
      if (Ru = -1, df = 0, an & 6)
        throw Error(c(327));
      var g = l.callbackNode;
      if (_o() && l.callbackNode !== g)
        return null;
      var S = wc(l, l === mi ? vn : 0);
      if (S === 0)
        return null;
      if (S & 30 || S & l.expiredLanes || u)
        u = yo(l, S);
      else {
        u = S;
        var A = an;
        an |= 2;
        var D = pm();
        (mi !== l || vn !== u) && (El(), Is(l, u));
        do
          try {
            mm();
            break;
          } catch (oe) {
            hm(l, oe);
          }
        while (1);
        Rd(), fr.current = D, an = A, vi !== null ? u = 0 : (mi = null, vn = 0, u = Ti);
      }
      if (u !== 0) {
        if (u === 2 && (A = er(l), A !== 0 && (S = A, u = ma(l, A))), u === 1)
          throw g = Ml, Is(l, 0), os(l, S), hr(l, ti()), g;
        if (u === 6)
          os(l, S);
        else {
          if (A = l.current.alternate, !(S & 30) && !oh(A) && (u = yo(l, S), u === 2 && (D = er(l), D !== 0 && (S = D, u = ma(l, D))), u === 1))
            throw g = Ml, Is(l, 0), os(l, S), hr(l, ti()), g;
          switch (l.finishedWork = A, l.finishedLanes = S, u) {
            case 0:
            case 1:
              throw Error(c(345));
            case 2:
              va(l, dr);
              break;
            case 3:
              if (os(l, S), (S & 130023424) === S && (u = rh + 500 - ti(), 10 < u)) {
                if (wc(l, 0) !== 0)
                  break;
                if (A = l.suspendedLanes, (A & S) !== S) {
                  Ji(), l.pingedLanes |= l.suspendedLanes & A;
                  break;
                }
                l.timeoutHandle = gt(va.bind(null, l, dr), u);
                break;
              }
              va(l, dr);
              break;
            case 4:
              if (os(l, S), (S & 4194240) === S)
                break;
              for (u = l.eventTimes, A = -1; 0 < S; ) {
                var j = 31 - Hr(S);
                D = 1 << j, j = u[j], j > A && (A = j), S &= ~D;
              }
              if (S = A, S = ti() - S, S = (120 > S ? 120 : 480 > S ? 480 : 1080 > S ? 1080 : 1920 > S ? 1920 : 3e3 > S ? 3e3 : 4320 > S ? 4320 : 1960 * Ia(S / 1960)) - S, 10 < S) {
                l.timeoutHandle = gt(va.bind(null, l, dr), S);
                break;
              }
              va(l, dr);
              break;
            case 5:
              va(l, dr);
              break;
            default:
              throw Error(c(329));
          }
        }
      }
      return hr(l, ti()), l.callbackNode === g ? Pr.bind(null, l) : null;
    }
    function ma(l, u) {
      var g = bu;
      return l.current.memoizedState.isDehydrated && (Is(l, u).flags |= 256), l = yo(l, u), l !== 2 && (u = dr, dr = g, u !== null && Cu(u)), l;
    }
    function Cu(l) {
      dr === null ? dr = l : dr.push.apply(dr, l);
    }
    function oh(l) {
      for (var u = l; ; ) {
        if (u.flags & 16384) {
          var g = u.updateQueue;
          if (g !== null && (g = g.stores, g !== null))
            for (var S = 0; S < g.length; S++) {
              var A = g[S], D = A.getSnapshot;
              A = A.value;
              try {
                if (!Aa(D(), A))
                  return !1;
              } catch {
                return !1;
              }
            }
        }
        if (g = u.child, u.subtreeFlags & 16384 && g !== null)
          g.return = u, u = g;
        else {
          if (u === l)
            break;
          for (; u.sibling === null; ) {
            if (u.return === null || u.return === l)
              return !0;
            u = u.return;
          }
          u.sibling.return = u.return, u = u.sibling;
        }
      }
      return !0;
    }
    function os(l, u) {
      for (u &= ~ih, u &= ~ss, l.suspendedLanes |= u, l.pingedLanes &= ~u, l = l.expirationTimes; 0 < u; ) {
        var g = 31 - Hr(u), S = 1 << g;
        l[g] = -1, u &= ~S;
      }
    }
    function dm(l) {
      if (an & 6)
        throw Error(c(327));
      _o();
      var u = wc(l, 0);
      if (!(u & 1))
        return hr(l, ti()), null;
      var g = yo(l, u);
      if (l.tag !== 0 && g === 2) {
        var S = er(l);
        S !== 0 && (u = S, g = ma(l, S));
      }
      if (g === 1)
        throw g = Ml, Is(l, 0), os(l, u), hr(l, ti()), g;
      if (g === 6)
        throw Error(c(345));
      return l.finishedWork = l.current.alternate, l.finishedLanes = u, va(l, dr), hr(l, ti()), null;
    }
    function lh(l) {
      Ns !== null && Ns.tag === 0 && !(an & 6) && _o();
      var u = an;
      an |= 1;
      var g = ai.transition, S = Sn;
      try {
        if (ai.transition = null, Sn = 1, l)
          return l();
      } finally {
        Sn = S, ai.transition = g, an = u, !(an & 6) && Ra();
      }
    }
    function Zr() {
      Lr = Sl.current, An(Sl);
    }
    function Is(l, u) {
      l.finishedWork = null, l.finishedLanes = 0;
      var g = l.timeoutHandle;
      if (g !== Vt && (l.timeoutHandle = Vt, ot(g)), vi !== null)
        for (g = vi.return; g !== null; ) {
          var S = g;
          switch (Nd(S), S.tag) {
            case 1:
              S = S.type.childContextTypes, S != null && Es();
              break;
            case 3:
              ro(), An(xn), An(_i), La();
              break;
            case 5:
              Rr(S);
              break;
            case 4:
              ro();
              break;
            case 13:
              An(Xn);
              break;
            case 19:
              An(Xn);
              break;
            case 10:
              Pc(S.type._context);
              break;
            case 22:
            case 23:
              Zr();
          }
          g = g.return;
        }
      if (mi = l, vi = l = pr(l.current, null), vn = Lr = u, Ti = 0, Ml = null, ih = ss = Fa = 0, dr = bu = null, la !== null) {
        for (u = 0; u < la.length; u++)
          if (g = la[u], S = g.interleaved, S !== null) {
            g.interleaved = null;
            var A = S.next, D = g.pending;
            if (D !== null) {
              var j = D.next;
              D.next = A, S.next = j;
            }
            g.pending = S;
          }
        la = null;
      }
      return l;
    }
    function hm(l, u) {
      do {
        var g = vi;
        try {
          if (Rd(), xi.current = fl, il) {
            for (var S = mn.memoizedState; S !== null; ) {
              var A = S.queue;
              A !== null && (A.pending = null), S = S.next;
            }
            il = !1;
          }
          if (Cs = 0, zn = qn = mn = null, Pa = !1, rl = 0, nh.current = null, g === null || g.return === null) {
            Ti = 1, Ml = u, vi = null;
            break;
          }
          e: {
            var D = l, j = g.return, oe = g, Ae = u;
            if (u = vn, oe.flags |= 32768, Ae !== null && typeof Ae == "object" && typeof Ae.then == "function") {
              var Je = Ae, nt = oe, Wt = nt.tag;
              if (!(nt.mode & 1) && (Wt === 0 || Wt === 11 || Wt === 15)) {
                var zt = nt.alternate;
                zt ? (nt.updateQueue = zt.updateQueue, nt.memoizedState = zt.memoizedState, nt.lanes = zt.lanes) : (nt.updateQueue = null, nt.memoizedState = null);
              }
              var Bn = lo(j);
              if (Bn !== null) {
                Bn.flags &= -257, Qc(Bn, j, oe, D, u), Bn.mode & 1 && Su(D, Je, u), u = Bn, Ae = Je;
                var Ot = u.updateQueue;
                if (Ot === null) {
                  var zi = /* @__PURE__ */ new Set();
                  zi.add(Ae), u.updateQueue = zi;
                } else
                  Ot.add(Ae);
                break e;
              } else {
                if (!(u & 1)) {
                  Su(D, Je, u), uh();
                  break e;
                }
                Ae = Error(c(426));
              }
            } else if (Wn && oe.mode & 1) {
              var tr = lo(j);
              if (tr !== null) {
                !(tr.flags & 65536) && (tr.flags |= 256), Qc(tr, j, oe, D, u), fu(Ae);
                break e;
              }
            }
            D = Ae, Ti !== 4 && (Ti = 2), bu === null ? bu = [D] : bu.push(D), Ae = _u(Ae, oe), oe = j;
            do {
              switch (oe.tag) {
                case 3:
                  oe.flags |= 65536, u &= -u, oe.lanes |= u;
                  var ge = Jc(oe, Ae, u);
                  jp(oe, ge);
                  break e;
                case 1:
                  D = Ae;
                  var ce = oe.type, be = oe.stateNode;
                  if (!(oe.flags & 128) && (typeof ce.getDerivedStateFromError == "function" || be !== null && typeof be.componentDidCatch == "function" && (Us === null || !Us.has(be)))) {
                    oe.flags |= 65536, u &= -u, oe.lanes |= u;
                    var pt = Kc(oe, D, u);
                    jp(oe, pt);
                    break e;
                  }
              }
              oe = oe.return;
            } while (oe !== null);
          }
          Dr(g);
        } catch (Lt) {
          u = Lt, vi === g && g !== null && (vi = g = g.return);
          continue;
        }
        break;
      } while (1);
    }
    function pm() {
      var l = fr.current;
      return fr.current = fl, l === null ? fl : l;
    }
    function uh() {
      (Ti === 0 || Ti === 3 || Ti === 2) && (Ti = 4), mi === null || !(Fa & 268435455) && !(ss & 268435455) || os(mi, vn);
    }
    function yo(l, u) {
      var g = an;
      an |= 2;
      var S = pm();
      mi === l && vn === u || Is(l, u);
      do
        try {
          Ey();
          break;
        } catch (A) {
          hm(l, A);
        }
      while (1);
      if (Rd(), an = g, fr.current = S, vi !== null)
        throw Error(c(261));
      return mi = null, vn = 0, Ti;
    }
    function Ey() {
      for (; vi !== null; )
        ch(vi);
    }
    function mm() {
      for (; vi !== null && !dy(); )
        ch(vi);
    }
    function ch(l) {
      var u = bl(l.alternate, l, Lr);
      l.memoizedProps = l.pendingProps, u === null ? Dr(l) : vi = u, nh.current = null;
    }
    function Dr(l) {
      var u = l;
      do {
        var g = u.alternate;
        if (l = u.return, u.flags & 32768) {
          if (g = Qt(g, u), g !== null) {
            g.flags &= 32767, vi = g;
            return;
          }
          if (l !== null)
            l.flags |= 32768, l.subtreeFlags = 0, l.deletions = null;
          else {
            Ti = 6, vi = null;
            return;
          }
        } else if (g = Sy(g, u, Lr), g !== null) {
          vi = g;
          return;
        }
        if (u = u.sibling, u !== null) {
          vi = u;
          return;
        }
        vi = u = l;
      } while (u !== null);
      Ti === 0 && (Ti = 5);
    }
    function va(l, u) {
      var g = Sn, S = ai.transition;
      try {
        ai.transition = null, Sn = 1, Ty(l, u, g);
      } finally {
        ai.transition = S, Sn = g;
      }
      return null;
    }
    function Ty(l, u, g) {
      do
        _o();
      while (Ns !== null);
      if (an & 6)
        throw Error(c(327));
      var S = l.finishedWork, A = l.finishedLanes;
      if (S === null)
        return null;
      if (l.finishedWork = null, l.finishedLanes = 0, S === l.current)
        throw Error(c(177));
      l.callbackNode = null, l.callbackPriority = 0;
      var D = S.lanes | S.childLanes;
      if (fy(l, D), l === mi && (vi = mi = null, vn = 0), !(S.subtreeFlags & 2064) && !(S.flags & 2064) || cf || (cf = !0, wl(bd, function() {
        return _o(), null;
      })), D = (S.flags & 15990) !== 0, S.subtreeFlags & 15990 || D) {
        D = ai.transition, ai.transition = null;
        var j = Sn;
        Sn = 1;
        var oe = an;
        an |= 4, nh.current = null, lm(l, S), My(l, S), re(l.containerInfo), l.current = S, um(S), hy(), an = oe, Sn = j, ai.transition = D;
      } else
        l.current = S;
      if (cf && (cf = !1, Ns = l, ff = A), D = l.pendingLanes, D === 0 && (Us = null), vy(S.stateNode), hr(l, ti()), u !== null)
        for (g = l.onRecoverableError, S = 0; S < u.length; S++)
          g(u[S]);
      if (wu)
        throw wu = !1, l = uf, uf = null, l;
      return ff & 1 && l.tag !== 0 && _o(), D = l.pendingLanes, D & 1 ? l === sh ? Au++ : (Au = 0, sh = l) : Au = 0, Ra(), null;
    }
    function _o() {
      if (Ns !== null) {
        var l = Xp(ff), u = ai.transition, g = Sn;
        try {
          if (ai.transition = null, Sn = 16 > l ? 16 : l, Ns === null)
            var S = !1;
          else {
            if (l = Ns, Ns = null, ff = 0, an & 6)
              throw Error(c(331));
            var A = an;
            for (an |= 4, mt = l.current; mt !== null; ) {
              var D = mt, j = D.child;
              if (mt.flags & 16) {
                var oe = D.deletions;
                if (oe !== null) {
                  for (var Ae = 0; Ae < oe.length; Ae++) {
                    var Je = oe[Ae];
                    for (mt = Je; mt !== null; ) {
                      var nt = mt;
                      switch (nt.tag) {
                        case 0:
                        case 11:
                        case 15:
                          po(8, nt, D);
                      }
                      var Wt = nt.child;
                      if (Wt !== null)
                        Wt.return = nt, mt = Wt;
                      else
                        for (; mt !== null; ) {
                          nt = mt;
                          var zt = nt.sibling, Bn = nt.return;
                          if (pa(nt), nt === Je) {
                            mt = null;
                            break;
                          }
                          if (zt !== null) {
                            zt.return = Bn, mt = zt;
                            break;
                          }
                          mt = Bn;
                        }
                    }
                  }
                  var Ot = D.alternate;
                  if (Ot !== null) {
                    var zi = Ot.child;
                    if (zi !== null) {
                      Ot.child = null;
                      do {
                        var tr = zi.sibling;
                        zi.sibling = null, zi = tr;
                      } while (zi !== null);
                    }
                  }
                  mt = D;
                }
              }
              if (D.subtreeFlags & 2064 && j !== null)
                j.return = D, mt = j;
              else
                e:
                  for (; mt !== null; ) {
                    if (D = mt, D.flags & 2048)
                      switch (D.tag) {
                        case 0:
                        case 11:
                        case 15:
                          po(9, D, D.return);
                      }
                    var ge = D.sibling;
                    if (ge !== null) {
                      ge.return = D.return, mt = ge;
                      break e;
                    }
                    mt = D.return;
                  }
            }
            var ce = l.current;
            for (mt = ce; mt !== null; ) {
              j = mt;
              var be = j.child;
              if (j.subtreeFlags & 2064 && be !== null)
                be.return = j, mt = be;
              else
                e:
                  for (j = ce; mt !== null; ) {
                    if (oe = mt, oe.flags & 2048)
                      try {
                        switch (oe.tag) {
                          case 0:
                          case 11:
                          case 15:
                            mo(9, oe);
                        }
                      } catch (Lt) {
                        En(oe, oe.return, Lt);
                      }
                    if (oe === j) {
                      mt = null;
                      break e;
                    }
                    var pt = oe.sibling;
                    if (pt !== null) {
                      pt.return = oe.return, mt = pt;
                      break e;
                    }
                    mt = oe.return;
                  }
            }
            if (an = A, Ra(), wa && typeof wa.onPostCommitFiberRoot == "function")
              try {
                wa.onPostCommitFiberRoot(Ac, l);
              } catch {
              }
            S = !0;
          }
          return S;
        } finally {
          Sn = g, ai.transition = u;
        }
      }
      return !1;
    }
    function Fi(l, u, g) {
      u = _u(g, u), u = Jc(l, u, 1), As(l, u), u = Ji(), l = Tl(l, 1), l !== null && (su(l, 1, u), hr(l, u));
    }
    function En(l, u, g) {
      if (l.tag === 3)
        Fi(l, l, g);
      else
        for (; u !== null; ) {
          if (u.tag === 3) {
            Fi(u, l, g);
            break;
          } else if (u.tag === 1) {
            var S = u.stateNode;
            if (typeof u.type.getDerivedStateFromError == "function" || typeof S.componentDidCatch == "function" && (Us === null || !Us.has(S))) {
              l = _u(g, l), l = Kc(u, l, 1), As(u, l), l = Ji(), u = Tl(u, 1), u !== null && (su(u, 1, l), hr(u, l));
              break;
            }
          }
          u = u.return;
        }
    }
    function za(l, u, g) {
      var S = l.pingCache;
      S !== null && S.delete(u), u = Ji(), l.pingedLanes |= l.suspendedLanes & g, mi === l && (vn & g) === g && (Ti === 4 || Ti === 3 && (vn & 130023424) === vn && 500 > ti() - rh ? Is(l, 0) : ih |= g), hr(l, u);
    }
    function Jr(l, u) {
      u === 0 && (l.mode & 1 ? (u = Zo, Zo <<= 1, !(Zo & 130023424) && (Zo = 4194304)) : u = 1);
      var g = Ji();
      l = Tl(l, u), l !== null && (su(l, u, g), hr(l, g));
    }
    function by(l) {
      var u = l.memoizedState, g = 0;
      u !== null && (g = u.retryLane), Jr(l, g);
    }
    function xo(l, u) {
      var g = 0;
      switch (l.tag) {
        case 13:
          var S = l.stateNode, A = l.memoizedState;
          A !== null && (g = A.retryLane);
          break;
        case 19:
          S = l.stateNode;
          break;
        default:
          throw Error(c(314));
      }
      S !== null && S.delete(u), Jr(l, g);
    }
    var bl;
    bl = function(l, u, g) {
      if (l !== null)
        if (l.memoizedProps !== u.pendingProps || xn.current)
          Zi = !0;
        else {
          if (!(l.lanes & g) && !(u.flags & 128))
            return Zi = !1, vl(l, u, g);
          Zi = !!(l.flags & 131072);
        }
      else
        Zi = !1, Wn && u.flags & 1048576 && $p(u, Fc, u.index);
      switch (u.lanes = 0, u.tag) {
        case 2:
          var S = u.type;
          l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), l = u.pendingProps;
          var A = $n(u, _i.current);
          Ko(u, g), A = sl(null, u, S, l, A, g);
          var D = vu();
          return u.flags |= 1, typeof A == "object" && A !== null && typeof A.render == "function" && A.$$typeof === void 0 ? (u.tag = 1, u.memoizedState = null, u.updateQueue = null, ei(S) ? (D = !0, Ts(u)) : D = !1, u.memoizedState = A.state !== null && A.state !== void 0 ? A.state : null, Pd(u), A.updater = Oc, u.stateNode = A, A._reactInternals = u, Dd(u, S, l, g), u = Yd(null, u, S, !0, D, g)) : (u.tag = 0, Wn && D && Ud(u), Pi(null, u, A, g), u = u.child), u;
        case 16:
          S = u.elementType;
          e: {
            switch (l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), l = u.pendingProps, A = S._init, S = A(S._payload), u.type = S, A = u.tag = Pu(S), l = oa(S, l), A) {
              case 0:
                u = Xd(null, u, S, l, g);
                break e;
              case 1:
                u = ef(
                  null,
                  u,
                  S,
                  l,
                  g
                );
                break e;
              case 11:
                u = pl(null, u, S, l, g);
                break e;
              case 14:
                u = Eu(null, u, S, oa(S.type, l), g);
                break e;
            }
            throw Error(c(306, S, ""));
          }
          return u;
        case 0:
          return S = u.type, A = u.pendingProps, A = u.elementType === S ? A : oa(S, A), Xd(l, u, S, A, g);
        case 1:
          return S = u.type, A = u.pendingProps, A = u.elementType === S ? A : oa(S, A), ef(l, u, S, A, g);
        case 3:
          e: {
            if (tf(u), l === null)
              throw Error(c(387));
            S = u.pendingProps, D = u.memoizedState, A = D.element, uu(l, u), Uc(u, S, null, g);
            var j = u.memoizedState;
            if (S = j.element, ke && D.isDehydrated)
              if (D = {
                element: S,
                isDehydrated: !1,
                cache: j.cache,
                transitions: j.transitions
              }, u.updateQueue.baseState = D, u.memoizedState = D, u.flags & 256) {
                A = Error(c(423)), u = jd(l, u, S, g, A);
                break e;
              } else if (S !== A) {
                A = Error(c(424)), u = jd(l, u, S, g, A);
                break e;
              } else
                for (ke && (Oi = $(u.stateNode.containerInfo), Ar = u, Wn = !0, Wr = null, el = !1), g = Vc(u, null, S, g), u.child = g; g; )
                  g.flags = g.flags & -3 | 4096, g = g.sibling;
            else {
              if (tl(), S === A) {
                u = ii(l, u, g);
                break e;
              }
              Pi(l, u, S, g);
            }
            u = u.child;
          }
          return u;
        case 5:
          return mu(u), l === null && Bc(u), S = u.type, A = u.pendingProps, D = l !== null ? l.memoizedProps : null, j = A.children, $e(S, A) ? j = null : D !== null && $e(S, D) && (u.flags |= 32), im(l, u), Pi(l, u, j, g), u.child;
        case 6:
          return l === null && Bc(u), null;
        case 13:
          return rm(l, u, g);
        case 4:
          return kc(u, u.stateNode.containerInfo), S = u.pendingProps, l === null ? u.child = nl(u, null, S, g) : Pi(l, u, S, g), u.child;
        case 11:
          return S = u.type, A = u.pendingProps, A = u.elementType === S ? A : oa(S, A), pl(l, u, S, A, g);
        case 7:
          return Pi(l, u, u.pendingProps, g), u.child;
        case 8:
          return Pi(l, u, u.pendingProps.children, g), u.child;
        case 12:
          return Pi(l, u, u.pendingProps.children, g), u.child;
        case 10:
          e: {
            if (S = u.type._context, A = u.pendingProps, D = u.memoizedProps, j = A.value, Cd(u, S, j), D !== null)
              if (Aa(D.value, j)) {
                if (D.children === A.children && !xn.current) {
                  u = ii(l, u, g);
                  break e;
                }
              } else
                for (D = u.child, D !== null && (D.return = u); D !== null; ) {
                  var oe = D.dependencies;
                  if (oe !== null) {
                    j = D.child;
                    for (var Ae = oe.firstContext; Ae !== null; ) {
                      if (Ae.context === S) {
                        if (D.tag === 1) {
                          Ae = $a(-1, g & -g), Ae.tag = 2;
                          var Je = D.updateQueue;
                          if (Je !== null) {
                            Je = Je.shared;
                            var nt = Je.pending;
                            nt === null ? Ae.next = Ae : (Ae.next = nt.next, nt.next = Ae), Je.pending = Ae;
                          }
                        }
                        D.lanes |= g, Ae = D.alternate, Ae !== null && (Ae.lanes |= g), Ld(D.return, g, u), oe.lanes |= g;
                        break;
                      }
                      Ae = Ae.next;
                    }
                  } else if (D.tag === 10)
                    j = D.type === u.type ? null : D.child;
                  else if (D.tag === 18) {
                    if (j = D.return, j === null)
                      throw Error(c(341));
                    j.lanes |= g, oe = j.alternate, oe !== null && (oe.lanes |= g), Ld(j, g, u), j = D.sibling;
                  } else
                    j = D.child;
                  if (j !== null)
                    j.return = D;
                  else
                    for (j = D; j !== null; ) {
                      if (j === u) {
                        j = null;
                        break;
                      }
                      if (D = j.sibling, D !== null) {
                        D.return = j.return, j = D;
                        break;
                      }
                      j = j.return;
                    }
                  D = j;
                }
            Pi(l, u, A.children, g), u = u.child;
          }
          return u;
        case 9:
          return A = u.type, S = u.pendingProps.children, Ko(u, g), A = Vr(A), S = S(A), u.flags |= 1, Pi(l, u, S, g), u.child;
        case 14:
          return S = u.type, A = oa(S, u.pendingProps), A = oa(S.type, A), Eu(l, u, S, A, g);
        case 15:
          return tm(l, u, u.type, u.pendingProps, g);
        case 17:
          return S = u.type, A = u.pendingProps, A = u.elementType === S ? A : oa(S, A), l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), u.tag = 1, ei(S) ? (l = !0, Ts(u)) : l = !1, Ko(u, g), Kp(u, S, A), Dd(u, S, A, g), Yd(null, u, S, !0, l, g);
        case 19:
          return af(l, u, g);
        case 22:
          return nm(l, u, g);
      }
      throw Error(c(156, u.tag));
    };
    function wl(l, u) {
      return ws(l, u);
    }
    function Lu(l, u, g, S) {
      this.tag = l, this.key = g, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = u, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = S, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
    }
    function Ki(l, u, g, S) {
      return new Lu(l, u, g, S);
    }
    function So(l) {
      return l = l.prototype, !(!l || !l.isReactComponent);
    }
    function Pu(l) {
      if (typeof l == "function")
        return So(l) ? 1 : 0;
      if (l != null) {
        if (l = l.$$typeof, l === C)
          return 11;
        if (l === L)
          return 14;
      }
      return 2;
    }
    function pr(l, u) {
      var g = l.alternate;
      return g === null ? (g = Ki(l.tag, u, l.key, l.mode), g.elementType = l.elementType, g.type = l.type, g.stateNode = l.stateNode, g.alternate = l, l.alternate = g) : (g.pendingProps = u, g.type = l.type, g.flags = 0, g.subtreeFlags = 0, g.deletions = null), g.flags = l.flags & 14680064, g.childLanes = l.childLanes, g.lanes = l.lanes, g.child = l.child, g.memoizedProps = l.memoizedProps, g.memoizedState = l.memoizedState, g.updateQueue = l.updateQueue, u = l.dependencies, g.dependencies = u === null ? null : { lanes: u.lanes, firstContext: u.firstContext }, g.sibling = l.sibling, g.index = l.index, g.ref = l.ref, g;
    }
    function Mo(l, u, g, S, A, D) {
      var j = 2;
      if (S = l, typeof l == "function")
        So(l) && (j = 1);
      else if (typeof l == "string")
        j = 5;
      else
        e:
          switch (l) {
            case v:
              return Fs(g.children, A, D, u);
            case y:
              j = 8, A |= 8;
              break;
            case x:
              return l = Ki(12, g, u, A | 2), l.elementType = x, l.lanes = D, l;
            case w:
              return l = Ki(13, g, u, A), l.elementType = w, l.lanes = D, l;
            case E:
              return l = Ki(19, g, u, A), l.elementType = E, l.lanes = D, l;
            case U:
              return Du(g, A, D, u);
            default:
              if (typeof l == "object" && l !== null)
                switch (l.$$typeof) {
                  case M:
                    j = 10;
                    break e;
                  case T:
                    j = 9;
                    break e;
                  case C:
                    j = 11;
                    break e;
                  case L:
                    j = 14;
                    break e;
                  case R:
                    j = 16, S = null;
                    break e;
                }
              throw Error(c(130, l == null ? l : typeof l, ""));
          }
      return u = Ki(j, g, u, A), u.elementType = l, u.type = S, u.lanes = D, u;
    }
    function Fs(l, u, g, S) {
      return l = Ki(7, l, S, u), l.lanes = g, l;
    }
    function Du(l, u, g, S) {
      return l = Ki(22, l, S, u), l.elementType = U, l.lanes = g, l.stateNode = {}, l;
    }
    function hf(l, u, g) {
      return l = Ki(6, l, null, u), l.lanes = g, l;
    }
    function Uu(l, u, g) {
      return u = Ki(4, l.children !== null ? l.children : [], l.key, u), u.lanes = g, u.stateNode = { containerInfo: l.containerInfo, pendingChildren: null, implementation: l.implementation }, u;
    }
    function wy(l, u, g, S, A) {
      this.tag = u, this.containerInfo = l, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = Vt, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = Md(0), this.expirationTimes = Md(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Md(0), this.identifierPrefix = S, this.onRecoverableError = A, ke && (this.mutableSourceEagerHydrationData = null);
    }
    function vm(l, u, g, S, A, D, j, oe, Ae) {
      return l = new wy(l, u, g, oe, Ae), u === 1 ? (u = 1, D === !0 && (u |= 8)) : u = 0, D = Ki(3, null, null, u), l.current = D, D.stateNode = l, D.memoizedState = { element: S, isDehydrated: g, cache: null, transitions: null }, Pd(D), l;
    }
    function Kr(l) {
      if (!l)
        return Ni;
      l = l._reactInternals;
      e: {
        if (O(l) !== l || l.tag !== 1)
          throw Error(c(170));
        var u = l;
        do {
          switch (u.tag) {
            case 3:
              u = u.stateNode.context;
              break e;
            case 1:
              if (ei(u.type)) {
                u = u.stateNode.__reactInternalMemoizedMergedChildContext;
                break e;
              }
          }
          u = u.return;
        } while (u !== null);
        throw Error(c(171));
      }
      if (l.tag === 1) {
        var g = l.type;
        if (ei(g))
          return jo(l, g, u);
      }
      return u;
    }
    function Nu(l) {
      var u = l._reactInternals;
      if (u === void 0)
        throw typeof l.render == "function" ? Error(c(188)) : (l = Object.keys(l).join(","), Error(c(268, l)));
      return l = ie(u), l === null ? null : l.stateNode;
    }
    function Al(l, u) {
      if (l = l.memoizedState, l !== null && l.dehydrated !== null) {
        var g = l.retryLane;
        l.retryLane = g !== 0 && g < u ? g : u;
      }
    }
    function Rl(l, u) {
      Al(l, u), (l = l.alternate) && Al(l, u);
    }
    function Cl(l) {
      return l = ie(l), l === null ? null : l.stateNode;
    }
    function fh() {
      return null;
    }
    return t.attemptContinuousHydration = function(l) {
      if (l.tag === 13) {
        var u = Ji();
        qr(l, 134217728, u), Rl(l, 134217728);
      }
    }, t.attemptHydrationAtCurrentPriority = function(l) {
      if (l.tag === 13) {
        var u = Ji(), g = Os(l);
        qr(l, g, u), Rl(l, g);
      }
    }, t.attemptSynchronousHydration = function(l) {
      switch (l.tag) {
        case 3:
          var u = l.stateNode;
          if (u.current.memoizedState.isDehydrated) {
            var g = bs(u.pendingLanes);
            g !== 0 && (Ed(u, g | 1), hr(u, ti()), !(an & 6) && (El(), Ra()));
          }
          break;
        case 13:
          var S = Ji();
          lh(function() {
            return qr(l, 1, S);
          }), Rl(l, 1);
      }
    }, t.batchedUpdates = function(l, u) {
      var g = an;
      an |= 1;
      try {
        return l(u);
      } finally {
        an = g, an === 0 && (El(), Rc && Ra());
      }
    }, t.createComponentSelector = function(l) {
      return { $$typeof: lf, value: l };
    }, t.createContainer = function(l, u, g, S, A, D, j) {
      return vm(l, u, !1, null, g, S, A, D, j);
    }, t.createHasPseudoClassSelector = function(l) {
      return { $$typeof: ri, value: l };
    }, t.createHydrationContainer = function(l, u, g, S, A, D, j, oe, Ae) {
      return l = vm(g, S, !0, l, A, D, j, oe, Ae), l.context = Kr(null), g = l.current, S = Ji(), A = Os(g), D = $a(S, A), D.callback = u ?? null, As(g, D), l.current.lanes = A, su(l, A, S), hr(l, S), l;
    }, t.createPortal = function(l, u, g) {
      var S = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return { $$typeof: p, key: S == null ? null : "" + S, children: l, containerInfo: u, implementation: g };
    }, t.createRoleSelector = function(l) {
      return { $$typeof: go, value: l };
    }, t.createTestNameSelector = function(l) {
      return { $$typeof: Tu, value: l };
    }, t.createTextSelector = function(l) {
      return { $$typeof: as, value: l };
    }, t.deferredUpdates = function(l) {
      var u = Sn, g = ai.transition;
      try {
        return ai.transition = null, Sn = 16, l();
      } finally {
        Sn = u, ai.transition = g;
      }
    }, t.discreteUpdates = function(l, u, g, S, A) {
      var D = Sn, j = ai.transition;
      try {
        return ai.transition = null, Sn = 1, l(u, g, S, A);
      } finally {
        Sn = D, ai.transition = j, an === 0 && El();
      }
    }, t.findAllNodes = ht, t.findBoundingRects = function(l, u) {
      if (!Dt)
        throw Error(c(363));
      u = ht(l, u), l = [];
      for (var g = 0; g < u.length; g++)
        l.push(rn(u[g]));
      for (u = l.length - 1; 0 < u; u--) {
        g = l[u];
        for (var S = g.x, A = S + g.width, D = g.y, j = D + g.height, oe = u - 1; 0 <= oe; oe--)
          if (u !== oe) {
            var Ae = l[oe], Je = Ae.x, nt = Je + Ae.width, Wt = Ae.y, zt = Wt + Ae.height;
            if (S >= Je && D >= Wt && A <= nt && j <= zt) {
              l.splice(u, 1);
              break;
            } else if (S !== Je || g.width !== Ae.width || zt < D || Wt > j) {
              if (!(D !== Wt || g.height !== Ae.height || nt < S || Je > A)) {
                Je > S && (Ae.width += Je - S, Ae.x = S), nt < A && (Ae.width = A - Je), l.splice(u, 1);
                break;
              }
            } else {
              Wt > D && (Ae.height += Wt - D, Ae.y = D), zt < j && (Ae.height = j - Wt), l.splice(u, 1);
              break;
            }
          }
      }
      return l;
    }, t.findHostInstance = Nu, t.findHostInstanceWithNoPortals = function(l) {
      return l = Z(l), l = l !== null ? K(l) : null, l === null ? null : l.stateNode;
    }, t.findHostInstanceWithWarning = function(l) {
      return Nu(l);
    }, t.flushControlled = function(l) {
      var u = an;
      an |= 1;
      var g = ai.transition, S = Sn;
      try {
        ai.transition = null, Sn = 1, l();
      } finally {
        Sn = S, ai.transition = g, an = u, an === 0 && (El(), Ra());
      }
    }, t.flushPassiveEffects = _o, t.flushSync = lh, t.focusWithin = function(l, u) {
      if (!Dt)
        throw Error(c(363));
      for (l = eh(l), u = Ii(l, u), u = Array.from(u), l = 0; l < u.length; ) {
        var g = u[l++];
        if (!H(g)) {
          if (g.tag === 5 && Ye(g.stateNode))
            return !0;
          for (g = g.child; g !== null; )
            u.push(g), g = g.sibling;
        }
      }
      return !1;
    }, t.getCurrentUpdatePriority = function() {
      return Sn;
    }, t.getFindAllNodesFailureDescription = function(l, u) {
      if (!Dt)
        throw Error(c(363));
      var g = 0, S = [];
      l = [eh(l), 0];
      for (var A = 0; A < l.length; ) {
        var D = l[A++], j = l[A++], oe = u[j];
        if ((D.tag !== 5 || !H(D)) && (th(D, oe) && (S.push(Ds(oe)), j++, j > g && (g = j)), j < u.length))
          for (D = D.child; D !== null; )
            l.push(D, j), D = D.sibling;
      }
      if (g < u.length) {
        for (l = []; g < u.length; g++)
          l.push(Ds(u[g]));
        return `findAllNodes was able to match part of the selector:
  ` + (S.join(" > ") + `

No matching component was found for:
  `) + l.join(" > ");
      }
      return null;
    }, t.getPublicRootInstance = function(l) {
      if (l = l.current, !l.child)
        return null;
      switch (l.child.tag) {
        case 5:
          return Te(l.child.stateNode);
        default:
          return l.child.stateNode;
      }
    }, t.injectIntoDevTools = function(l) {
      if (l = { bundleType: l.bundleType, version: l.version, rendererPackageName: l.rendererPackageName, rendererConfig: l.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: f.ReactCurrentDispatcher, findHostInstanceByFiber: Cl, findFiberByHostInstance: l.findFiberByHostInstance || fh, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.0.0-fc46dba67-20220329" }, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        l = !1;
      else {
        var u = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (u.isDisabled || !u.supportsFiber)
          l = !0;
        else {
          try {
            Ac = u.inject(l), wa = u;
          } catch {
          }
          l = !!u.checkDCE;
        }
      }
      return l;
    }, t.isAlreadyRendering = function() {
      return !1;
    }, t.observeVisibleRects = function(l, u, g, S) {
      if (!Dt)
        throw Error(c(363));
      l = ht(l, u);
      var A = Ve(l, g, S).disconnect;
      return { disconnect: function() {
        A();
      } };
    }, t.registerMutableSourceForHydration = function(l, u) {
      var g = u._getVersion;
      g = g(u._source), l.mutableSourceEagerHydrationData == null ? l.mutableSourceEagerHydrationData = [u, g] : l.mutableSourceEagerHydrationData.push(u, g);
    }, t.runWithPriority = function(l, u) {
      var g = Sn;
      try {
        return Sn = l, u();
      } finally {
        Sn = g;
      }
    }, t.shouldError = function() {
      return null;
    }, t.shouldSuspend = function() {
      return !1;
    }, t.updateContainer = function(l, u, g, S) {
      var A = u.current, D = Ji(), j = Os(A);
      return g = Kr(g), u.context === null ? u.context = g : u.pendingContext = g, u = $a(D, j), u.payload = { element: l }, S = S === void 0 ? null : S, S !== null && (u.callback = S), As(A, u), l = qr(A, j, D), l !== null && Dc(l, A, j), j;
    }, t;
  }), ox;
}
var lx = { exports: {} };
/**
 * @license React
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var N1;
function QF() {
  return N1 || (N1 = 1, process.env.NODE_ENV !== "production" && (lx.exports = function(e) {
    var t = {}, n = Ng, r = Ug, o = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, c = !1;
    function f(i) {
      c = i;
    }
    function h(i) {
      if (!c) {
        for (var a = arguments.length, d = new Array(a > 1 ? a - 1 : 0), m = 1; m < a; m++)
          d[m - 1] = arguments[m];
        v("warn", i, d);
      }
    }
    function p(i) {
      if (!c) {
        for (var a = arguments.length, d = new Array(a > 1 ? a - 1 : 0), m = 1; m < a; m++)
          d[m - 1] = arguments[m];
        v("error", i, d);
      }
    }
    function v(i, a, d) {
      {
        var m = o.ReactDebugCurrentFrame, _ = m.getStackAddendum();
        _ !== "" && (a += "%s", d = d.concat([_]));
        var b = d.map(function(P) {
          return String(P);
        });
        b.unshift("Warning: " + a), Function.prototype.apply.call(console[i], console, b);
      }
    }
    var y = Object.assign;
    function x(i) {
      return i._reactInternals;
    }
    function M(i, a) {
      i._reactInternals = a;
    }
    var T = !1, C = !1, w = !1, E = !1, L = !1, R = !1, U = !0, F = !0, z = !0, B = 0, W = 1, O = 2, I = 3, Z = 4, ie = 5, fe = 6, K = 7, he = 8, Te = 9, Me = 10, ne = 11, le = 12, re = 13, J = 14, ue = 15, Pe = 16, qe = 17, $e = 18, it = 19, gt = 21, ot = 22, Vt = 23, nn = 24, Tt = 25, Q = Symbol.for("react.element"), ke = Symbol.for("react.portal"), Re = Symbol.for("react.fragment"), Xe = Symbol.for("react.strict_mode"), Ue = Symbol.for("react.profiler"), Mt = Symbol.for("react.provider"), lt = Symbol.for("react.context"), at = Symbol.for("react.forward_ref"), Dt = Symbol.for("react.suspense"), Zt = Symbol.for("react.suspense_list"), rn = Symbol.for("react.memo"), X = Symbol.for("react.lazy"), H = Symbol.for("react.scope"), ye = Symbol.for("react.debug_trace_mode"), Ye = Symbol.for("react.offscreen"), Ve = Symbol.for("react.legacy_hidden"), Ze = Symbol.for("react.cache"), bt = Symbol.for("react.tracing_marker"), Ke = Symbol.iterator, Se = "@@iterator";
    function Ge(i) {
      if (i === null || typeof i != "object")
        return null;
      var a = Ke && i[Ke] || i[Se];
      return typeof a == "function" ? a : null;
    }
    function yt(i, a, d) {
      var m = i.displayName;
      if (m)
        return m;
      var _ = a.displayName || a.name || "";
      return _ !== "" ? d + "(" + _ + ")" : d;
    }
    function Ne(i) {
      return i.displayName || "Context";
    }
    function rt(i) {
      if (i == null)
        return null;
      if (typeof i.tag == "number" && p("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof i == "function")
        return i.displayName || i.name || null;
      if (typeof i == "string")
        return i;
      switch (i) {
        case Re:
          return "Fragment";
        case ke:
          return "Portal";
        case Ue:
          return "Profiler";
        case Xe:
          return "StrictMode";
        case Dt:
          return "Suspense";
        case Zt:
          return "SuspenseList";
      }
      if (typeof i == "object")
        switch (i.$$typeof) {
          case lt:
            var a = i;
            return Ne(a) + ".Consumer";
          case Mt:
            var d = i;
            return Ne(d._context) + ".Provider";
          case at:
            return yt(i, i.render, "ForwardRef");
          case rn:
            var m = i.displayName || null;
            return m !== null ? m : rt(i.type) || "Memo";
          case X: {
            var _ = i, b = _._payload, P = _._init;
            try {
              return rt(P(b));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    function ee(i, a, d) {
      var m = a.displayName || a.name || "";
      return i.displayName || (m !== "" ? d + "(" + m + ")" : d);
    }
    function Ee(i) {
      return i.displayName || "Context";
    }
    function xe(i) {
      var a = i.tag, d = i.type;
      switch (a) {
        case nn:
          return "Cache";
        case Te:
          var m = d;
          return Ee(m) + ".Consumer";
        case Me:
          var _ = d;
          return Ee(_._context) + ".Provider";
        case $e:
          return "DehydratedFragment";
        case ne:
          return ee(d, d.render, "ForwardRef");
        case K:
          return "Fragment";
        case ie:
          return d;
        case Z:
          return "Portal";
        case I:
          return "Root";
        case fe:
          return "Text";
        case Pe:
          return rt(d);
        case he:
          return d === Xe ? "StrictMode" : "Mode";
        case ot:
          return "Offscreen";
        case le:
          return "Profiler";
        case gt:
          return "Scope";
        case re:
          return "Suspense";
        case it:
          return "SuspenseList";
        case Tt:
          return "TracingMarker";
        case W:
        case B:
        case qe:
        case O:
        case J:
        case ue:
          if (typeof d == "function")
            return d.displayName || d.name || null;
          if (typeof d == "string")
            return d;
          break;
      }
      return null;
    }
    var k = (
      /*                      */
      0
    ), ze = (
      /*                */
      1
    ), Ce = (
      /*                    */
      2
    ), Be = (
      /*                       */
      4
    ), ut = (
      /*           */
      Ce | Be
    ), He = (
      /*                */
      16
    ), vt = (
      /*                 */
      32
    ), Ut = (
      /*                     */
      64
    ), Nt = (
      /*                   */
      128
    ), Kt = (
      /*            */
      256
    ), Un = (
      /*                          */
      512
    ), wn = (
      /*                     */
      1024
    ), Yi = (
      /*                      */
      2048
    ), Li = (
      /*                    */
      4096
    ), eo = (
      /*           */
      Li | Be
    ), $i = (
      /*                   */
      8192
    ), Ka = (
      /*             */
      16384
    ), Br = Yi | Be | Ut | Un | wn | Ka, Yo = (
      /*               */
      32767
    ), $ = (
      /*                   */
      32768
    ), Fe = (
      /*                */
      65536
    ), st = (
      /* */
      131072
    ), G = (
      /*                       */
      1048576
    ), ae = (
      /*                    */
      2097152
    ), pe = (
      /*                 */
      4194304
    ), se = (
      /*                */
      8388608
    ), de = (
      /*               */
      16777216
    ), tt = (
      /*              */
      33554432
    ), ft = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      Be | wn | 0
    ), _t = Ce | Be | He | vt | Un | Li | $i, At = Be | Ut | Un | $i, Bt = Yi | He, wt = pe | se | ae, Ct = o.ReactCurrentOwner;
    function yn(i) {
      var a = i, d = i;
      if (i.alternate)
        for (; a.return; )
          a = a.return;
      else {
        var m = a;
        do
          a = m, (a.flags & (Ce | Li)) !== k && (d = a.return), m = a.return;
        while (m);
      }
      return a.tag === I ? d : null;
    }
    function Fn(i) {
      return yn(i) === i;
    }
    function ji(i) {
      {
        var a = Ct.current;
        if (a !== null && a.tag === W) {
          var d = a, m = d.stateNode;
          m._warnedAboutRefsInRender || p("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", xe(d) || "A component"), m._warnedAboutRefsInRender = !0;
        }
      }
      var _ = x(i);
      return _ ? yn(_) === _ : !1;
    }
    function ur(i) {
      if (yn(i) !== i)
        throw new Error("Unable to find node on an unmounted component.");
    }
    function Nn(i) {
      var a = i.alternate;
      if (!a) {
        var d = yn(i);
        if (d === null)
          throw new Error("Unable to find node on an unmounted component.");
        return d !== i ? null : i;
      }
      for (var m = i, _ = a; ; ) {
        var b = m.return;
        if (b === null)
          break;
        var P = b.alternate;
        if (P === null) {
          var N = b.return;
          if (N !== null) {
            m = _ = N;
            continue;
          }
          break;
        }
        if (b.child === P.child) {
          for (var V = b.child; V; ) {
            if (V === m)
              return ur(b), i;
            if (V === _)
              return ur(b), a;
            V = V.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (m.return !== _.return)
          m = b, _ = P;
        else {
          for (var q = !1, te = b.child; te; ) {
            if (te === m) {
              q = !0, m = b, _ = P;
              break;
            }
            if (te === _) {
              q = !0, _ = b, m = P;
              break;
            }
            te = te.sibling;
          }
          if (!q) {
            for (te = P.child; te; ) {
              if (te === m) {
                q = !0, m = P, _ = b;
                break;
              }
              if (te === _) {
                q = !0, _ = P, m = b;
                break;
              }
              te = te.sibling;
            }
            if (!q)
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (m.alternate !== _)
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (m.tag !== I)
        throw new Error("Unable to find node on an unmounted component.");
      return m.stateNode.current === m ? i : a;
    }
    function Xt(i) {
      var a = Nn(i);
      return a !== null ? An(a) : null;
    }
    function An(i) {
      if (i.tag === ie || i.tag === fe)
        return i;
      for (var a = i.child; a !== null; ) {
        var d = An(a);
        if (d !== null)
          return d;
        a = a.sibling;
      }
      return null;
    }
    function Yt(i) {
      var a = Nn(i);
      return a !== null ? Ni(a) : null;
    }
    function Ni(i) {
      if (i.tag === ie || i.tag === fe)
        return i;
      for (var a = i.child; a !== null; ) {
        if (a.tag !== Z) {
          var d = Ni(a);
          if (d !== null)
            return d;
        }
        a = a.sibling;
      }
      return null;
    }
    var _i = Array.isArray;
    function xn(i) {
      return _i(i);
    }
    var wr = e.getPublicInstance, $n = e.getRootHostContext, ei = e.getChildHostContext, Es = e.prepareForCommit, qi = e.resetAfterCommit, jo = e.createInstance, Ts = e.appendInitialChild, qo = e.finalizeInitialChildren, Hr = e.prepareUpdate, Sd = e.shouldSetTextContent, Gp = e.createTextInstance, Wp = e.scheduleTimeout, bc = e.cancelTimeout, Zo = e.noTimeout;
    e.now;
    var bs = e.isPrimaryRenderer, wc = e.warnsIfNotActing, sa = e.supportsMutation, au = e.supportsPersistence, er = e.supportsHydration, Md = e.getInstanceFromNode;
    e.beforeActiveInstanceBlur, e.afterActiveInstanceBlur;
    var su = e.preparePortalMount;
    e.preparePortalMount, e.getInstanceFromScope;
    var fy = e.getCurrentEventPriority, Ed = e.detachDeletedInstance, Sn = e.supportsMicrotasks, Xp = e.scheduleMicrotask, ws = e.supportsTestSelectors, Yp = e.findFiberRoot, dy = e.getBoundingRect, hy = e.getTextContent, ti = e.isHiddenSubtree, Td = e.matchAccessibilityRole, py = e.setFocusIfFocusable, bd = e.setupIntersectionObserver, my = e.appendChild, Ac = e.appendChildToContainer, wa = e.commitTextUpdate, vy = e.commitMount, gy = e.commitUpdate, Aa = e.insertBefore, Qa = e.insertInContainerBefore, Rc = e.removeChild, wd = e.removeChildFromContainer, Ad = e.resetTextContent, yy = e.hideInstance, Ra = e.hideTextInstance, _y = e.unhideInstance, Cc = e.unhideTextInstance, xy = e.clearContainer, oa = e.cloneInstance, ou = e.createContainerChildSet, lu = e.appendChildToContainerChildSet, Jo = e.finalizeContainerChildren, Lc = e.replaceContainerChildren;
    e.getOffscreenContainerType;
    var Rd = e.getOffscreenContainerProps, Cd = e.cloneHiddenInstance, Pc = e.cloneHiddenTextInstance, Ld = e.canHydrateInstance, Ko = e.canHydrateTextInstance, Vr = e.canHydrateSuspenseInstance, la = e.isSuspenseInstancePending, Ca = e.isSuspenseInstanceFallback, Pd = e.registerSuspenseInstanceRetry, uu = e.getNextHydratableSibling, $a = e.getFirstHydratableChild, As = e.getFirstHydratableChildWithinContainer, Dc = e.getFirstHydratableChildWithinSuspenseInstance, jp = e.hydrateInstance, Uc = e.hydrateTextInstance, qp = e.hydrateSuspenseInstance, Zp = e.getNextHydratableInstanceAfterSuspenseInstance, Nc = e.commitHydratedContainer, Oc = e.commitHydratedSuspenseInstance, Jp = e.clearSuspenseBoundary, Kp = e.clearSuspenseBoundaryFromContainer, Qp = e.shouldDeleteUnhydratedTailInstances, Dd = e.didNotMatchHydratedContainerTextInstance, Qo = e.didNotMatchHydratedTextInstance, $o = e.didNotHydrateInstanceWithinContainer, Ic = e.didNotHydrateInstanceWithinSuspenseInstance, Fc = e.didNotHydrateInstance, kr = e.didNotFindHydratableInstanceWithinContainer, Gr = e.didNotFindHydratableTextInstanceWithinContainer, to = e.didNotFindHydratableSuspenseInstanceWithinContainer, es = e.didNotFindHydratableInstanceWithinSuspenseInstance, ts = e.didNotFindHydratableTextInstanceWithinSuspenseInstance, no = e.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance, $p = e.didNotFindHydratableInstance, Ud = e.didNotFindHydratableTextInstance, Nd = e.didNotFindHydratableSuspenseInstance, Ar = e.errorHydratingContainer, Oi = 0, Wn, el, Wr, Od, Id, zc, Bc;
    function Fd() {
    }
    Fd.__reactDisabledLog = !0;
    function cu() {
      {
        if (Oi === 0) {
          Wn = console.log, el = console.info, Wr = console.warn, Od = console.error, Id = console.group, zc = console.groupCollapsed, Bc = console.groupEnd;
          var i = {
            configurable: !0,
            enumerable: !0,
            value: Fd,
            writable: !0
          };
          Object.defineProperties(console, {
            info: i,
            log: i,
            warn: i,
            error: i,
            group: i,
            groupCollapsed: i,
            groupEnd: i
          });
        }
        Oi++;
      }
    }
    function tl() {
      {
        if (Oi--, Oi === 0) {
          var i = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: y({}, i, {
              value: Wn
            }),
            info: y({}, i, {
              value: el
            }),
            warn: y({}, i, {
              value: Wr
            }),
            error: y({}, i, {
              value: Od
            }),
            group: y({}, i, {
              value: Id
            }),
            groupCollapsed: y({}, i, {
              value: zc
            }),
            groupEnd: y({}, i, {
              value: Bc
            })
          });
        }
        Oi < 0 && p("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var fu = o.ReactCurrentDispatcher, io;
    function ua(i, a, d) {
      {
        if (io === void 0)
          try {
            throw Error();
          } catch (_) {
            var m = _.stack.trim().match(/\n( *(at )?)/);
            io = m && m[1] || "";
          }
        return `
` + io + i;
      }
    }
    var Hc = !1, du;
    {
      var nl = typeof WeakMap == "function" ? WeakMap : Map;
      du = new nl();
    }
    function Vc(i, a) {
      if (!i || Hc)
        return "";
      {
        var d = du.get(i);
        if (d !== void 0)
          return d;
      }
      var m;
      Hc = !0;
      var _ = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var b;
      b = fu.current, fu.current = null, cu();
      try {
        if (a) {
          var P = function() {
            throw Error();
          };
          if (Object.defineProperty(P.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(P, []);
            } catch (je) {
              m = je;
            }
            Reflect.construct(i, [], P);
          } else {
            try {
              P.call();
            } catch (je) {
              m = je;
            }
            i.call(P.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (je) {
            m = je;
          }
          i();
        }
      } catch (je) {
        if (je && m && typeof je.stack == "string") {
          for (var N = je.stack.split(`
`), V = m.stack.split(`
`), q = N.length - 1, te = V.length - 1; q >= 1 && te >= 0 && N[q] !== V[te]; )
            te--;
          for (; q >= 1 && te >= 0; q--, te--)
            if (N[q] !== V[te]) {
              if (q !== 1 || te !== 1)
                do
                  if (q--, te--, te < 0 || N[q] !== V[te]) {
                    var me = `
` + N[q].replace(" at new ", " at ");
                    return i.displayName && me.includes("<anonymous>") && (me = me.replace("<anonymous>", i.displayName)), typeof i == "function" && du.set(i, me), me;
                  }
                while (q >= 1 && te >= 0);
              break;
            }
        }
      } finally {
        Hc = !1, fu.current = b, tl(), Error.prepareStackTrace = _;
      }
      var we = i ? i.displayName || i.name : "", Le = we ? ua(we) : "";
      return typeof i == "function" && du.set(i, Le), Le;
    }
    function hu(i, a, d) {
      return Vc(i, !0);
    }
    function cr(i, a, d) {
      return Vc(i, !1);
    }
    function pu(i) {
      var a = i.prototype;
      return !!(a && a.isReactComponent);
    }
    function Rs(i, a, d) {
      if (i == null)
        return "";
      if (typeof i == "function")
        return Vc(i, pu(i));
      if (typeof i == "string")
        return ua(i);
      switch (i) {
        case Dt:
          return ua("Suspense");
        case Zt:
          return ua("SuspenseList");
      }
      if (typeof i == "object")
        switch (i.$$typeof) {
          case at:
            return cr(i.render);
          case rn:
            return Rs(i.type, a, d);
          case X: {
            var m = i, _ = m._payload, b = m._init;
            try {
              return Rs(b(_), a, d);
            } catch {
            }
          }
        }
      return "";
    }
    var ca = Object.prototype.hasOwnProperty, kc = {}, ro = o.ReactDebugCurrentFrame;
    function mu(i) {
      if (i) {
        var a = i._owner, d = Rs(i.type, i._source, a ? a.type : null);
        ro.setExtraStackFrame(d);
      } else
        ro.setExtraStackFrame(null);
    }
    function Rr(i, a, d, m, _) {
      {
        var b = Function.call.bind(ca);
        for (var P in i)
          if (b(i, P)) {
            var N = void 0;
            try {
              if (typeof i[P] != "function") {
                var V = Error((m || "React class") + ": " + d + " type `" + P + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof i[P] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw V.name = "Invariant Violation", V;
              }
              N = i[P](a, P, m, d, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (q) {
              N = q;
            }
            N && !(N instanceof Error) && (mu(_), p("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", m || "React class", d, P, typeof N), mu(null)), N instanceof Error && !(N.message in kc) && (kc[N.message] = !0, mu(_), p("Failed %s type: %s", d, N.message), mu(null));
          }
      }
    }
    var Xn = [], ao;
    ao = [];
    var fa = -1;
    function La(i) {
      return {
        current: i
      };
    }
    function xi(i, a) {
      if (fa < 0) {
        p("Unexpected pop.");
        return;
      }
      a !== ao[fa] && p("Unexpected Fiber popped."), i.current = Xn[fa], Xn[fa] = null, ao[fa] = null, fa--;
    }
    function On(i, a, d) {
      fa++, Xn[fa] = i.current, ao[fa] = d, i.current = a;
    }
    var Cs;
    Cs = {};
    var mn = {};
    Object.freeze(mn);
    var qn = La(mn), zn = La(!1), il = mn;
    function Pa(i, a, d) {
      return d && Xr(a) ? il : qn.current;
    }
    function rl(i, a, d) {
      {
        var m = i.stateNode;
        m.__reactInternalMemoizedUnmaskedChildContext = a, m.__reactInternalMemoizedMaskedChildContext = d;
      }
    }
    function al(i, a) {
      {
        var d = i.type, m = d.contextTypes;
        if (!m)
          return mn;
        var _ = i.stateNode;
        if (_ && _.__reactInternalMemoizedUnmaskedChildContext === a)
          return _.__reactInternalMemoizedMaskedChildContext;
        var b = {};
        for (var P in m)
          b[P] = a[P];
        {
          var N = xe(i) || "Unknown";
          Rr(m, b, "context", N);
        }
        return _ && rl(i, a, b), b;
      }
    }
    function Si() {
      return zn.current;
    }
    function Xr(i) {
      {
        var a = i.childContextTypes;
        return a != null;
      }
    }
    function sl(i) {
      xi(zn, i), xi(qn, i);
    }
    function vu(i) {
      xi(zn, i), xi(qn, i);
    }
    function Da(i, a, d) {
      {
        if (qn.current !== mn)
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        On(qn, a, i), On(zn, d, i);
      }
    }
    function da(i, a, d) {
      {
        var m = i.stateNode, _ = a.childContextTypes;
        if (typeof m.getChildContext != "function") {
          {
            var b = xe(i) || "Unknown";
            Cs[b] || (Cs[b] = !0, p("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", b, b));
          }
          return d;
        }
        var P = m.getChildContext();
        for (var N in P)
          if (!(N in _))
            throw new Error((xe(i) || "Unknown") + '.getChildContext(): key "' + N + '" is not defined in childContextTypes.');
        {
          var V = xe(i) || "Unknown";
          Rr(_, P, "child context", V);
        }
        return y({}, d, P);
      }
    }
    function Ua(i) {
      {
        var a = i.stateNode, d = a && a.__reactInternalMemoizedMergedChildContext || mn;
        return il = qn.current, On(qn, d, i), On(zn, zn.current, i), !0;
      }
    }
    function gu(i, a, d) {
      {
        var m = i.stateNode;
        if (!m)
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (d) {
          var _ = da(i, a, il);
          m.__reactInternalMemoizedMergedChildContext = _, xi(zn, i), xi(qn, i), On(qn, _, i), On(zn, d, i);
        } else
          xi(zn, i), On(zn, d, i);
      }
    }
    function Gc(i) {
      {
        if (!Fn(i) || i.tag !== W)
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var a = i;
        do {
          switch (a.tag) {
            case I:
              return a.stateNode.context;
            case W: {
              var d = a.type;
              if (Xr(d))
                return a.stateNode.__reactInternalMemoizedMergedChildContext;
              break;
            }
          }
          a = a.return;
        } while (a !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var so = 0, zd = 1, jt = (
      /*                         */
      0
    ), Ln = (
      /*                 */
      1
    ), _n = (
      /*                    */
      2
    ), ni = (
      /*               */
      8
    ), Yr = (
      /*              */
      16
    ), ol = Math.clz32 ? Math.clz32 : Xc, em = Math.log, Wc = Math.LN2;
    function Xc(i) {
      var a = i >>> 0;
      return a === 0 ? 32 : 31 - (em(a) / Wc | 0) | 0;
    }
    var yu = 31, We = (
      /*                        */
      0
    ), Mi = (
      /*                          */
      0
    ), fn = (
      /*                        */
      1
    ), oo = (
      /*    */
      2
    ), ns = (
      /*            */
      4
    ), is = (
      /*            */
      8
    ), Na = (
      /*                    */
      16
    ), ll = (
      /*                */
      32
    ), ul = (
      /*                       */
      4194240
    ), cl = (
      /*                        */
      64
    ), Bd = (
      /*                        */
      128
    ), Hd = (
      /*                        */
      256
    ), Yc = (
      /*                        */
      512
    ), jc = (
      /*                        */
      1024
    ), qc = (
      /*                        */
      2048
    ), Zc = (
      /*                        */
      4096
    ), fl = (
      /*                        */
      8192
    ), Vd = (
      /*                        */
      16384
    ), kd = (
      /*                       */
      32768
    ), Gd = (
      /*                       */
      65536
    ), _u = (
      /*                       */
      131072
    ), xu = (
      /*                       */
      262144
    ), Wd = (
      /*                       */
      524288
    ), Jc = (
      /*                       */
      1048576
    ), Kc = (
      /*                       */
      2097152
    ), Su = (
      /*                            */
      130023424
    ), lo = (
      /*                             */
      4194304
    ), Qc = (
      /*                             */
      8388608
    ), jr = (
      /*                             */
      16777216
    ), $c = (
      /*                             */
      33554432
    ), uo = (
      /*                             */
      67108864
    ), dl = lo, Ls = (
      /*          */
      134217728
    ), Mu = (
      /*                                 */
      268435455
    ), hl = (
      /*               */
      268435456
    ), ha = (
      /*                       */
      536870912
    ), In = (
      /*                   */
      1073741824
    );
    function Sy(i) {
      {
        if (i & fn)
          return "Sync";
        if (i & oo)
          return "InputContinuousHydration";
        if (i & ns)
          return "InputContinuous";
        if (i & is)
          return "DefaultHydration";
        if (i & Na)
          return "Default";
        if (i & ll)
          return "TransitionHydration";
        if (i & ul)
          return "Transition";
        if (i & Su)
          return "Retry";
        if (i & Ls)
          return "SelectiveHydration";
        if (i & hl)
          return "IdleHydration";
        if (i & ha)
          return "Idle";
        if (i & In)
          return "Offscreen";
      }
    }
    var kn = -1, Zi = cl, Pi = lo;
    function pl(i) {
      switch (Oa(i)) {
        case fn:
          return fn;
        case oo:
          return oo;
        case ns:
          return ns;
        case is:
          return is;
        case Na:
          return Na;
        case ll:
          return ll;
        case cl:
        case Bd:
        case Hd:
        case Yc:
        case jc:
        case qc:
        case Zc:
        case fl:
        case Vd:
        case kd:
        case Gd:
        case _u:
        case xu:
        case Wd:
        case Jc:
        case Kc:
          return i & ul;
        case lo:
        case Qc:
        case jr:
        case $c:
        case uo:
          return i & Su;
        case Ls:
          return Ls;
        case hl:
          return hl;
        case ha:
          return ha;
        case In:
          return In;
        default:
          return p("Should have found matching lanes. This is a bug in React."), i;
      }
    }
    function Eu(i, a) {
      var d = i.pendingLanes;
      if (d === We)
        return We;
      var m = We, _ = i.suspendedLanes, b = i.pingedLanes, P = d & Mu;
      if (P !== We) {
        var N = P & ~_;
        if (N !== We)
          m = pl(N);
        else {
          var V = P & b;
          V !== We && (m = pl(V));
        }
      } else {
        var q = d & ~_;
        q !== We ? m = pl(q) : b !== We && (m = pl(b));
      }
      if (m === We)
        return We;
      if (a !== We && a !== m && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (a & _) === We) {
        var te = Oa(m), me = Oa(a);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          te >= me || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          te === Na && (me & ul) !== We
        )
          return a;
      }
      (m & ns) !== We && (m |= d & Na);
      var we = i.entangledLanes;
      if (we !== We)
        for (var Le = i.entanglements, je = m & we; je > 0; ) {
          var Qe = rs(je), Ft = 1 << Qe;
          m |= Le[Qe], je &= ~Ft;
        }
      return m;
    }
    function tm(i, a) {
      for (var d = i.eventTimes, m = kn; a > 0; ) {
        var _ = rs(a), b = 1 << _, P = d[_];
        P > m && (m = P), a &= ~b;
      }
      return m;
    }
    function nm(i, a) {
      switch (i) {
        case fn:
        case oo:
        case ns:
          return a + 250;
        case is:
        case Na:
        case ll:
        case cl:
        case Bd:
        case Hd:
        case Yc:
        case jc:
        case qc:
        case Zc:
        case fl:
        case Vd:
        case kd:
        case Gd:
        case _u:
        case xu:
        case Wd:
        case Jc:
        case Kc:
          return a + 5e3;
        case lo:
        case Qc:
        case jr:
        case $c:
        case uo:
          return kn;
        case Ls:
        case hl:
        case ha:
        case In:
          return kn;
        default:
          return p("Should have found matching lanes. This is a bug in React."), kn;
      }
    }
    function im(i, a) {
      for (var d = i.pendingLanes, m = i.suspendedLanes, _ = i.pingedLanes, b = i.expirationTimes, P = d; P > 0; ) {
        var N = rs(P), V = 1 << N, q = b[N];
        q === kn ? ((V & m) === We || (V & _) !== We) && (b[N] = nm(V, a)) : q <= a && (i.expiredLanes |= V), P &= ~V;
      }
    }
    function Xd(i) {
      return pl(i.pendingLanes);
    }
    function ef(i) {
      var a = i.pendingLanes & ~In;
      return a !== We ? a : a & In ? In : We;
    }
    function Yd(i) {
      return (i & fn) !== We;
    }
    function tf(i) {
      return (i & Mu) !== We;
    }
    function jd(i) {
      return (i & Su) === i;
    }
    function nf(i) {
      return (i & ul) === i;
    }
    function co(i, a) {
      var d = oo | ns | is | Na;
      return (a & d) !== We;
    }
    function rm(i, a) {
      return (a & i.expiredLanes) !== We;
    }
    function rf(i) {
      return (i & ul) !== 0;
    }
    function am() {
      var i = Zi;
      return Zi <<= 1, Zi & ul || (Zi = cl), i;
    }
    function sm() {
      var i = Pi;
      return Pi <<= 1, Pi & Su || (Pi = lo), i;
    }
    function Oa(i) {
      return i & -i;
    }
    function ml(i) {
      return Oa(i);
    }
    function rs(i) {
      return 31 - ol(i);
    }
    function af(i) {
      return rs(i);
    }
    function ii(i, a) {
      return (i & a) !== We;
    }
    function vl(i, a) {
      return (i & a) === a;
    }
    function Qt(i, a) {
      return i | a;
    }
    function fo(i, a) {
      return i & ~a;
    }
    function Ps(i, a) {
      return i & a;
    }
    function sM(i) {
      return i;
    }
    function mt(i, a) {
      return i !== Mi && i < a ? i : a;
    }
    function gl(i) {
      for (var a = [], d = 0; d < yu; d++)
        a.push(i);
      return a;
    }
    function ho(i, a, d) {
      i.pendingLanes |= a, a !== ha && (i.suspendedLanes = We, i.pingedLanes = We);
      var m = i.eventTimes, _ = af(a);
      m[_] = d;
    }
    function om(i, a) {
      i.suspendedLanes |= a, i.pingedLanes &= ~a;
      for (var d = i.expirationTimes, m = a; m > 0; ) {
        var _ = rs(m), b = 1 << _;
        d[_] = kn, m &= ~b;
      }
    }
    function lm(i, a, d) {
      i.pingedLanes |= i.suspendedLanes & a;
    }
    function po(i, a) {
      var d = i.pendingLanes & ~a;
      i.pendingLanes = a, i.suspendedLanes = 0, i.pingedLanes = 0, i.expiredLanes &= a, i.mutableReadLanes &= a, i.entangledLanes &= a;
      for (var m = i.entanglements, _ = i.eventTimes, b = i.expirationTimes, P = d; P > 0; ) {
        var N = rs(P), V = 1 << N;
        m[N] = We, _[N] = kn, b[N] = kn, P &= ~V;
      }
    }
    function mo(i, a) {
      for (var d = i.entangledLanes |= a, m = i.entanglements, _ = d; _; ) {
        var b = rs(_), P = 1 << b;
        // Is this one of the newly entangled lanes?
        P & a | // Is this lane transitively entangled with the newly entangled lanes?
        m[b] & a && (m[b] |= a), _ &= ~P;
      }
    }
    function qd(i, a) {
      var d = Oa(a), m;
      switch (d) {
        case ns:
          m = oo;
          break;
        case Na:
          m = is;
          break;
        case cl:
        case Bd:
        case Hd:
        case Yc:
        case jc:
        case qc:
        case Zc:
        case fl:
        case Vd:
        case kd:
        case Gd:
        case _u:
        case xu:
        case Wd:
        case Jc:
        case Kc:
        case lo:
        case Qc:
        case jr:
        case $c:
        case uo:
          m = ll;
          break;
        case ha:
          m = hl;
          break;
        default:
          m = Mi;
          break;
      }
      return (m & (i.suspendedLanes | a)) !== Mi ? Mi : m;
    }
    function Zd(i, a, d) {
      if (fr)
        for (var m = i.pendingUpdatersLaneMap; d > 0; ) {
          var _ = af(d), b = 1 << _, P = m[_];
          P.add(a), d &= ~b;
        }
    }
    function Jd(i, a) {
      if (fr)
        for (var d = i.pendingUpdatersLaneMap, m = i.memoizedUpdaters; a > 0; ) {
          var _ = af(a), b = 1 << _, P = d[_];
          P.size > 0 && (P.forEach(function(N) {
            var V = N.alternate;
            (V === null || !m.has(V)) && m.add(N);
          }), P.clear()), a &= ~b;
        }
    }
    var pa = fn, yl = ns, _l = Na, sf = ha, vo = Mi;
    function Cr() {
      return vo;
    }
    function Ei(i) {
      vo = i;
    }
    function Kd(i, a) {
      var d = vo;
      try {
        return vo = i, a();
      } finally {
        vo = d;
      }
    }
    function of(i, a) {
      return i !== 0 && i < a ? i : a;
    }
    function My(i, a) {
      return i === 0 || i > a ? i : a;
    }
    function um(i, a) {
      return i !== 0 && i < a;
    }
    function Qd(i) {
      var a = Oa(i);
      return um(pa, a) ? um(yl, a) ? tf(a) ? _l : sf : yl : pa;
    }
    var $d = r.unstable_scheduleCallback, cm = r.unstable_cancelCallback, fm = r.unstable_shouldYield, lf = r.unstable_requestPaint, ri = r.unstable_now, go = r.unstable_ImmediatePriority, Tu = r.unstable_UserBlockingPriority, as = r.unstable_NormalPriority, xl = r.unstable_IdlePriority, eh = r.unstable_yieldValue, th = r.unstable_setDisableYieldValue, Ds = null, Ii = null, ht = null, Ia = !1, fr = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
    function nh(i) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        return !1;
      var a = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (a.isDisabled)
        return !0;
      if (!a.supportsFiber)
        return p("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
      try {
        U && (i = y({}, i, {
          getLaneLabelMap: Sl,
          injectProfilingHooks: Lr
        })), Ds = a.inject(i), Ii = a;
      } catch (d) {
        p("React instrumentation encountered an error: %s.", d);
      }
      return !!a.checkDCE;
    }
    function ai(i, a) {
      if (Ii && typeof Ii.onScheduleFiberRoot == "function")
        try {
          Ii.onScheduleFiberRoot(Ds, i, a);
        } catch (d) {
          Ia || (Ia = !0, p("React instrumentation encountered an error: %s", d));
        }
    }
    function an(i, a) {
      if (Ii && typeof Ii.onCommitFiberRoot == "function")
        try {
          var d = (i.current.flags & Nt) === Nt;
          if (F) {
            var m;
            switch (a) {
              case pa:
                m = go;
                break;
              case yl:
                m = Tu;
                break;
              case _l:
                m = as;
                break;
              case sf:
                m = xl;
                break;
              default:
                m = as;
                break;
            }
            Ii.onCommitFiberRoot(Ds, i, m, d);
          }
        } catch (_) {
          Ia || (Ia = !0, p("React instrumentation encountered an error: %s", _));
        }
    }
    function mi(i) {
      if (Ii && typeof Ii.onPostCommitFiberRoot == "function")
        try {
          Ii.onPostCommitFiberRoot(Ds, i);
        } catch (a) {
          Ia || (Ia = !0, p("React instrumentation encountered an error: %s", a));
        }
    }
    function vi(i) {
      if (Ii && typeof Ii.onCommitFiberUnmount == "function")
        try {
          Ii.onCommitFiberUnmount(Ds, i);
        } catch (a) {
          Ia || (Ia = !0, p("React instrumentation encountered an error: %s", a));
        }
    }
    function vn(i) {
      if (typeof eh == "function" && (th(i), f(i)), Ii && typeof Ii.setStrictMode == "function")
        try {
          Ii.setStrictMode(Ds, i);
        } catch (a) {
          Ia || (Ia = !0, p("React instrumentation encountered an error: %s", a));
        }
    }
    function Lr(i) {
      ht = i;
    }
    function Sl() {
      {
        for (var i = /* @__PURE__ */ new Map(), a = 1, d = 0; d < yu; d++) {
          var m = Sy(a);
          i.set(a, m), a *= 2;
        }
        return i;
      }
    }
    function Ti(i) {
      ht !== null && typeof ht.markCommitStarted == "function" && ht.markCommitStarted(i);
    }
    function Ml() {
      ht !== null && typeof ht.markCommitStopped == "function" && ht.markCommitStopped();
    }
    function Fa(i) {
      ht !== null && typeof ht.markComponentRenderStarted == "function" && ht.markComponentRenderStarted(i);
    }
    function ss() {
      ht !== null && typeof ht.markComponentRenderStopped == "function" && ht.markComponentRenderStopped();
    }
    function ih(i) {
      ht !== null && typeof ht.markComponentPassiveEffectMountStarted == "function" && ht.markComponentPassiveEffectMountStarted(i);
    }
    function bu() {
      ht !== null && typeof ht.markComponentPassiveEffectMountStopped == "function" && ht.markComponentPassiveEffectMountStopped();
    }
    function dr(i) {
      ht !== null && typeof ht.markComponentPassiveEffectUnmountStarted == "function" && ht.markComponentPassiveEffectUnmountStarted(i);
    }
    function rh() {
      ht !== null && typeof ht.markComponentPassiveEffectUnmountStopped == "function" && ht.markComponentPassiveEffectUnmountStopped();
    }
    function ah(i) {
      ht !== null && typeof ht.markComponentLayoutEffectMountStarted == "function" && ht.markComponentLayoutEffectMountStarted(i);
    }
    function El() {
      ht !== null && typeof ht.markComponentLayoutEffectMountStopped == "function" && ht.markComponentLayoutEffectMountStopped();
    }
    function wu(i) {
      ht !== null && typeof ht.markComponentLayoutEffectUnmountStarted == "function" && ht.markComponentLayoutEffectUnmountStarted(i);
    }
    function uf() {
      ht !== null && typeof ht.markComponentLayoutEffectUnmountStopped == "function" && ht.markComponentLayoutEffectUnmountStopped();
    }
    function Us(i, a, d) {
      ht !== null && typeof ht.markComponentErrored == "function" && ht.markComponentErrored(i, a, d);
    }
    function cf(i, a, d) {
      ht !== null && typeof ht.markComponentSuspended == "function" && ht.markComponentSuspended(i, a, d);
    }
    function Ns(i) {
      ht !== null && typeof ht.markLayoutEffectsStarted == "function" && ht.markLayoutEffectsStarted(i);
    }
    function ff() {
      ht !== null && typeof ht.markLayoutEffectsStopped == "function" && ht.markLayoutEffectsStopped();
    }
    function Au(i) {
      ht !== null && typeof ht.markPassiveEffectsStarted == "function" && ht.markPassiveEffectsStarted(i);
    }
    function sh() {
      ht !== null && typeof ht.markPassiveEffectsStopped == "function" && ht.markPassiveEffectsStopped();
    }
    function Ru(i) {
      ht !== null && typeof ht.markRenderStarted == "function" && ht.markRenderStarted(i);
    }
    function df() {
      ht !== null && typeof ht.markRenderYielded == "function" && ht.markRenderYielded();
    }
    function Ji() {
      ht !== null && typeof ht.markRenderStopped == "function" && ht.markRenderStopped();
    }
    function Os(i) {
      ht !== null && typeof ht.markRenderScheduled == "function" && ht.markRenderScheduled(i);
    }
    function qr(i, a) {
      ht !== null && typeof ht.markForceUpdateScheduled == "function" && ht.markForceUpdateScheduled(i, a);
    }
    function Tl(i, a) {
      ht !== null && typeof ht.markStateUpdateScheduled == "function" && ht.markStateUpdateScheduled(i, a);
    }
    function hr(i, a) {
      return i === a && (i !== 0 || 1 / i === 1 / a) || i !== i && a !== a;
    }
    var Pr = typeof Object.is == "function" ? Object.is : hr, ma = null, Cu = !1, oh = !1;
    function os(i) {
      ma === null ? ma = [i] : ma.push(i);
    }
    function dm(i) {
      Cu = !0, os(i);
    }
    function lh() {
      Cu && Zr();
    }
    function Zr() {
      if (!oh && ma !== null) {
        oh = !0;
        var i = 0, a = Cr();
        try {
          var d = !0, m = ma;
          for (Ei(pa); i < m.length; i++) {
            var _ = m[i];
            do
              _ = _(d);
            while (_ !== null);
          }
          ma = null, Cu = !1;
        } catch (b) {
          throw ma !== null && (ma = ma.slice(i + 1)), $d(go, Zr), b;
        } finally {
          Ei(a), oh = !1;
        }
      }
      return null;
    }
    function Is(i) {
      var a = i.current.memoizedState;
      return a.isDehydrated;
    }
    var hm = o.ReactCurrentBatchConfig, pm = null;
    function uh() {
      return hm.transition;
    }
    function yo(i, a) {
      if (Pr(i, a))
        return !0;
      if (typeof i != "object" || i === null || typeof a != "object" || a === null)
        return !1;
      var d = Object.keys(i), m = Object.keys(a);
      if (d.length !== m.length)
        return !1;
      for (var _ = 0; _ < d.length; _++) {
        var b = d[_];
        if (!ca.call(a, b) || !Pr(i[b], a[b]))
          return !1;
      }
      return !0;
    }
    function Ey(i) {
      switch (i._debugOwner && i._debugOwner.type, i._debugSource, i.tag) {
        case ie:
          return ua(i.type);
        case Pe:
          return ua("Lazy");
        case re:
          return ua("Suspense");
        case it:
          return ua("SuspenseList");
        case B:
        case O:
        case ue:
          return cr(i.type);
        case ne:
          return cr(i.type.render);
        case W:
          return hu(i.type);
        default:
          return "";
      }
    }
    function mm(i) {
      try {
        var a = "", d = i;
        do
          a += Ey(d), d = d.return;
        while (d);
        return a;
      } catch (m) {
        return `
Error generating stack: ` + m.message + `
` + m.stack;
      }
    }
    var ch = o.ReactDebugCurrentFrame, Dr = null, va = !1;
    function Ty() {
      {
        if (Dr === null)
          return null;
        var i = Dr._debugOwner;
        if (i !== null && typeof i < "u")
          return xe(i);
      }
      return null;
    }
    function _o() {
      return Dr === null ? "" : mm(Dr);
    }
    function Fi() {
      ch.getCurrentStack = null, Dr = null, va = !1;
    }
    function En(i) {
      ch.getCurrentStack = _o, Dr = i, va = !1;
    }
    function za(i) {
      va = i;
    }
    var Jr = {
      recordUnsafeLifecycleWarnings: function(i, a) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(i, a) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var by = function(i) {
        for (var a = null, d = i; d !== null; )
          d.mode & ni && (a = d), d = d.return;
        return a;
      }, xo = function(i) {
        var a = [];
        return i.forEach(function(d) {
          a.push(d);
        }), a.sort().join(", ");
      }, bl = [], wl = [], Lu = [], Ki = [], So = [], Pu = [], pr = /* @__PURE__ */ new Set();
      Jr.recordUnsafeLifecycleWarnings = function(i, a) {
        pr.has(i.type) || (typeof a.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        a.componentWillMount.__suppressDeprecationWarning !== !0 && bl.push(i), i.mode & ni && typeof a.UNSAFE_componentWillMount == "function" && wl.push(i), typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && Lu.push(i), i.mode & ni && typeof a.UNSAFE_componentWillReceiveProps == "function" && Ki.push(i), typeof a.componentWillUpdate == "function" && a.componentWillUpdate.__suppressDeprecationWarning !== !0 && So.push(i), i.mode & ni && typeof a.UNSAFE_componentWillUpdate == "function" && Pu.push(i));
      }, Jr.flushPendingUnsafeLifecycleWarnings = function() {
        var i = /* @__PURE__ */ new Set();
        bl.length > 0 && (bl.forEach(function(we) {
          i.add(xe(we) || "Component"), pr.add(we.type);
        }), bl = []);
        var a = /* @__PURE__ */ new Set();
        wl.length > 0 && (wl.forEach(function(we) {
          a.add(xe(we) || "Component"), pr.add(we.type);
        }), wl = []);
        var d = /* @__PURE__ */ new Set();
        Lu.length > 0 && (Lu.forEach(function(we) {
          d.add(xe(we) || "Component"), pr.add(we.type);
        }), Lu = []);
        var m = /* @__PURE__ */ new Set();
        Ki.length > 0 && (Ki.forEach(function(we) {
          m.add(xe(we) || "Component"), pr.add(we.type);
        }), Ki = []);
        var _ = /* @__PURE__ */ new Set();
        So.length > 0 && (So.forEach(function(we) {
          _.add(xe(we) || "Component"), pr.add(we.type);
        }), So = []);
        var b = /* @__PURE__ */ new Set();
        if (Pu.length > 0 && (Pu.forEach(function(we) {
          b.add(xe(we) || "Component"), pr.add(we.type);
        }), Pu = []), a.size > 0) {
          var P = xo(a);
          p(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, P);
        }
        if (m.size > 0) {
          var N = xo(m);
          p(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, N);
        }
        if (b.size > 0) {
          var V = xo(b);
          p(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, V);
        }
        if (i.size > 0) {
          var q = xo(i);
          h(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, q);
        }
        if (d.size > 0) {
          var te = xo(d);
          h(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, te);
        }
        if (_.size > 0) {
          var me = xo(_);
          h(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, me);
        }
      };
      var Mo = /* @__PURE__ */ new Map(), Fs = /* @__PURE__ */ new Set();
      Jr.recordLegacyContextWarning = function(i, a) {
        var d = by(i);
        if (d === null) {
          p("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (!Fs.has(i.type)) {
          var m = Mo.get(d);
          (i.type.contextTypes != null || i.type.childContextTypes != null || a !== null && typeof a.getChildContext == "function") && (m === void 0 && (m = [], Mo.set(d, m)), m.push(i));
        }
      }, Jr.flushLegacyContextWarning = function() {
        Mo.forEach(function(i, a) {
          if (i.length !== 0) {
            var d = i[0], m = /* @__PURE__ */ new Set();
            i.forEach(function(b) {
              m.add(xe(b) || "Component"), Fs.add(b.type);
            });
            var _ = xo(m);
            try {
              En(d), p(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, _);
            } finally {
              Fi();
            }
          }
        });
      }, Jr.discardPendingWarnings = function() {
        bl = [], wl = [], Lu = [], Ki = [], So = [], Pu = [], Mo = /* @__PURE__ */ new Map();
      };
    }
    function Du(i) {
      {
        var a = typeof Symbol == "function" && Symbol.toStringTag, d = a && i[Symbol.toStringTag] || i.constructor.name || "Object";
        return d;
      }
    }
    function hf(i) {
      try {
        return Uu(i), !1;
      } catch {
        return !0;
      }
    }
    function Uu(i) {
      return "" + i;
    }
    function wy(i) {
      if (hf(i))
        return p("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Du(i)), Uu(i);
    }
    function vm(i, a) {
      if (hf(i))
        return p("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", a, Du(i)), Uu(i);
    }
    function Kr(i, a) {
      if (i && i.defaultProps) {
        var d = y({}, a), m = i.defaultProps;
        for (var _ in m)
          d[_] === void 0 && (d[_] = m[_]);
        return d;
      }
      return a;
    }
    var Nu = La(null), Al;
    Al = {};
    var Rl = null, Cl = null, fh = null, l = !1;
    function u() {
      Rl = null, Cl = null, fh = null, l = !1;
    }
    function g() {
      l = !0;
    }
    function S() {
      l = !1;
    }
    function A(i, a, d) {
      bs ? (On(Nu, a._currentValue, i), a._currentValue = d, a._currentRenderer !== void 0 && a._currentRenderer !== null && a._currentRenderer !== Al && p("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), a._currentRenderer = Al) : (On(Nu, a._currentValue2, i), a._currentValue2 = d, a._currentRenderer2 !== void 0 && a._currentRenderer2 !== null && a._currentRenderer2 !== Al && p("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), a._currentRenderer2 = Al);
    }
    function D(i, a) {
      var d = Nu.current;
      xi(Nu, a), bs ? i._currentValue = d : i._currentValue2 = d;
    }
    function j(i, a, d) {
      for (var m = i; m !== null; ) {
        var _ = m.alternate;
        if (vl(m.childLanes, a) ? _ !== null && !vl(_.childLanes, a) && (_.childLanes = Qt(_.childLanes, a)) : (m.childLanes = Qt(m.childLanes, a), _ !== null && (_.childLanes = Qt(_.childLanes, a))), m === d)
          break;
        m = m.return;
      }
      m !== d && p("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function oe(i, a, d) {
      Ae(i, a, d);
    }
    function Ae(i, a, d) {
      var m = i.child;
      for (m !== null && (m.return = i); m !== null; ) {
        var _ = void 0, b = m.dependencies;
        if (b !== null) {
          _ = m.child;
          for (var P = b.firstContext; P !== null; ) {
            if (P.context === a) {
              if (m.tag === W) {
                var N = ml(d), V = Ht(kn, N);
                V.tag = tr;
                var q = m.updateQueue;
                if (q !== null) {
                  var te = q.shared, me = te.pending;
                  me === null ? V.next = V : (V.next = me.next, me.next = V), te.pending = V;
                }
              }
              m.lanes = Qt(m.lanes, d);
              var we = m.alternate;
              we !== null && (we.lanes = Qt(we.lanes, d)), j(m.return, d, i), b.lanes = Qt(b.lanes, d);
              break;
            }
            P = P.next;
          }
        } else if (m.tag === Me)
          _ = m.type === i.type ? null : m.child;
        else if (m.tag === $e) {
          var Le = m.return;
          if (Le === null)
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          Le.lanes = Qt(Le.lanes, d);
          var je = Le.alternate;
          je !== null && (je.lanes = Qt(je.lanes, d)), j(Le, d, i), _ = m.sibling;
        } else
          _ = m.child;
        if (_ !== null)
          _.return = m;
        else
          for (_ = m; _ !== null; ) {
            if (_ === i) {
              _ = null;
              break;
            }
            var Qe = _.sibling;
            if (Qe !== null) {
              Qe.return = _.return, _ = Qe;
              break;
            }
            _ = _.return;
          }
        m = _;
      }
    }
    function Je(i, a) {
      Rl = i, Cl = null, fh = null;
      var d = i.dependencies;
      if (d !== null) {
        var m = d.firstContext;
        m !== null && (ii(d.lanes, a) && $m(), d.firstContext = null);
      }
    }
    function nt(i) {
      l && p("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      var a = bs ? i._currentValue : i._currentValue2;
      if (fh !== i) {
        var d = {
          context: i,
          memoizedValue: a,
          next: null
        };
        if (Cl === null) {
          if (Rl === null)
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          Cl = d, Rl.dependencies = {
            lanes: We,
            firstContext: d
          };
        } else
          Cl = Cl.next = d;
      }
      return a;
    }
    var Wt = null;
    function zt(i) {
      Wt === null ? Wt = [i] : Wt.push(i);
    }
    function Bn() {
      if (Wt !== null) {
        for (var i = 0; i < Wt.length; i++) {
          var a = Wt[i], d = a.interleaved;
          if (d !== null) {
            a.interleaved = null;
            var m = d.next, _ = a.pending;
            if (_ !== null) {
              var b = _.next;
              _.next = m, d.next = b;
            }
            a.pending = d;
          }
        }
        Wt = null;
      }
    }
    var Ot = 0, zi = 1, tr = 2, ge = 3, ce = !1, be, pt;
    be = !1, pt = null;
    function Lt(i) {
      var a = {
        baseState: i.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: We
        },
        effects: null
      };
      i.updateQueue = a;
    }
    function $t(i, a) {
      var d = a.updateQueue, m = i.updateQueue;
      if (d === m) {
        var _ = {
          baseState: m.baseState,
          firstBaseUpdate: m.firstBaseUpdate,
          lastBaseUpdate: m.lastBaseUpdate,
          shared: m.shared,
          effects: m.effects
        };
        a.updateQueue = _;
      }
    }
    function Ht(i, a) {
      var d = {
        eventTime: i,
        lane: a,
        tag: Ot,
        payload: null,
        callback: null,
        next: null
      };
      return d;
    }
    function sn(i, a, d) {
      var m = i.updateQueue;
      if (m !== null) {
        var _ = m.shared;
        if (oT(i)) {
          var b = _.interleaved;
          b === null ? (a.next = a, zt(_)) : (a.next = b.next, b.next = a), _.interleaved = a;
        } else {
          var P = _.pending;
          P === null ? a.next = a : (a.next = P.next, P.next = a), _.pending = a;
        }
        pt === _ && !be && (p("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), be = !0);
      }
    }
    function si(i, a, d) {
      var m = a.updateQueue;
      if (m !== null) {
        var _ = m.shared;
        if (rf(d)) {
          var b = _.lanes;
          b = Ps(b, i.pendingLanes);
          var P = Qt(b, d);
          _.lanes = P, mo(i, P);
        }
      }
    }
    function gn(i, a) {
      var d = i.updateQueue, m = i.alternate;
      if (m !== null) {
        var _ = m.updateQueue;
        if (d === _) {
          var b = null, P = null, N = d.firstBaseUpdate;
          if (N !== null) {
            var V = N;
            do {
              var q = {
                eventTime: V.eventTime,
                lane: V.lane,
                tag: V.tag,
                payload: V.payload,
                callback: V.callback,
                next: null
              };
              P === null ? b = P = q : (P.next = q, P = q), V = V.next;
            } while (V !== null);
            P === null ? b = P = a : (P.next = a, P = a);
          } else
            b = P = a;
          d = {
            baseState: _.baseState,
            firstBaseUpdate: b,
            lastBaseUpdate: P,
            shared: _.shared,
            effects: _.effects
          }, i.updateQueue = d;
          return;
        }
      }
      var te = d.lastBaseUpdate;
      te === null ? d.firstBaseUpdate = a : te.next = a, d.lastBaseUpdate = a;
    }
    function zs(i, a, d, m, _, b) {
      switch (d.tag) {
        case zi: {
          var P = d.payload;
          if (typeof P == "function") {
            g();
            var N = P.call(b, m, _);
            {
              if (i.mode & ni) {
                vn(!0);
                try {
                  P.call(b, m, _);
                } finally {
                  vn(!1);
                }
              }
              S();
            }
            return N;
          }
          return P;
        }
        case ge:
          i.flags = i.flags & ~Fe | Nt;
        case Ot: {
          var V = d.payload, q;
          if (typeof V == "function") {
            g(), q = V.call(b, m, _);
            {
              if (i.mode & ni) {
                vn(!0);
                try {
                  V.call(b, m, _);
                } finally {
                  vn(!1);
                }
              }
              S();
            }
          } else
            q = V;
          return q == null ? m : y({}, m, q);
        }
        case tr:
          return ce = !0, m;
      }
      return m;
    }
    function pf(i, a, d, m) {
      var _ = i.updateQueue;
      ce = !1, pt = _.shared;
      var b = _.firstBaseUpdate, P = _.lastBaseUpdate, N = _.shared.pending;
      if (N !== null) {
        _.shared.pending = null;
        var V = N, q = V.next;
        V.next = null, P === null ? b = q : P.next = q, P = V;
        var te = i.alternate;
        if (te !== null) {
          var me = te.updateQueue, we = me.lastBaseUpdate;
          we !== P && (we === null ? me.firstBaseUpdate = q : we.next = q, me.lastBaseUpdate = V);
        }
      }
      if (b !== null) {
        var Le = _.baseState, je = We, Qe = null, Ft = null, en = null, kt = b;
        do {
          var Jn = kt.lane, Kn = kt.eventTime;
          if (vl(m, Jn)) {
            if (en !== null) {
              var De = {
                eventTime: Kn,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: Mi,
                tag: kt.tag,
                payload: kt.payload,
                callback: kt.callback,
                next: null
              };
              en = en.next = De;
            }
            Le = zs(i, _, kt, Le, a, d);
            var ve = kt.callback;
            if (ve !== null && // If the update was already committed, we should not queue its
            // callback again.
            kt.lane !== Mi) {
              i.flags |= Ut;
              var et = _.effects;
              et === null ? _.effects = [kt] : et.push(kt);
            }
          } else {
            var _e = {
              eventTime: Kn,
              lane: Jn,
              tag: kt.tag,
              payload: kt.payload,
              callback: kt.callback,
              next: null
            };
            en === null ? (Ft = en = _e, Qe = Le) : en = en.next = _e, je = Qt(je, Jn);
          }
          if (kt = kt.next, kt === null) {
            if (N = _.shared.pending, N === null)
              break;
            var It = N, Et = It.next;
            It.next = null, kt = Et, _.lastBaseUpdate = It, _.shared.pending = null;
          }
        } while (!0);
        en === null && (Qe = Le), _.baseState = Qe, _.firstBaseUpdate = Ft, _.lastBaseUpdate = en;
        var pn = _.shared.interleaved;
        if (pn !== null) {
          var Pn = pn;
          do
            je = Qt(je, Pn.lane), Pn = Pn.next;
          while (Pn !== pn);
        } else
          b === null && (_.shared.lanes = We);
        Mv(je), i.lanes = je, i.memoizedState = Le;
      }
      pt = null;
    }
    function ER(i, a) {
      if (typeof i != "function")
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + i));
      i.call(a);
    }
    function oM() {
      ce = !1;
    }
    function gm() {
      return ce;
    }
    function lM(i, a, d) {
      var m = a.effects;
      if (a.effects = null, m !== null)
        for (var _ = 0; _ < m.length; _++) {
          var b = m[_], P = b.callback;
          P !== null && (b.callback = null, ER(P, d));
        }
    }
    var Ay = {}, uM = new n.Component().refs, Ry, Cy, Ly, Py, Dy, cM, ym, Uy, Ny, Oy;
    {
      Ry = /* @__PURE__ */ new Set(), Cy = /* @__PURE__ */ new Set(), Ly = /* @__PURE__ */ new Set(), Py = /* @__PURE__ */ new Set(), Uy = /* @__PURE__ */ new Set(), Dy = /* @__PURE__ */ new Set(), Ny = /* @__PURE__ */ new Set(), Oy = /* @__PURE__ */ new Set();
      var fM = /* @__PURE__ */ new Set();
      ym = function(i, a) {
        if (!(i === null || typeof i == "function")) {
          var d = a + "_" + i;
          fM.has(d) || (fM.add(d), p("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", a, i));
        }
      }, cM = function(i, a) {
        if (a === void 0) {
          var d = rt(i) || "Component";
          Dy.has(d) || (Dy.add(d), p("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", d));
        }
      }, Object.defineProperty(Ay, "_processChildContext", {
        enumerable: !1,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }), Object.freeze(Ay);
    }
    function Iy(i, a, d, m) {
      var _ = i.memoizedState, b = d(m, _);
      {
        if (i.mode & ni) {
          vn(!0);
          try {
            b = d(m, _);
          } finally {
            vn(!1);
          }
        }
        cM(a, b);
      }
      var P = b == null ? _ : y({}, _, b);
      if (i.memoizedState = P, i.lanes === We) {
        var N = i.updateQueue;
        N.baseState = P;
      }
    }
    var Fy = {
      isMounted: ji,
      enqueueSetState: function(i, a, d) {
        var m = x(i), _ = Nr(), b = Fl(m), P = Ht(_, b);
        P.payload = a, d != null && (ym(d, "setState"), P.callback = d), sn(m, P);
        var N = ki(m, b, _);
        N !== null && si(N, m, b), Tl(m, b);
      },
      enqueueReplaceState: function(i, a, d) {
        var m = x(i), _ = Nr(), b = Fl(m), P = Ht(_, b);
        P.tag = zi, P.payload = a, d != null && (ym(d, "replaceState"), P.callback = d), sn(m, P);
        var N = ki(m, b, _);
        N !== null && si(N, m, b), Tl(m, b);
      },
      enqueueForceUpdate: function(i, a) {
        var d = x(i), m = Nr(), _ = Fl(d), b = Ht(m, _);
        b.tag = tr, a != null && (ym(a, "forceUpdate"), b.callback = a), sn(d, b);
        var P = ki(d, _, m);
        P !== null && si(P, d, _), qr(d, _);
      }
    };
    function dM(i, a, d, m, _, b, P) {
      var N = i.stateNode;
      if (typeof N.shouldComponentUpdate == "function") {
        var V = N.shouldComponentUpdate(m, b, P);
        {
          if (i.mode & ni) {
            vn(!0);
            try {
              V = N.shouldComponentUpdate(m, b, P);
            } finally {
              vn(!1);
            }
          }
          V === void 0 && p("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", rt(a) || "Component");
        }
        return V;
      }
      return a.prototype && a.prototype.isPureReactComponent ? !yo(d, m) || !yo(_, b) : !0;
    }
    function TR(i, a, d) {
      var m = i.stateNode;
      {
        var _ = rt(a) || "Component", b = m.render;
        b || (a.prototype && typeof a.prototype.render == "function" ? p("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", _) : p("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", _)), m.getInitialState && !m.getInitialState.isReactClassApproved && !m.state && p("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", _), m.getDefaultProps && !m.getDefaultProps.isReactClassApproved && p("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", _), m.propTypes && p("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", _), m.contextType && p("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", _), m.contextTypes && p("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", _), a.contextType && a.contextTypes && !Ny.has(a) && (Ny.add(a), p("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", _)), typeof m.componentShouldUpdate == "function" && p("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", _), a.prototype && a.prototype.isPureReactComponent && typeof m.shouldComponentUpdate < "u" && p("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", rt(a) || "A pure component"), typeof m.componentDidUnmount == "function" && p("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", _), typeof m.componentDidReceiveProps == "function" && p("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", _), typeof m.componentWillRecieveProps == "function" && p("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", _), typeof m.UNSAFE_componentWillRecieveProps == "function" && p("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", _);
        var P = m.props !== d;
        m.props !== void 0 && P && p("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", _, _), m.defaultProps && p("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", _, _), typeof m.getSnapshotBeforeUpdate == "function" && typeof m.componentDidUpdate != "function" && !Ly.has(a) && (Ly.add(a), p("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", rt(a))), typeof m.getDerivedStateFromProps == "function" && p("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", _), typeof m.getDerivedStateFromError == "function" && p("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", _), typeof a.getSnapshotBeforeUpdate == "function" && p("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", _);
        var N = m.state;
        N && (typeof N != "object" || xn(N)) && p("%s.state: must be set to an object or null", _), typeof m.getChildContext == "function" && typeof a.childContextTypes != "object" && p("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", _);
      }
    }
    function hM(i, a) {
      a.updater = Fy, i.stateNode = a, M(a, i), a._reactInternalInstance = Ay;
    }
    function pM(i, a, d) {
      var m = !1, _ = mn, b = mn, P = a.contextType;
      if ("contextType" in a) {
        var N = (
          // Allow null for conditional declaration
          P === null || P !== void 0 && P.$$typeof === lt && P._context === void 0
        );
        if (!N && !Oy.has(a)) {
          Oy.add(a);
          var V = "";
          P === void 0 ? V = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof P != "object" ? V = " However, it is set to a " + typeof P + "." : P.$$typeof === Mt ? V = " Did you accidentally pass the Context.Provider instead?" : P._context !== void 0 ? V = " Did you accidentally pass the Context.Consumer instead?" : V = " However, it is set to an object with keys {" + Object.keys(P).join(", ") + "}.", p("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", rt(a) || "Component", V);
        }
      }
      if (typeof P == "object" && P !== null)
        b = nt(P);
      else {
        _ = Pa(i, a, !0);
        var q = a.contextTypes;
        m = q != null, b = m ? al(i, _) : mn;
      }
      var te = new a(d, b);
      if (i.mode & ni) {
        vn(!0);
        try {
          te = new a(d, b);
        } finally {
          vn(!1);
        }
      }
      var me = i.memoizedState = te.state !== null && te.state !== void 0 ? te.state : null;
      hM(i, te);
      {
        if (typeof a.getDerivedStateFromProps == "function" && me === null) {
          var we = rt(a) || "Component";
          Cy.has(we) || (Cy.add(we), p("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", we, te.state === null ? "null" : "undefined", we));
        }
        if (typeof a.getDerivedStateFromProps == "function" || typeof te.getSnapshotBeforeUpdate == "function") {
          var Le = null, je = null, Qe = null;
          if (typeof te.componentWillMount == "function" && te.componentWillMount.__suppressDeprecationWarning !== !0 ? Le = "componentWillMount" : typeof te.UNSAFE_componentWillMount == "function" && (Le = "UNSAFE_componentWillMount"), typeof te.componentWillReceiveProps == "function" && te.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? je = "componentWillReceiveProps" : typeof te.UNSAFE_componentWillReceiveProps == "function" && (je = "UNSAFE_componentWillReceiveProps"), typeof te.componentWillUpdate == "function" && te.componentWillUpdate.__suppressDeprecationWarning !== !0 ? Qe = "componentWillUpdate" : typeof te.UNSAFE_componentWillUpdate == "function" && (Qe = "UNSAFE_componentWillUpdate"), Le !== null || je !== null || Qe !== null) {
            var Ft = rt(a) || "Component", en = typeof a.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            Py.has(Ft) || (Py.add(Ft), p(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, Ft, en, Le !== null ? `
  ` + Le : "", je !== null ? `
  ` + je : "", Qe !== null ? `
  ` + Qe : ""));
          }
        }
      }
      return m && rl(i, _, b), te;
    }
    function bR(i, a) {
      var d = a.state;
      typeof a.componentWillMount == "function" && a.componentWillMount(), typeof a.UNSAFE_componentWillMount == "function" && a.UNSAFE_componentWillMount(), d !== a.state && (p("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", xe(i) || "Component"), Fy.enqueueReplaceState(a, a.state, null));
    }
    function mM(i, a, d, m) {
      var _ = a.state;
      if (typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps(d, m), typeof a.UNSAFE_componentWillReceiveProps == "function" && a.UNSAFE_componentWillReceiveProps(d, m), a.state !== _) {
        {
          var b = xe(i) || "Component";
          Ry.has(b) || (Ry.add(b), p("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", b));
        }
        Fy.enqueueReplaceState(a, a.state, null);
      }
    }
    function zy(i, a, d, m) {
      TR(i, a, d);
      var _ = i.stateNode;
      _.props = d, _.state = i.memoizedState, _.refs = uM, Lt(i);
      var b = a.contextType;
      if (typeof b == "object" && b !== null)
        _.context = nt(b);
      else {
        var P = Pa(i, a, !0);
        _.context = al(i, P);
      }
      {
        if (_.state === d) {
          var N = rt(a) || "Component";
          Uy.has(N) || (Uy.add(N), p("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", N));
        }
        i.mode & ni && Jr.recordLegacyContextWarning(i, _), Jr.recordUnsafeLifecycleWarnings(i, _);
      }
      _.state = i.memoizedState;
      var V = a.getDerivedStateFromProps;
      if (typeof V == "function" && (Iy(i, a, V, d), _.state = i.memoizedState), typeof a.getDerivedStateFromProps != "function" && typeof _.getSnapshotBeforeUpdate != "function" && (typeof _.UNSAFE_componentWillMount == "function" || typeof _.componentWillMount == "function") && (bR(i, _), pf(i, d, _, m), _.state = i.memoizedState), typeof _.componentDidMount == "function") {
        var q = Be;
        q |= pe, (i.mode & Yr) !== jt && (q |= de), i.flags |= q;
      }
    }
    function wR(i, a, d, m) {
      var _ = i.stateNode, b = i.memoizedProps;
      _.props = b;
      var P = _.context, N = a.contextType, V = mn;
      if (typeof N == "object" && N !== null)
        V = nt(N);
      else {
        var q = Pa(i, a, !0);
        V = al(i, q);
      }
      var te = a.getDerivedStateFromProps, me = typeof te == "function" || typeof _.getSnapshotBeforeUpdate == "function";
      !me && (typeof _.UNSAFE_componentWillReceiveProps == "function" || typeof _.componentWillReceiveProps == "function") && (b !== d || P !== V) && mM(i, _, d, V), oM();
      var we = i.memoizedState, Le = _.state = we;
      if (pf(i, d, _, m), Le = i.memoizedState, b === d && we === Le && !Si() && !gm()) {
        if (typeof _.componentDidMount == "function") {
          var je = Be;
          je |= pe, (i.mode & Yr) !== jt && (je |= de), i.flags |= je;
        }
        return !1;
      }
      typeof te == "function" && (Iy(i, a, te, d), Le = i.memoizedState);
      var Qe = gm() || dM(i, a, b, d, we, Le, V);
      if (Qe) {
        if (!me && (typeof _.UNSAFE_componentWillMount == "function" || typeof _.componentWillMount == "function") && (typeof _.componentWillMount == "function" && _.componentWillMount(), typeof _.UNSAFE_componentWillMount == "function" && _.UNSAFE_componentWillMount()), typeof _.componentDidMount == "function") {
          var Ft = Be;
          Ft |= pe, (i.mode & Yr) !== jt && (Ft |= de), i.flags |= Ft;
        }
      } else {
        if (typeof _.componentDidMount == "function") {
          var en = Be;
          en |= pe, (i.mode & Yr) !== jt && (en |= de), i.flags |= en;
        }
        i.memoizedProps = d, i.memoizedState = Le;
      }
      return _.props = d, _.state = Le, _.context = V, Qe;
    }
    function AR(i, a, d, m, _) {
      var b = a.stateNode;
      $t(i, a);
      var P = a.memoizedProps, N = a.type === a.elementType ? P : Kr(a.type, P);
      b.props = N;
      var V = a.pendingProps, q = b.context, te = d.contextType, me = mn;
      if (typeof te == "object" && te !== null)
        me = nt(te);
      else {
        var we = Pa(a, d, !0);
        me = al(a, we);
      }
      var Le = d.getDerivedStateFromProps, je = typeof Le == "function" || typeof b.getSnapshotBeforeUpdate == "function";
      !je && (typeof b.UNSAFE_componentWillReceiveProps == "function" || typeof b.componentWillReceiveProps == "function") && (P !== V || q !== me) && mM(a, b, m, me), oM();
      var Qe = a.memoizedState, Ft = b.state = Qe;
      if (pf(a, m, b, _), Ft = a.memoizedState, P === V && Qe === Ft && !Si() && !gm() && !w)
        return typeof b.componentDidUpdate == "function" && (P !== i.memoizedProps || Qe !== i.memoizedState) && (a.flags |= Be), typeof b.getSnapshotBeforeUpdate == "function" && (P !== i.memoizedProps || Qe !== i.memoizedState) && (a.flags |= wn), !1;
      typeof Le == "function" && (Iy(a, d, Le, m), Ft = a.memoizedState);
      var en = gm() || dM(a, d, N, m, Qe, Ft, me) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      w;
      return en ? (!je && (typeof b.UNSAFE_componentWillUpdate == "function" || typeof b.componentWillUpdate == "function") && (typeof b.componentWillUpdate == "function" && b.componentWillUpdate(m, Ft, me), typeof b.UNSAFE_componentWillUpdate == "function" && b.UNSAFE_componentWillUpdate(m, Ft, me)), typeof b.componentDidUpdate == "function" && (a.flags |= Be), typeof b.getSnapshotBeforeUpdate == "function" && (a.flags |= wn)) : (typeof b.componentDidUpdate == "function" && (P !== i.memoizedProps || Qe !== i.memoizedState) && (a.flags |= Be), typeof b.getSnapshotBeforeUpdate == "function" && (P !== i.memoizedProps || Qe !== i.memoizedState) && (a.flags |= wn), a.memoizedProps = m, a.memoizedState = Ft), b.props = m, b.state = Ft, b.context = me, en;
    }
    var mf = [], vf = 0, _m = null, xm = 0, Ba = [], Ha = 0, Ou = null, Eo = 1, To = "";
    function RR(i) {
      return Fu(), (i.flags & G) !== k;
    }
    function CR(i) {
      return Fu(), xm;
    }
    function LR() {
      var i = To, a = Eo, d = a & ~PR(a);
      return d.toString(32) + i;
    }
    function Iu(i, a) {
      Fu(), mf[vf++] = xm, mf[vf++] = _m, _m = i, xm = a;
    }
    function vM(i, a, d) {
      Fu(), Ba[Ha++] = Eo, Ba[Ha++] = To, Ba[Ha++] = Ou, Ou = i;
      var m = Eo, _ = To, b = Sm(m) - 1, P = m & ~(1 << b), N = d + 1, V = Sm(a) + b;
      if (V > 30) {
        var q = b - b % 5, te = (1 << q) - 1, me = (P & te).toString(32), we = P >> q, Le = b - q, je = Sm(a) + Le, Qe = N << Le, Ft = Qe | we, en = me + _;
        Eo = 1 << je | Ft, To = en;
      } else {
        var kt = N << b, Jn = kt | P, Kn = _;
        Eo = 1 << V | Jn, To = Kn;
      }
    }
    function By(i) {
      Fu();
      var a = i.return;
      if (a !== null) {
        var d = 1, m = 0;
        Iu(i, d), vM(i, d, m);
      }
    }
    function Sm(i) {
      return 32 - ol(i);
    }
    function PR(i) {
      return 1 << Sm(i) - 1;
    }
    function Hy(i) {
      for (; i === _m; )
        _m = mf[--vf], mf[vf] = null, xm = mf[--vf], mf[vf] = null;
      for (; i === Ou; )
        Ou = Ba[--Ha], Ba[Ha] = null, To = Ba[--Ha], Ba[Ha] = null, Eo = Ba[--Ha], Ba[Ha] = null;
    }
    function DR() {
      return Fu(), Ou !== null ? {
        id: Eo,
        overflow: To
      } : null;
    }
    function UR(i, a) {
      Fu(), Ba[Ha++] = Eo, Ba[Ha++] = To, Ba[Ha++] = Ou, Eo = a.id, To = a.overflow, Ou = i;
    }
    function Fu() {
      mr() || p("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    var nr = null, Va = null, ls = !1, zu = !1, Ll = null;
    function NR() {
      ls && p("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function OR() {
      zu = !0;
    }
    function IR(i) {
      if (!er)
        return !1;
      var a = i.stateNode.containerInfo;
      return Va = As(a), nr = i, ls = !0, Ll = null, zu = !1, !0;
    }
    function FR(i, a, d) {
      return er ? (Va = Dc(a), nr = i, ls = !0, Ll = null, zu = !1, d !== null && UR(i, d), !0) : !1;
    }
    function gM(i, a) {
      switch (i.tag) {
        case I:
          $o(i.stateNode.containerInfo, a);
          break;
        case ie:
          Fc(i.type, i.memoizedProps, i.stateNode, a);
          break;
        case re:
          var d = i.memoizedState;
          d.dehydrated !== null && Ic(d.dehydrated, a);
          break;
      }
    }
    function yM(i, a) {
      gM(i, a);
      var d = zP();
      d.stateNode = a, d.return = i;
      var m = i.deletions;
      m === null ? (i.deletions = [d], i.flags |= He) : m.push(d);
    }
    function Vy(i, a) {
      {
        if (zu)
          return;
        switch (i.tag) {
          case I: {
            var d = i.stateNode.containerInfo;
            switch (a.tag) {
              case ie:
                var m = a.type, _ = a.pendingProps;
                kr(d, m, _);
                break;
              case fe:
                var b = a.pendingProps;
                Gr(d, b);
                break;
              case re:
                to(d);
                break;
            }
            break;
          }
          case ie: {
            var P = i.type, N = i.memoizedProps, V = i.stateNode;
            switch (a.tag) {
              case ie:
                var q = a.type, te = a.pendingProps;
                $p(P, N, V, q, te);
                break;
              case fe:
                var me = a.pendingProps;
                Ud(P, N, V, me);
                break;
              case re:
                Nd(P, N, V);
                break;
            }
            break;
          }
          case re: {
            var we = i.memoizedState, Le = we.dehydrated;
            if (Le !== null)
              switch (a.tag) {
                case ie:
                  var je = a.type, Qe = a.pendingProps;
                  es(Le, je, Qe);
                  break;
                case fe:
                  var Ft = a.pendingProps;
                  ts(Le, Ft);
                  break;
                case re:
                  no(Le);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function _M(i, a) {
      a.flags = a.flags & ~Li | Ce, Vy(i, a);
    }
    function xM(i, a) {
      switch (i.tag) {
        case ie: {
          var d = i.type, m = i.pendingProps, _ = Ld(a, d, m);
          return _ !== null ? (i.stateNode = _, nr = i, Va = $a(_), !0) : !1;
        }
        case fe: {
          var b = i.pendingProps, P = Ko(a, b);
          return P !== null ? (i.stateNode = P, nr = i, Va = null, !0) : !1;
        }
        case re: {
          {
            var N = Vr(a);
            if (N !== null) {
              var V = {
                dehydrated: N,
                treeContext: DR(),
                retryLane: In
              };
              i.memoizedState = V;
              var q = BP(N);
              return q.return = i, i.child = q, nr = i, Va = null, !0;
            }
          }
          return !1;
        }
        default:
          return !1;
      }
    }
    function ky(i) {
      return (i.mode & Ln) !== jt && (i.flags & Nt) === k;
    }
    function Gy(i) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function Wy(i) {
      if (ls) {
        var a = Va;
        if (!a) {
          ky(i) && (Vy(nr, i), Gy()), _M(nr, i), ls = !1, nr = i;
          return;
        }
        var d = a;
        if (!xM(i, a)) {
          ky(i) && (Vy(nr, i), Gy()), a = uu(d);
          var m = nr;
          if (!a || !xM(i, a)) {
            _M(nr, i), ls = !1, nr = i;
            return;
          }
          yM(m, d);
        }
      }
    }
    function zR(i, a, d) {
      if (!er)
        throw new Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var m = i.stateNode, _ = !zu, b = jp(m, i.type, i.memoizedProps, a, d, i, _);
      return i.updateQueue = b, b !== null;
    }
    function BR(i) {
      if (!er)
        throw new Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var a = i.stateNode, d = i.memoizedProps, m = !zu, _ = Uc(a, d, i, m);
      if (_) {
        var b = nr;
        if (b !== null) {
          var P = (b.mode & Ln) !== jt;
          switch (b.tag) {
            case I: {
              var N = b.stateNode.containerInfo;
              Dd(
                N,
                a,
                d,
                // TODO: Delete this argument when we remove the legacy root API.
                P
              );
              break;
            }
            case ie: {
              var V = b.type, q = b.memoizedProps, te = b.stateNode;
              Qo(
                V,
                q,
                te,
                a,
                d,
                // TODO: Delete this argument when we remove the legacy root API.
                P
              );
              break;
            }
          }
        }
      }
      return _;
    }
    function HR(i) {
      if (!er)
        throw new Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var a = i.memoizedState, d = a !== null ? a.dehydrated : null;
      if (!d)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      qp(d, i);
    }
    function VR(i) {
      if (!er)
        throw new Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var a = i.memoizedState, d = a !== null ? a.dehydrated : null;
      if (!d)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      return Zp(d);
    }
    function SM(i) {
      for (var a = i.return; a !== null && a.tag !== ie && a.tag !== I && a.tag !== re; )
        a = a.return;
      nr = a;
    }
    function dh(i) {
      if (!er || i !== nr)
        return !1;
      if (!ls)
        return SM(i), ls = !0, !1;
      if (i.tag !== I && (i.tag !== ie || Qp(i.type) && !Sd(i.type, i.memoizedProps))) {
        var a = Va;
        if (a)
          if (ky(i))
            MM(i), Gy();
          else
            for (; a; )
              yM(i, a), a = uu(a);
      }
      return SM(i), i.tag === re ? Va = VR(i) : Va = nr ? uu(i.stateNode) : null, !0;
    }
    function kR() {
      return ls && Va !== null;
    }
    function MM(i) {
      for (var a = Va; a; )
        gM(i, a), a = uu(a);
    }
    function gf() {
      er && (nr = null, Va = null, ls = !1, zu = !1);
    }
    function EM() {
      Ll !== null && (uT(Ll), Ll = null);
    }
    function mr() {
      return ls;
    }
    function Xy(i) {
      Ll === null ? Ll = [i] : Ll.push(i);
    }
    var Yy, jy, qy, Zy, Jy, TM = function(i, a) {
    };
    Yy = !1, jy = !1, qy = {}, Zy = {}, Jy = {}, TM = function(i, a) {
      if (!(i === null || typeof i != "object") && !(!i._store || i._store.validated || i.key != null)) {
        if (typeof i._store != "object")
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        i._store.validated = !0;
        var d = xe(a) || "Component";
        Zy[d] || (Zy[d] = !0, p('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
      }
    };
    function hh(i, a, d) {
      var m = d.ref;
      if (m !== null && typeof m != "function" && typeof m != "object") {
        if ((i.mode & ni || R) && // We warn in ReactElement.js if owner and self are equal for string refs
        // because these cannot be automatically converted to an arrow function
        // using a codemod. Therefore, we don't have to warn about string refs again.
        !(d._owner && d._self && d._owner.stateNode !== d._self)) {
          var _ = xe(i) || "Component";
          qy[_] || (p('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', m), qy[_] = !0);
        }
        if (d._owner) {
          var b = d._owner, P;
          if (b) {
            var N = b;
            if (N.tag !== W)
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            P = N.stateNode;
          }
          if (!P)
            throw new Error("Missing owner for string ref " + m + ". This error is likely caused by a bug in React. Please file an issue.");
          var V = P;
          vm(m, "ref");
          var q = "" + m;
          if (a !== null && a.ref !== null && typeof a.ref == "function" && a.ref._stringRef === q)
            return a.ref;
          var te = function(me) {
            var we = V.refs;
            we === uM && (we = V.refs = {}), me === null ? delete we[q] : we[q] = me;
          };
          return te._stringRef = q, te;
        } else {
          if (typeof m != "string")
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          if (!d._owner)
            throw new Error("Element ref was specified as a string (" + m + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
        }
      }
      return m;
    }
    function Mm(i, a) {
      var d = Object.prototype.toString.call(a);
      throw new Error("Objects are not valid as a React child (found: " + (d === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : d) + "). If you meant to render a collection of children, use an array instead.");
    }
    function Em(i) {
      {
        var a = xe(i) || "Component";
        if (Jy[a])
          return;
        Jy[a] = !0, p("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function bM(i) {
      var a = i._payload, d = i._init;
      return d(a);
    }
    function wM(i) {
      function a(_e, De) {
        if (i) {
          var ve = _e.deletions;
          ve === null ? (_e.deletions = [De], _e.flags |= He) : ve.push(De);
        }
      }
      function d(_e, De) {
        if (!i)
          return null;
        for (var ve = De; ve !== null; )
          a(_e, ve), ve = ve.sibling;
        return null;
      }
      function m(_e, De) {
        for (var ve = /* @__PURE__ */ new Map(), et = De; et !== null; )
          et.key !== null ? ve.set(et.key, et) : ve.set(et.index, et), et = et.sibling;
        return ve;
      }
      function _(_e, De) {
        var ve = Xu(_e, De);
        return ve.index = 0, ve.sibling = null, ve;
      }
      function b(_e, De, ve) {
        if (_e.index = ve, !i)
          return _e.flags |= G, De;
        var et = _e.alternate;
        if (et !== null) {
          var It = et.index;
          return It < De ? (_e.flags |= Ce, De) : It;
        } else
          return _e.flags |= Ce, De;
      }
      function P(_e) {
        return i && _e.alternate === null && (_e.flags |= Ce), _e;
      }
      function N(_e, De, ve, et) {
        if (De === null || De.tag !== fe) {
          var It = __(ve, _e.mode, et);
          return It.return = _e, It;
        } else {
          var Et = _(De, ve);
          return Et.return = _e, Et;
        }
      }
      function V(_e, De, ve, et) {
        var It = ve.type;
        if (It === Re)
          return te(_e, De, ve.props.children, et, ve.key);
        if (De !== null && (De.elementType === It || // Keep this check inline so it only runs on the false path:
        TT(De, ve) || // Lazy types should reconcile their resolved type.
        // We need to do this after the Hot Reloading check above,
        // because hot reloading has different semantics than prod because
        // it doesn't resuspend. So we can't let the call below suspend.
        typeof It == "object" && It !== null && It.$$typeof === X && bM(It) === De.type)) {
          var Et = _(De, ve.props);
          return Et.ref = hh(_e, De, ve), Et.return = _e, Et._debugSource = ve._source, Et._debugOwner = ve._owner, Et;
        }
        var pn = y_(ve, _e.mode, et);
        return pn.ref = hh(_e, De, ve), pn.return = _e, pn;
      }
      function q(_e, De, ve, et) {
        if (De === null || De.tag !== Z || De.stateNode.containerInfo !== ve.containerInfo || De.stateNode.implementation !== ve.implementation) {
          var It = x_(ve, _e.mode, et);
          return It.return = _e, It;
        } else {
          var Et = _(De, ve.children || []);
          return Et.return = _e, Et;
        }
      }
      function te(_e, De, ve, et, It) {
        if (De === null || De.tag !== K) {
          var Et = Bl(ve, _e.mode, et, It);
          return Et.return = _e, Et;
        } else {
          var pn = _(De, ve);
          return pn.return = _e, pn;
        }
      }
      function me(_e, De, ve) {
        if (typeof De == "string" && De !== "" || typeof De == "number") {
          var et = __("" + De, _e.mode, ve);
          return et.return = _e, et;
        }
        if (typeof De == "object" && De !== null) {
          switch (De.$$typeof) {
            case Q: {
              var It = y_(De, _e.mode, ve);
              return It.ref = hh(_e, null, De), It.return = _e, It;
            }
            case ke: {
              var Et = x_(De, _e.mode, ve);
              return Et.return = _e, Et;
            }
            case X: {
              var pn = De._payload, Pn = De._init;
              return me(_e, Pn(pn), ve);
            }
          }
          if (xn(De) || Ge(De)) {
            var Yn = Bl(De, _e.mode, ve, null);
            return Yn.return = _e, Yn;
          }
          Mm(_e, De);
        }
        return typeof De == "function" && Em(_e), null;
      }
      function we(_e, De, ve, et) {
        var It = De !== null ? De.key : null;
        if (typeof ve == "string" && ve !== "" || typeof ve == "number")
          return It !== null ? null : N(_e, De, "" + ve, et);
        if (typeof ve == "object" && ve !== null) {
          switch (ve.$$typeof) {
            case Q:
              return ve.key === It ? V(_e, De, ve, et) : null;
            case ke:
              return ve.key === It ? q(_e, De, ve, et) : null;
            case X: {
              var Et = ve._payload, pn = ve._init;
              return we(_e, De, pn(Et), et);
            }
          }
          if (xn(ve) || Ge(ve))
            return It !== null ? null : te(_e, De, ve, et, null);
          Mm(_e, ve);
        }
        return typeof ve == "function" && Em(_e), null;
      }
      function Le(_e, De, ve, et, It) {
        if (typeof et == "string" && et !== "" || typeof et == "number") {
          var Et = _e.get(ve) || null;
          return N(De, Et, "" + et, It);
        }
        if (typeof et == "object" && et !== null) {
          switch (et.$$typeof) {
            case Q: {
              var pn = _e.get(et.key === null ? ve : et.key) || null;
              return V(De, pn, et, It);
            }
            case ke: {
              var Pn = _e.get(et.key === null ? ve : et.key) || null;
              return q(De, Pn, et, It);
            }
            case X: {
              var Yn = et._payload, Dn = et._init;
              return Le(_e, De, ve, Dn(Yn), It);
            }
          }
          if (xn(et) || Ge(et)) {
            var ci = _e.get(ve) || null;
            return te(De, ci, et, It, null);
          }
          Mm(De, et);
        }
        return typeof et == "function" && Em(De), null;
      }
      function je(_e, De, ve) {
        {
          if (typeof _e != "object" || _e === null)
            return De;
          switch (_e.$$typeof) {
            case Q:
            case ke:
              TM(_e, ve);
              var et = _e.key;
              if (typeof et != "string")
                break;
              if (De === null) {
                De = /* @__PURE__ */ new Set(), De.add(et);
                break;
              }
              if (!De.has(et)) {
                De.add(et);
                break;
              }
              p("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", et);
              break;
            case X: {
              var It = _e._payload, Et = _e._init;
              je(Et(It), De, ve);
              break;
            }
          }
        }
        return De;
      }
      function Qe(_e, De, ve, et) {
        for (var It = null, Et = 0; Et < ve.length; Et++) {
          var pn = ve[Et];
          It = je(pn, It, _e);
        }
        for (var Pn = null, Yn = null, Dn = De, ci = 0, Tn = 0, dn = null; Dn !== null && Tn < ve.length; Tn++) {
          Dn.index > Tn ? (dn = Dn, Dn = null) : dn = Dn.sibling;
          var wi = we(_e, Dn, ve[Tn], et);
          if (wi === null) {
            Dn === null && (Dn = dn);
            break;
          }
          i && Dn && wi.alternate === null && a(_e, Dn), ci = b(wi, ci, Tn), Yn === null ? Pn = wi : Yn.sibling = wi, Yn = wi, Dn = dn;
        }
        if (Tn === ve.length) {
          if (d(_e, Dn), mr()) {
            var fi = Tn;
            Iu(_e, fi);
          }
          return Pn;
        }
        if (Dn === null) {
          for (; Tn < ve.length; Tn++) {
            var ja = me(_e, ve[Tn], et);
            ja !== null && (ci = b(ja, ci, Tn), Yn === null ? Pn = ja : Yn.sibling = ja, Yn = ja);
          }
          if (mr()) {
            var or = Tn;
            Iu(_e, or);
          }
          return Pn;
        }
        for (var ya = m(_e, Dn); Tn < ve.length; Tn++) {
          var _a = Le(ya, _e, Tn, ve[Tn], et);
          _a !== null && (i && _a.alternate !== null && ya.delete(_a.key === null ? Tn : _a.key), ci = b(_a, ci, Tn), Yn === null ? Pn = _a : Yn.sibling = _a, Yn = _a);
        }
        if (i && ya.forEach(function(Uf) {
          return a(_e, Uf);
        }), mr()) {
          var Xs = Tn;
          Iu(_e, Xs);
        }
        return Pn;
      }
      function Ft(_e, De, ve, et) {
        var It = Ge(ve);
        if (typeof It != "function")
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        {
          typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
          ve[Symbol.toStringTag] === "Generator" && (jy || p("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), jy = !0), ve.entries === It && (Yy || p("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), Yy = !0);
          var Et = It.call(ve);
          if (Et)
            for (var pn = null, Pn = Et.next(); !Pn.done; Pn = Et.next()) {
              var Yn = Pn.value;
              pn = je(Yn, pn, _e);
            }
        }
        var Dn = It.call(ve);
        if (Dn == null)
          throw new Error("An iterable object provided no iterator.");
        for (var ci = null, Tn = null, dn = De, wi = 0, fi = 0, ja = null, or = Dn.next(); dn !== null && !or.done; fi++, or = Dn.next()) {
          dn.index > fi ? (ja = dn, dn = null) : ja = dn.sibling;
          var ya = we(_e, dn, or.value, et);
          if (ya === null) {
            dn === null && (dn = ja);
            break;
          }
          i && dn && ya.alternate === null && a(_e, dn), wi = b(ya, wi, fi), Tn === null ? ci = ya : Tn.sibling = ya, Tn = ya, dn = ja;
        }
        if (or.done) {
          if (d(_e, dn), mr()) {
            var _a = fi;
            Iu(_e, _a);
          }
          return ci;
        }
        if (dn === null) {
          for (; !or.done; fi++, or = Dn.next()) {
            var Xs = me(_e, or.value, et);
            Xs !== null && (wi = b(Xs, wi, fi), Tn === null ? ci = Xs : Tn.sibling = Xs, Tn = Xs);
          }
          if (mr()) {
            var Uf = fi;
            Iu(_e, Uf);
          }
          return ci;
        }
        for (var Nf = m(_e, dn); !or.done; fi++, or = Dn.next()) {
          var xa = Le(Nf, _e, fi, or.value, et);
          xa !== null && (i && xa.alternate !== null && Nf.delete(xa.key === null ? fi : xa.key), wi = b(xa, wi, fi), Tn === null ? ci = xa : Tn.sibling = xa, Tn = xa);
        }
        if (i && Nf.forEach(function(b_) {
          return a(_e, b_);
        }), mr()) {
          var Yu = fi;
          Iu(_e, Yu);
        }
        return ci;
      }
      function en(_e, De, ve, et) {
        if (De !== null && De.tag === fe) {
          d(_e, De.sibling);
          var It = _(De, ve);
          return It.return = _e, It;
        }
        d(_e, De);
        var Et = __(ve, _e.mode, et);
        return Et.return = _e, Et;
      }
      function kt(_e, De, ve, et) {
        for (var It = ve.key, Et = De; Et !== null; ) {
          if (Et.key === It) {
            var pn = ve.type;
            if (pn === Re) {
              if (Et.tag === K) {
                d(_e, Et.sibling);
                var Pn = _(Et, ve.props.children);
                return Pn.return = _e, Pn._debugSource = ve._source, Pn._debugOwner = ve._owner, Pn;
              }
            } else if (Et.elementType === pn || // Keep this check inline so it only runs on the false path:
            TT(Et, ve) || // Lazy types should reconcile their resolved type.
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            typeof pn == "object" && pn !== null && pn.$$typeof === X && bM(pn) === Et.type) {
              d(_e, Et.sibling);
              var Yn = _(Et, ve.props);
              return Yn.ref = hh(_e, Et, ve), Yn.return = _e, Yn._debugSource = ve._source, Yn._debugOwner = ve._owner, Yn;
            }
            d(_e, Et);
            break;
          } else
            a(_e, Et);
          Et = Et.sibling;
        }
        if (ve.type === Re) {
          var Dn = Bl(ve.props.children, _e.mode, et, ve.key);
          return Dn.return = _e, Dn;
        } else {
          var ci = y_(ve, _e.mode, et);
          return ci.ref = hh(_e, De, ve), ci.return = _e, ci;
        }
      }
      function Jn(_e, De, ve, et) {
        for (var It = ve.key, Et = De; Et !== null; ) {
          if (Et.key === It)
            if (Et.tag === Z && Et.stateNode.containerInfo === ve.containerInfo && Et.stateNode.implementation === ve.implementation) {
              d(_e, Et.sibling);
              var pn = _(Et, ve.children || []);
              return pn.return = _e, pn;
            } else {
              d(_e, Et);
              break;
            }
          else
            a(_e, Et);
          Et = Et.sibling;
        }
        var Pn = x_(ve, _e.mode, et);
        return Pn.return = _e, Pn;
      }
      function Kn(_e, De, ve, et) {
        var It = typeof ve == "object" && ve !== null && ve.type === Re && ve.key === null;
        if (It && (ve = ve.props.children), typeof ve == "object" && ve !== null) {
          switch (ve.$$typeof) {
            case Q:
              return P(kt(_e, De, ve, et));
            case ke:
              return P(Jn(_e, De, ve, et));
            case X: {
              var Et = ve._payload, pn = ve._init;
              return Kn(_e, De, pn(Et), et);
            }
          }
          if (xn(ve))
            return Qe(_e, De, ve, et);
          if (Ge(ve))
            return Ft(_e, De, ve, et);
          Mm(_e, ve);
        }
        return typeof ve == "string" && ve !== "" || typeof ve == "number" ? P(en(_e, De, "" + ve, et)) : (typeof ve == "function" && Em(_e), d(_e, De));
      }
      return Kn;
    }
    var yf = wM(!0), AM = wM(!1);
    function GR(i, a) {
      if (i !== null && a.child !== i.child)
        throw new Error("Resuming work not yet implemented.");
      if (a.child !== null) {
        var d = a.child, m = Xu(d, d.pendingProps);
        for (a.child = m, m.return = a; d.sibling !== null; )
          d = d.sibling, m = m.sibling = Xu(d, d.pendingProps), m.return = a;
        m.sibling = null;
      }
    }
    function WR(i, a) {
      for (var d = i.child; d !== null; )
        UP(d, a), d = d.sibling;
    }
    var ph = {}, Pl = La(ph), mh = La(ph), Tm = La(ph);
    function bm(i) {
      if (i === ph)
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return i;
    }
    function Ky() {
      var i = bm(Tm.current);
      return i;
    }
    function Qy(i, a) {
      On(Tm, a, i), On(mh, i, i), On(Pl, ph, i);
      var d = $n(a);
      xi(Pl, i), On(Pl, d, i);
    }
    function _f(i) {
      xi(Pl, i), xi(mh, i), xi(Tm, i);
    }
    function vh() {
      var i = bm(Pl.current);
      return i;
    }
    function RM(i) {
      var a = bm(Tm.current), d = bm(Pl.current), m = ei(d, i.type, a);
      d !== m && (On(mh, i, i), On(Pl, m, i));
    }
    function $y(i) {
      mh.current === i && (xi(Pl, i), xi(mh, i));
    }
    var XR = 0, CM = 1, LM = 1, gh = 2, us = La(XR);
    function e0(i, a) {
      return (i & a) !== 0;
    }
    function xf(i) {
      return i & CM;
    }
    function t0(i, a) {
      return i & CM | a;
    }
    function YR(i, a) {
      return i | a;
    }
    function Dl(i, a) {
      On(us, a, i);
    }
    function Sf(i) {
      xi(us, i);
    }
    function jR(i, a) {
      var d = i.memoizedState;
      return d !== null ? d.dehydrated !== null : (i.memoizedProps, !0);
    }
    function wm(i) {
      for (var a = i; a !== null; ) {
        if (a.tag === re) {
          var d = a.memoizedState;
          if (d !== null) {
            var m = d.dehydrated;
            if (m === null || la(m) || Ca(m))
              return a;
          }
        } else if (a.tag === it && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        a.memoizedProps.revealOrder !== void 0) {
          var _ = (a.flags & Nt) !== k;
          if (_)
            return a;
        } else if (a.child !== null) {
          a.child.return = a, a = a.child;
          continue;
        }
        if (a === i)
          return null;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === i)
            return null;
          a = a.return;
        }
        a.sibling.return = a.return, a = a.sibling;
      }
      return null;
    }
    var Bs = (
      /*   */
      0
    ), oi = (
      /* */
      1
    ), Ul = (
      /*  */
      2
    ), bi = (
      /*    */
      4
    ), ir = (
      /*   */
      8
    ), n0 = [];
    function i0() {
      for (var i = 0; i < n0.length; i++) {
        var a = n0[i];
        bs ? a._workInProgressVersionPrimary = null : a._workInProgressVersionSecondary = null;
      }
      n0.length = 0;
    }
    function qR(i, a) {
      var d = a._getVersion, m = d(a._source);
      i.mutableSourceEagerHydrationData == null ? i.mutableSourceEagerHydrationData = [a, m] : i.mutableSourceEagerHydrationData.push(a, m);
    }
    var St = o.ReactCurrentDispatcher, Qr = o.ReactCurrentBatchConfig, r0, Mf;
    r0 = /* @__PURE__ */ new Set();
    var Ef = We, Gn = null, vr = null, Bi = null, Am = !1, yh = !1, _h = 0, ZR = 0, JR = 25, Oe = null, ka = null, Nl = -1, a0 = !1;
    function Rn() {
      {
        var i = Oe;
        ka === null ? ka = [i] : ka.push(i);
      }
    }
    function ct() {
      {
        var i = Oe;
        ka !== null && (Nl++, ka[Nl] !== i && KR(i));
      }
    }
    function Tf(i) {
      i != null && !xn(i) && p("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", Oe, typeof i);
    }
    function KR(i) {
      {
        var a = xe(Gn);
        if (!r0.has(a) && (r0.add(a), ka !== null)) {
          for (var d = "", m = 30, _ = 0; _ <= Nl; _++) {
            for (var b = ka[_], P = _ === Nl ? i : b, N = _ + 1 + ". " + b; N.length < m; )
              N += " ";
            N += P + `
`, d += N;
          }
          p(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, a, d);
        }
      }
    }
    function gr() {
      throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
    }
    function s0(i, a) {
      if (a0)
        return !1;
      if (a === null)
        return p("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", Oe), !1;
      i.length !== a.length && p(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, Oe, "[" + a.join(", ") + "]", "[" + i.join(", ") + "]");
      for (var d = 0; d < a.length && d < i.length; d++)
        if (!Pr(i[d], a[d]))
          return !1;
      return !0;
    }
    function bf(i, a, d, m, _, b) {
      Ef = b, Gn = a, ka = i !== null ? i._debugHookTypes : null, Nl = -1, a0 = i !== null && i.type !== a.type, a.memoizedState = null, a.updateQueue = null, a.lanes = We, i !== null && i.memoizedState !== null ? St.current = QM : ka !== null ? St.current = KM : St.current = JM;
      var P = d(m, _);
      if (yh) {
        var N = 0;
        do {
          if (yh = !1, _h = 0, N >= JR)
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          N += 1, a0 = !1, vr = null, Bi = null, a.updateQueue = null, Nl = -1, St.current = $M, P = d(m, _);
        } while (yh);
      }
      St.current = Hm, a._debugHookTypes = ka;
      var V = vr !== null && vr.next !== null;
      if (Ef = We, Gn = null, vr = null, Bi = null, Oe = null, ka = null, Nl = -1, i !== null && (i.flags & wt) !== (a.flags & wt) && // Disable this warning in legacy mode, because legacy Suspense is weird
      // and creates false positives. To make this work in legacy mode, we'd
      // need to mark fibers that commit in an incomplete state, somehow. For
      // now I'll disable the warning that most of the bugs that would trigger
      // it are either exclusive to concurrent mode or exist in both.
      (i.mode & Ln) !== jt && p("Internal React error: Expected static flag was missing. Please notify the React team."), Am = !1, V)
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      return P;
    }
    function wf() {
      var i = _h !== 0;
      return _h = 0, i;
    }
    function PM(i, a, d) {
      a.updateQueue = i.updateQueue, (a.mode & Yr) !== jt ? a.flags &= ~(tt | de | Yi | Be) : a.flags &= ~(Yi | Be), i.lanes = fo(i.lanes, d);
    }
    function DM() {
      if (St.current = Hm, Am) {
        for (var i = Gn.memoizedState; i !== null; ) {
          var a = i.queue;
          a !== null && (a.pending = null), i = i.next;
        }
        Am = !1;
      }
      Ef = We, Gn = null, vr = null, Bi = null, ka = null, Nl = -1, Oe = null, WM = !1, yh = !1, _h = 0;
    }
    function bo() {
      var i = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      return Bi === null ? Gn.memoizedState = Bi = i : Bi = Bi.next = i, Bi;
    }
    function Hs() {
      var i;
      if (vr === null) {
        var a = Gn.alternate;
        a !== null ? i = a.memoizedState : i = null;
      } else
        i = vr.next;
      var d;
      if (Bi === null ? d = Gn.memoizedState : d = Bi.next, d !== null)
        Bi = d, d = Bi.next, vr = i;
      else {
        if (i === null)
          throw new Error("Rendered more hooks than during the previous render.");
        vr = i;
        var m = {
          memoizedState: vr.memoizedState,
          baseState: vr.baseState,
          baseQueue: vr.baseQueue,
          queue: vr.queue,
          next: null
        };
        Bi === null ? Gn.memoizedState = Bi = m : Bi = Bi.next = m;
      }
      return Bi;
    }
    function UM() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function o0(i, a) {
      return typeof a == "function" ? a(i) : a;
    }
    function l0(i, a, d) {
      var m = bo(), _;
      d !== void 0 ? _ = d(a) : _ = a, m.memoizedState = m.baseState = _;
      var b = {
        pending: null,
        interleaved: null,
        lanes: We,
        dispatch: null,
        lastRenderedReducer: i,
        lastRenderedState: _
      };
      m.queue = b;
      var P = b.dispatch = tC.bind(null, Gn, b);
      return [m.memoizedState, P];
    }
    function u0(i, a, d) {
      var m = Hs(), _ = m.queue;
      if (_ === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      _.lastRenderedReducer = i;
      var b = vr, P = b.baseQueue, N = _.pending;
      if (N !== null) {
        if (P !== null) {
          var V = P.next, q = N.next;
          P.next = q, N.next = V;
        }
        b.baseQueue !== P && p("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), b.baseQueue = P = N, _.pending = null;
      }
      if (P !== null) {
        var te = P.next, me = b.baseState, we = null, Le = null, je = null, Qe = te;
        do {
          var Ft = Qe.lane;
          if (vl(Ef, Ft)) {
            if (je !== null) {
              var kt = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: Mi,
                action: Qe.action,
                hasEagerState: Qe.hasEagerState,
                eagerState: Qe.eagerState,
                next: null
              };
              je = je.next = kt;
            }
            if (Qe.hasEagerState)
              me = Qe.eagerState;
            else {
              var Jn = Qe.action;
              me = i(me, Jn);
            }
          } else {
            var en = {
              lane: Ft,
              action: Qe.action,
              hasEagerState: Qe.hasEagerState,
              eagerState: Qe.eagerState,
              next: null
            };
            je === null ? (Le = je = en, we = me) : je = je.next = en, Gn.lanes = Qt(Gn.lanes, Ft), Mv(Ft);
          }
          Qe = Qe.next;
        } while (Qe !== null && Qe !== te);
        je === null ? we = me : je.next = Le, Pr(me, m.memoizedState) || $m(), m.memoizedState = me, m.baseState = we, m.baseQueue = je, _.lastRenderedState = me;
      }
      var Kn = _.interleaved;
      if (Kn !== null) {
        var _e = Kn;
        do {
          var De = _e.lane;
          Gn.lanes = Qt(Gn.lanes, De), Mv(De), _e = _e.next;
        } while (_e !== Kn);
      } else
        P === null && (_.lanes = We);
      var ve = _.dispatch;
      return [m.memoizedState, ve];
    }
    function c0(i, a, d) {
      var m = Hs(), _ = m.queue;
      if (_ === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      _.lastRenderedReducer = i;
      var b = _.dispatch, P = _.pending, N = m.memoizedState;
      if (P !== null) {
        _.pending = null;
        var V = P.next, q = V;
        do {
          var te = q.action;
          N = i(N, te), q = q.next;
        } while (q !== V);
        Pr(N, m.memoizedState) || $m(), m.memoizedState = N, m.baseQueue === null && (m.baseState = N), _.lastRenderedState = N;
      }
      return [N, b];
    }
    function rB(i, a, d) {
    }
    function aB(i, a, d) {
    }
    function f0(i, a, d) {
      var m = Gn, _ = bo(), b, P = mr();
      if (P) {
        if (d === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        b = d(), Mf || b !== d() && (p("The result of getServerSnapshot should be cached to avoid an infinite loop"), Mf = !0);
      } else {
        if (b = a(), !Mf) {
          var N = a();
          Pr(b, N) || (p("The result of getSnapshot should be cached to avoid an infinite loop"), Mf = !0);
        }
        var V = yv();
        if (V === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        co(V, Ef) || NM(m, a, b);
      }
      _.memoizedState = b;
      var q = {
        value: b,
        getSnapshot: a
      };
      return _.queue = q, Eh(IM.bind(null, m, q, i), [i]), m.flags |= Yi, Sh(oi | ir, OM.bind(null, m, q, b, a), void 0, null), b;
    }
    function Rm(i, a, d) {
      var m = Gn, _ = Hs(), b = a();
      if (!Mf) {
        var P = a();
        Pr(b, P) || (p("The result of getSnapshot should be cached to avoid an infinite loop"), Mf = !0);
      }
      var N = _.memoizedState, V = !Pr(N, b);
      V && (_.memoizedState = b, $m());
      var q = _.queue;
      if (Bu(IM.bind(null, m, q, i), [i]), q.getSnapshot !== a || V || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      Bi !== null && Bi.memoizedState.tag & oi) {
        m.flags |= Yi, Sh(oi | ir, OM.bind(null, m, q, b, a), void 0, null);
        var te = yv();
        if (te === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        co(te, Ef) || NM(m, a, b);
      }
      return b;
    }
    function NM(i, a, d) {
      i.flags |= Ka;
      var m = {
        getSnapshot: a,
        value: d
      }, _ = Gn.updateQueue;
      if (_ === null)
        _ = UM(), Gn.updateQueue = _, _.stores = [m];
      else {
        var b = _.stores;
        b === null ? _.stores = [m] : b.push(m);
      }
    }
    function OM(i, a, d, m) {
      a.value = d, a.getSnapshot = m, FM(a) && zM(i);
    }
    function IM(i, a, d) {
      var m = function() {
        FM(a) && zM(i);
      };
      return d(m);
    }
    function FM(i) {
      var a = i.getSnapshot, d = i.value;
      try {
        var m = a();
        return !Pr(d, m);
      } catch {
        return !0;
      }
    }
    function zM(i) {
      ki(i, fn, kn);
    }
    function xh(i) {
      var a = bo();
      typeof i == "function" && (i = i()), a.memoizedState = a.baseState = i;
      var d = {
        pending: null,
        interleaved: null,
        lanes: We,
        dispatch: null,
        lastRenderedReducer: o0,
        lastRenderedState: i
      };
      a.queue = d;
      var m = d.dispatch = nC.bind(null, Gn, d);
      return [a.memoizedState, m];
    }
    function Cm(i) {
      return u0(o0);
    }
    function Lm(i) {
      return c0(o0);
    }
    function Sh(i, a, d, m) {
      var _ = {
        tag: i,
        create: a,
        destroy: d,
        deps: m,
        // Circular
        next: null
      }, b = Gn.updateQueue;
      if (b === null)
        b = UM(), Gn.updateQueue = b, b.lastEffect = _.next = _;
      else {
        var P = b.lastEffect;
        if (P === null)
          b.lastEffect = _.next = _;
        else {
          var N = P.next;
          P.next = _, _.next = N, b.lastEffect = _;
        }
      }
      return _;
    }
    function d0(i) {
      var a = bo();
      {
        var d = {
          current: i
        };
        return a.memoizedState = d, d;
      }
    }
    function Pm(i) {
      var a = Hs();
      return a.memoizedState;
    }
    function Mh(i, a, d, m) {
      var _ = bo(), b = m === void 0 ? null : m;
      Gn.flags |= i, _.memoizedState = Sh(oi | a, d, void 0, b);
    }
    function Dm(i, a, d, m) {
      var _ = Hs(), b = m === void 0 ? null : m, P = void 0;
      if (vr !== null) {
        var N = vr.memoizedState;
        if (P = N.destroy, b !== null) {
          var V = N.deps;
          if (s0(b, V)) {
            _.memoizedState = Sh(a, d, P, b);
            return;
          }
        }
      }
      Gn.flags |= i, _.memoizedState = Sh(oi | a, d, P, b);
    }
    function Eh(i, a) {
      return (Gn.mode & Yr) !== jt ? Mh(tt | Yi | se, ir, i, a) : Mh(Yi | se, ir, i, a);
    }
    function Bu(i, a) {
      return Dm(Yi, ir, i, a);
    }
    function h0(i, a) {
      return Mh(Be, Ul, i, a);
    }
    function Um(i, a) {
      return Dm(Be, Ul, i, a);
    }
    function p0(i, a) {
      var d = Be;
      return d |= pe, (Gn.mode & Yr) !== jt && (d |= de), Mh(d, bi, i, a);
    }
    function Nm(i, a) {
      return Dm(Be, bi, i, a);
    }
    function BM(i, a) {
      if (typeof a == "function") {
        var d = a, m = i();
        return d(m), function() {
          d(null);
        };
      } else if (a != null) {
        var _ = a;
        _.hasOwnProperty("current") || p("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(_).join(", ") + "}");
        var b = i();
        return _.current = b, function() {
          _.current = null;
        };
      }
    }
    function m0(i, a, d) {
      typeof a != "function" && p("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", a !== null ? typeof a : "null");
      var m = d != null ? d.concat([i]) : null, _ = Be;
      return _ |= pe, (Gn.mode & Yr) !== jt && (_ |= de), Mh(_, bi, BM.bind(null, a, i), m);
    }
    function Om(i, a, d) {
      typeof a != "function" && p("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", a !== null ? typeof a : "null");
      var m = d != null ? d.concat([i]) : null;
      return Dm(Be, bi, BM.bind(null, a, i), m);
    }
    function QR(i, a) {
    }
    var Im = QR;
    function v0(i, a) {
      var d = bo(), m = a === void 0 ? null : a;
      return d.memoizedState = [i, m], i;
    }
    function Fm(i, a) {
      var d = Hs(), m = a === void 0 ? null : a, _ = d.memoizedState;
      if (_ !== null && m !== null) {
        var b = _[1];
        if (s0(m, b))
          return _[0];
      }
      return d.memoizedState = [i, m], i;
    }
    function g0(i, a) {
      var d = bo(), m = a === void 0 ? null : a, _ = i();
      return d.memoizedState = [_, m], _;
    }
    function zm(i, a) {
      var d = Hs(), m = a === void 0 ? null : a, _ = d.memoizedState;
      if (_ !== null && m !== null) {
        var b = _[1];
        if (s0(m, b))
          return _[0];
      }
      var P = i();
      return d.memoizedState = [P, m], P;
    }
    function y0(i) {
      var a = xh(i), d = a[0], m = a[1];
      return Eh(function() {
        var _ = Qr.transition;
        Qr.transition = {};
        try {
          m(i);
        } finally {
          Qr.transition = _;
        }
      }, [i]), d;
    }
    function HM(i) {
      var a = Cm(), d = a[0], m = a[1];
      return Bu(function() {
        var _ = Qr.transition;
        Qr.transition = {};
        try {
          m(i);
        } finally {
          Qr.transition = _;
        }
      }, [i]), d;
    }
    function VM(i) {
      var a = Lm(), d = a[0], m = a[1];
      return Bu(function() {
        var _ = Qr.transition;
        Qr.transition = {};
        try {
          m(i);
        } finally {
          Qr.transition = _;
        }
      }, [i]), d;
    }
    function $R(i, a, d) {
      var m = Cr();
      Ei(of(m, yl)), i(!0);
      var _ = Qr.transition;
      Qr.transition = {};
      var b = Qr.transition;
      Qr.transition._updatedFibers = /* @__PURE__ */ new Set();
      try {
        i(!1), a();
      } finally {
        if (Ei(m), Qr.transition = _, _ === null && b._updatedFibers) {
          var P = b._updatedFibers.size;
          P > 10 && h("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), b._updatedFibers.clear();
        }
      }
    }
    function _0() {
      var i = xh(!1), a = i[0], d = i[1], m = $R.bind(null, d), _ = bo();
      return _.memoizedState = m, [a, m];
    }
    function kM() {
      var i = Cm(), a = i[0], d = Hs(), m = d.memoizedState;
      return [a, m];
    }
    function GM() {
      var i = Lm(), a = i[0], d = Hs(), m = d.memoizedState;
      return [a, m];
    }
    var WM = !1;
    function eC() {
      return WM;
    }
    function x0() {
      var i = bo(), a = yv(), d = a.identifierPrefix, m;
      if (mr()) {
        var _ = LR();
        m = ":" + d + "R" + _;
        var b = _h++;
        b > 0 && (m += "H" + b.toString(32)), m += ":";
      } else {
        var P = ZR++;
        m = ":" + d + "r" + P.toString(32) + ":";
      }
      return i.memoizedState = m, m;
    }
    function Bm() {
      var i = Hs(), a = i.memoizedState;
      return a;
    }
    function tC(i, a, d) {
      typeof arguments[3] == "function" && p("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var m = Fl(i), _ = {
        lane: m,
        action: d,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (XM(i))
        YM(a, _);
      else {
        jM(i, a, _);
        var b = Nr(), P = ki(i, m, b);
        P !== null && qM(P, a, m);
      }
      ZM(i, m);
    }
    function nC(i, a, d) {
      typeof arguments[3] == "function" && p("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var m = Fl(i), _ = {
        lane: m,
        action: d,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (XM(i))
        YM(a, _);
      else {
        jM(i, a, _);
        var b = i.alternate;
        if (i.lanes === We && (b === null || b.lanes === We)) {
          var P = a.lastRenderedReducer;
          if (P !== null) {
            var N;
            N = St.current, St.current = cs;
            try {
              var V = a.lastRenderedState, q = P(V, d);
              if (_.hasEagerState = !0, _.eagerState = q, Pr(q, V))
                return;
            } catch {
            } finally {
              St.current = N;
            }
          }
        }
        var te = Nr(), me = ki(i, m, te);
        me !== null && qM(me, a, m);
      }
      ZM(i, m);
    }
    function XM(i) {
      var a = i.alternate;
      return i === Gn || a !== null && a === Gn;
    }
    function YM(i, a) {
      yh = Am = !0;
      var d = i.pending;
      d === null ? a.next = a : (a.next = d.next, d.next = a), i.pending = a;
    }
    function jM(i, a, d, m) {
      if (oT(i)) {
        var _ = a.interleaved;
        _ === null ? (d.next = d, zt(a)) : (d.next = _.next, _.next = d), a.interleaved = d;
      } else {
        var b = a.pending;
        b === null ? d.next = d : (d.next = b.next, b.next = d), a.pending = d;
      }
    }
    function qM(i, a, d) {
      if (rf(d)) {
        var m = a.lanes;
        m = Ps(m, i.pendingLanes);
        var _ = Qt(m, d);
        a.lanes = _, mo(i, _);
      }
    }
    function ZM(i, a, d) {
      Tl(i, a);
    }
    var Hm = {
      readContext: nt,
      useCallback: gr,
      useContext: gr,
      useEffect: gr,
      useImperativeHandle: gr,
      useInsertionEffect: gr,
      useLayoutEffect: gr,
      useMemo: gr,
      useReducer: gr,
      useRef: gr,
      useState: gr,
      useDebugValue: gr,
      useDeferredValue: gr,
      useTransition: gr,
      useMutableSource: gr,
      useSyncExternalStore: gr,
      useId: gr,
      unstable_isNewReconciler: C
    }, JM = null, KM = null, QM = null, $M = null, Vs = null, cs = null, Vm = null;
    {
      var S0 = function() {
        p("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      }, Jt = function() {
        p("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      JM = {
        readContext: function(i) {
          return nt(i);
        },
        useCallback: function(i, a) {
          return Oe = "useCallback", Rn(), Tf(a), v0(i, a);
        },
        useContext: function(i) {
          return Oe = "useContext", Rn(), nt(i);
        },
        useEffect: function(i, a) {
          return Oe = "useEffect", Rn(), Tf(a), Eh(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Oe = "useImperativeHandle", Rn(), Tf(d), m0(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Oe = "useInsertionEffect", Rn(), Tf(a), h0(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Oe = "useLayoutEffect", Rn(), Tf(a), p0(i, a);
        },
        useMemo: function(i, a) {
          Oe = "useMemo", Rn(), Tf(a);
          var d = St.current;
          St.current = Vs;
          try {
            return g0(i, a);
          } finally {
            St.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Oe = "useReducer", Rn();
          var m = St.current;
          St.current = Vs;
          try {
            return l0(i, a, d);
          } finally {
            St.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", Rn(), d0(i);
        },
        useState: function(i) {
          Oe = "useState", Rn();
          var a = St.current;
          St.current = Vs;
          try {
            return xh(i);
          } finally {
            St.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Oe = "useDebugValue", Rn(), void 0;
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", Rn(), y0(i);
        },
        useTransition: function() {
          return Oe = "useTransition", Rn(), _0();
        },
        useMutableSource: function(i, a, d) {
          return Oe = "useMutableSource", Rn(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Oe = "useSyncExternalStore", Rn(), f0(i, a, d);
        },
        useId: function() {
          return Oe = "useId", Rn(), x0();
        },
        unstable_isNewReconciler: C
      }, KM = {
        readContext: function(i) {
          return nt(i);
        },
        useCallback: function(i, a) {
          return Oe = "useCallback", ct(), v0(i, a);
        },
        useContext: function(i) {
          return Oe = "useContext", ct(), nt(i);
        },
        useEffect: function(i, a) {
          return Oe = "useEffect", ct(), Eh(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Oe = "useImperativeHandle", ct(), m0(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Oe = "useInsertionEffect", ct(), h0(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Oe = "useLayoutEffect", ct(), p0(i, a);
        },
        useMemo: function(i, a) {
          Oe = "useMemo", ct();
          var d = St.current;
          St.current = Vs;
          try {
            return g0(i, a);
          } finally {
            St.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Oe = "useReducer", ct();
          var m = St.current;
          St.current = Vs;
          try {
            return l0(i, a, d);
          } finally {
            St.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", ct(), d0(i);
        },
        useState: function(i) {
          Oe = "useState", ct();
          var a = St.current;
          St.current = Vs;
          try {
            return xh(i);
          } finally {
            St.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Oe = "useDebugValue", ct(), void 0;
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", ct(), y0(i);
        },
        useTransition: function() {
          return Oe = "useTransition", ct(), _0();
        },
        useMutableSource: function(i, a, d) {
          return Oe = "useMutableSource", ct(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Oe = "useSyncExternalStore", ct(), f0(i, a, d);
        },
        useId: function() {
          return Oe = "useId", ct(), x0();
        },
        unstable_isNewReconciler: C
      }, QM = {
        readContext: function(i) {
          return nt(i);
        },
        useCallback: function(i, a) {
          return Oe = "useCallback", ct(), Fm(i, a);
        },
        useContext: function(i) {
          return Oe = "useContext", ct(), nt(i);
        },
        useEffect: function(i, a) {
          return Oe = "useEffect", ct(), Bu(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Oe = "useImperativeHandle", ct(), Om(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Oe = "useInsertionEffect", ct(), Um(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Oe = "useLayoutEffect", ct(), Nm(i, a);
        },
        useMemo: function(i, a) {
          Oe = "useMemo", ct();
          var d = St.current;
          St.current = cs;
          try {
            return zm(i, a);
          } finally {
            St.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Oe = "useReducer", ct();
          var m = St.current;
          St.current = cs;
          try {
            return u0(i, a, d);
          } finally {
            St.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", ct(), Pm();
        },
        useState: function(i) {
          Oe = "useState", ct();
          var a = St.current;
          St.current = cs;
          try {
            return Cm(i);
          } finally {
            St.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Oe = "useDebugValue", ct(), Im();
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", ct(), HM(i);
        },
        useTransition: function() {
          return Oe = "useTransition", ct(), kM();
        },
        useMutableSource: function(i, a, d) {
          return Oe = "useMutableSource", ct(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Oe = "useSyncExternalStore", ct(), Rm(i, a);
        },
        useId: function() {
          return Oe = "useId", ct(), Bm();
        },
        unstable_isNewReconciler: C
      }, $M = {
        readContext: function(i) {
          return nt(i);
        },
        useCallback: function(i, a) {
          return Oe = "useCallback", ct(), Fm(i, a);
        },
        useContext: function(i) {
          return Oe = "useContext", ct(), nt(i);
        },
        useEffect: function(i, a) {
          return Oe = "useEffect", ct(), Bu(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Oe = "useImperativeHandle", ct(), Om(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Oe = "useInsertionEffect", ct(), Um(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Oe = "useLayoutEffect", ct(), Nm(i, a);
        },
        useMemo: function(i, a) {
          Oe = "useMemo", ct();
          var d = St.current;
          St.current = Vm;
          try {
            return zm(i, a);
          } finally {
            St.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Oe = "useReducer", ct();
          var m = St.current;
          St.current = Vm;
          try {
            return c0(i, a, d);
          } finally {
            St.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", ct(), Pm();
        },
        useState: function(i) {
          Oe = "useState", ct();
          var a = St.current;
          St.current = Vm;
          try {
            return Lm(i);
          } finally {
            St.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Oe = "useDebugValue", ct(), Im();
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", ct(), VM(i);
        },
        useTransition: function() {
          return Oe = "useTransition", ct(), GM();
        },
        useMutableSource: function(i, a, d) {
          return Oe = "useMutableSource", ct(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Oe = "useSyncExternalStore", ct(), Rm(i, a);
        },
        useId: function() {
          return Oe = "useId", ct(), Bm();
        },
        unstable_isNewReconciler: C
      }, Vs = {
        readContext: function(i) {
          return S0(), nt(i);
        },
        useCallback: function(i, a) {
          return Oe = "useCallback", Jt(), Rn(), v0(i, a);
        },
        useContext: function(i) {
          return Oe = "useContext", Jt(), Rn(), nt(i);
        },
        useEffect: function(i, a) {
          return Oe = "useEffect", Jt(), Rn(), Eh(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Oe = "useImperativeHandle", Jt(), Rn(), m0(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Oe = "useInsertionEffect", Jt(), Rn(), h0(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Oe = "useLayoutEffect", Jt(), Rn(), p0(i, a);
        },
        useMemo: function(i, a) {
          Oe = "useMemo", Jt(), Rn();
          var d = St.current;
          St.current = Vs;
          try {
            return g0(i, a);
          } finally {
            St.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Oe = "useReducer", Jt(), Rn();
          var m = St.current;
          St.current = Vs;
          try {
            return l0(i, a, d);
          } finally {
            St.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", Jt(), Rn(), d0(i);
        },
        useState: function(i) {
          Oe = "useState", Jt(), Rn();
          var a = St.current;
          St.current = Vs;
          try {
            return xh(i);
          } finally {
            St.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Oe = "useDebugValue", Jt(), Rn(), void 0;
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", Jt(), Rn(), y0(i);
        },
        useTransition: function() {
          return Oe = "useTransition", Jt(), Rn(), _0();
        },
        useMutableSource: function(i, a, d) {
          return Oe = "useMutableSource", Jt(), Rn(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Oe = "useSyncExternalStore", Jt(), Rn(), f0(i, a, d);
        },
        useId: function() {
          return Oe = "useId", Jt(), Rn(), x0();
        },
        unstable_isNewReconciler: C
      }, cs = {
        readContext: function(i) {
          return S0(), nt(i);
        },
        useCallback: function(i, a) {
          return Oe = "useCallback", Jt(), ct(), Fm(i, a);
        },
        useContext: function(i) {
          return Oe = "useContext", Jt(), ct(), nt(i);
        },
        useEffect: function(i, a) {
          return Oe = "useEffect", Jt(), ct(), Bu(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Oe = "useImperativeHandle", Jt(), ct(), Om(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Oe = "useInsertionEffect", Jt(), ct(), Um(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Oe = "useLayoutEffect", Jt(), ct(), Nm(i, a);
        },
        useMemo: function(i, a) {
          Oe = "useMemo", Jt(), ct();
          var d = St.current;
          St.current = cs;
          try {
            return zm(i, a);
          } finally {
            St.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Oe = "useReducer", Jt(), ct();
          var m = St.current;
          St.current = cs;
          try {
            return u0(i, a, d);
          } finally {
            St.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", Jt(), ct(), Pm();
        },
        useState: function(i) {
          Oe = "useState", Jt(), ct();
          var a = St.current;
          St.current = cs;
          try {
            return Cm(i);
          } finally {
            St.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Oe = "useDebugValue", Jt(), ct(), Im();
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", Jt(), ct(), HM(i);
        },
        useTransition: function() {
          return Oe = "useTransition", Jt(), ct(), kM();
        },
        useMutableSource: function(i, a, d) {
          return Oe = "useMutableSource", Jt(), ct(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Oe = "useSyncExternalStore", Jt(), ct(), Rm(i, a);
        },
        useId: function() {
          return Oe = "useId", Jt(), ct(), Bm();
        },
        unstable_isNewReconciler: C
      }, Vm = {
        readContext: function(i) {
          return S0(), nt(i);
        },
        useCallback: function(i, a) {
          return Oe = "useCallback", Jt(), ct(), Fm(i, a);
        },
        useContext: function(i) {
          return Oe = "useContext", Jt(), ct(), nt(i);
        },
        useEffect: function(i, a) {
          return Oe = "useEffect", Jt(), ct(), Bu(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Oe = "useImperativeHandle", Jt(), ct(), Om(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Oe = "useInsertionEffect", Jt(), ct(), Um(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Oe = "useLayoutEffect", Jt(), ct(), Nm(i, a);
        },
        useMemo: function(i, a) {
          Oe = "useMemo", Jt(), ct();
          var d = St.current;
          St.current = cs;
          try {
            return zm(i, a);
          } finally {
            St.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Oe = "useReducer", Jt(), ct();
          var m = St.current;
          St.current = cs;
          try {
            return c0(i, a, d);
          } finally {
            St.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", Jt(), ct(), Pm();
        },
        useState: function(i) {
          Oe = "useState", Jt(), ct();
          var a = St.current;
          St.current = cs;
          try {
            return Lm(i);
          } finally {
            St.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Oe = "useDebugValue", Jt(), ct(), Im();
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", Jt(), ct(), VM(i);
        },
        useTransition: function() {
          return Oe = "useTransition", Jt(), ct(), GM();
        },
        useMutableSource: function(i, a, d) {
          return Oe = "useMutableSource", Jt(), ct(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Oe = "useSyncExternalStore", Jt(), ct(), Rm(i, a);
        },
        useId: function() {
          return Oe = "useId", Jt(), ct(), Bm();
        },
        unstable_isNewReconciler: C
      };
    }
    var Ol = r.unstable_now, eE = 0, km = -1, Th = -1, Gm = -1, M0 = !1, Wm = !1;
    function tE() {
      return M0;
    }
    function iC() {
      Wm = !0;
    }
    function rC() {
      M0 = !1, Wm = !1;
    }
    function aC() {
      M0 = Wm, Wm = !1;
    }
    function nE() {
      return eE;
    }
    function iE() {
      eE = Ol();
    }
    function E0(i) {
      Th = Ol(), i.actualStartTime < 0 && (i.actualStartTime = Ol());
    }
    function rE(i) {
      Th = -1;
    }
    function Xm(i, a) {
      if (Th >= 0) {
        var d = Ol() - Th;
        i.actualDuration += d, a && (i.selfBaseDuration = d), Th = -1;
      }
    }
    function Ga(i) {
      if (km >= 0) {
        var a = Ol() - km;
        km = -1;
        for (var d = i.return; d !== null; ) {
          switch (d.tag) {
            case I:
              var m = d.stateNode;
              m.effectDuration += a;
              return;
            case le:
              var _ = d.stateNode;
              _.effectDuration += a;
              return;
          }
          d = d.return;
        }
      }
    }
    function T0(i) {
      if (Gm >= 0) {
        var a = Ol() - Gm;
        Gm = -1;
        for (var d = i.return; d !== null; ) {
          switch (d.tag) {
            case I:
              var m = d.stateNode;
              m !== null && (m.passiveEffectDuration += a);
              return;
            case le:
              var _ = d.stateNode;
              _ !== null && (_.passiveEffectDuration += a);
              return;
          }
          d = d.return;
        }
      }
    }
    function Wa() {
      km = Ol();
    }
    function b0() {
      Gm = Ol();
    }
    function w0(i) {
      for (var a = i.child; a; )
        i.actualDuration += a.actualDuration, a = a.sibling;
    }
    function Ym(i, a) {
      return {
        value: i,
        source: a,
        stack: mm(a)
      };
    }
    function sC(i, a) {
      return !0;
    }
    function A0(i, a) {
      try {
        var d = sC(i, a);
        if (d === !1)
          return;
        var m = a.value, _ = a.source, b = a.stack, P = b !== null ? b : "";
        if (m != null && m._suppressLogging) {
          if (i.tag === W)
            return;
          console.error(m);
        }
        var N = _ ? xe(_) : null, V = N ? "The above error occurred in the <" + N + "> component:" : "The above error occurred in one of your React components:", q;
        if (i.tag === I)
          q = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
        else {
          var te = xe(i) || "Anonymous";
          q = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + te + ".");
        }
        var me = V + `
` + P + `

` + ("" + q);
        console.error(me);
      } catch (we) {
        setTimeout(function() {
          throw we;
        });
      }
    }
    var oC = typeof WeakMap == "function" ? WeakMap : Map;
    function aE(i, a, d) {
      var m = Ht(kn, d);
      m.tag = ge, m.payload = {
        element: null
      };
      var _ = a.value;
      return m.callback = function() {
        hP(_), A0(i, a);
      }, m;
    }
    function R0(i, a, d) {
      var m = Ht(kn, d);
      m.tag = ge;
      var _ = i.type.getDerivedStateFromError;
      if (typeof _ == "function") {
        var b = a.value;
        m.payload = function() {
          return _(b);
        }, m.callback = function() {
          bT(i), A0(i, a);
        };
      }
      var P = i.stateNode;
      return P !== null && typeof P.componentDidCatch == "function" && (m.callback = function() {
        bT(i), A0(i, a), typeof _ != "function" && fP(this);
        var V = a.value, q = a.stack;
        this.componentDidCatch(V, {
          componentStack: q !== null ? q : ""
        }), typeof _ != "function" && (ii(i.lanes, fn) || p("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", xe(i) || "Unknown"));
      }), m;
    }
    function sE(i, a, d) {
      var m = i.pingCache, _;
      if (m === null ? (m = i.pingCache = new oC(), _ = /* @__PURE__ */ new Set(), m.set(a, _)) : (_ = m.get(a), _ === void 0 && (_ = /* @__PURE__ */ new Set(), m.set(a, _))), !_.has(d)) {
        _.add(d);
        var b = pP.bind(null, i, a, d);
        fr && Hh(i, d), a.then(b, b);
      }
    }
    function lC(i, a, d, m) {
      var _ = i.updateQueue;
      if (_ === null) {
        var b = /* @__PURE__ */ new Set();
        b.add(d), i.updateQueue = b;
      } else
        _.add(d);
    }
    function uC(i, a) {
      var d = i.tag;
      if ((i.mode & Ln) === jt && (d === B || d === ne || d === ue)) {
        var m = i.alternate;
        m ? (i.updateQueue = m.updateQueue, i.memoizedState = m.memoizedState, i.lanes = m.lanes) : (i.updateQueue = null, i.memoizedState = null);
      }
    }
    function oE(i) {
      var a = i;
      do {
        if (a.tag === re && jR(a))
          return a;
        a = a.return;
      } while (a !== null);
      return null;
    }
    function lE(i, a, d, m, _) {
      if ((i.mode & Ln) === jt) {
        if (i === a)
          i.flags |= Fe;
        else {
          if (i.flags |= Nt, d.flags |= st, d.flags &= ~(Br | $), au && T) {
            var b = i.alternate;
            if (b === null) {
              var P = i.child, N = P.child;
              if (N !== null) {
                var V = N.memoizedProps.children, q = Rd("hidden", V);
                N.pendingProps = q, N.memoizedProps = q;
              }
            }
          }
          if (d.tag === W) {
            var te = d.alternate;
            if (te === null)
              d.tag = qe;
            else {
              var me = Ht(kn, fn);
              me.tag = tr, sn(d, me);
            }
          }
          d.lanes = Qt(d.lanes, fn);
        }
        return i;
      }
      return i.flags |= Fe, i.lanes = _, i;
    }
    function cC(i, a, d, m, _) {
      if (d.flags |= $, fr && Hh(i, _), m !== null && typeof m == "object" && typeof m.then == "function") {
        var b = m;
        uC(d);
        var P = oE(a);
        if (P !== null) {
          P.flags &= ~Kt, lE(P, a, d, i, _), P.mode & Ln && sE(i, b, _), lC(P, i, b);
          return;
        } else {
          if (!Yd(_)) {
            sE(i, b, _), o_();
            return;
          }
          var N = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          m = N;
        }
      } else if (mr() && d.mode & Ln) {
        OR();
        var V = oE(a);
        if (V !== null) {
          (V.flags & Fe) === k && (V.flags |= Kt), lE(V, a, d, i, _), Xy(m);
          return;
        }
      }
      iP(m), m = Ym(m, d);
      var q = a;
      do {
        switch (q.tag) {
          case I: {
            var te = m;
            q.flags |= Fe;
            var me = ml(_);
            q.lanes = Qt(q.lanes, me);
            var we = aE(q, te, me);
            gn(q, we);
            return;
          }
          case W:
            var Le = m, je = q.type, Qe = q.stateNode;
            if ((q.flags & Nt) === k && (typeof je.getDerivedStateFromError == "function" || Qe !== null && typeof Qe.componentDidCatch == "function" && !vT(Qe))) {
              q.flags |= Fe;
              var Ft = ml(_);
              q.lanes = Qt(q.lanes, Ft);
              var en = R0(q, Le, Ft);
              gn(q, en);
              return;
            }
            break;
        }
        q = q.return;
      } while (q !== null);
    }
    function fC() {
      return null;
    }
    function ks(i) {
      i.flags |= Be;
    }
    function uE(i) {
      i.flags |= Un, i.flags |= ae;
    }
    function cE(i, a) {
      var d = i !== null && i.child === a.child;
      if (d)
        return !0;
      if ((a.flags & He) !== k)
        return !1;
      for (var m = a.child; m !== null; ) {
        if ((m.flags & _t) !== k || (m.subtreeFlags & _t) !== k)
          return !1;
        m = m.sibling;
      }
      return !0;
    }
    var bh, wh, jm, qm;
    if (sa)
      bh = function(i, a, d, m) {
        for (var _ = a.child; _ !== null; ) {
          if (_.tag === ie || _.tag === fe)
            Ts(i, _.stateNode);
          else if (_.tag !== Z) {
            if (_.child !== null) {
              _.child.return = _, _ = _.child;
              continue;
            }
          }
          if (_ === a)
            return;
          for (; _.sibling === null; ) {
            if (_.return === null || _.return === a)
              return;
            _ = _.return;
          }
          _.sibling.return = _.return, _ = _.sibling;
        }
      }, wh = function(i, a) {
      }, jm = function(i, a, d, m, _) {
        var b = i.memoizedProps;
        if (b !== m) {
          var P = a.stateNode, N = vh(), V = Hr(P, d, b, m, _, N);
          a.updateQueue = V, V && ks(a);
        }
      }, qm = function(i, a, d, m) {
        d !== m && ks(a);
      };
    else if (au) {
      bh = function(i, a, d, m) {
        for (var _ = a.child; _ !== null; ) {
          if (_.tag === ie) {
            var b = _.stateNode;
            if (d && m) {
              var P = _.memoizedProps, N = _.type;
              b = Cd(b, N, P, _);
            }
            Ts(i, b);
          } else if (_.tag === fe) {
            var V = _.stateNode;
            if (d && m) {
              var q = _.memoizedProps;
              V = Pc(V, q, _);
            }
            Ts(i, V);
          } else if (_.tag !== Z) {
            if (_.tag === ot && _.memoizedState !== null) {
              var te = _.child;
              te !== null && (te.return = _), bh(i, _, !0, !0);
            } else if (_.child !== null) {
              _.child.return = _, _ = _.child;
              continue;
            }
          }
          if (_ = _, _ === a)
            return;
          for (; _.sibling === null; ) {
            if (_.return === null || _.return === a)
              return;
            _ = _.return;
          }
          _.sibling.return = _.return, _ = _.sibling;
        }
      };
      var fE = function(i, a, d, m) {
        for (var _ = a.child; _ !== null; ) {
          if (_.tag === ie) {
            var b = _.stateNode;
            if (d && m) {
              var P = _.memoizedProps, N = _.type;
              b = Cd(b, N, P, _);
            }
            lu(i, b);
          } else if (_.tag === fe) {
            var V = _.stateNode;
            if (d && m) {
              var q = _.memoizedProps;
              V = Pc(V, q, _);
            }
            lu(i, V);
          } else if (_.tag !== Z) {
            if (_.tag === ot && _.memoizedState !== null) {
              var te = _.child;
              te !== null && (te.return = _), fE(i, _, !0, !0);
            } else if (_.child !== null) {
              _.child.return = _, _ = _.child;
              continue;
            }
          }
          if (_ = _, _ === a)
            return;
          for (; _.sibling === null; ) {
            if (_.return === null || _.return === a)
              return;
            _ = _.return;
          }
          _.sibling.return = _.return, _ = _.sibling;
        }
      };
      wh = function(i, a) {
        var d = a.stateNode, m = cE(i, a);
        if (!m) {
          var _ = d.containerInfo, b = ou(_);
          fE(b, a, !1, !1), d.pendingChildren = b, ks(a), Jo(_, b);
        }
      }, jm = function(i, a, d, m, _) {
        var b = i.stateNode, P = i.memoizedProps, N = cE(i, a);
        if (N && P === m) {
          a.stateNode = b;
          return;
        }
        var V = a.stateNode, q = vh(), te = null;
        if (P !== m && (te = Hr(V, d, P, m, _, q)), N && te === null) {
          a.stateNode = b;
          return;
        }
        var me = oa(b, te, d, P, m, a, N, V);
        qo(me, d, m, _, q) && ks(a), a.stateNode = me, N ? ks(a) : bh(me, a, !1, !1);
      }, qm = function(i, a, d, m) {
        if (d !== m) {
          var _ = Ky(), b = vh();
          a.stateNode = Gp(m, _, b, a), ks(a);
        } else
          a.stateNode = i.stateNode;
      };
    } else
      wh = function(i, a) {
      }, jm = function(i, a, d, m, _) {
      }, qm = function(i, a, d, m) {
      };
    function Ah(i, a) {
      if (!mr())
        switch (i.tailMode) {
          case "hidden": {
            for (var d = i.tail, m = null; d !== null; )
              d.alternate !== null && (m = d), d = d.sibling;
            m === null ? i.tail = null : m.sibling = null;
            break;
          }
          case "collapsed": {
            for (var _ = i.tail, b = null; _ !== null; )
              _.alternate !== null && (b = _), _ = _.sibling;
            b === null ? !a && i.tail !== null ? i.tail.sibling = null : i.tail = null : b.sibling = null;
            break;
          }
        }
    }
    function rr(i) {
      var a = i.alternate !== null && i.alternate.child === i.child, d = We, m = k;
      if (a) {
        if ((i.mode & _n) !== jt) {
          for (var V = i.selfBaseDuration, q = i.child; q !== null; )
            d = Qt(d, Qt(q.lanes, q.childLanes)), m |= q.subtreeFlags & wt, m |= q.flags & wt, V += q.treeBaseDuration, q = q.sibling;
          i.treeBaseDuration = V;
        } else
          for (var te = i.child; te !== null; )
            d = Qt(d, Qt(te.lanes, te.childLanes)), m |= te.subtreeFlags & wt, m |= te.flags & wt, te.return = i, te = te.sibling;
        i.subtreeFlags |= m;
      } else {
        if ((i.mode & _n) !== jt) {
          for (var _ = i.actualDuration, b = i.selfBaseDuration, P = i.child; P !== null; )
            d = Qt(d, Qt(P.lanes, P.childLanes)), m |= P.subtreeFlags, m |= P.flags, _ += P.actualDuration, b += P.treeBaseDuration, P = P.sibling;
          i.actualDuration = _, i.treeBaseDuration = b;
        } else
          for (var N = i.child; N !== null; )
            d = Qt(d, Qt(N.lanes, N.childLanes)), m |= N.subtreeFlags, m |= N.flags, N.return = i, N = N.sibling;
        i.subtreeFlags |= m;
      }
      return i.childLanes = d, a;
    }
    function dE(i, a, d) {
      var m = a.pendingProps;
      switch (Hy(a), a.tag) {
        case O:
        case Pe:
        case ue:
        case B:
        case ne:
        case K:
        case he:
        case le:
        case Te:
        case J:
          return rr(a), null;
        case W: {
          var _ = a.type;
          return Xr(_) && sl(a), rr(a), null;
        }
        case I: {
          var b = a.stateNode;
          if (_f(a), vu(a), i0(), b.pendingContext && (b.context = b.pendingContext, b.pendingContext = null), i === null || i.child === null) {
            var P = dh(a);
            if (P)
              ks(a);
            else if (i !== null) {
              var N = i.memoizedState;
              // Check if this is a client root
              (!N.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (a.flags & Kt) !== k) && (a.flags |= wn, EM());
            }
          }
          return wh(i, a), rr(a), null;
        }
        case ie: {
          $y(a);
          var V = Ky(), q = a.type;
          if (i !== null && a.stateNode != null)
            jm(i, a, q, m, V), i.ref !== a.ref && uE(a);
          else {
            if (!m) {
              if (a.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              return rr(a), null;
            }
            var te = vh(), me = dh(a);
            if (me)
              zR(a, V, te) && ks(a);
            else {
              var we = jo(q, m, V, te, a);
              bh(we, a, !1, !1), a.stateNode = we, qo(we, q, m, V, te) && ks(a);
            }
            a.ref !== null && uE(a);
          }
          return rr(a), null;
        }
        case fe: {
          var Le = m;
          if (i && a.stateNode != null) {
            var je = i.memoizedProps;
            qm(i, a, je, Le);
          } else {
            if (typeof Le != "string" && a.stateNode === null)
              throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            var Qe = Ky(), Ft = vh(), en = dh(a);
            en ? BR(a) && ks(a) : a.stateNode = Gp(Le, Qe, Ft, a);
          }
          return rr(a), null;
        }
        case re: {
          Sf(a);
          var kt = a.memoizedState;
          {
            if (kR() && (a.mode & Ln) !== jt && (a.flags & Nt) === k)
              return MM(a), gf(), a.flags |= Kt | $ | Fe, a;
            if (kt !== null && kt.dehydrated !== null) {
              var Jn = dh(a);
              if (i === null) {
                if (!Jn)
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                if (HR(a), rr(a), (a.mode & _n) !== jt) {
                  var Kn = kt !== null;
                  if (Kn) {
                    var _e = a.child;
                    _e !== null && (a.treeBaseDuration -= _e.treeBaseDuration);
                  }
                }
                return null;
              } else {
                if (gf(), (a.flags & Nt) === k && (a.memoizedState = null), a.flags |= Be, rr(a), (a.mode & _n) !== jt) {
                  var De = kt !== null;
                  if (De) {
                    var ve = a.child;
                    ve !== null && (a.treeBaseDuration -= ve.treeBaseDuration);
                  }
                }
                return null;
              }
            }
            EM();
          }
          if ((a.flags & Nt) !== k)
            return a.lanes = d, (a.mode & _n) !== jt && w0(a), a;
          var et = kt !== null, It = !1;
          if (i === null)
            dh(a);
          else {
            var Et = i.memoizedState;
            It = Et !== null;
          }
          if (et && !It) {
            var pn = a.child;
            if (pn.flags |= $i, (a.mode & Ln) !== jt) {
              var Pn = i === null && (a.memoizedProps.unstable_avoidThisFallback !== !0 || !L);
              Pn || e0(us.current, LM) ? nP() : o_();
            }
          }
          var Yn = a.updateQueue;
          if (Yn !== null && (a.flags |= Be), rr(a), (a.mode & _n) !== jt && et) {
            var Dn = a.child;
            Dn !== null && (a.treeBaseDuration -= Dn.treeBaseDuration);
          }
          return null;
        }
        case Z:
          return _f(a), wh(i, a), i === null && su(a.stateNode.containerInfo), rr(a), null;
        case Me:
          var ci = a.type._context;
          return D(ci, a), rr(a), null;
        case qe: {
          var Tn = a.type;
          return Xr(Tn) && sl(a), rr(a), null;
        }
        case it: {
          Sf(a);
          var dn = a.memoizedState;
          if (dn === null)
            return rr(a), null;
          var wi = (a.flags & Nt) !== k, fi = dn.rendering;
          if (fi === null)
            if (wi)
              Ah(dn, !1);
            else {
              var ja = rP() && (i === null || (i.flags & Nt) === k);
              if (!ja)
                for (var or = a.child; or !== null; ) {
                  var ya = wm(or);
                  if (ya !== null) {
                    wi = !0, a.flags |= Nt, Ah(dn, !1);
                    var _a = ya.updateQueue;
                    return _a !== null && (a.updateQueue = _a, a.flags |= Be), a.subtreeFlags = k, WR(a, d), Dl(a, t0(us.current, gh)), a.child;
                  }
                  or = or.sibling;
                }
              dn.tail !== null && ri() > sT() && (a.flags |= Nt, wi = !0, Ah(dn, !1), a.lanes = dl);
            }
          else {
            if (!wi) {
              var Xs = wm(fi);
              if (Xs !== null) {
                a.flags |= Nt, wi = !0;
                var Uf = Xs.updateQueue;
                if (Uf !== null && (a.updateQueue = Uf, a.flags |= Be), Ah(dn, !0), dn.tail === null && dn.tailMode === "hidden" && !fi.alternate && !mr())
                  return rr(a), null;
              } else
                // The time it took to render last row is greater than the remaining
                // time we have to render. So rendering one more row would likely
                // exceed it.
                ri() * 2 - dn.renderingStartTime > sT() && d !== In && (a.flags |= Nt, wi = !0, Ah(dn, !1), a.lanes = dl);
            }
            if (dn.isBackwards)
              fi.sibling = a.child, a.child = fi;
            else {
              var Nf = dn.last;
              Nf !== null ? Nf.sibling = fi : a.child = fi, dn.last = fi;
            }
          }
          if (dn.tail !== null) {
            var xa = dn.tail;
            dn.rendering = xa, dn.tail = xa.sibling, dn.renderingStartTime = ri(), xa.sibling = null;
            var Yu = us.current;
            return wi ? Yu = t0(Yu, gh) : Yu = xf(Yu), Dl(a, Yu), xa;
          }
          return rr(a), null;
        }
        case gt:
          break;
        case ot:
        case Vt: {
          s_(a);
          var b_ = a.memoizedState, QT = b_ !== null;
          if (i !== null) {
            var n2 = i.memoizedState, i2 = n2 !== null;
            i2 !== QT && // LegacyHidden doesn't do any hiding — it only pre-renders.
            !E && (a.flags |= $i);
          }
          return !QT || (a.mode & Ln) === jt ? rr(a) : ii(Gs, In) && (rr(a), sa && a.subtreeFlags & (Ce | Be) && (a.flags |= $i)), null;
        }
        case nn:
          return null;
        case Tt:
          return null;
      }
      throw new Error("Unknown unit of work tag (" + a.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    var Rh = o.ReactCurrentOwner, fs = !1, C0, Ch, L0, P0, D0, Hu, U0, Zm;
    C0 = {}, Ch = {}, L0 = {}, P0 = {}, D0 = {}, Hu = !1, U0 = {}, Zm = {};
    function Ur(i, a, d, m) {
      i === null ? a.child = AM(a, null, d, m) : a.child = yf(a, i.child, d, m);
    }
    function dC(i, a, d, m) {
      a.child = yf(a, i.child, null, m), a.child = yf(a, null, d, m);
    }
    function hE(i, a, d, m, _) {
      if (a.type !== a.elementType) {
        var b = d.propTypes;
        b && Rr(
          b,
          m,
          // Resolved props
          "prop",
          rt(d)
        );
      }
      var P = d.render, N = a.ref, V, q;
      Je(a, _), Fa(a);
      {
        if (Rh.current = a, za(!0), V = bf(i, a, P, m, N, _), q = wf(), a.mode & ni) {
          vn(!0);
          try {
            V = bf(i, a, P, m, N, _), q = wf();
          } finally {
            vn(!1);
          }
        }
        za(!1);
      }
      return ss(), i !== null && !fs ? (PM(i, a, _), wo(i, a, _)) : (mr() && q && By(a), a.flags |= ze, Ur(i, a, V, _), a.child);
    }
    function pE(i, a, d, m, _) {
      if (i === null) {
        var b = d.type;
        if (PP(b) && d.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        d.defaultProps === void 0) {
          var P = b;
          return P = Df(b), a.tag = ue, a.type = P, I0(a, b), mE(i, a, P, m, _);
        }
        {
          var N = b.propTypes;
          N && Rr(
            N,
            m,
            // Resolved props
            "prop",
            rt(b)
          );
        }
        var V = g_(d.type, null, m, a, a.mode, _);
        return V.ref = a.ref, V.return = a, a.child = V, V;
      }
      {
        var q = d.type, te = q.propTypes;
        te && Rr(
          te,
          m,
          // Resolved props
          "prop",
          rt(q)
        );
      }
      var me = i.child, we = H0(i, _);
      if (!we) {
        var Le = me.memoizedProps, je = d.compare;
        if (je = je !== null ? je : yo, je(Le, m) && i.ref === a.ref)
          return wo(i, a, _);
      }
      a.flags |= ze;
      var Qe = Xu(me, m);
      return Qe.ref = a.ref, Qe.return = a, a.child = Qe, Qe;
    }
    function mE(i, a, d, m, _) {
      if (a.type !== a.elementType) {
        var b = a.elementType;
        if (b.$$typeof === X) {
          var P = b, N = P._payload, V = P._init;
          try {
            b = V(N);
          } catch {
            b = null;
          }
          var q = b && b.propTypes;
          q && Rr(
            q,
            m,
            // Resolved (SimpleMemoComponent has no defaultProps)
            "prop",
            rt(b)
          );
        }
      }
      if (i !== null) {
        var te = i.memoizedProps;
        if (yo(te, m) && i.ref === a.ref && // Prevent bailout if the implementation changed due to hot reload.
        a.type === i.type)
          if (fs = !1, H0(i, _))
            (i.flags & st) !== k && (fs = !0);
          else
            return a.lanes = i.lanes, wo(i, a, _);
      }
      return N0(i, a, d, m, _);
    }
    function vE(i, a, d) {
      var m = a.pendingProps, _ = m.children, b = i !== null ? i.memoizedState : null;
      if (m.mode === "hidden" || E)
        if ((a.mode & Ln) === jt) {
          var P = {
            baseLanes: We,
            cachePool: null
          };
          a.memoizedState = P, Sv(a, d);
        } else if (ii(d, In)) {
          var me = {
            baseLanes: We,
            cachePool: null
          };
          a.memoizedState = me;
          var we = b !== null ? b.baseLanes : d;
          Sv(a, we);
        } else {
          var N = null, V;
          if (b !== null) {
            var q = b.baseLanes;
            V = Qt(q, d);
          } else
            V = d;
          a.lanes = a.childLanes = In;
          var te = {
            baseLanes: V,
            cachePool: N
          };
          return a.memoizedState = te, a.updateQueue = null, Sv(a, V), null;
        }
      else {
        var Le;
        b !== null ? (Le = Qt(b.baseLanes, d), a.memoizedState = null) : Le = d, Sv(a, Le);
      }
      return Ur(i, a, _, d), a.child;
    }
    function hC(i, a, d) {
      var m = a.pendingProps;
      return Ur(i, a, m, d), a.child;
    }
    function pC(i, a, d) {
      var m = a.pendingProps.children;
      return Ur(i, a, m, d), a.child;
    }
    function mC(i, a, d) {
      {
        a.flags |= Be;
        {
          var m = a.stateNode;
          m.effectDuration = 0, m.passiveEffectDuration = 0;
        }
      }
      var _ = a.pendingProps, b = _.children;
      return Ur(i, a, b, d), a.child;
    }
    function gE(i, a) {
      var d = a.ref;
      (i === null && d !== null || i !== null && i.ref !== d) && (a.flags |= Un, a.flags |= ae);
    }
    function N0(i, a, d, m, _) {
      if (a.type !== a.elementType) {
        var b = d.propTypes;
        b && Rr(
          b,
          m,
          // Resolved props
          "prop",
          rt(d)
        );
      }
      var P;
      {
        var N = Pa(a, d, !0);
        P = al(a, N);
      }
      var V, q;
      Je(a, _), Fa(a);
      {
        if (Rh.current = a, za(!0), V = bf(i, a, d, m, P, _), q = wf(), a.mode & ni) {
          vn(!0);
          try {
            V = bf(i, a, d, m, P, _), q = wf();
          } finally {
            vn(!1);
          }
        }
        za(!1);
      }
      return ss(), i !== null && !fs ? (PM(i, a, _), wo(i, a, _)) : (mr() && q && By(a), a.flags |= ze, Ur(i, a, V, _), a.child);
    }
    function yE(i, a, d, m, _) {
      {
        switch (NT(a)) {
          case !1: {
            var b = a.stateNode, P = a.type, N = new P(a.memoizedProps, b.context), V = N.state;
            b.updater.enqueueSetState(b, V, null);
            break;
          }
          case !0: {
            a.flags |= Nt, a.flags |= Fe;
            var q = new Error("Simulated error coming from DevTools"), te = ml(_);
            a.lanes = Qt(a.lanes, te);
            var me = R0(a, Ym(q, a), te);
            gn(a, me);
            break;
          }
        }
        if (a.type !== a.elementType) {
          var we = d.propTypes;
          we && Rr(
            we,
            m,
            // Resolved props
            "prop",
            rt(d)
          );
        }
      }
      var Le;
      Xr(d) ? (Le = !0, Ua(a)) : Le = !1, Je(a, _);
      var je = a.stateNode, Qe;
      je === null ? (i !== null && (i.alternate = null, a.alternate = null, a.flags |= Ce), pM(a, d, m), zy(a, d, m, _), Qe = !0) : i === null ? Qe = wR(a, d, m, _) : Qe = AR(i, a, d, m, _);
      var Ft = O0(i, a, d, Qe, Le, _);
      {
        var en = a.stateNode;
        Qe && en.props !== m && (Hu || p("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", xe(a) || "a component"), Hu = !0);
      }
      return Ft;
    }
    function O0(i, a, d, m, _, b) {
      gE(i, a);
      var P = (a.flags & Nt) !== k;
      if (!m && !P)
        return _ && gu(a, d, !1), wo(i, a, b);
      var N = a.stateNode;
      Rh.current = a;
      var V;
      if (P && typeof d.getDerivedStateFromError != "function")
        V = null, rE();
      else {
        Fa(a);
        {
          if (za(!0), V = N.render(), a.mode & ni) {
            vn(!0);
            try {
              N.render();
            } finally {
              vn(!1);
            }
          }
          za(!1);
        }
        ss();
      }
      return a.flags |= ze, i !== null && P ? dC(i, a, V, b) : Ur(i, a, V, b), a.memoizedState = N.state, _ && gu(a, d, !0), a.child;
    }
    function _E(i) {
      var a = i.stateNode;
      a.pendingContext ? Da(i, a.pendingContext, a.pendingContext !== a.context) : a.context && Da(i, a.context, !1), Qy(i, a.containerInfo);
    }
    function vC(i, a, d) {
      if (_E(a), i === null)
        throw new Error("Should have a current fiber. This is a bug in React.");
      var m = a.pendingProps, _ = a.memoizedState, b = _.element;
      $t(i, a), pf(a, m, null, d);
      var P = a.memoizedState;
      a.stateNode;
      var N = P.element;
      if (er && _.isDehydrated) {
        var V = {
          element: N,
          isDehydrated: !1,
          cache: P.cache,
          transitions: P.transitions
        }, q = a.updateQueue;
        if (q.baseState = V, a.memoizedState = V, a.flags & Kt) {
          var te = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
          return xE(i, a, N, d, te);
        } else if (N !== b) {
          var me = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
          return xE(i, a, N, d, me);
        } else {
          IR(a);
          var we = AM(a, null, N, d);
          a.child = we;
          for (var Le = we; Le; )
            Le.flags = Le.flags & ~Ce | Li, Le = Le.sibling;
        }
      } else {
        if (gf(), N === b)
          return wo(i, a, d);
        Ur(i, a, N, d);
      }
      return a.child;
    }
    function xE(i, a, d, m, _) {
      return gf(), Xy(_), a.flags |= Kt, Ur(i, a, d, m), a.child;
    }
    function gC(i, a, d) {
      RM(a), i === null && Wy(a);
      var m = a.type, _ = a.pendingProps, b = i !== null ? i.memoizedProps : null, P = _.children, N = Sd(m, _);
      return N ? P = null : b !== null && Sd(m, b) && (a.flags |= vt), gE(i, a), Ur(i, a, P, d), a.child;
    }
    function yC(i, a) {
      return i === null && Wy(a), null;
    }
    function _C(i, a, d, m) {
      i !== null && (i.alternate = null, a.alternate = null, a.flags |= Ce);
      var _ = a.pendingProps, b = d, P = b._payload, N = b._init, V = N(P);
      a.type = V;
      var q = a.tag = DP(V), te = Kr(V, _), me;
      switch (q) {
        case B:
          return I0(a, V), a.type = V = Df(V), me = N0(null, a, V, te, m), me;
        case W:
          return a.type = V = f_(V), me = yE(null, a, V, te, m), me;
        case ne:
          return a.type = V = d_(V), me = hE(null, a, V, te, m), me;
        case J: {
          if (a.type !== a.elementType) {
            var we = V.propTypes;
            we && Rr(
              we,
              te,
              // Resolved for outer only
              "prop",
              rt(V)
            );
          }
          return me = pE(
            null,
            a,
            V,
            Kr(V.type, te),
            // The inner type can have defaults too
            m
          ), me;
        }
      }
      var Le = "";
      throw V !== null && typeof V == "object" && V.$$typeof === X && (Le = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + V + ". " + ("Lazy element type must resolve to a class or function." + Le));
    }
    function xC(i, a, d, m, _) {
      i !== null && (i.alternate = null, a.alternate = null, a.flags |= Ce), a.tag = W;
      var b;
      return Xr(d) ? (b = !0, Ua(a)) : b = !1, Je(a, _), pM(a, d, m), zy(a, d, m, _), O0(null, a, d, !0, b, _);
    }
    function SC(i, a, d, m) {
      i !== null && (i.alternate = null, a.alternate = null, a.flags |= Ce);
      var _ = a.pendingProps, b;
      {
        var P = Pa(a, d, !1);
        b = al(a, P);
      }
      Je(a, m);
      var N, V;
      Fa(a);
      {
        if (d.prototype && typeof d.prototype.render == "function") {
          var q = rt(d) || "Unknown";
          C0[q] || (p("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", q, q), C0[q] = !0);
        }
        a.mode & ni && Jr.recordLegacyContextWarning(a, null), za(!0), Rh.current = a, N = bf(null, a, d, _, b, m), V = wf(), za(!1);
      }
      if (ss(), a.flags |= ze, typeof N == "object" && N !== null && typeof N.render == "function" && N.$$typeof === void 0) {
        var te = rt(d) || "Unknown";
        Ch[te] || (p("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", te, te, te), Ch[te] = !0);
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof N == "object" && N !== null && typeof N.render == "function" && N.$$typeof === void 0
      ) {
        {
          var me = rt(d) || "Unknown";
          Ch[me] || (p("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", me, me, me), Ch[me] = !0);
        }
        a.tag = W, a.memoizedState = null, a.updateQueue = null;
        var we = !1;
        return Xr(d) ? (we = !0, Ua(a)) : we = !1, a.memoizedState = N.state !== null && N.state !== void 0 ? N.state : null, Lt(a), hM(a, N), zy(a, d, _, m), O0(null, a, d, !0, we, m);
      } else {
        if (a.tag = B, a.mode & ni) {
          vn(!0);
          try {
            N = bf(null, a, d, _, b, m), V = wf();
          } finally {
            vn(!1);
          }
        }
        return mr() && V && By(a), Ur(null, a, N, m), I0(a, d), a.child;
      }
    }
    function I0(i, a) {
      {
        if (a && a.childContextTypes && p("%s(...): childContextTypes cannot be defined on a function component.", a.displayName || a.name || "Component"), i.ref !== null) {
          var d = "", m = Ty();
          m && (d += `

Check the render method of \`` + m + "`.");
          var _ = m || "", b = i._debugSource;
          b && (_ = b.fileName + ":" + b.lineNumber), D0[_] || (D0[_] = !0, p("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", d));
        }
        if (typeof a.getDerivedStateFromProps == "function") {
          var P = rt(a) || "Unknown";
          P0[P] || (p("%s: Function components do not support getDerivedStateFromProps.", P), P0[P] = !0);
        }
        if (typeof a.contextType == "object" && a.contextType !== null) {
          var N = rt(a) || "Unknown";
          L0[N] || (p("%s: Function components do not support contextType.", N), L0[N] = !0);
        }
      }
    }
    var Jm = {
      dehydrated: null,
      treeContext: null,
      retryLane: Mi
    };
    function Km(i) {
      return {
        baseLanes: i,
        cachePool: fC()
      };
    }
    function SE(i, a) {
      var d = null;
      return {
        baseLanes: Qt(i.baseLanes, a),
        cachePool: d
      };
    }
    function MC(i, a, d, m) {
      if (a !== null) {
        var _ = a.memoizedState;
        if (_ === null)
          return !1;
      }
      return e0(i, gh);
    }
    function ME(i, a) {
      return fo(i.childLanes, a);
    }
    function EE(i, a, d) {
      var m = a.pendingProps;
      IT(a) && (a.flags |= Nt);
      var _ = us.current, b = !1, P = (a.flags & Nt) !== k;
      if (P || MC(_, i) ? (b = !0, a.flags &= ~Nt) : (i === null || i.memoizedState !== null) && (_ = YR(_, LM)), _ = xf(_), Dl(a, _), i === null) {
        Wy(a);
        {
          var N = a.memoizedState;
          if (N !== null) {
            var V = N.dehydrated;
            if (V !== null)
              return bC(a, V);
          }
        }
        var q = m.children, te = m.fallback;
        if (b) {
          var me = EC(a, q, te, d), we = a.child;
          return we.memoizedState = Km(d), a.memoizedState = Jm, me;
        } else
          return F0(a, q);
      } else {
        var Le = i.memoizedState;
        if (Le !== null) {
          {
            var je = Le.dehydrated;
            if (je !== null)
              if (P) {
                if (a.flags & Kt)
                  return a.flags &= ~Kt, Qm(i, a, d, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                if (a.memoizedState !== null)
                  return a.child = i.child, a.flags |= Nt, null;
                var Qe = m.children, Ft = m.fallback, en = TC(i, a, Qe, Ft, d), kt = a.child;
                return kt.memoizedState = Km(d), a.memoizedState = Jm, en;
              } else
                return wC(i, a, je, Le, d);
          }
          if (b) {
            var Jn = m.fallback, Kn = m.children, _e = wE(i, a, Kn, Jn, d), De = a.child, ve = i.child.memoizedState;
            return De.memoizedState = ve === null ? Km(d) : SE(ve, d), De.childLanes = ME(i, d), a.memoizedState = Jm, _e;
          } else {
            var et = m.children, It = bE(i, a, et, d);
            return a.memoizedState = null, It;
          }
        } else if (b) {
          var Et = m.fallback, pn = m.children, Pn = wE(i, a, pn, Et, d), Yn = a.child, Dn = i.child.memoizedState;
          return Yn.memoizedState = Dn === null ? Km(d) : SE(Dn, d), Yn.childLanes = ME(i, d), a.memoizedState = Jm, Pn;
        } else {
          var ci = m.children, Tn = bE(i, a, ci, d);
          return a.memoizedState = null, Tn;
        }
      }
    }
    function F0(i, a, d) {
      var m = i.mode, _ = {
        mode: "visible",
        children: a
      }, b = z0(_, m);
      return b.return = i, i.child = b, b;
    }
    function EC(i, a, d, m) {
      var _ = i.mode, b = i.child, P = {
        mode: "hidden",
        children: a
      }, N, V;
      return (_ & Ln) === jt && b !== null ? (N = b, N.childLanes = We, N.pendingProps = P, i.mode & _n && (N.actualDuration = 0, N.actualStartTime = -1, N.selfBaseDuration = 0, N.treeBaseDuration = 0), V = Bl(d, _, m, null)) : (N = z0(P, _), V = Bl(d, _, m, null)), N.return = i, V.return = i, N.sibling = V, i.child = N, V;
    }
    function z0(i, a, d) {
      return AT(i, a, We, null);
    }
    function TE(i, a) {
      return Xu(i, a);
    }
    function bE(i, a, d, m) {
      var _ = i.child, b = _.sibling, P = TE(_, {
        mode: "visible",
        children: d
      });
      if ((a.mode & Ln) === jt && (P.lanes = m), P.return = a, P.sibling = null, b !== null) {
        var N = a.deletions;
        N === null ? (a.deletions = [b], a.flags |= He) : N.push(b);
      }
      return a.child = P, P;
    }
    function wE(i, a, d, m, _) {
      var b = a.mode, P = i.child, N = P.sibling, V = {
        mode: "hidden",
        children: d
      }, q;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (b & Ln) === jt && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        a.child !== P
      ) {
        var te = a.child;
        q = te, q.childLanes = We, q.pendingProps = V, a.mode & _n && (q.actualDuration = 0, q.actualStartTime = -1, q.selfBaseDuration = P.selfBaseDuration, q.treeBaseDuration = P.treeBaseDuration), a.deletions = null;
      } else
        q = TE(P, V), q.subtreeFlags = P.subtreeFlags & wt;
      var me;
      return N !== null ? me = Xu(N, m) : (me = Bl(m, b, _, null), me.flags |= Ce), me.return = a, q.return = a, q.sibling = me, a.child = q, me;
    }
    function Qm(i, a, d, m) {
      m !== null && Xy(m), yf(a, i.child, null, d);
      var _ = a.pendingProps, b = _.children, P = F0(a, b);
      return P.flags |= Ce, a.memoizedState = null, P;
    }
    function TC(i, a, d, m, _) {
      var b = a.mode, P = {
        mode: "visible",
        children: d
      }, N = z0(P, b), V = Bl(m, b, _, null);
      return V.flags |= Ce, N.return = a, V.return = a, N.sibling = V, a.child = N, (a.mode & Ln) !== jt && yf(a, i.child, null, _), V;
    }
    function bC(i, a, d) {
      return (i.mode & Ln) === jt ? (p("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), i.lanes = fn) : Ca(a) ? i.lanes = is : i.lanes = In, null;
    }
    function wC(i, a, d, m, _) {
      if (NR(), (a.mode & Ln) === jt)
        return Qm(
          i,
          a,
          _,
          // TODO: When we delete legacy mode, we should make this error argument
          // required — every concurrent mode path that causes hydration to
          // de-opt to client rendering should have an error message.
          null
        );
      if (Ca(d))
        return Qm(
          i,
          a,
          _,
          // TODO: The server should serialize the error message so we can log it
          // here on the client. Or, in production, a hash/id that corresponds to
          // the error.
          new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.")
        );
      var b = ii(_, i.childLanes);
      if (fs || b) {
        var P = yv();
        if (P !== null) {
          var N = qd(P, _);
          if (N !== Mi && N !== m.retryLane) {
            m.retryLane = N;
            var V = kn;
            ki(i, N, V);
          }
        }
        return o_(), Qm(i, a, _, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
      } else if (la(d)) {
        a.flags |= Nt, a.child = i.child;
        var q = mP.bind(null, i);
        return Pd(d, q), null;
      } else {
        FR(a, d, m.treeContext);
        var te = a.pendingProps, me = te.children, we = F0(a, me);
        return we.flags |= Li, we;
      }
    }
    function AE(i, a, d) {
      i.lanes = Qt(i.lanes, a);
      var m = i.alternate;
      m !== null && (m.lanes = Qt(m.lanes, a)), j(i.return, a, d);
    }
    function AC(i, a, d) {
      for (var m = a; m !== null; ) {
        if (m.tag === re) {
          var _ = m.memoizedState;
          _ !== null && AE(m, d, i);
        } else if (m.tag === it)
          AE(m, d, i);
        else if (m.child !== null) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === i)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === i)
            return;
          m = m.return;
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function RC(i) {
      for (var a = i, d = null; a !== null; ) {
        var m = a.alternate;
        m !== null && wm(m) === null && (d = a), a = a.sibling;
      }
      return d;
    }
    function CC(i) {
      if (i !== void 0 && i !== "forwards" && i !== "backwards" && i !== "together" && !U0[i])
        if (U0[i] = !0, typeof i == "string")
          switch (i.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards": {
              p('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', i, i.toLowerCase());
              break;
            }
            case "forward":
            case "backward": {
              p('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', i, i.toLowerCase());
              break;
            }
            default:
              p('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', i);
              break;
          }
        else
          p('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', i);
    }
    function LC(i, a) {
      i !== void 0 && !Zm[i] && (i !== "collapsed" && i !== "hidden" ? (Zm[i] = !0, p('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', i)) : a !== "forwards" && a !== "backwards" && (Zm[i] = !0, p('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', i)));
    }
    function RE(i, a) {
      {
        var d = xn(i), m = !d && typeof Ge(i) == "function";
        if (d || m) {
          var _ = d ? "array" : "iterable";
          return p("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", _, a, _), !1;
        }
      }
      return !0;
    }
    function PC(i, a) {
      if ((a === "forwards" || a === "backwards") && i !== void 0 && i !== null && i !== !1)
        if (xn(i)) {
          for (var d = 0; d < i.length; d++)
            if (!RE(i[d], d))
              return;
        } else {
          var m = Ge(i);
          if (typeof m == "function") {
            var _ = m.call(i);
            if (_)
              for (var b = _.next(), P = 0; !b.done; b = _.next()) {
                if (!RE(b.value, P))
                  return;
                P++;
              }
          } else
            p('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', a);
        }
    }
    function B0(i, a, d, m, _) {
      var b = i.memoizedState;
      b === null ? i.memoizedState = {
        isBackwards: a,
        rendering: null,
        renderingStartTime: 0,
        last: m,
        tail: d,
        tailMode: _
      } : (b.isBackwards = a, b.rendering = null, b.renderingStartTime = 0, b.last = m, b.tail = d, b.tailMode = _);
    }
    function CE(i, a, d) {
      var m = a.pendingProps, _ = m.revealOrder, b = m.tail, P = m.children;
      CC(_), LC(b, _), PC(P, _), Ur(i, a, P, d);
      var N = us.current, V = e0(N, gh);
      if (V)
        N = t0(N, gh), a.flags |= Nt;
      else {
        var q = i !== null && (i.flags & Nt) !== k;
        q && AC(a, a.child, d), N = xf(N);
      }
      if (Dl(a, N), (a.mode & Ln) === jt)
        a.memoizedState = null;
      else
        switch (_) {
          case "forwards": {
            var te = RC(a.child), me;
            te === null ? (me = a.child, a.child = null) : (me = te.sibling, te.sibling = null), B0(
              a,
              !1,
              // isBackwards
              me,
              te,
              b
            );
            break;
          }
          case "backwards": {
            var we = null, Le = a.child;
            for (a.child = null; Le !== null; ) {
              var je = Le.alternate;
              if (je !== null && wm(je) === null) {
                a.child = Le;
                break;
              }
              var Qe = Le.sibling;
              Le.sibling = we, we = Le, Le = Qe;
            }
            B0(
              a,
              !0,
              // isBackwards
              we,
              null,
              // last
              b
            );
            break;
          }
          case "together": {
            B0(
              a,
              !1,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default:
            a.memoizedState = null;
        }
      return a.child;
    }
    function DC(i, a, d) {
      Qy(a, a.stateNode.containerInfo);
      var m = a.pendingProps;
      return i === null ? a.child = yf(a, null, m, d) : Ur(i, a, m, d), a.child;
    }
    var LE = !1;
    function UC(i, a, d) {
      var m = a.type, _ = m._context, b = a.pendingProps, P = a.memoizedProps, N = b.value;
      {
        "value" in b || LE || (LE = !0, p("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
        var V = a.type.propTypes;
        V && Rr(V, b, "prop", "Context.Provider");
      }
      if (A(a, _, N), P !== null) {
        var q = P.value;
        if (Pr(q, N)) {
          if (P.children === b.children && !Si())
            return wo(i, a, d);
        } else
          oe(a, _, d);
      }
      var te = b.children;
      return Ur(i, a, te, d), a.child;
    }
    var PE = !1;
    function NC(i, a, d) {
      var m = a.type;
      m._context === void 0 ? m !== m.Consumer && (PE || (PE = !0, p("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : m = m._context;
      var _ = a.pendingProps, b = _.children;
      typeof b != "function" && p("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), Je(a, d);
      var P = nt(m);
      Fa(a);
      var N;
      return Rh.current = a, za(!0), N = b(P), za(!1), ss(), a.flags |= ze, Ur(i, a, N, d), a.child;
    }
    function $m() {
      fs = !0;
    }
    function wo(i, a, d) {
      return i !== null && (a.dependencies = i.dependencies), rE(), Mv(a.lanes), ii(d, a.childLanes) ? (GR(i, a), a.child) : null;
    }
    function OC(i, a, d) {
      {
        var m = a.return;
        if (m === null)
          throw new Error("Cannot swap the root fiber.");
        if (i.alternate = null, a.alternate = null, d.index = a.index, d.sibling = a.sibling, d.return = a.return, d.ref = a.ref, a === m.child)
          m.child = d;
        else {
          var _ = m.child;
          if (_ === null)
            throw new Error("Expected parent to have a child.");
          for (; _.sibling !== a; )
            if (_ = _.sibling, _ === null)
              throw new Error("Expected to find the previous sibling.");
          _.sibling = d;
        }
        var b = m.deletions;
        return b === null ? (m.deletions = [i], m.flags |= He) : b.push(i), d.flags |= Ce, d;
      }
    }
    function H0(i, a) {
      var d = i.lanes;
      return !!ii(d, a);
    }
    function IC(i, a, d) {
      switch (a.tag) {
        case I:
          _E(a), a.stateNode, gf();
          break;
        case ie:
          RM(a);
          break;
        case W: {
          var m = a.type;
          Xr(m) && Ua(a);
          break;
        }
        case Z:
          Qy(a, a.stateNode.containerInfo);
          break;
        case Me: {
          var _ = a.memoizedProps.value, b = a.type._context;
          A(a, b, _);
          break;
        }
        case le:
          {
            var P = ii(d, a.childLanes);
            P && (a.flags |= Be);
            {
              var N = a.stateNode;
              N.effectDuration = 0, N.passiveEffectDuration = 0;
            }
          }
          break;
        case re: {
          var V = a.memoizedState;
          if (V !== null) {
            if (V.dehydrated !== null)
              return Dl(a, xf(us.current)), a.flags |= Nt, null;
            var q = a.child, te = q.childLanes;
            if (ii(d, te))
              return EE(i, a, d);
            Dl(a, xf(us.current));
            var me = wo(i, a, d);
            return me !== null ? me.sibling : null;
          } else
            Dl(a, xf(us.current));
          break;
        }
        case it: {
          var we = (i.flags & Nt) !== k, Le = ii(d, a.childLanes);
          if (we) {
            if (Le)
              return CE(i, a, d);
            a.flags |= Nt;
          }
          var je = a.memoizedState;
          if (je !== null && (je.rendering = null, je.tail = null, je.lastEffect = null), Dl(a, us.current), Le)
            break;
          return null;
        }
        case ot:
        case Vt:
          return a.lanes = We, vE(i, a, d);
      }
      return wo(i, a, d);
    }
    function DE(i, a, d) {
      if (a._debugNeedsRemount && i !== null)
        return OC(i, a, g_(a.type, a.key, a.pendingProps, a._debugOwner || null, a.mode, a.lanes));
      if (i !== null) {
        var m = i.memoizedProps, _ = a.pendingProps;
        if (m !== _ || Si() || // Force a re-render if the implementation changed due to hot reload:
        a.type !== i.type)
          fs = !0;
        else {
          var b = H0(i, d);
          if (!b && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (a.flags & Nt) === k)
            return fs = !1, IC(i, a, d);
          (i.flags & st) !== k ? fs = !0 : fs = !1;
        }
      } else if (fs = !1, mr() && RR(a)) {
        var P = a.index, N = CR();
        vM(a, N, P);
      }
      switch (a.lanes = We, a.tag) {
        case O:
          return SC(i, a, a.type, d);
        case Pe: {
          var V = a.elementType;
          return _C(i, a, V, d);
        }
        case B: {
          var q = a.type, te = a.pendingProps, me = a.elementType === q ? te : Kr(q, te);
          return N0(i, a, q, me, d);
        }
        case W: {
          var we = a.type, Le = a.pendingProps, je = a.elementType === we ? Le : Kr(we, Le);
          return yE(i, a, we, je, d);
        }
        case I:
          return vC(i, a, d);
        case ie:
          return gC(i, a, d);
        case fe:
          return yC(i, a);
        case re:
          return EE(i, a, d);
        case Z:
          return DC(i, a, d);
        case ne: {
          var Qe = a.type, Ft = a.pendingProps, en = a.elementType === Qe ? Ft : Kr(Qe, Ft);
          return hE(i, a, Qe, en, d);
        }
        case K:
          return hC(i, a, d);
        case he:
          return pC(i, a, d);
        case le:
          return mC(i, a, d);
        case Me:
          return UC(i, a, d);
        case Te:
          return NC(i, a, d);
        case J: {
          var kt = a.type, Jn = a.pendingProps, Kn = Kr(kt, Jn);
          if (a.type !== a.elementType) {
            var _e = kt.propTypes;
            _e && Rr(
              _e,
              Kn,
              // Resolved for outer only
              "prop",
              rt(kt)
            );
          }
          return Kn = Kr(kt.type, Kn), pE(i, a, kt, Kn, d);
        }
        case ue:
          return mE(i, a, a.type, a.pendingProps, d);
        case qe: {
          var De = a.type, ve = a.pendingProps, et = a.elementType === De ? ve : Kr(De, ve);
          return xC(i, a, De, et, d);
        }
        case it:
          return CE(i, a, d);
        case gt:
          break;
        case ot:
          return vE(i, a, d);
      }
      throw new Error("Unknown unit of work tag (" + a.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function FC(i, a, d) {
      switch (Hy(a), a.tag) {
        case W: {
          var m = a.type;
          Xr(m) && sl(a);
          var _ = a.flags;
          return _ & Fe ? (a.flags = _ & ~Fe | Nt, (a.mode & _n) !== jt && w0(a), a) : null;
        }
        case I: {
          _f(a), vu(a), i0();
          var b = a.flags;
          return (b & Fe) !== k && (b & Nt) === k ? (a.flags = b & ~Fe | Nt, a) : null;
        }
        case ie:
          return $y(a), null;
        case re: {
          Sf(a);
          {
            var P = a.memoizedState;
            if (P !== null && P.dehydrated !== null) {
              if (a.alternate === null)
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              gf();
            }
          }
          var N = a.flags;
          return N & Fe ? (a.flags = N & ~Fe | Nt, (a.mode & _n) !== jt && w0(a), a) : null;
        }
        case it:
          return Sf(a), null;
        case Z:
          return _f(a), null;
        case Me:
          var V = a.type._context;
          return D(V, a), null;
        case ot:
        case Vt:
          return s_(a), null;
        case nn:
          return null;
        default:
          return null;
      }
    }
    function UE(i, a, d) {
      switch (Hy(a), a.tag) {
        case W: {
          var m = a.type.childContextTypes;
          m != null && sl(a);
          break;
        }
        case I: {
          _f(a), vu(a), i0();
          break;
        }
        case ie: {
          $y(a);
          break;
        }
        case Z:
          _f(a);
          break;
        case re:
          Sf(a);
          break;
        case it:
          Sf(a);
          break;
        case Me:
          var _ = a.type._context;
          D(_, a);
          break;
        case ot:
        case Vt:
          s_(a);
          break;
      }
    }
    function NE(i, a, d, m, _, b, P, N, V) {
      var q = Array.prototype.slice.call(arguments, 3);
      try {
        a.apply(d, q);
      } catch (te) {
        this.onError(te);
      }
    }
    var OE = NE;
    if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
      var V0 = document.createElement("react");
      OE = function(a, d, m, _, b, P, N, V, q) {
        if (typeof document > "u" || document === null)
          throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        var te = document.createEvent("Event"), me = !1, we = !0, Le = window.event, je = Object.getOwnPropertyDescriptor(window, "event");
        function Qe() {
          V0.removeEventListener(De, en, !1), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = Le);
        }
        var Ft = Array.prototype.slice.call(arguments, 3);
        function en() {
          me = !0, Qe(), d.apply(m, Ft), we = !1;
        }
        var kt, Jn = !1, Kn = !1;
        function _e(ve) {
          if (kt = ve.error, Jn = !0, kt === null && ve.colno === 0 && ve.lineno === 0 && (Kn = !0), ve.defaultPrevented && kt != null && typeof kt == "object")
            try {
              kt._suppressLogging = !0;
            } catch {
            }
        }
        var De = "react-" + (a || "invokeguardedcallback");
        if (window.addEventListener("error", _e), V0.addEventListener(De, en, !1), te.initEvent(De, !1, !1), V0.dispatchEvent(te), je && Object.defineProperty(window, "event", je), me && we && (Jn ? Kn && (kt = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : kt = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(kt)), window.removeEventListener("error", _e), !me)
          return Qe(), NE.apply(this, arguments);
      };
    }
    var zC = OE, Lh = !1, ev = null, BC = {
      onError: function(i) {
        Lh = !0, ev = i;
      }
    };
    function IE(i, a, d, m, _, b, P, N, V) {
      Lh = !1, ev = null, zC.apply(BC, arguments);
    }
    function HC() {
      return Lh;
    }
    function FE() {
      if (Lh) {
        var i = ev;
        return Lh = !1, ev = null, i;
      } else
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    var zE = null;
    zE = /* @__PURE__ */ new Set();
    var tv = !1, Il = !1, VC = typeof WeakSet == "function" ? WeakSet : Set, xt = null, Af = null, Rf = null;
    function ar(i) {
      IE(null, function() {
        throw i;
      }), FE();
    }
    var kC = function(i, a) {
      if (a.props = i.memoizedProps, a.state = i.memoizedState, i.mode & _n)
        try {
          Wa(), a.componentWillUnmount();
        } finally {
          Ga(i);
        }
      else
        a.componentWillUnmount();
    };
    function BE(i, a) {
      try {
        Ao(bi, i);
      } catch (d) {
        ar(d), sr(i, a, d);
      }
    }
    function k0(i, a, d) {
      try {
        kC(i, d);
      } catch (m) {
        ar(m), sr(i, a, m);
      }
    }
    function GC(i, a, d) {
      try {
        d.componentDidMount();
      } catch (m) {
        ar(m), sr(i, a, m);
      }
    }
    function HE(i, a) {
      try {
        kE(i);
      } catch (d) {
        ar(d), sr(i, a, d);
      }
    }
    function nv(i, a) {
      var d = i.ref;
      if (d !== null)
        if (typeof d == "function") {
          var m;
          try {
            if (F && z && i.mode & _n)
              try {
                Wa(), m = d(null);
              } finally {
                Ga(i);
              }
            else
              m = d(null);
          } catch (_) {
            ar(_), sr(i, a, _);
          }
          typeof m == "function" && p("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", xe(i));
        } else
          d.current = null;
    }
    function iv(i, a, d) {
      try {
        d();
      } catch (m) {
        ar(m), sr(i, a, m);
      }
    }
    var VE = !1;
    function WC(i, a) {
      Es(i.containerInfo), xt = a, XC();
      var d = VE;
      return VE = !1, d;
    }
    function XC() {
      for (; xt !== null; ) {
        var i = xt, a = i.child;
        (i.subtreeFlags & ft) !== k && a !== null ? (Xa(a, i), xt = a) : YC();
      }
    }
    function YC() {
      for (; xt !== null; ) {
        var i = xt;
        En(i);
        try {
          jC(i);
        } catch (d) {
          ar(d), sr(i, i.return, d);
        }
        Fi();
        var a = i.sibling;
        if (a !== null) {
          Xa(a, i.return), xt = a;
          return;
        }
        xt = i.return;
      }
    }
    function jC(i) {
      var a = i.alternate, d = i.flags;
      if ((d & wn) !== k) {
        switch (En(i), i.tag) {
          case B:
          case ne:
          case ue:
            break;
          case W: {
            if (a !== null) {
              var m = a.memoizedProps, _ = a.memoizedState, b = i.stateNode;
              i.type === i.elementType && !Hu && (b.props !== i.memoizedProps && p("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", xe(i) || "instance"), b.state !== i.memoizedState && p("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", xe(i) || "instance"));
              var P = b.getSnapshotBeforeUpdate(i.elementType === i.type ? m : Kr(i.type, m), _);
              {
                var N = zE;
                P === void 0 && !N.has(i.type) && (N.add(i.type), p("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", xe(i)));
              }
              b.__reactInternalSnapshotBeforeUpdate = P;
            }
            break;
          }
          case I: {
            if (sa) {
              var V = i.stateNode;
              xy(V.containerInfo);
            }
            break;
          }
          case ie:
          case fe:
          case Z:
          case qe:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        Fi();
      }
    }
    function $r(i, a, d) {
      var m = a.updateQueue, _ = m !== null ? m.lastEffect : null;
      if (_ !== null) {
        var b = _.next, P = b;
        do {
          if ((P.tag & i) === i) {
            var N = P.destroy;
            P.destroy = void 0, N !== void 0 && ((i & ir) !== Bs ? dr(a) : (i & bi) !== Bs && wu(a), iv(a, d, N), (i & ir) !== Bs ? rh() : (i & bi) !== Bs && uf());
          }
          P = P.next;
        } while (P !== b);
      }
    }
    function Ao(i, a) {
      var d = a.updateQueue, m = d !== null ? d.lastEffect : null;
      if (m !== null) {
        var _ = m.next, b = _;
        do {
          if ((b.tag & i) === i) {
            (i & ir) !== Bs ? ih(a) : (i & bi) !== Bs && ah(a);
            var P = b.create;
            b.destroy = P(), (i & ir) !== Bs ? bu() : (i & bi) !== Bs && El();
            {
              var N = b.destroy;
              if (N !== void 0 && typeof N != "function") {
                var V = void 0;
                (b.tag & bi) !== k ? V = "useLayoutEffect" : (b.tag & Ul) !== k ? V = "useInsertionEffect" : V = "useEffect";
                var q = void 0;
                N === null ? q = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof N.then == "function" ? q = `

It looks like you wrote ` + V + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + V + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : q = " You returned: " + N, p("%s must not return anything besides a function, which is used for clean-up.%s", V, q);
              }
            }
          }
          b = b.next;
        } while (b !== _);
      }
    }
    function qC(i, a) {
      if ((a.flags & Be) !== k)
        switch (a.tag) {
          case le: {
            var d = a.stateNode.passiveEffectDuration, m = a.memoizedProps, _ = m.id, b = m.onPostCommit, P = nE(), N = a.alternate === null ? "mount" : "update";
            tE() && (N = "nested-update"), typeof b == "function" && b(_, N, d, P);
            var V = a.return;
            e:
              for (; V !== null; ) {
                switch (V.tag) {
                  case I:
                    var q = V.stateNode;
                    q.passiveEffectDuration += d;
                    break e;
                  case le:
                    var te = V.stateNode;
                    te.passiveEffectDuration += d;
                    break e;
                }
                V = V.return;
              }
            break;
          }
        }
    }
    function ZC(i, a, d, m) {
      if ((d.flags & At) !== k)
        switch (d.tag) {
          case B:
          case ne:
          case ue: {
            if (!Il)
              if (d.mode & _n)
                try {
                  Wa(), Ao(bi | oi, d);
                } finally {
                  Ga(d);
                }
              else
                Ao(bi | oi, d);
            break;
          }
          case W: {
            var _ = d.stateNode;
            if (d.flags & Be && !Il)
              if (a === null)
                if (d.type === d.elementType && !Hu && (_.props !== d.memoizedProps && p("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", xe(d) || "instance"), _.state !== d.memoizedState && p("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", xe(d) || "instance")), d.mode & _n)
                  try {
                    Wa(), _.componentDidMount();
                  } finally {
                    Ga(d);
                  }
                else
                  _.componentDidMount();
              else {
                var b = d.elementType === d.type ? a.memoizedProps : Kr(d.type, a.memoizedProps), P = a.memoizedState;
                if (d.type === d.elementType && !Hu && (_.props !== d.memoizedProps && p("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", xe(d) || "instance"), _.state !== d.memoizedState && p("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", xe(d) || "instance")), d.mode & _n)
                  try {
                    Wa(), _.componentDidUpdate(b, P, _.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    Ga(d);
                  }
                else
                  _.componentDidUpdate(b, P, _.__reactInternalSnapshotBeforeUpdate);
              }
            var N = d.updateQueue;
            N !== null && (d.type === d.elementType && !Hu && (_.props !== d.memoizedProps && p("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", xe(d) || "instance"), _.state !== d.memoizedState && p("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", xe(d) || "instance")), lM(d, N, _));
            break;
          }
          case I: {
            var V = d.updateQueue;
            if (V !== null) {
              var q = null;
              if (d.child !== null)
                switch (d.child.tag) {
                  case ie:
                    q = wr(d.child.stateNode);
                    break;
                  case W:
                    q = d.child.stateNode;
                    break;
                }
              lM(d, V, q);
            }
            break;
          }
          case ie: {
            var te = d.stateNode;
            if (a === null && d.flags & Be) {
              var me = d.type, we = d.memoizedProps;
              vy(te, me, we, d);
            }
            break;
          }
          case fe:
            break;
          case Z:
            break;
          case le: {
            {
              var Le = d.memoizedProps, je = Le.onCommit, Qe = Le.onRender, Ft = d.stateNode.effectDuration, en = nE(), kt = a === null ? "mount" : "update";
              tE() && (kt = "nested-update"), typeof Qe == "function" && Qe(d.memoizedProps.id, kt, d.actualDuration, d.treeBaseDuration, d.actualStartTime, en);
              {
                typeof je == "function" && je(d.memoizedProps.id, kt, Ft, en), uP(d);
                var Jn = d.return;
                e:
                  for (; Jn !== null; ) {
                    switch (Jn.tag) {
                      case I:
                        var Kn = Jn.stateNode;
                        Kn.effectDuration += Ft;
                        break e;
                      case le:
                        var _e = Jn.stateNode;
                        _e.effectDuration += Ft;
                        break e;
                    }
                    Jn = Jn.return;
                  }
              }
            }
            break;
          }
          case re: {
            rL(i, d);
            break;
          }
          case it:
          case qe:
          case gt:
          case ot:
          case Vt:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      Il || d.flags & Un && kE(d);
    }
    function JC(i) {
      switch (i.tag) {
        case B:
        case ne:
        case ue: {
          if (i.mode & _n)
            try {
              Wa(), BE(i, i.return);
            } finally {
              Ga(i);
            }
          else
            BE(i, i.return);
          break;
        }
        case W: {
          var a = i.stateNode;
          typeof a.componentDidMount == "function" && GC(i, i.return, a), HE(i, i.return);
          break;
        }
        case ie: {
          HE(i, i.return);
          break;
        }
      }
    }
    function KC(i, a) {
      var d = null;
      if (sa)
        for (var m = i; ; ) {
          if (m.tag === ie) {
            if (d === null) {
              d = m;
              var _ = m.stateNode;
              a ? yy(_) : _y(m.stateNode, m.memoizedProps);
            }
          } else if (m.tag === fe) {
            if (d === null) {
              var b = m.stateNode;
              a ? Ra(b) : Cc(b, m.memoizedProps);
            }
          } else if (!((m.tag === ot || m.tag === Vt) && m.memoizedState !== null && m !== i)) {
            if (m.child !== null) {
              m.child.return = m, m = m.child;
              continue;
            }
          }
          if (m === i)
            return;
          for (; m.sibling === null; ) {
            if (m.return === null || m.return === i)
              return;
            d === m && (d = null), m = m.return;
          }
          d === m && (d = null), m.sibling.return = m.return, m = m.sibling;
        }
    }
    function kE(i) {
      var a = i.ref;
      if (a !== null) {
        var d = i.stateNode, m;
        switch (i.tag) {
          case ie:
            m = wr(d);
            break;
          default:
            m = d;
        }
        if (typeof a == "function") {
          var _;
          if (i.mode & _n)
            try {
              Wa(), _ = a(m);
            } finally {
              Ga(i);
            }
          else
            _ = a(m);
          typeof _ == "function" && p("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", xe(i));
        } else
          a.hasOwnProperty("current") || p("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", xe(i)), a.current = m;
      }
    }
    function QC(i) {
      var a = i.ref;
      if (a !== null)
        if (typeof a == "function")
          if (i.mode & _n)
            try {
              Wa(), a(null);
            } finally {
              Ga(i);
            }
          else
            a(null);
        else
          a.current = null;
    }
    function GE(i, a, d) {
      switch (vi(a), a.tag) {
        case B:
        case ne:
        case J:
        case ue: {
          var m = a.updateQueue;
          if (m !== null) {
            var _ = m.lastEffect;
            if (_ !== null) {
              var b = _.next, P = b;
              do {
                var N = P, V = N.destroy, q = N.tag;
                V !== void 0 && ((q & Ul) !== Bs ? iv(a, d, V) : (q & bi) !== Bs && (wu(a), a.mode & _n ? (Wa(), iv(a, d, V), Ga(a)) : iv(a, d, V), uf())), P = P.next;
              } while (P !== b);
            }
          }
          return;
        }
        case W: {
          nv(a, d);
          var te = a.stateNode;
          typeof te.componentWillUnmount == "function" && k0(a, d, te);
          return;
        }
        case ie: {
          nv(a, d);
          return;
        }
        case Z: {
          sa ? ZE(i, a, d) : au && eL(a);
          return;
        }
        case $e:
          return;
        case gt:
          return;
      }
    }
    function WE(i, a, d) {
      for (var m = a; ; ) {
        if (GE(i, m, d), m.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        (!sa || m.tag !== Z)) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === a)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === a)
            return;
          m = m.return;
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function $C(i) {
      var a = i.alternate;
      a !== null && (a.return = null), i.return = null;
    }
    function XE(i) {
      var a = i.alternate;
      a !== null && (i.alternate = null, XE(a));
      {
        if (i.child = null, i.deletions = null, i.sibling = null, i.tag === ie) {
          var d = i.stateNode;
          d !== null && Ed(d);
        }
        i.stateNode = null, i._debugOwner = null, i.return = null, i.dependencies = null, i.memoizedProps = null, i.memoizedState = null, i.pendingProps = null, i.stateNode = null, i.updateQueue = null;
      }
    }
    function eL(i) {
      if (au) {
        var a = i.stateNode, d = a.containerInfo, m = ou(d);
        Lc(d, m);
      }
    }
    function tL(i) {
      if (au) {
        switch (i.tag) {
          case W:
          case ie:
          case fe:
            return;
          case I:
          case Z: {
            var a = i.stateNode, d = a.containerInfo, m = a.pendingChildren;
            Lc(d, m);
            return;
          }
        }
        throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function nL(i) {
      for (var a = i.return; a !== null; ) {
        if (YE(a))
          return a;
        a = a.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function YE(i) {
      return i.tag === ie || i.tag === I || i.tag === Z;
    }
    function jE(i) {
      var a = i;
      e:
        for (; ; ) {
          for (; a.sibling === null; ) {
            if (a.return === null || YE(a.return))
              return null;
            a = a.return;
          }
          for (a.sibling.return = a.return, a = a.sibling; a.tag !== ie && a.tag !== fe && a.tag !== $e; ) {
            if (a.flags & Ce || a.child === null || a.tag === Z)
              continue e;
            a.child.return = a, a = a.child;
          }
          if (!(a.flags & Ce))
            return a.stateNode;
        }
    }
    function qE(i) {
      if (sa) {
        var a = nL(i);
        switch (a.tag) {
          case ie: {
            var d = a.stateNode;
            a.flags & vt && (Ad(d), a.flags &= ~vt);
            var m = jE(i);
            W0(i, m, d);
            break;
          }
          case I:
          case Z: {
            var _ = a.stateNode.containerInfo, b = jE(i);
            G0(i, b, _);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function G0(i, a, d) {
      var m = i.tag, _ = m === ie || m === fe;
      if (_) {
        var b = i.stateNode;
        a ? Qa(d, b, a) : Ac(d, b);
      } else if (m !== Z) {
        var P = i.child;
        if (P !== null) {
          G0(P, a, d);
          for (var N = P.sibling; N !== null; )
            G0(N, a, d), N = N.sibling;
        }
      }
    }
    function W0(i, a, d) {
      var m = i.tag, _ = m === ie || m === fe;
      if (_) {
        var b = i.stateNode;
        a ? Aa(d, b, a) : my(d, b);
      } else if (m !== Z) {
        var P = i.child;
        if (P !== null) {
          W0(P, a, d);
          for (var N = P.sibling; N !== null; )
            W0(N, a, d), N = N.sibling;
        }
      }
    }
    function ZE(i, a, d) {
      for (var m = a, _ = !1, b, P; ; ) {
        if (!_) {
          var N = m.return;
          e:
            for (; ; ) {
              if (N === null)
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              var V = N.stateNode;
              switch (N.tag) {
                case ie:
                  b = V, P = !1;
                  break e;
                case I:
                  b = V.containerInfo, P = !0;
                  break e;
                case Z:
                  b = V.containerInfo, P = !0;
                  break e;
              }
              N = N.return;
            }
          _ = !0;
        }
        if (m.tag === ie || m.tag === fe)
          WE(i, m, d), P ? wd(b, m.stateNode) : Rc(b, m.stateNode);
        else if (m.tag === $e)
          P ? Kp(b, m.stateNode) : Jp(b, m.stateNode);
        else if (m.tag === Z) {
          if (m.child !== null) {
            b = m.stateNode.containerInfo, P = !0, m.child.return = m, m = m.child;
            continue;
          }
        } else if (GE(i, m, d), m.child !== null) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === a)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === a)
            return;
          m = m.return, m.tag === Z && (_ = !1);
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function iL(i, a, d) {
      sa ? ZE(i, a, d) : WE(i, a, d), $C(a);
    }
    function X0(i, a) {
      if (!sa) {
        switch (a.tag) {
          case B:
          case ne:
          case J:
          case ue: {
            if ($r(Ul | oi, a, a.return), Ao(Ul | oi, a), a.mode & _n)
              try {
                Wa(), $r(bi | oi, a, a.return);
              } finally {
                Ga(a);
              }
            else
              $r(bi | oi, a, a.return);
            return;
          }
          case le:
            return;
          case re: {
            JE(a), rv(a);
            return;
          }
          case it: {
            rv(a);
            return;
          }
          case I: {
            if (er && i !== null) {
              var d = i.memoizedState;
              if (d.isDehydrated) {
                var m = a.stateNode;
                Nc(m.containerInfo);
              }
            }
            break;
          }
          case ot:
          case Vt:
            return;
        }
        tL(a);
        return;
      }
      switch (a.tag) {
        case B:
        case ne:
        case J:
        case ue: {
          if ($r(Ul | oi, a, a.return), Ao(Ul | oi, a), a.mode & _n)
            try {
              Wa(), $r(bi | oi, a, a.return);
            } finally {
              Ga(a);
            }
          else
            $r(bi | oi, a, a.return);
          return;
        }
        case W:
          return;
        case ie: {
          var _ = a.stateNode;
          if (_ != null) {
            var b = a.memoizedProps, P = i !== null ? i.memoizedProps : b, N = a.type, V = a.updateQueue;
            a.updateQueue = null, V !== null && gy(_, V, N, P, b, a);
          }
          return;
        }
        case fe: {
          if (a.stateNode === null)
            throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          var q = a.stateNode, te = a.memoizedProps, me = i !== null ? i.memoizedProps : te;
          wa(q, me, te);
          return;
        }
        case I: {
          if (er && i !== null) {
            var we = i.memoizedState;
            if (we.isDehydrated) {
              var Le = a.stateNode;
              Nc(Le.containerInfo);
            }
          }
          return;
        }
        case le:
          return;
        case re: {
          JE(a), rv(a);
          return;
        }
        case it: {
          rv(a);
          return;
        }
        case qe:
          return;
      }
      throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function JE(i) {
      i.memoizedState;
    }
    function rL(i, a) {
      if (er) {
        var d = a.memoizedState;
        if (d === null) {
          var m = a.alternate;
          if (m !== null) {
            var _ = m.memoizedState;
            if (_ !== null) {
              var b = _.dehydrated;
              b !== null && Oc(b);
            }
          }
        }
      }
    }
    function rv(i) {
      var a = i.updateQueue;
      if (a !== null) {
        i.updateQueue = null;
        var d = i.stateNode;
        d === null && (d = i.stateNode = new VC()), a.forEach(function(m) {
          var _ = vP.bind(null, i, m);
          if (!d.has(m)) {
            if (d.add(m), fr)
              if (Af !== null && Rf !== null)
                Hh(Rf, Af);
              else
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
            m.then(_, _);
          }
        });
      }
    }
    function aL(i) {
      sa && Ad(i.stateNode);
    }
    function sL(i, a, d) {
      Af = d, Rf = i, xt = a, oL(i, d), Af = null, Rf = null;
    }
    function oL(i, a) {
      for (; xt !== null; ) {
        var d = xt, m = d.deletions;
        if (m !== null)
          for (var _ = 0; _ < m.length; _++) {
            var b = m[_];
            try {
              iL(i, b, d);
            } catch (N) {
              ar(N), sr(b, d, N);
            }
          }
        var P = d.child;
        (d.subtreeFlags & _t) !== k && P !== null ? (Xa(P, d), xt = P) : lL(i, a);
      }
    }
    function lL(i, a) {
      for (; xt !== null; ) {
        var d = xt;
        En(d);
        try {
          uL(d, i, a);
        } catch (_) {
          ar(_), sr(d, d.return, _);
        }
        Fi();
        var m = d.sibling;
        if (m !== null) {
          Xa(m, d.return), xt = m;
          return;
        }
        xt = d.return;
      }
    }
    function uL(i, a, d) {
      var m = i.flags;
      if (m & vt && aL(i), m & Un) {
        var _ = i.alternate;
        _ !== null && QC(_);
      }
      if (m & $i)
        switch (i.tag) {
          case re: {
            var b = i.memoizedState, P = b !== null;
            if (P) {
              var N = i.alternate, V = N !== null && N.memoizedState !== null;
              V || tP();
            }
            break;
          }
          case ot: {
            var q = i.memoizedState, te = q !== null, me = i.alternate, we = me !== null && me.memoizedState !== null, Le = i;
            sa && KC(Le, te);
            {
              if (te && !we && (Le.mode & Ln) !== jt) {
                xt = Le;
                for (var je = Le.child; je !== null; )
                  xt = je, fL(je), je = je.sibling;
              }
              break;
            }
          }
        }
      var Qe = m & (Ce | Be | Li);
      switch (Qe) {
        case Ce: {
          qE(i), i.flags &= ~Ce;
          break;
        }
        case ut: {
          qE(i), i.flags &= ~Ce;
          var Ft = i.alternate;
          X0(Ft, i);
          break;
        }
        case Li: {
          i.flags &= ~Li;
          break;
        }
        case eo: {
          i.flags &= ~Li;
          var en = i.alternate;
          X0(en, i);
          break;
        }
        case Be: {
          var kt = i.alternate;
          X0(kt, i);
          break;
        }
      }
    }
    function cL(i, a, d) {
      Af = d, Rf = a, xt = i, KE(i, a, d), Af = null, Rf = null;
    }
    function KE(i, a, d) {
      for (var m = (i.mode & Ln) !== jt; xt !== null; ) {
        var _ = xt, b = _.child;
        if (_.tag === ot && m) {
          var P = _.memoizedState !== null, N = P || tv;
          if (N) {
            Y0(i, a, d);
            continue;
          } else {
            var V = _.alternate, q = V !== null && V.memoizedState !== null, te = q || Il, me = tv, we = Il;
            tv = N, Il = te, Il && !we && (xt = _, dL(_));
            for (var Le = b; Le !== null; )
              xt = Le, KE(
                Le,
                // New root; bubble back up to here and stop.
                a,
                d
              ), Le = Le.sibling;
            xt = _, tv = me, Il = we, Y0(i, a, d);
            continue;
          }
        }
        (_.subtreeFlags & At) !== k && b !== null ? (Xa(b, _), xt = b) : Y0(i, a, d);
      }
    }
    function Y0(i, a, d) {
      for (; xt !== null; ) {
        var m = xt;
        if ((m.flags & At) !== k) {
          var _ = m.alternate;
          En(m);
          try {
            ZC(a, _, m, d);
          } catch (P) {
            ar(P), sr(m, m.return, P);
          }
          Fi();
        }
        if (m === i) {
          xt = null;
          return;
        }
        var b = m.sibling;
        if (b !== null) {
          Xa(b, m.return), xt = b;
          return;
        }
        xt = m.return;
      }
    }
    function fL(i) {
      for (; xt !== null; ) {
        var a = xt, d = a.child;
        switch (a.tag) {
          case B:
          case ne:
          case J:
          case ue: {
            if (a.mode & _n)
              try {
                Wa(), $r(bi, a, a.return);
              } finally {
                Ga(a);
              }
            else
              $r(bi, a, a.return);
            break;
          }
          case W: {
            nv(a, a.return);
            var m = a.stateNode;
            typeof m.componentWillUnmount == "function" && k0(a, a.return, m);
            break;
          }
          case ie: {
            nv(a, a.return);
            break;
          }
          case ot: {
            var _ = a.memoizedState !== null;
            if (_) {
              QE(i);
              continue;
            }
            break;
          }
        }
        d !== null ? (d.return = a, xt = d) : QE(i);
      }
    }
    function QE(i) {
      for (; xt !== null; ) {
        var a = xt;
        if (a === i) {
          xt = null;
          return;
        }
        var d = a.sibling;
        if (d !== null) {
          d.return = a.return, xt = d;
          return;
        }
        xt = a.return;
      }
    }
    function dL(i) {
      for (; xt !== null; ) {
        var a = xt, d = a.child;
        if (a.tag === ot) {
          var m = a.memoizedState !== null;
          if (m) {
            $E(i);
            continue;
          }
        }
        d !== null ? (d.return = a, xt = d) : $E(i);
      }
    }
    function $E(i) {
      for (; xt !== null; ) {
        var a = xt;
        En(a);
        try {
          JC(a);
        } catch (m) {
          ar(m), sr(a, a.return, m);
        }
        if (Fi(), a === i) {
          xt = null;
          return;
        }
        var d = a.sibling;
        if (d !== null) {
          d.return = a.return, xt = d;
          return;
        }
        xt = a.return;
      }
    }
    function hL(i, a) {
      xt = a, pL(a, i);
    }
    function pL(i, a) {
      for (; xt !== null; ) {
        var d = xt, m = d.child;
        (d.subtreeFlags & Bt) !== k && m !== null ? (Xa(m, d), xt = m) : mL(i, a);
      }
    }
    function mL(i, a) {
      for (; xt !== null; ) {
        var d = xt;
        if ((d.flags & Yi) !== k) {
          En(d);
          try {
            vL(a, d);
          } catch (_) {
            ar(_), sr(d, d.return, _);
          }
          Fi();
        }
        if (d === i) {
          xt = null;
          return;
        }
        var m = d.sibling;
        if (m !== null) {
          Xa(m, d.return), xt = m;
          return;
        }
        xt = d.return;
      }
    }
    function vL(i, a) {
      switch (a.tag) {
        case B:
        case ne:
        case ue: {
          if (a.mode & _n) {
            b0();
            try {
              Ao(ir | oi, a);
            } finally {
              T0(a);
            }
          } else
            Ao(ir | oi, a);
          break;
        }
      }
    }
    function gL(i) {
      xt = i, yL();
    }
    function yL() {
      for (; xt !== null; ) {
        var i = xt, a = i.child;
        if ((xt.flags & He) !== k) {
          var d = i.deletions;
          if (d !== null) {
            for (var m = 0; m < d.length; m++) {
              var _ = d[m];
              xt = _, SL(_, i);
            }
            {
              var b = i.alternate;
              if (b !== null) {
                var P = b.child;
                if (P !== null) {
                  b.child = null;
                  do {
                    var N = P.sibling;
                    P.sibling = null, P = N;
                  } while (P !== null);
                }
              }
            }
            xt = i;
          }
        }
        (i.subtreeFlags & Bt) !== k && a !== null ? (Xa(a, i), xt = a) : _L();
      }
    }
    function _L() {
      for (; xt !== null; ) {
        var i = xt;
        (i.flags & Yi) !== k && (En(i), xL(i), Fi());
        var a = i.sibling;
        if (a !== null) {
          Xa(a, i.return), xt = a;
          return;
        }
        xt = i.return;
      }
    }
    function xL(i) {
      switch (i.tag) {
        case B:
        case ne:
        case ue: {
          i.mode & _n ? (b0(), $r(ir | oi, i, i.return), T0(i)) : $r(ir | oi, i, i.return);
          break;
        }
      }
    }
    function SL(i, a) {
      for (; xt !== null; ) {
        var d = xt;
        En(d), EL(d, a), Fi();
        var m = d.child;
        m !== null ? (Xa(m, d), xt = m) : ML(i);
      }
    }
    function ML(i) {
      for (; xt !== null; ) {
        var a = xt, d = a.sibling, m = a.return;
        if (XE(a), a === i) {
          xt = null;
          return;
        }
        if (d !== null) {
          Xa(d, m), xt = d;
          return;
        }
        xt = m;
      }
    }
    function EL(i, a) {
      switch (i.tag) {
        case B:
        case ne:
        case ue: {
          i.mode & _n ? (b0(), $r(ir, i, a), T0(i)) : $r(ir, i, a);
          break;
        }
      }
    }
    var eT = !1;
    function Xa(i, a) {
      !eT && i.return !== a && (eT = !0, p("Internal React error: Return pointer is inconsistent with parent.")), i.return = a;
    }
    function TL(i) {
      switch (i.tag) {
        case B:
        case ne:
        case ue: {
          try {
            Ao(bi | oi, i);
          } catch (d) {
            ar(d), sr(i, i.return, d);
          }
          break;
        }
        case W: {
          var a = i.stateNode;
          try {
            a.componentDidMount();
          } catch (d) {
            ar(d), sr(i, i.return, d);
          }
          break;
        }
      }
    }
    function bL(i) {
      switch (i.tag) {
        case B:
        case ne:
        case ue: {
          try {
            Ao(ir | oi, i);
          } catch (a) {
            ar(a), sr(i, i.return, a);
          }
          break;
        }
      }
    }
    function wL(i) {
      switch (i.tag) {
        case B:
        case ne:
        case ue: {
          try {
            $r(bi | oi, i, i.return);
          } catch (d) {
            ar(d), sr(i, i.return, d);
          }
          break;
        }
        case W: {
          var a = i.stateNode;
          typeof a.componentWillUnmount == "function" && k0(i, i.return, a);
          break;
        }
      }
    }
    function AL(i) {
      switch (i.tag) {
        case B:
        case ne:
        case ue:
          try {
            $r(ir | oi, i, i.return);
          } catch (a) {
            ar(a), sr(i, i.return, a);
          }
      }
    }
    var av = 0, sv = 1, ov = 2, lv = 3, uv = 4;
    if (typeof Symbol == "function" && Symbol.for) {
      var Ph = Symbol.for;
      av = Ph("selector.component"), sv = Ph("selector.has_pseudo_class"), ov = Ph("selector.role"), lv = Ph("selector.test_id"), uv = Ph("selector.text");
    }
    function RL(i) {
      return {
        $$typeof: av,
        value: i
      };
    }
    function CL(i) {
      return {
        $$typeof: sv,
        value: i
      };
    }
    function LL(i) {
      return {
        $$typeof: ov,
        value: i
      };
    }
    function PL(i) {
      return {
        $$typeof: uv,
        value: i
      };
    }
    function DL(i) {
      return {
        $$typeof: lv,
        value: i
      };
    }
    function j0(i) {
      var a = Md(i);
      if (a != null) {
        if (typeof a.memoizedProps["data-testname"] != "string")
          throw new Error("Invalid host root specified. Should be either a React container or a node with a testname attribute.");
        return a;
      } else {
        var d = Yp(i);
        if (d === null)
          throw new Error("Could not find React container within specified host subtree.");
        return d.stateNode.current;
      }
    }
    function q0(i, a) {
      switch (a.$$typeof) {
        case av:
          if (i.type === a.value)
            return !0;
          break;
        case sv:
          return UL(i, a.value);
        case ov:
          if (i.tag === ie) {
            var d = i.stateNode;
            if (Td(d, a.value))
              return !0;
          }
          break;
        case uv:
          if (i.tag === ie || i.tag === fe) {
            var m = hy(i);
            if (m !== null && m.indexOf(a.value) >= 0)
              return !0;
          }
          break;
        case lv:
          if (i.tag === ie) {
            var _ = i.memoizedProps["data-testname"];
            if (typeof _ == "string" && _.toLowerCase() === a.value.toLowerCase())
              return !0;
          }
          break;
        default:
          throw new Error("Invalid selector type specified.");
      }
      return !1;
    }
    function Z0(i) {
      switch (i.$$typeof) {
        case av:
          var a = rt(i.value) || "Unknown";
          return "<" + a + ">";
        case sv:
          return ":has(" + (Z0(i) || "") + ")";
        case ov:
          return '[role="' + i.value + '"]';
        case uv:
          return '"' + i.value + '"';
        case lv:
          return '[data-testname="' + i.value + '"]';
        default:
          throw new Error("Invalid selector type specified.");
      }
    }
    function tT(i, a) {
      for (var d = [], m = [i, 0], _ = 0; _ < m.length; ) {
        var b = m[_++], P = m[_++], N = a[P];
        if (!(b.tag === ie && ti(b))) {
          for (; N != null && q0(b, N); )
            P++, N = a[P];
          if (P === a.length)
            d.push(b);
          else
            for (var V = b.child; V !== null; )
              m.push(V, P), V = V.sibling;
        }
      }
      return d;
    }
    function UL(i, a) {
      for (var d = [i, 0], m = 0; m < d.length; ) {
        var _ = d[m++], b = d[m++], P = a[b];
        if (!(_.tag === ie && ti(_))) {
          for (; P != null && q0(_, P); )
            b++, P = a[b];
          if (b === a.length)
            return !0;
          for (var N = _.child; N !== null; )
            d.push(N, b), N = N.sibling;
        }
      }
      return !1;
    }
    function cv(i, a) {
      if (!ws)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = j0(i), m = tT(d, a), _ = [], b = Array.from(m), P = 0; P < b.length; ) {
        var N = b[P++];
        if (N.tag === ie) {
          if (ti(N))
            continue;
          _.push(N.stateNode);
        } else
          for (var V = N.child; V !== null; )
            b.push(V), V = V.sibling;
      }
      return _;
    }
    function NL(i, a) {
      if (!ws)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = j0(i), m = 0, _ = [], b = [d, 0], P = 0; P < b.length; ) {
        var N = b[P++], V = b[P++], q = a[V];
        if (!(N.tag === ie && ti(N)) && (q0(N, q) && (_.push(Z0(q)), V++, V > m && (m = V)), V < a.length))
          for (var te = N.child; te !== null; )
            b.push(te, V), te = te.sibling;
      }
      if (m < a.length) {
        for (var me = [], we = m; we < a.length; we++)
          me.push(Z0(a[we]));
        return `findAllNodes was able to match part of the selector:
` + ("  " + _.join(" > ") + `

`) + `No matching component was found for:
` + ("  " + me.join(" > "));
      }
      return null;
    }
    function OL(i, a) {
      if (!ws)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = cv(i, a), m = [], _ = 0; _ < d.length; _++)
        m.push(dy(d[_]));
      for (var b = m.length - 1; b > 0; b--)
        for (var P = m[b], N = P.x, V = N + P.width, q = P.y, te = q + P.height, me = b - 1; me >= 0; me--)
          if (b !== me) {
            var we = m[me], Le = we.x, je = Le + we.width, Qe = we.y, Ft = Qe + we.height;
            if (N >= Le && q >= Qe && V <= je && te <= Ft) {
              m.splice(b, 1);
              break;
            } else if (N === Le && P.width === we.width && !(Ft < q) && !(Qe > te)) {
              Qe > q && (we.height += Qe - q, we.y = q), Ft < te && (we.height = te - Qe), m.splice(b, 1);
              break;
            } else if (q === Qe && P.height === we.height && !(je < N) && !(Le > V)) {
              Le > N && (we.width += Le - N, we.x = N), je < V && (we.width = V - Le), m.splice(b, 1);
              break;
            }
          }
      return m;
    }
    function IL(i, a) {
      if (!ws)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = j0(i), m = tT(d, a), _ = Array.from(m), b = 0; b < _.length; ) {
        var P = _[b++];
        if (!ti(P)) {
          if (P.tag === ie) {
            var N = P.stateNode;
            if (py(N))
              return !0;
          }
          for (var V = P.child; V !== null; )
            _.push(V), V = V.sibling;
        }
      }
      return !1;
    }
    var fv = [];
    function FL() {
      ws && fv.forEach(function(i) {
        return i();
      });
    }
    function zL(i, a, d, m) {
      if (!ws)
        throw new Error("Test selector API is not supported by this renderer.");
      var _ = cv(i, a), b = bd(_, d, m), P = b.disconnect, N = b.observe, V = b.unobserve, q = function() {
        var te = cv(i, a);
        _.forEach(function(me) {
          te.indexOf(me) < 0 && V(me);
        }), te.forEach(function(me) {
          _.indexOf(me) < 0 && N(me);
        });
      };
      return fv.push(q), {
        disconnect: function() {
          var te = fv.indexOf(q);
          te >= 0 && fv.splice(te, 1), P();
        }
      };
    }
    var BL = o.ReactCurrentActQueue;
    function HL(i) {
      {
        var a = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        ), d = typeof jest < "u";
        return wc && d && a !== !1;
      }
    }
    function nT() {
      {
        var i = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        return !i && BL.current !== null && p("The current testing environment is not configured to support act(...)"), i;
      }
    }
    var VL = Math.ceil, J0 = o.ReactCurrentDispatcher, K0 = o.ReactCurrentOwner, li = o.ReactCurrentBatchConfig, ds = o.ReactCurrentActQueue, Di = (
      /*             */
      0
    ), Q0 = (
      /*               */
      1
    ), yr = (
      /*                */
      2
    ), hs = (
      /*                */
      4
    ), Ro = 0, Dh = 1, Vu = 2, dv = 3, Uh = 4, iT = 5, $0 = 6, on = Di, _r = null, ui = null, Hi = We, Gs = We, e_ = La(We), Vi = Ro, Nh = null, hv = We, Oh = We, pv = We, Ih = null, ea = null, t_ = 0, rT = 500, aT = 1 / 0, kL = 500;
    function Cf() {
      aT = ri() + kL;
    }
    function sT() {
      return aT;
    }
    var mv = !1, n_ = null, Lf = null, ku = !1, Co = null, Fh = We, i_ = [], GL = 50, zh = 0, r_ = null, WL = 50, vv = 0, Bh = kn, gv = We;
    function yv() {
      return _r;
    }
    function Nr() {
      return (on & (yr | hs)) !== Di ? ri() : (Bh !== kn || (Bh = ri()), Bh);
    }
    function Fl(i) {
      var a = i.mode;
      if ((a & Ln) === jt)
        return fn;
      if ((on & yr) !== Di && Hi !== We)
        return ml(Hi);
      var d = uh() !== pm;
      if (d) {
        if (li.transition !== null) {
          var m = li.transition;
          m._updatedFibers || (m._updatedFibers = /* @__PURE__ */ new Set()), m._updatedFibers.add(i);
        }
        return gv === Mi && (gv = am()), gv;
      }
      var _ = Cr();
      if (_ !== Mi)
        return _;
      var b = fy();
      return b;
    }
    function XL(i) {
      var a = i.mode;
      return (a & Ln) === jt ? fn : sm();
    }
    function ki(i, a, d) {
      yP();
      var m = _v(i, a);
      return m === null ? null : (ho(m, a, d), (on & yr) !== We && m === _r ? SP(i) : (fr && Zd(m, i, a), MP(i), m === _r && ((on & yr) === Di && (Oh = Qt(Oh, a)), Vi === Uh && zl(m, Hi)), ta(m, d), a === fn && on === Di && (i.mode & Ln) === jt && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
      !ds.isBatchingLegacy && (Cf(), lh())), m);
    }
    function YL(i, a, d) {
      var m = i.current;
      m.lanes = a, ho(i, a, d), ta(i, d);
    }
    function _v(i, a) {
      i.lanes = Qt(i.lanes, a);
      var d = i.alternate;
      d !== null && (d.lanes = Qt(d.lanes, a)), d === null && (i.flags & (Ce | Li)) !== k && xT(i);
      for (var m = i, _ = i.return; _ !== null; )
        _.childLanes = Qt(_.childLanes, a), d = _.alternate, d !== null ? d.childLanes = Qt(d.childLanes, a) : (_.flags & (Ce | Li)) !== k && xT(i), m = _, _ = _.return;
      if (m.tag === I) {
        var b = m.stateNode;
        return b;
      } else
        return null;
    }
    function oT(i, a) {
      return (
        // TODO: Optimize slightly by comparing to root that fiber belongs to.
        // Requires some refactoring. Not a big deal though since it's rare for
        // concurrent apps to have more than a single root.
        _r !== null && (i.mode & Ln) !== jt && // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),
        // then don't treat this as an interleaved update. This pattern is
        // accompanied by a warning but we haven't fully deprecated it yet. We can
        // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.
        (on & yr) === Di
      );
    }
    function ta(i, a) {
      var d = i.callbackNode;
      im(i, a);
      var m = Eu(i, i === _r ? Hi : We);
      if (m === We) {
        d !== null && MT(d), i.callbackNode = null, i.callbackPriority = Mi;
        return;
      }
      var _ = Oa(m), b = i.callbackPriority;
      if (b === _ && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(ds.current !== null && d !== c_)) {
        d == null && b !== fn && p("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
        return;
      }
      d != null && MT(d);
      var P;
      if (_ === fn)
        i.tag === so ? (ds.isBatchingLegacy !== null && (ds.didScheduleLegacyUpdate = !0), dm(cT.bind(null, i))) : os(cT.bind(null, i)), Sn ? ds.current !== null ? ds.current.push(Zr) : Xp(function() {
          on === Di && Zr();
        }) : wv(go, Zr), P = null;
      else {
        var N;
        switch (Qd(m)) {
          case pa:
            N = go;
            break;
          case yl:
            N = Tu;
            break;
          case _l:
            N = as;
            break;
          case sf:
            N = xl;
            break;
          default:
            N = as;
            break;
        }
        P = wv(N, lT.bind(null, i));
      }
      i.callbackPriority = _, i.callbackNode = P;
    }
    function lT(i, a) {
      if (rC(), Bh = kn, gv = We, (on & (yr | hs)) !== Di)
        throw new Error("Should not already be working.");
      var d = i.callbackNode, m = Ws();
      if (m && i.callbackNode !== d)
        return null;
      var _ = Eu(i, i === _r ? Hi : We);
      if (_ === We)
        return null;
      var b = !co(i, _) && !rm(i, _) && !a, P = b ? sP(i, _) : Ev(i, _);
      if (P !== Ro) {
        if (P === Vu) {
          var N = ef(i);
          N !== We && (_ = N, P = a_(i, N));
        }
        if (P === Dh) {
          var V = Nh;
          throw Gu(i, We), zl(i, _), ta(i, ri()), V;
        }
        if (P === $0)
          zl(i, _);
        else {
          var q = !co(i, _), te = i.current.alternate;
          if (q && !qL(te)) {
            if (P = Ev(i, _), P === Vu) {
              var me = ef(i);
              me !== We && (_ = me, P = a_(i, me));
            }
            if (P === Dh) {
              var we = Nh;
              throw Gu(i, We), zl(i, _), ta(i, ri()), we;
            }
          }
          i.finishedWork = te, i.finishedLanes = _, jL(i, P, _);
        }
      }
      return ta(i, ri()), i.callbackNode === d ? lT.bind(null, i) : null;
    }
    function a_(i, a) {
      var d = Ih;
      if (Is(i)) {
        var m = Gu(i, a);
        m.flags |= Kt, Ar(i.containerInfo);
      }
      var _ = Ev(i, a);
      if (_ !== Vu) {
        var b = ea;
        ea = d, b !== null && uT(b);
      }
      return _;
    }
    function uT(i) {
      ea === null ? ea = i : ea.push.apply(ea, i);
    }
    function jL(i, a, d) {
      switch (a) {
        case Ro:
        case Dh:
          throw new Error("Root did not complete. This is a bug in React.");
        case Vu: {
          Wu(i, ea);
          break;
        }
        case dv: {
          if (zl(i, d), jd(d) && // do not delay if we're inside an act() scope
          !ET()) {
            var m = t_ + rT - ri();
            if (m > 10) {
              var _ = Eu(i, We);
              if (_ !== We)
                break;
              var b = i.suspendedLanes;
              if (!vl(b, d)) {
                Nr(), lm(i, b);
                break;
              }
              i.timeoutHandle = Wp(Wu.bind(null, i, ea), m);
              break;
            }
          }
          Wu(i, ea);
          break;
        }
        case Uh: {
          if (zl(i, d), nf(d))
            break;
          if (!ET()) {
            var P = tm(i, d), N = P, V = ri() - N, q = gP(V) - V;
            if (q > 10) {
              i.timeoutHandle = Wp(Wu.bind(null, i, ea), q);
              break;
            }
          }
          Wu(i, ea);
          break;
        }
        case iT: {
          Wu(i, ea);
          break;
        }
        default:
          throw new Error("Unknown root exit status.");
      }
    }
    function qL(i) {
      for (var a = i; ; ) {
        if (a.flags & Ka) {
          var d = a.updateQueue;
          if (d !== null) {
            var m = d.stores;
            if (m !== null)
              for (var _ = 0; _ < m.length; _++) {
                var b = m[_], P = b.getSnapshot, N = b.value;
                try {
                  if (!Pr(P(), N))
                    return !1;
                } catch {
                  return !1;
                }
              }
          }
        }
        var V = a.child;
        if (a.subtreeFlags & Ka && V !== null) {
          V.return = a, a = V;
          continue;
        }
        if (a === i)
          return !0;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === i)
            return !0;
          a = a.return;
        }
        a.sibling.return = a.return, a = a.sibling;
      }
      return !0;
    }
    function zl(i, a) {
      a = fo(a, pv), a = fo(a, Oh), om(i, a);
    }
    function cT(i) {
      if (aC(), (on & (yr | hs)) !== Di)
        throw new Error("Should not already be working.");
      Ws();
      var a = Eu(i, We);
      if (!ii(a, fn))
        return ta(i, ri()), null;
      var d = Ev(i, a);
      if (i.tag !== so && d === Vu) {
        var m = ef(i);
        m !== We && (a = m, d = a_(i, m));
      }
      if (d === Dh) {
        var _ = Nh;
        throw Gu(i, We), zl(i, a), ta(i, ri()), _;
      }
      if (d === $0)
        throw new Error("Root did not complete. This is a bug in React.");
      var b = i.current.alternate;
      return i.finishedWork = b, i.finishedLanes = a, Wu(i, ea), ta(i, ri()), null;
    }
    function ZL(i, a) {
      a !== We && (mo(i, Qt(a, fn)), ta(i, ri()), (on & (yr | hs)) === Di && (Cf(), Zr()));
    }
    function JL(i) {
      var a = Cr(), d = li.transition;
      try {
        return li.transition = null, Ei(_l), i();
      } finally {
        Ei(a), li.transition = d;
      }
    }
    function KL(i, a) {
      var d = on;
      on |= Q0;
      try {
        return i(a);
      } finally {
        on = d, on === Di && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ds.isBatchingLegacy && (Cf(), lh());
      }
    }
    function QL(i, a, d, m, _) {
      var b = Cr(), P = li.transition;
      try {
        return li.transition = null, Ei(pa), i(a, d, m, _);
      } finally {
        Ei(b), li.transition = P, on === Di && Cf();
      }
    }
    function xv(i) {
      Co !== null && Co.tag === so && (on & (yr | hs)) === Di && Ws();
      var a = on;
      on |= Q0;
      var d = li.transition, m = Cr();
      try {
        return li.transition = null, Ei(pa), i ? i() : void 0;
      } finally {
        Ei(m), li.transition = d, on = a, (on & (yr | hs)) === Di && Zr();
      }
    }
    function $L() {
      return (on & (yr | hs)) !== Di;
    }
    function eP(i) {
      var a = on;
      on |= Q0;
      var d = li.transition, m = Cr();
      try {
        li.transition = null, Ei(pa), i();
      } finally {
        Ei(m), li.transition = d, on = a, on === Di && (Cf(), Zr());
      }
    }
    function Sv(i, a) {
      On(e_, Gs, i), Gs = Qt(Gs, a);
    }
    function s_(i) {
      Gs = e_.current, xi(e_, i);
    }
    function Gu(i, a) {
      i.finishedWork = null, i.finishedLanes = We;
      var d = i.timeoutHandle;
      if (d !== Zo && (i.timeoutHandle = Zo, bc(d)), ui !== null)
        for (var m = ui.return; m !== null; ) {
          var _ = m.alternate;
          UE(_, m), m = m.return;
        }
      _r = i;
      var b = Xu(i.current, null);
      return ui = b, Hi = Gs = a, Vi = Ro, Nh = null, hv = We, Oh = We, pv = We, Ih = null, ea = null, Bn(), Jr.discardPendingWarnings(), b;
    }
    function fT(i, a) {
      do {
        var d = ui;
        try {
          if (u(), DM(), Fi(), K0.current = null, d === null || d.return === null) {
            Vi = Dh, Nh = a, ui = null;
            return;
          }
          if (F && d.mode & _n && Xm(d, !0), U)
            if (ss(), a !== null && typeof a == "object" && typeof a.then == "function") {
              var m = a;
              cf(d, m, Hi);
            } else
              Us(d, a, Hi);
          cC(i, d.return, d, a, Hi), mT(d);
        } catch (_) {
          a = _, ui === d && d !== null ? (d = d.return, ui = d) : d = ui;
          continue;
        }
        return;
      } while (!0);
    }
    function dT() {
      var i = J0.current;
      return J0.current = Hm, i === null ? Hm : i;
    }
    function hT(i) {
      J0.current = i;
    }
    function tP() {
      t_ = ri();
    }
    function Mv(i) {
      hv = Qt(i, hv);
    }
    function nP() {
      Vi === Ro && (Vi = dv);
    }
    function o_() {
      (Vi === Ro || Vi === dv || Vi === Vu) && (Vi = Uh), _r !== null && (tf(hv) || tf(Oh)) && zl(_r, Hi);
    }
    function iP(i) {
      Vi !== Uh && (Vi = Vu), Ih === null ? Ih = [i] : Ih.push(i);
    }
    function rP() {
      return Vi === Ro;
    }
    function Ev(i, a) {
      var d = on;
      on |= yr;
      var m = dT();
      if (_r !== i || Hi !== a) {
        if (fr) {
          var _ = i.memoizedUpdaters;
          _.size > 0 && (Hh(i, Hi), _.clear()), Jd(i, a);
        }
        Gu(i, a);
      }
      Ru(a);
      do
        try {
          aP();
          break;
        } catch (b) {
          fT(i, b);
        }
      while (!0);
      if (u(), on = d, hT(m), ui !== null)
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      return Ji(), _r = null, Hi = We, Vi;
    }
    function aP() {
      for (; ui !== null; )
        pT(ui);
    }
    function sP(i, a) {
      var d = on;
      on |= yr;
      var m = dT();
      if (_r !== i || Hi !== a) {
        if (fr) {
          var _ = i.memoizedUpdaters;
          _.size > 0 && (Hh(i, Hi), _.clear()), Jd(i, a);
        }
        Cf(), Gu(i, a);
      }
      Ru(a);
      do
        try {
          oP();
          break;
        } catch (b) {
          fT(i, b);
        }
      while (!0);
      return u(), hT(m), on = d, ui !== null ? (df(), Ro) : (Ji(), _r = null, Hi = We, Vi);
    }
    function oP() {
      for (; ui !== null && !fm(); )
        pT(ui);
    }
    function pT(i) {
      var a = i.alternate;
      En(i);
      var d;
      (i.mode & _n) !== jt ? (E0(i), d = l_(a, i, Gs), Xm(i, !0)) : d = l_(a, i, Gs), Fi(), i.memoizedProps = i.pendingProps, d === null ? mT(i) : ui = d, K0.current = null;
    }
    function mT(i) {
      var a = i;
      do {
        var d = a.alternate, m = a.return;
        if ((a.flags & $) === k) {
          En(a);
          var _ = void 0;
          if ((a.mode & _n) === jt ? _ = dE(d, a, Gs) : (E0(a), _ = dE(d, a, Gs), Xm(a, !1)), Fi(), _ !== null) {
            ui = _;
            return;
          }
        } else {
          var b = FC(d, a);
          if (b !== null) {
            b.flags &= Yo, ui = b;
            return;
          }
          if ((a.mode & _n) !== jt) {
            Xm(a, !1);
            for (var P = a.actualDuration, N = a.child; N !== null; )
              P += N.actualDuration, N = N.sibling;
            a.actualDuration = P;
          }
          if (m !== null)
            m.flags |= $, m.subtreeFlags = k, m.deletions = null;
          else {
            Vi = $0, ui = null;
            return;
          }
        }
        var V = a.sibling;
        if (V !== null) {
          ui = V;
          return;
        }
        a = m, ui = a;
      } while (a !== null);
      Vi === Ro && (Vi = iT);
    }
    function Wu(i, a) {
      var d = Cr(), m = li.transition;
      try {
        li.transition = null, Ei(pa), lP(i, a, d);
      } finally {
        li.transition = m, Ei(d);
      }
      return null;
    }
    function lP(i, a, d) {
      do
        Ws();
      while (Co !== null);
      if (_P(), (on & (yr | hs)) !== Di)
        throw new Error("Should not already be working.");
      var m = i.finishedWork, _ = i.finishedLanes;
      if (Ti(_), m === null)
        return Ml(), null;
      if (_ === We && p("root.finishedLanes should not be empty during a commit. This is a bug in React."), i.finishedWork = null, i.finishedLanes = We, m === i.current)
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      i.callbackNode = null, i.callbackPriority = Mi;
      var b = Qt(m.lanes, m.childLanes);
      po(i, b), i === _r && (_r = null, ui = null, Hi = We), ((m.subtreeFlags & Bt) !== k || (m.flags & Bt) !== k) && (ku || (ku = !0, wv(as, function() {
        return Ws(), null;
      })));
      var P = (m.subtreeFlags & (ft | _t | At | Bt)) !== k, N = (m.flags & (ft | _t | At | Bt)) !== k;
      if (P || N) {
        var V = li.transition;
        li.transition = null;
        var q = Cr();
        Ei(pa);
        var te = on;
        on |= hs, K0.current = null, WC(i, m), iE(), sL(i, m, _), qi(i.containerInfo), i.current = m, Ns(_), cL(m, i, _), ff(), lf(), on = te, Ei(q), li.transition = V;
      } else
        i.current = m, iE();
      var me = ku;
      if (ku && (ku = !1, Co = i, Fh = _), b = i.pendingLanes, b === We && (Lf = null), me || _T(i.current, !1), an(m.stateNode, d), fr && i.memoizedUpdaters.clear(), FL(), ta(i, ri()), a !== null)
        for (var we = i.onRecoverableError, Le = 0; Le < a.length; Le++) {
          var je = a[Le];
          we(je);
        }
      if (mv) {
        mv = !1;
        var Qe = n_;
        throw n_ = null, Qe;
      }
      return ii(Fh, fn) && i.tag !== so && Ws(), b = i.pendingLanes, ii(b, fn) ? (iC(), i === r_ ? zh++ : (zh = 0, r_ = i)) : zh = 0, Zr(), Ml(), null;
    }
    function Ws() {
      if (Co !== null) {
        var i = Qd(Fh), a = My(_l, i), d = li.transition, m = Cr();
        try {
          return li.transition = null, Ei(a), cP();
        } finally {
          Ei(m), li.transition = d;
        }
      }
      return !1;
    }
    function uP(i) {
      i_.push(i), ku || (ku = !0, wv(as, function() {
        return Ws(), null;
      }));
    }
    function cP() {
      if (Co === null)
        return !1;
      var i = Co, a = Fh;
      if (Co = null, Fh = We, (on & (yr | hs)) !== Di)
        throw new Error("Cannot flush passive effects while already rendering.");
      Au(a);
      var d = on;
      on |= hs, gL(i.current), hL(i, i.current);
      {
        var m = i_;
        i_ = [];
        for (var _ = 0; _ < m.length; _++) {
          var b = m[_];
          qC(i, b);
        }
      }
      sh(), _T(i.current, !0), on = d, Zr(), vv = Co === null ? 0 : vv + 1, mi(i);
      {
        var P = i.current.stateNode;
        P.effectDuration = 0, P.passiveEffectDuration = 0;
      }
      return !0;
    }
    function vT(i) {
      return Lf !== null && Lf.has(i);
    }
    function fP(i) {
      Lf === null ? Lf = /* @__PURE__ */ new Set([i]) : Lf.add(i);
    }
    function dP(i) {
      mv || (mv = !0, n_ = i);
    }
    var hP = dP;
    function gT(i, a, d) {
      var m = Ym(d, a), _ = aE(i, m, fn);
      sn(i, _);
      var b = Nr(), P = _v(i, fn);
      P !== null && (ho(P, fn, b), ta(P, b));
    }
    function sr(i, a, d) {
      if (i.tag === I) {
        gT(i, i, d);
        return;
      }
      var m = null;
      for (m = a; m !== null; ) {
        if (m.tag === I) {
          gT(m, i, d);
          return;
        } else if (m.tag === W) {
          var _ = m.type, b = m.stateNode;
          if (typeof _.getDerivedStateFromError == "function" || typeof b.componentDidCatch == "function" && !vT(b)) {
            var P = Ym(d, i), N = R0(m, P, fn);
            sn(m, N);
            var V = Nr(), q = _v(m, fn);
            q !== null && (ho(q, fn, V), ta(q, V));
            return;
          }
        }
        m = m.return;
      }
      p(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, d);
    }
    function pP(i, a, d) {
      var m = i.pingCache;
      m !== null && m.delete(a);
      var _ = Nr();
      lm(i, d), EP(i), _r === i && vl(Hi, d) && (Vi === Uh || Vi === dv && jd(Hi) && ri() - t_ < rT ? Gu(i, We) : pv = Qt(pv, d)), ta(i, _);
    }
    function yT(i, a) {
      a === Mi && (a = XL(i));
      var d = Nr(), m = _v(i, a);
      m !== null && (ho(m, a, d), ta(m, d));
    }
    function mP(i) {
      var a = i.memoizedState, d = Mi;
      a !== null && (d = a.retryLane), yT(i, d);
    }
    function vP(i, a) {
      var d = Mi, m;
      switch (i.tag) {
        case re:
          m = i.stateNode;
          var _ = i.memoizedState;
          _ !== null && (d = _.retryLane);
          break;
        case it:
          m = i.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      m !== null && m.delete(a), yT(i, d);
    }
    function gP(i) {
      return i < 120 ? 120 : i < 480 ? 480 : i < 1080 ? 1080 : i < 1920 ? 1920 : i < 3e3 ? 3e3 : i < 4320 ? 4320 : VL(i / 1960) * 1960;
    }
    function yP() {
      if (zh > GL)
        throw zh = 0, r_ = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      vv > WL && (vv = 0, p("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
    }
    function _P() {
      Jr.flushLegacyContextWarning(), Jr.flushPendingUnsafeLifecycleWarnings();
    }
    function _T(i, a) {
      En(i), Tv(i, de, wL), a && Tv(i, tt, AL), Tv(i, de, TL), a && Tv(i, tt, bL), Fi();
    }
    function Tv(i, a, d) {
      for (var m = i, _ = null; m !== null; ) {
        var b = m.subtreeFlags & a;
        m !== _ && m.child !== null && b !== k ? m = m.child : ((m.flags & a) !== k && d(m), m.sibling !== null ? m = m.sibling : m = _ = m.return);
      }
    }
    var bv = null;
    function xT(i) {
      {
        if ((on & yr) !== Di || !(i.mode & Ln))
          return;
        var a = i.tag;
        if (a !== O && a !== I && a !== W && a !== B && a !== ne && a !== J && a !== ue)
          return;
        var d = xe(i) || "ReactComponent";
        if (bv !== null) {
          if (bv.has(d))
            return;
          bv.add(d);
        } else
          bv = /* @__PURE__ */ new Set([d]);
        var m = Dr;
        try {
          En(i), p("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          m ? En(i) : Fi();
        }
      }
    }
    var l_;
    {
      var xP = null;
      l_ = function(i, a, d) {
        var m = RT(xP, a);
        try {
          return DE(i, a, d);
        } catch (b) {
          if (b !== null && typeof b == "object" && typeof b.then == "function")
            throw b;
          if (u(), DM(), UE(i, a), RT(a, m), a.mode & _n && E0(a), IE(null, DE, null, i, a, d), HC()) {
            var _ = FE();
            typeof _ == "object" && _ !== null && _._suppressLogging && typeof b == "object" && b !== null && !b._suppressLogging && (b._suppressLogging = !0);
          }
          throw b;
        }
      };
    }
    var ST = !1, u_;
    u_ = /* @__PURE__ */ new Set();
    function SP(i) {
      if (va && !eC())
        switch (i.tag) {
          case B:
          case ne:
          case ue: {
            var a = ui && xe(ui) || "Unknown", d = a;
            if (!u_.has(d)) {
              u_.add(d);
              var m = xe(i) || "Unknown";
              p("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", m, a, a);
            }
            break;
          }
          case W: {
            ST || (p("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), ST = !0);
            break;
          }
        }
    }
    function Hh(i, a) {
      if (fr) {
        var d = i.memoizedUpdaters;
        d.forEach(function(m) {
          Zd(i, m, a);
        });
      }
    }
    var c_ = {};
    function wv(i, a) {
      {
        var d = ds.current;
        return d !== null ? (d.push(a), c_) : $d(i, a);
      }
    }
    function MT(i) {
      if (i !== c_)
        return cm(i);
    }
    function ET() {
      return ds.current !== null;
    }
    function MP(i) {
      {
        if (i.mode & Ln) {
          if (!nT())
            return;
        } else if (!HL() || on !== Di || i.tag !== B && i.tag !== ne && i.tag !== ue)
          return;
        if (ds.current === null) {
          var a = Dr;
          try {
            En(i), p(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, xe(i));
          } finally {
            a ? En(i) : Fi();
          }
        }
      }
    }
    function EP(i) {
      i.tag !== so && nT() && ds.current === null && p(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
    }
    var Ya = null, Pf = null, TP = function(i) {
      Ya = i;
    };
    function Df(i) {
      {
        if (Ya === null)
          return i;
        var a = Ya(i);
        return a === void 0 ? i : a.current;
      }
    }
    function f_(i) {
      return Df(i);
    }
    function d_(i) {
      {
        if (Ya === null)
          return i;
        var a = Ya(i);
        if (a === void 0) {
          if (i != null && typeof i.render == "function") {
            var d = Df(i.render);
            if (i.render !== d) {
              var m = {
                $$typeof: at,
                render: d
              };
              return i.displayName !== void 0 && (m.displayName = i.displayName), m;
            }
          }
          return i;
        }
        return a.current;
      }
    }
    function TT(i, a) {
      {
        if (Ya === null)
          return !1;
        var d = i.elementType, m = a.type, _ = !1, b = typeof m == "object" && m !== null ? m.$$typeof : null;
        switch (i.tag) {
          case W: {
            typeof m == "function" && (_ = !0);
            break;
          }
          case B: {
            (typeof m == "function" || b === X) && (_ = !0);
            break;
          }
          case ne: {
            (b === at || b === X) && (_ = !0);
            break;
          }
          case J:
          case ue: {
            (b === rn || b === X) && (_ = !0);
            break;
          }
          default:
            return !1;
        }
        if (_) {
          var P = Ya(d);
          if (P !== void 0 && P === Ya(m))
            return !0;
        }
        return !1;
      }
    }
    function bT(i) {
      {
        if (Ya === null || typeof WeakSet != "function")
          return;
        Pf === null && (Pf = /* @__PURE__ */ new WeakSet()), Pf.add(i);
      }
    }
    var bP = function(i, a) {
      {
        if (Ya === null)
          return;
        var d = a.staleFamilies, m = a.updatedFamilies;
        Ws(), xv(function() {
          h_(i.current, m, d);
        });
      }
    }, wP = function(i, a) {
      {
        if (i.context !== mn)
          return;
        Ws(), xv(function() {
          PT(a, i, null, null);
        });
      }
    };
    function h_(i, a, d) {
      {
        var m = i.alternate, _ = i.child, b = i.sibling, P = i.tag, N = i.type, V = null;
        switch (P) {
          case B:
          case ue:
          case W:
            V = N;
            break;
          case ne:
            V = N.render;
            break;
        }
        if (Ya === null)
          throw new Error("Expected resolveFamily to be set during hot reload.");
        var q = !1, te = !1;
        if (V !== null) {
          var me = Ya(V);
          me !== void 0 && (d.has(me) ? te = !0 : a.has(me) && (P === W ? te = !0 : q = !0));
        }
        Pf !== null && (Pf.has(i) || m !== null && Pf.has(m)) && (te = !0), te && (i._debugNeedsRemount = !0), (te || q) && ki(i, fn, kn), _ !== null && !te && h_(_, a, d), b !== null && h_(b, a, d);
      }
    }
    var AP = function(i, a) {
      {
        var d = /* @__PURE__ */ new Set(), m = new Set(a.map(function(_) {
          return _.current;
        }));
        return p_(i.current, m, d), d;
      }
    };
    function p_(i, a, d) {
      {
        var m = i.child, _ = i.sibling, b = i.tag, P = i.type, N = null;
        switch (b) {
          case B:
          case ue:
          case W:
            N = P;
            break;
          case ne:
            N = P.render;
            break;
        }
        var V = !1;
        N !== null && a.has(N) && (V = !0), V ? RP(i, d) : m !== null && p_(m, a, d), _ !== null && p_(_, a, d);
      }
    }
    function RP(i, a) {
      {
        var d = CP(i, a);
        if (d)
          return;
        for (var m = i; ; ) {
          switch (m.tag) {
            case ie:
              a.add(m.stateNode);
              return;
            case Z:
              a.add(m.stateNode.containerInfo);
              return;
            case I:
              a.add(m.stateNode.containerInfo);
              return;
          }
          if (m.return === null)
            throw new Error("Expected to reach root first.");
          m = m.return;
        }
      }
    }
    function CP(i, a) {
      for (var d = i, m = !1; ; ) {
        if (d.tag === ie)
          m = !0, a.add(d.stateNode);
        else if (d.child !== null) {
          d.child.return = d, d = d.child;
          continue;
        }
        if (d === i)
          return m;
        for (; d.sibling === null; ) {
          if (d.return === null || d.return === i)
            return m;
          d = d.return;
        }
        d.sibling.return = d.return, d = d.sibling;
      }
      return !1;
    }
    var m_;
    {
      m_ = !1;
      try {
        var wT = Object.preventExtensions({});
      } catch {
        m_ = !0;
      }
    }
    function LP(i, a, d, m) {
      this.tag = i, this.key = d, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = a, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = m, this.flags = k, this.subtreeFlags = k, this.deletions = null, this.lanes = We, this.childLanes = We, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !m_ && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
    }
    var ga = function(i, a, d, m) {
      return new LP(i, a, d, m);
    };
    function v_(i) {
      var a = i.prototype;
      return !!(a && a.isReactComponent);
    }
    function PP(i) {
      return typeof i == "function" && !v_(i) && i.defaultProps === void 0;
    }
    function DP(i) {
      if (typeof i == "function")
        return v_(i) ? W : B;
      if (i != null) {
        var a = i.$$typeof;
        if (a === at)
          return ne;
        if (a === rn)
          return J;
      }
      return O;
    }
    function Xu(i, a) {
      var d = i.alternate;
      d === null ? (d = ga(i.tag, a, i.key, i.mode), d.elementType = i.elementType, d.type = i.type, d.stateNode = i.stateNode, d._debugSource = i._debugSource, d._debugOwner = i._debugOwner, d._debugHookTypes = i._debugHookTypes, d.alternate = i, i.alternate = d) : (d.pendingProps = a, d.type = i.type, d.flags = k, d.subtreeFlags = k, d.deletions = null, d.actualDuration = 0, d.actualStartTime = -1), d.flags = i.flags & wt, d.childLanes = i.childLanes, d.lanes = i.lanes, d.child = i.child, d.memoizedProps = i.memoizedProps, d.memoizedState = i.memoizedState, d.updateQueue = i.updateQueue;
      var m = i.dependencies;
      switch (d.dependencies = m === null ? null : {
        lanes: m.lanes,
        firstContext: m.firstContext
      }, d.sibling = i.sibling, d.index = i.index, d.ref = i.ref, d.selfBaseDuration = i.selfBaseDuration, d.treeBaseDuration = i.treeBaseDuration, d._debugNeedsRemount = i._debugNeedsRemount, d.tag) {
        case O:
        case B:
        case ue:
          d.type = Df(i.type);
          break;
        case W:
          d.type = f_(i.type);
          break;
        case ne:
          d.type = d_(i.type);
          break;
      }
      return d;
    }
    function UP(i, a) {
      i.flags &= wt | Ce;
      var d = i.alternate;
      if (d === null)
        i.childLanes = We, i.lanes = a, i.child = null, i.subtreeFlags = k, i.memoizedProps = null, i.memoizedState = null, i.updateQueue = null, i.dependencies = null, i.stateNode = null, i.selfBaseDuration = 0, i.treeBaseDuration = 0;
      else {
        i.childLanes = d.childLanes, i.lanes = d.lanes, i.child = d.child, i.subtreeFlags = k, i.deletions = null, i.memoizedProps = d.memoizedProps, i.memoizedState = d.memoizedState, i.updateQueue = d.updateQueue, i.type = d.type;
        var m = d.dependencies;
        i.dependencies = m === null ? null : {
          lanes: m.lanes,
          firstContext: m.firstContext
        }, i.selfBaseDuration = d.selfBaseDuration, i.treeBaseDuration = d.treeBaseDuration;
      }
      return i;
    }
    function NP(i, a, d) {
      var m;
      return i === zd ? (m = Ln, a === !0 && (m |= ni, m |= Yr)) : m = jt, fr && (m |= _n), ga(I, null, null, m);
    }
    function g_(i, a, d, m, _, b) {
      var P = O, N = i;
      if (typeof i == "function")
        v_(i) ? (P = W, N = f_(N)) : N = Df(N);
      else if (typeof i == "string")
        P = ie;
      else
        e:
          switch (i) {
            case Re:
              return Bl(d.children, _, b, a);
            case Xe:
              P = he, _ |= ni, (_ & Ln) !== jt && (_ |= Yr);
              break;
            case Ue:
              return OP(d, _, b, a);
            case Dt:
              return IP(d, _, b, a);
            case Zt:
              return FP(d, _, b, a);
            case Ye:
              return AT(d, _, b, a);
            case Ve:
            case H:
            case Ze:
            case bt:
            case ye:
            default: {
              if (typeof i == "object" && i !== null)
                switch (i.$$typeof) {
                  case Mt:
                    P = Me;
                    break e;
                  case lt:
                    P = Te;
                    break e;
                  case at:
                    P = ne, N = d_(N);
                    break e;
                  case rn:
                    P = J;
                    break e;
                  case X:
                    P = Pe, N = null;
                    break e;
                }
              var V = "";
              {
                (i === void 0 || typeof i == "object" && i !== null && Object.keys(i).length === 0) && (V += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                var q = m ? xe(m) : null;
                q && (V += `

Check the render method of \`` + q + "`.");
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (i == null ? i : typeof i) + "." + V));
            }
          }
      var te = ga(P, d, a, _);
      return te.elementType = i, te.type = N, te.lanes = b, te._debugOwner = m, te;
    }
    function y_(i, a, d) {
      var m = null;
      m = i._owner;
      var _ = i.type, b = i.key, P = i.props, N = g_(_, b, P, m, a, d);
      return N._debugSource = i._source, N._debugOwner = i._owner, N;
    }
    function Bl(i, a, d, m) {
      var _ = ga(K, i, m, a);
      return _.lanes = d, _;
    }
    function OP(i, a, d, m) {
      typeof i.id != "string" && p('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof i.id);
      var _ = ga(le, i, m, a | _n);
      return _.elementType = Ue, _.lanes = d, _.stateNode = {
        effectDuration: 0,
        passiveEffectDuration: 0
      }, _;
    }
    function IP(i, a, d, m) {
      var _ = ga(re, i, m, a);
      return _.elementType = Dt, _.lanes = d, _;
    }
    function FP(i, a, d, m) {
      var _ = ga(it, i, m, a);
      return _.elementType = Zt, _.lanes = d, _;
    }
    function AT(i, a, d, m) {
      var _ = ga(ot, i, m, a);
      _.elementType = Ye, _.lanes = d;
      var b = {};
      return _.stateNode = b, _;
    }
    function __(i, a, d) {
      var m = ga(fe, i, null, a);
      return m.lanes = d, m;
    }
    function zP() {
      var i = ga(ie, null, null, jt);
      return i.elementType = "DELETED", i;
    }
    function BP(i) {
      var a = ga($e, null, null, jt);
      return a.stateNode = i, a;
    }
    function x_(i, a, d) {
      var m = i.children !== null ? i.children : [], _ = ga(Z, m, i.key, a);
      return _.lanes = d, _.stateNode = {
        containerInfo: i.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: i.implementation
      }, _;
    }
    function RT(i, a) {
      return i === null && (i = ga(O, null, null, jt)), i.tag = a.tag, i.key = a.key, i.elementType = a.elementType, i.type = a.type, i.stateNode = a.stateNode, i.return = a.return, i.child = a.child, i.sibling = a.sibling, i.index = a.index, i.ref = a.ref, i.pendingProps = a.pendingProps, i.memoizedProps = a.memoizedProps, i.updateQueue = a.updateQueue, i.memoizedState = a.memoizedState, i.dependencies = a.dependencies, i.mode = a.mode, i.flags = a.flags, i.subtreeFlags = a.subtreeFlags, i.deletions = a.deletions, i.lanes = a.lanes, i.childLanes = a.childLanes, i.alternate = a.alternate, i.actualDuration = a.actualDuration, i.actualStartTime = a.actualStartTime, i.selfBaseDuration = a.selfBaseDuration, i.treeBaseDuration = a.treeBaseDuration, i._debugSource = a._debugSource, i._debugOwner = a._debugOwner, i._debugNeedsRemount = a._debugNeedsRemount, i._debugHookTypes = a._debugHookTypes, i;
    }
    function HP(i, a, d, m, _) {
      this.tag = a, this.containerInfo = i, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = Zo, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = Mi, this.eventTimes = gl(We), this.expirationTimes = gl(kn), this.pendingLanes = We, this.suspendedLanes = We, this.pingedLanes = We, this.expiredLanes = We, this.mutableReadLanes = We, this.finishedLanes = We, this.entangledLanes = We, this.entanglements = gl(We), this.identifierPrefix = m, this.onRecoverableError = _, er && (this.mutableSourceEagerHydrationData = null), this.effectDuration = 0, this.passiveEffectDuration = 0;
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        for (var b = this.pendingUpdatersLaneMap = [], P = 0; P < yu; P++)
          b.push(/* @__PURE__ */ new Set());
      }
      switch (a) {
        case zd:
          this._debugRootType = d ? "hydrateRoot()" : "createRoot()";
          break;
        case so:
          this._debugRootType = d ? "hydrate()" : "render()";
          break;
      }
    }
    function CT(i, a, d, m, _, b, P, N, V, q) {
      var te = new HP(i, a, d, N, V), me = NP(a, b);
      te.current = me, me.stateNode = te;
      {
        var we = {
          element: m,
          isDehydrated: d,
          cache: null,
          // not enabled yet
          transitions: null
        };
        me.memoizedState = we;
      }
      return Lt(me), te;
    }
    var VP = "18.0.0-fc46dba67-20220329";
    function kP(i, a, d) {
      var m = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return wy(m), {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: ke,
        key: m == null ? null : "" + m,
        children: i,
        containerInfo: a,
        implementation: d
      };
    }
    var S_, M_;
    S_ = !1, M_ = {};
    function LT(i) {
      if (!i)
        return mn;
      var a = x(i), d = Gc(a);
      if (a.tag === W) {
        var m = a.type;
        if (Xr(m))
          return da(a, m, d);
      }
      return d;
    }
    function GP(i) {
      var a = x(i);
      if (a === void 0) {
        if (typeof i.render == "function")
          throw new Error("Unable to find node on an unmounted component.");
        var d = Object.keys(i).join(",");
        throw new Error("Argument appears to not be a ReactComponent. Keys: " + d);
      }
      var m = Xt(a);
      return m === null ? null : m.stateNode;
    }
    function WP(i, a) {
      {
        var d = x(i);
        if (d === void 0) {
          if (typeof i.render == "function")
            throw new Error("Unable to find node on an unmounted component.");
          var m = Object.keys(i).join(",");
          throw new Error("Argument appears to not be a ReactComponent. Keys: " + m);
        }
        var _ = Xt(d);
        if (_ === null)
          return null;
        if (_.mode & ni) {
          var b = xe(d) || "Component";
          if (!M_[b]) {
            M_[b] = !0;
            var P = Dr;
            try {
              En(_), d.mode & ni ? p("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", a, a, b) : p("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", a, a, b);
            } finally {
              P ? En(P) : Fi();
            }
          }
        }
        return _.stateNode;
      }
    }
    function XP(i, a, d, m, _, b, P, N) {
      var V = !1, q = null;
      return CT(i, a, V, q, d, m, _, b, P);
    }
    function YP(i, a, d, m, _, b, P, N, V, q) {
      var te = !0, me = CT(d, m, te, i, _, b, P, N, V);
      me.context = LT(null);
      var we = me.current, Le = Nr(), je = Fl(we), Qe = Ht(Le, je);
      return Qe.callback = a ?? null, sn(we, Qe), YL(me, je, Le), me;
    }
    function PT(i, a, d, m) {
      ai(a, i);
      var _ = a.current, b = Nr(), P = Fl(_);
      Os(P);
      var N = LT(d);
      a.context === null ? a.context = N : a.pendingContext = N, va && Dr !== null && !S_ && (S_ = !0, p(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, xe(Dr) || "Unknown"));
      var V = Ht(b, P);
      V.payload = {
        element: i
      }, m = m === void 0 ? null : m, m !== null && (typeof m != "function" && p("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", m), V.callback = m), sn(_, V);
      var q = ki(_, P, b);
      return q !== null && si(q, _, P), P;
    }
    function jP(i) {
      var a = i.current;
      if (!a.child)
        return null;
      switch (a.child.tag) {
        case ie:
          return wr(a.child.stateNode);
        default:
          return a.child.stateNode;
      }
    }
    function qP(i) {
      switch (i.tag) {
        case I:
          var a = i.stateNode;
          if (Is(a)) {
            var d = Xd(a);
            ZL(a, d);
          }
          break;
        case re:
          var m = Nr();
          xv(function() {
            return ki(i, fn, m);
          });
          var _ = fn;
          E_(i, _);
          break;
      }
    }
    function DT(i, a) {
      var d = i.memoizedState;
      d !== null && d.dehydrated !== null && (d.retryLane = mt(d.retryLane, a));
    }
    function E_(i, a) {
      DT(i, a);
      var d = i.alternate;
      d && DT(d, a);
    }
    function ZP(i) {
      if (i.tag === re) {
        var a = Nr(), d = Ls;
        ki(i, d, a), E_(i, d);
      }
    }
    function JP(i) {
      if (i.tag === re) {
        var a = Nr(), d = Fl(i);
        ki(i, d, a), E_(i, d);
      }
    }
    function KP(i) {
      var a = Yt(i);
      return a === null ? null : a.stateNode;
    }
    var UT = function(i) {
      return null;
    };
    function NT(i) {
      return UT(i);
    }
    var OT = function(i) {
      return !1;
    };
    function IT(i) {
      return OT(i);
    }
    var FT = null, zT = null, BT = null, HT = null, VT = null, kT = null, GT = null, WT = null, XT = null;
    {
      var YT = function(i, a, d) {
        var m = a[d], _ = xn(i) ? i.slice() : y({}, i);
        return d + 1 === a.length ? (xn(_) ? _.splice(m, 1) : delete _[m], _) : (_[m] = YT(i[m], a, d + 1), _);
      }, jT = function(i, a) {
        return YT(i, a, 0);
      }, qT = function(i, a, d, m) {
        var _ = a[m], b = xn(i) ? i.slice() : y({}, i);
        if (m + 1 === a.length) {
          var P = d[m];
          b[P] = b[_], xn(b) ? b.splice(_, 1) : delete b[_];
        } else
          b[_] = qT(
            // $FlowFixMe number or string is fine here
            i[_],
            a,
            d,
            m + 1
          );
        return b;
      }, ZT = function(i, a, d) {
        if (a.length !== d.length) {
          h("copyWithRename() expects paths of the same length");
          return;
        } else
          for (var m = 0; m < d.length - 1; m++)
            if (a[m] !== d[m]) {
              h("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
        return qT(i, a, d, 0);
      }, JT = function(i, a, d, m) {
        if (d >= a.length)
          return m;
        var _ = a[d], b = xn(i) ? i.slice() : y({}, i);
        return b[_] = JT(i[_], a, d + 1, m), b;
      }, KT = function(i, a, d) {
        return JT(i, a, 0, d);
      }, T_ = function(i, a) {
        for (var d = i.memoizedState; d !== null && a > 0; )
          d = d.next, a--;
        return d;
      };
      FT = function(i, a, d, m) {
        var _ = T_(i, a);
        if (_ !== null) {
          var b = KT(_.memoizedState, d, m);
          _.memoizedState = b, _.baseState = b, i.memoizedProps = y({}, i.memoizedProps), ki(i, fn, kn);
        }
      }, zT = function(i, a, d) {
        var m = T_(i, a);
        if (m !== null) {
          var _ = jT(m.memoizedState, d);
          m.memoizedState = _, m.baseState = _, i.memoizedProps = y({}, i.memoizedProps), ki(i, fn, kn);
        }
      }, BT = function(i, a, d, m) {
        var _ = T_(i, a);
        if (_ !== null) {
          var b = ZT(_.memoizedState, d, m);
          _.memoizedState = b, _.baseState = b, i.memoizedProps = y({}, i.memoizedProps), ki(i, fn, kn);
        }
      }, HT = function(i, a, d) {
        i.pendingProps = KT(i.memoizedProps, a, d), i.alternate && (i.alternate.pendingProps = i.pendingProps), ki(i, fn, kn);
      }, VT = function(i, a) {
        i.pendingProps = jT(i.memoizedProps, a), i.alternate && (i.alternate.pendingProps = i.pendingProps), ki(i, fn, kn);
      }, kT = function(i, a, d) {
        i.pendingProps = ZT(i.memoizedProps, a, d), i.alternate && (i.alternate.pendingProps = i.pendingProps), ki(i, fn, kn);
      }, GT = function(i) {
        ki(i, fn, kn);
      }, WT = function(i) {
        UT = i;
      }, XT = function(i) {
        OT = i;
      };
    }
    function QP(i) {
      var a = Xt(i);
      return a === null ? null : a.stateNode;
    }
    function $P(i) {
      return null;
    }
    function e2() {
      return Dr;
    }
    function t2(i) {
      var a = i.findFiberByHostInstance, d = o.ReactCurrentDispatcher;
      return nh({
        bundleType: i.bundleType,
        version: i.version,
        rendererPackageName: i.rendererPackageName,
        rendererConfig: i.rendererConfig,
        overrideHookState: FT,
        overrideHookStateDeletePath: zT,
        overrideHookStateRenamePath: BT,
        overrideProps: HT,
        overridePropsDeletePath: VT,
        overridePropsRenamePath: kT,
        setErrorHandler: WT,
        setSuspenseHandler: XT,
        scheduleUpdate: GT,
        currentDispatcherRef: d,
        findHostInstanceByFiber: QP,
        findFiberByHostInstance: a || $P,
        // React Refresh
        findHostInstancesForRefresh: AP,
        scheduleRefresh: bP,
        scheduleRoot: wP,
        setRefreshHandler: TP,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: e2,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: VP
      });
    }
    return t.attemptContinuousHydration = ZP, t.attemptHydrationAtCurrentPriority = JP, t.attemptSynchronousHydration = qP, t.batchedUpdates = KL, t.createComponentSelector = RL, t.createContainer = XP, t.createHasPseudoClassSelector = CL, t.createHydrationContainer = YP, t.createPortal = kP, t.createRoleSelector = LL, t.createTestNameSelector = DL, t.createTextSelector = PL, t.deferredUpdates = JL, t.discreteUpdates = QL, t.findAllNodes = cv, t.findBoundingRects = OL, t.findHostInstance = GP, t.findHostInstanceWithNoPortals = KP, t.findHostInstanceWithWarning = WP, t.flushControlled = eP, t.flushPassiveEffects = Ws, t.flushSync = xv, t.focusWithin = IL, t.getCurrentUpdatePriority = Cr, t.getFindAllNodesFailureDescription = NL, t.getPublicRootInstance = jP, t.injectIntoDevTools = t2, t.isAlreadyRendering = $L, t.observeVisibleRects = zL, t.registerMutableSourceForHydration = qR, t.runWithPriority = Kd, t.shouldError = NT, t.shouldSuspend = IT, t.updateContainer = PT, t;
  })), lx.exports;
}
process.env.NODE_ENV === "production" ? oS.exports = KF() : oS.exports = QF();
var $F = oS.exports;
const ez = /* @__PURE__ */ o2($F), tM = {}, sR = (s) => void Object.assign(tM, s);
function tz(s, e) {
  function t(v, {
    args: y = [],
    attach: x,
    ...M
  }, T) {
    let C = `${v[0].toUpperCase()}${v.slice(1)}`, w;
    if (v === "primitive") {
      if (M.object === void 0)
        throw new Error("R3F: Primitives without 'object' are invalid!");
      const E = M.object;
      w = ad(E, {
        type: v,
        root: T,
        attach: x,
        primitive: !0
      });
    } else {
      const E = tM[C];
      if (!E)
        throw new Error(`R3F: ${C} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
      if (!Array.isArray(y))
        throw new Error("R3F: The args prop must be an array!");
      w = ad(new E(...y), {
        type: v,
        root: T,
        attach: x,
        // Save args in case we need to reconstruct later for HMR
        memoizedProps: {
          args: y
        }
      });
    }
    return w.__r3f.attach === void 0 && (w.isBufferGeometry ? w.__r3f.attach = "geometry" : w.isMaterial && (w.__r3f.attach = "material")), C !== "inject" && fx(w, M), w;
  }
  function n(v, y) {
    let x = !1;
    if (y) {
      var M, T;
      (M = y.__r3f) != null && M.attach ? cx(v, y, y.__r3f.attach) : y.isObject3D && v.isObject3D && (v.add(y), x = !0), x || (T = v.__r3f) == null || T.objects.push(y), y.__r3f || ad(y, {}), y.__r3f.parent = v, cS(y), sd(y);
    }
  }
  function r(v, y, x) {
    let M = !1;
    if (y) {
      var T, C;
      if ((T = y.__r3f) != null && T.attach)
        cx(v, y, y.__r3f.attach);
      else if (y.isObject3D && v.isObject3D) {
        y.parent = v, y.dispatchEvent({
          type: "added"
        }), v.dispatchEvent({
          type: "childadded",
          child: y
        });
        const w = v.children.filter((L) => L !== y), E = w.indexOf(x);
        v.children = [...w.slice(0, E), y, ...w.slice(E)], M = !0;
      }
      M || (C = v.__r3f) == null || C.objects.push(y), y.__r3f || ad(y, {}), y.__r3f.parent = v, cS(y), sd(y);
    }
  }
  function o(v, y, x = !1) {
    v && [...v].forEach((M) => c(y, M, x));
  }
  function c(v, y, x) {
    if (y) {
      var M, T, C;
      if (y.__r3f && (y.__r3f.parent = null), (M = v.__r3f) != null && M.objects && (v.__r3f.objects = v.__r3f.objects.filter((U) => U !== y)), (T = y.__r3f) != null && T.attach)
        B1(v, y, y.__r3f.attach);
      else if (y.isObject3D && v.isObject3D) {
        var w;
        v.remove(y), (w = y.__r3f) != null && w.root && lz(wg(y), y);
      }
      const L = (C = y.__r3f) == null ? void 0 : C.primitive, R = !L && (x === void 0 ? y.dispose !== null : x);
      if (!L) {
        var E;
        o((E = y.__r3f) == null ? void 0 : E.objects, y, R), o(y.children, y, R);
      }
      if (delete y.__r3f, R && y.dispose && y.type !== "Scene") {
        const U = () => {
          try {
            y.dispose();
          } catch {
          }
        };
        typeof IS_REACT_ACT_ENVIRONMENT > "u" ? Ug.unstable_scheduleCallback(Ug.unstable_IdlePriority, U) : U();
      }
      sd(v);
    }
  }
  function f(v, y, x, M) {
    var T;
    const C = (T = v.__r3f) == null ? void 0 : T.parent;
    if (!C)
      return;
    const w = t(y, x, v.__r3f.root);
    if (v.children) {
      for (const E of v.children)
        E.__r3f && n(w, E);
      v.children = v.children.filter((E) => !E.__r3f);
    }
    v.__r3f.objects.forEach((E) => n(w, E)), v.__r3f.objects = [], v.__r3f.autoRemovedBeforeAppend || c(C, v), w.parent && (w.__r3f.autoRemovedBeforeAppend = !0), n(C, w), w.raycast && w.__r3f.eventCount && wg(w).getState().internal.interaction.push(w), [M, M.alternate].forEach((E) => {
      E !== null && (E.stateNode = w, E.ref && (typeof E.ref == "function" ? E.ref(w) : E.ref.current = w));
    });
  }
  const h = () => {
  };
  return {
    reconciler: ez({
      createInstance: t,
      removeChild: c,
      appendChild: n,
      appendInitialChild: n,
      insertBefore: r,
      supportsMutation: !0,
      isPrimaryRenderer: !1,
      supportsPersistence: !1,
      supportsHydration: !1,
      noTimeout: -1,
      appendChildToContainer: (v, y) => {
        if (!y)
          return;
        const x = v.getState().scene;
        x.__r3f && (x.__r3f.root = v, n(x, y));
      },
      removeChildFromContainer: (v, y) => {
        y && c(v.getState().scene, y);
      },
      insertInContainerBefore: (v, y, x) => {
        if (!y || !x)
          return;
        const M = v.getState().scene;
        M.__r3f && r(M, y, x);
      },
      getRootHostContext: () => null,
      getChildHostContext: (v) => v,
      finalizeInitialChildren(v) {
        var y;
        return !!((y = v == null ? void 0 : v.__r3f) != null ? y : {}).handlers;
      },
      prepareUpdate(v, y, x, M) {
        var T;
        if (((T = v == null ? void 0 : v.__r3f) != null ? T : {}).primitive && M.object && M.object !== v)
          return [!0];
        {
          const {
            args: w = [],
            children: E,
            ...L
          } = M, {
            args: R = [],
            children: U,
            ...F
          } = x;
          if (!Array.isArray(w))
            throw new Error("R3F: the args prop must be an array!");
          if (w.some((B, W) => B !== R[W]))
            return [!0];
          const z = hR(v, L, F, !0);
          return z.changes.length ? [!1, z] : null;
        }
      },
      commitUpdate(v, [y, x], M, T, C, w) {
        y ? f(v, M, C, w) : fx(v, x);
      },
      commitMount(v, y, x, M) {
        var T;
        const C = (T = v.__r3f) != null ? T : {};
        v.raycast && C.handlers && C.eventCount && wg(v).getState().internal.interaction.push(v);
      },
      getPublicInstance: (v) => v,
      prepareForCommit: () => null,
      preparePortalMount: (v) => ad(v.getState().scene),
      resetAfterCommit: () => {
      },
      shouldSetTextContent: () => !1,
      clearContainer: () => !1,
      hideInstance(v) {
        var y;
        const {
          attach: x,
          parent: M
        } = (y = v.__r3f) != null ? y : {};
        x && M && B1(M, v, x), v.isObject3D && (v.visible = !1), sd(v);
      },
      unhideInstance(v, y) {
        var x;
        const {
          attach: M,
          parent: T
        } = (x = v.__r3f) != null ? x : {};
        M && T && cx(T, v, M), (v.isObject3D && y.visible == null || y.visible) && (v.visible = !0), sd(v);
      },
      createTextInstance: h,
      hideTextInstance: h,
      unhideTextInstance: h,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874
      // @ts-expect-error
      getCurrentEventPriority: () => e ? e() : fd.DefaultEventPriority,
      beforeActiveInstanceBlur: () => {
      },
      afterActiveInstanceBlur: () => {
      },
      detachDeletedInstance: () => {
      },
      now: typeof performance < "u" && Qn.fun(performance.now) ? performance.now : Qn.fun(Date.now) ? Date.now : () => 0,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503
      scheduleTimeout: Qn.fun(setTimeout) ? setTimeout : void 0,
      cancelTimeout: Qn.fun(clearTimeout) ? clearTimeout : void 0
    }),
    applyProps: fx
  };
}
var O1, I1;
const ux = (s) => "colorSpace" in s || "outputColorSpace" in s, oR = () => {
  var s;
  return (s = tM.ColorManagement) != null ? s : null;
}, lR = (s) => s && s.isOrthographicCamera, nz = (s) => s && s.hasOwnProperty("current"), kp = typeof window < "u" && ((O1 = window.document) != null && O1.createElement || ((I1 = window.navigator) == null ? void 0 : I1.product) === "ReactNative") ? qt.useLayoutEffect : qt.useEffect;
function uR(s) {
  const e = qt.useRef(s);
  return kp(() => void (e.current = s), [s]), e;
}
function iz({
  set: s
}) {
  return kp(() => (s(new Promise(() => null)), () => s(!1)), [s]), null;
}
class cR extends qt.Component {
  constructor(...e) {
    super(...e), this.state = {
      error: !1
    };
  }
  componentDidCatch(e) {
    this.props.set(e);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}
cR.getDerivedStateFromError = () => ({
  error: !0
});
const fR = "__default", F1 = /* @__PURE__ */ new Map(), rz = (s) => s && !!s.memoized && !!s.changes;
function dR(s) {
  var e;
  const t = typeof window < "u" ? (e = window.devicePixelRatio) != null ? e : 2 : 1;
  return Array.isArray(s) ? Math.min(Math.max(s[0], t), s[1]) : s;
}
const $h = (s) => {
  var e;
  return (e = s.__r3f) == null ? void 0 : e.root.getState();
};
function wg(s) {
  let e = s.__r3f.root;
  for (; e.getState().previousRoot; )
    e = e.getState().previousRoot;
  return e;
}
const Qn = {
  obj: (s) => s === Object(s) && !Qn.arr(s) && typeof s != "function",
  fun: (s) => typeof s == "function",
  str: (s) => typeof s == "string",
  num: (s) => typeof s == "number",
  boo: (s) => typeof s == "boolean",
  und: (s) => s === void 0,
  arr: (s) => Array.isArray(s),
  equ(s, e, {
    arrays: t = "shallow",
    objects: n = "reference",
    strict: r = !0
  } = {}) {
    if (typeof s != typeof e || !!s != !!e)
      return !1;
    if (Qn.str(s) || Qn.num(s) || Qn.boo(s))
      return s === e;
    const o = Qn.obj(s);
    if (o && n === "reference")
      return s === e;
    const c = Qn.arr(s);
    if (c && t === "reference")
      return s === e;
    if ((c || o) && s === e)
      return !0;
    let f;
    for (f in s)
      if (!(f in e))
        return !1;
    if (o && t === "shallow" && n === "shallow") {
      for (f in r ? e : s)
        if (!Qn.equ(s[f], e[f], {
          strict: r,
          objects: "reference"
        }))
          return !1;
    } else
      for (f in r ? e : s)
        if (s[f] !== e[f])
          return !1;
    if (Qn.und(f)) {
      if (c && s.length === 0 && e.length === 0 || o && Object.keys(s).length === 0 && Object.keys(e).length === 0)
        return !0;
      if (s !== e)
        return !1;
    }
    return !0;
  }
};
function az(s) {
  s.dispose && s.type !== "Scene" && s.dispose();
  for (const e in s)
    e.dispose == null || e.dispose(), delete s[e];
}
function ad(s, e) {
  const t = s;
  return t.__r3f = {
    type: "",
    root: null,
    previousAttach: null,
    memoizedProps: {},
    eventCount: 0,
    handlers: {},
    objects: [],
    parent: null,
    ...e
  }, s;
}
function uS(s, e) {
  let t = s;
  if (e.includes("-")) {
    const n = e.split("-"), r = n.pop();
    return t = n.reduce((o, c) => o[c], s), {
      target: t,
      key: r
    };
  } else
    return {
      target: t,
      key: e
    };
}
const z1 = /-\d+$/;
function cx(s, e, t) {
  if (Qn.str(t)) {
    if (z1.test(t)) {
      const o = t.replace(z1, ""), {
        target: c,
        key: f
      } = uS(s, o);
      Array.isArray(c[f]) || (c[f] = []);
    }
    const {
      target: n,
      key: r
    } = uS(s, t);
    e.__r3f.previousAttach = n[r], n[r] = e;
  } else
    e.__r3f.previousAttach = t(s, e);
}
function B1(s, e, t) {
  var n, r;
  if (Qn.str(t)) {
    const {
      target: o,
      key: c
    } = uS(s, t), f = e.__r3f.previousAttach;
    f === void 0 ? delete o[c] : o[c] = f;
  } else
    (n = e.__r3f) == null || n.previousAttach == null || n.previousAttach(s, e);
  (r = e.__r3f) == null || delete r.previousAttach;
}
function hR(s, {
  children: e,
  key: t,
  ref: n,
  ...r
}, {
  children: o,
  key: c,
  ref: f,
  ...h
} = {}, p = !1) {
  const v = s.__r3f, y = Object.entries(r), x = [];
  if (p) {
    const T = Object.keys(h);
    for (let C = 0; C < T.length; C++)
      r.hasOwnProperty(T[C]) || y.unshift([T[C], fR + "remove"]);
  }
  y.forEach(([T, C]) => {
    var w;
    if ((w = s.__r3f) != null && w.primitive && T === "object" || Qn.equ(C, h[T]))
      return;
    if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(T))
      return x.push([T, C, !0, []]);
    let E = [];
    T.includes("-") && (E = T.split("-")), x.push([T, C, !1, E]);
    for (const L in r) {
      const R = r[L];
      L.startsWith(`${T}-`) && x.push([L, R, !1, L.split("-")]);
    }
  });
  const M = {
    ...r
  };
  return v != null && v.memoizedProps && v != null && v.memoizedProps.args && (M.args = v.memoizedProps.args), v != null && v.memoizedProps && v != null && v.memoizedProps.attach && (M.attach = v.memoizedProps.attach), {
    memoized: M,
    changes: x
  };
}
const sz = typeof process < "u" && process.env.NODE_ENV !== "production";
function fx(s, e) {
  var t;
  const n = s.__r3f, r = n == null ? void 0 : n.root, o = r == null || r.getState == null ? void 0 : r.getState(), {
    memoized: c,
    changes: f
  } = rz(e) ? e : hR(s, e), h = n == null ? void 0 : n.eventCount;
  s.__r3f && (s.__r3f.memoizedProps = c);
  for (let x = 0; x < f.length; x++) {
    let [M, T, C, w] = f[x];
    if (ux(s)) {
      const U = "srgb", F = "srgb-linear";
      M === "encoding" ? (M = "colorSpace", T = T === 3001 ? U : F) : M === "outputEncoding" && (M = "outputColorSpace", T = T === 3001 ? U : F);
    }
    let E = s, L = E[M];
    if (w.length && (L = w.reduce((R, U) => R[U], s), !(L && L.set))) {
      const [R, ...U] = w.reverse();
      E = U.reverse().reduce((F, z) => F[z], s), M = R;
    }
    if (T === fR + "remove")
      if (E.constructor) {
        let R = F1.get(E.constructor);
        R || (R = new E.constructor(), F1.set(E.constructor, R)), T = R[M];
      } else
        T = 0;
    if (C && n)
      T ? n.handlers[M] = T : delete n.handlers[M], n.eventCount = Object.keys(n.handlers).length;
    else if (L && L.set && (L.copy || L instanceof hc)) {
      if (Array.isArray(T))
        L.fromArray ? L.fromArray(T) : L.set(...T);
      else if (L.copy && T && T.constructor && // Some environments may break strict identity checks by duplicating versions of three.js.
      // Loosen to unminified names, ignoring descendents.
      // https://github.com/pmndrs/react-three-fiber/issues/2856
      // TODO: fix upstream and remove in v9
      (sz ? L.constructor.name === T.constructor.name : L.constructor === T.constructor))
        L.copy(T);
      else if (T !== void 0) {
        var p;
        const R = (p = L) == null ? void 0 : p.isColor;
        !R && L.setScalar ? L.setScalar(T) : L instanceof hc && T instanceof hc ? L.mask = T.mask : L.set(T), !oR() && o && !o.linear && R && L.convertSRGBToLinear();
      }
    } else {
      var v;
      if (E[M] = T, (v = E[M]) != null && v.isTexture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
      E[M].format === Er && E[M].type === Zs && o) {
        const R = E[M];
        ux(R) && ux(o.gl) ? R.colorSpace = o.gl.outputColorSpace : R.encoding = o.gl.outputEncoding;
      }
    }
    sd(s);
  }
  if (n && n.parent && s.raycast && h !== n.eventCount) {
    const x = wg(s).getState().internal, M = x.interaction.indexOf(s);
    M > -1 && x.interaction.splice(M, 1), n.eventCount && x.interaction.push(s);
  }
  return !(f.length === 1 && f[0][0] === "onUpdate") && f.length && (t = s.__r3f) != null && t.parent && cS(s), s;
}
function sd(s) {
  var e, t;
  const n = (e = s.__r3f) == null || (t = e.root) == null || t.getState == null ? void 0 : t.getState();
  n && n.internal.frames === 0 && n.invalidate();
}
function cS(s) {
  s.onUpdate == null || s.onUpdate(s);
}
function pR(s, e) {
  s.manual || (lR(s) ? (s.left = e.width / -2, s.right = e.width / 2, s.top = e.height / 2, s.bottom = e.height / -2) : s.aspect = e.width / e.height, s.updateProjectionMatrix(), s.updateMatrixWorld());
}
function mg(s) {
  return (s.eventObject || s.object).uuid + "/" + s.index + s.instanceId;
}
function oz() {
  var s;
  const e = typeof self < "u" && self || typeof window < "u" && window;
  if (!e)
    return fd.DefaultEventPriority;
  switch ((s = e.event) == null ? void 0 : s.type) {
    case "click":
    case "contextmenu":
    case "dblclick":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
      return fd.DiscreteEventPriority;
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "pointerenter":
    case "pointerleave":
    case "wheel":
      return fd.ContinuousEventPriority;
    default:
      return fd.DefaultEventPriority;
  }
}
function mR(s, e, t, n) {
  const r = t.get(e);
  r && (t.delete(e), t.size === 0 && (s.delete(n), r.target.releasePointerCapture(n)));
}
function lz(s, e) {
  const {
    internal: t
  } = s.getState();
  t.interaction = t.interaction.filter((n) => n !== e), t.initialHits = t.initialHits.filter((n) => n !== e), t.hovered.forEach((n, r) => {
    (n.eventObject === e || n.object === e) && t.hovered.delete(r);
  }), t.capturedMap.forEach((n, r) => {
    mR(t.capturedMap, e, n, r);
  });
}
function uz(s) {
  function e(h) {
    const {
      internal: p
    } = s.getState(), v = h.offsetX - p.initialClick[0], y = h.offsetY - p.initialClick[1];
    return Math.round(Math.sqrt(v * v + y * y));
  }
  function t(h) {
    return h.filter((p) => ["Move", "Over", "Enter", "Out", "Leave"].some((v) => {
      var y;
      return (y = p.__r3f) == null ? void 0 : y.handlers["onPointer" + v];
    }));
  }
  function n(h, p) {
    const v = s.getState(), y = /* @__PURE__ */ new Set(), x = [], M = p ? p(v.internal.interaction) : v.internal.interaction;
    for (let E = 0; E < M.length; E++) {
      const L = $h(M[E]);
      L && (L.raycaster.camera = void 0);
    }
    v.previousRoot || v.events.compute == null || v.events.compute(h, v);
    function T(E) {
      const L = $h(E);
      if (!L || !L.events.enabled || L.raycaster.camera === null)
        return [];
      if (L.raycaster.camera === void 0) {
        var R;
        L.events.compute == null || L.events.compute(h, L, (R = L.previousRoot) == null ? void 0 : R.getState()), L.raycaster.camera === void 0 && (L.raycaster.camera = null);
      }
      return L.raycaster.camera ? L.raycaster.intersectObject(E, !0) : [];
    }
    let C = M.flatMap(T).sort((E, L) => {
      const R = $h(E.object), U = $h(L.object);
      return !R || !U ? E.distance - L.distance : U.events.priority - R.events.priority || E.distance - L.distance;
    }).filter((E) => {
      const L = mg(E);
      return y.has(L) ? !1 : (y.add(L), !0);
    });
    v.events.filter && (C = v.events.filter(C, v));
    for (const E of C) {
      let L = E.object;
      for (; L; ) {
        var w;
        (w = L.__r3f) != null && w.eventCount && x.push({
          ...E,
          eventObject: L
        }), L = L.parent;
      }
    }
    if ("pointerId" in h && v.internal.capturedMap.has(h.pointerId))
      for (let E of v.internal.capturedMap.get(h.pointerId).values())
        y.has(mg(E.intersection)) || x.push(E.intersection);
    return x;
  }
  function r(h, p, v, y) {
    const x = s.getState();
    if (h.length) {
      const M = {
        stopped: !1
      };
      for (const T of h) {
        const C = $h(T.object) || x, {
          raycaster: w,
          pointer: E,
          camera: L,
          internal: R
        } = C, U = new Y(E.x, E.y, 0).unproject(L), F = (I) => {
          var Z, ie;
          return (Z = (ie = R.capturedMap.get(I)) == null ? void 0 : ie.has(T.eventObject)) != null ? Z : !1;
        }, z = (I) => {
          const Z = {
            intersection: T,
            target: p.target
          };
          R.capturedMap.has(I) ? R.capturedMap.get(I).set(T.eventObject, Z) : R.capturedMap.set(I, /* @__PURE__ */ new Map([[T.eventObject, Z]])), p.target.setPointerCapture(I);
        }, B = (I) => {
          const Z = R.capturedMap.get(I);
          Z && mR(R.capturedMap, T.eventObject, Z, I);
        };
        let W = {};
        for (let I in p) {
          let Z = p[I];
          typeof Z != "function" && (W[I] = Z);
        }
        let O = {
          ...T,
          ...W,
          pointer: E,
          intersections: h,
          stopped: M.stopped,
          delta: v,
          unprojectedPoint: U,
          ray: w.ray,
          camera: L,
          // Hijack stopPropagation, which just sets a flag
          stopPropagation() {
            const I = "pointerId" in p && R.capturedMap.get(p.pointerId);
            if (
              // ...if this pointer hasn't been captured
              (!I || // ... or if the hit object is capturing the pointer
              I.has(T.eventObject)) && (O.stopped = M.stopped = !0, R.hovered.size && Array.from(R.hovered.values()).find((Z) => Z.eventObject === T.eventObject))
            ) {
              const Z = h.slice(0, h.indexOf(T));
              o([...Z, T]);
            }
          },
          // there should be a distinction between target and currentTarget
          target: {
            hasPointerCapture: F,
            setPointerCapture: z,
            releasePointerCapture: B
          },
          currentTarget: {
            hasPointerCapture: F,
            setPointerCapture: z,
            releasePointerCapture: B
          },
          nativeEvent: p
        };
        if (y(O), M.stopped === !0)
          break;
      }
    }
    return h;
  }
  function o(h) {
    const {
      internal: p
    } = s.getState();
    for (const v of p.hovered.values())
      if (!h.length || !h.find((y) => y.object === v.object && y.index === v.index && y.instanceId === v.instanceId)) {
        const x = v.eventObject.__r3f, M = x == null ? void 0 : x.handlers;
        if (p.hovered.delete(mg(v)), x != null && x.eventCount) {
          const T = {
            ...v,
            intersections: h
          };
          M.onPointerOut == null || M.onPointerOut(T), M.onPointerLeave == null || M.onPointerLeave(T);
        }
      }
  }
  function c(h, p) {
    for (let v = 0; v < p.length; v++) {
      const y = p[v].__r3f;
      y == null || y.handlers.onPointerMissed == null || y.handlers.onPointerMissed(h);
    }
  }
  function f(h) {
    switch (h) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => o([]);
      case "onLostPointerCapture":
        return (p) => {
          const {
            internal: v
          } = s.getState();
          "pointerId" in p && v.capturedMap.has(p.pointerId) && requestAnimationFrame(() => {
            v.capturedMap.has(p.pointerId) && (v.capturedMap.delete(p.pointerId), o([]));
          });
        };
    }
    return function(v) {
      const {
        onPointerMissed: y,
        internal: x
      } = s.getState();
      x.lastEvent.current = v;
      const M = h === "onPointerMove", T = h === "onClick" || h === "onContextMenu" || h === "onDoubleClick", w = n(v, M ? t : void 0), E = T ? e(v) : 0;
      h === "onPointerDown" && (x.initialClick = [v.offsetX, v.offsetY], x.initialHits = w.map((R) => R.eventObject)), T && !w.length && E <= 2 && (c(v, x.interaction), y && y(v)), M && o(w);
      function L(R) {
        const U = R.eventObject, F = U.__r3f, z = F == null ? void 0 : F.handlers;
        if (F != null && F.eventCount)
          if (M) {
            if (z.onPointerOver || z.onPointerEnter || z.onPointerOut || z.onPointerLeave) {
              const B = mg(R), W = x.hovered.get(B);
              W ? W.stopped && R.stopPropagation() : (x.hovered.set(B, R), z.onPointerOver == null || z.onPointerOver(R), z.onPointerEnter == null || z.onPointerEnter(R));
            }
            z.onPointerMove == null || z.onPointerMove(R);
          } else {
            const B = z[h];
            B ? (!T || x.initialHits.includes(U)) && (c(v, x.interaction.filter((W) => !x.initialHits.includes(W))), B(R)) : T && x.initialHits.includes(U) && c(v, x.interaction.filter((W) => !x.initialHits.includes(W)));
          }
      }
      r(w, v, E, L);
    };
  }
  return {
    handlePointer: f
  };
}
const cz = ["set", "get", "setSize", "setFrameloop", "setDpr", "events", "invalidate", "advance", "size", "viewport"], vR = (s) => !!(s != null && s.render), nM = /* @__PURE__ */ qt.createContext(null), fz = (s, e) => {
  const t = aR((f, h) => {
    const p = new Y(), v = new Y(), y = new Y();
    function x(E = h().camera, L = v, R = h().size) {
      const {
        width: U,
        height: F,
        top: z,
        left: B
      } = R, W = U / F;
      L.isVector3 ? y.copy(L) : y.set(...L);
      const O = E.getWorldPosition(p).distanceTo(y);
      if (lR(E))
        return {
          width: U / E.zoom,
          height: F / E.zoom,
          top: z,
          left: B,
          factor: 1,
          distance: O,
          aspect: W
        };
      {
        const I = E.fov * Math.PI / 180, Z = 2 * Math.tan(I / 2) * O, ie = Z * (U / F);
        return {
          width: ie,
          height: Z,
          top: z,
          left: B,
          factor: U / ie,
          distance: O,
          aspect: W
        };
      }
    }
    let M;
    const T = (E) => f((L) => ({
      performance: {
        ...L.performance,
        current: E
      }
    })), C = new Ie();
    return {
      set: f,
      get: h,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      xr: null,
      scene: null,
      invalidate: (E = 1) => s(h(), E),
      advance: (E, L) => e(E, L, h()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new JS(),
      pointer: C,
      mouse: C,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const E = h();
          M && clearTimeout(M), E.performance.current !== E.performance.min && T(E.performance.min), M = setTimeout(() => T(h().performance.max), E.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        updateStyle: !1
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: x
      },
      setEvents: (E) => f((L) => ({
        ...L,
        events: {
          ...L.events,
          ...E
        }
      })),
      setSize: (E, L, R, U, F) => {
        const z = h().camera, B = {
          width: E,
          height: L,
          top: U || 0,
          left: F || 0,
          updateStyle: R
        };
        f((W) => ({
          size: B,
          viewport: {
            ...W.viewport,
            ...x(z, v, B)
          }
        }));
      },
      setDpr: (E) => f((L) => {
        const R = dR(E);
        return {
          viewport: {
            ...L.viewport,
            dpr: R,
            initialDpr: L.viewport.initialDpr || R
          }
        };
      }),
      setFrameloop: (E = "always") => {
        const L = h().clock;
        L.stop(), L.elapsedTime = 0, E !== "never" && (L.start(), L.elapsedTime = 0), f(() => ({
          frameloop: E
        }));
      },
      previousRoot: void 0,
      internal: {
        active: !1,
        priority: 0,
        frames: 0,
        lastEvent: /* @__PURE__ */ qt.createRef(),
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        subscribe: (E, L, R) => {
          const U = h().internal;
          return U.priority = U.priority + (L > 0 ? 1 : 0), U.subscribers.push({
            ref: E,
            priority: L,
            store: R
          }), U.subscribers = U.subscribers.sort((F, z) => F.priority - z.priority), () => {
            const F = h().internal;
            F != null && F.subscribers && (F.priority = F.priority - (L > 0 ? 1 : 0), F.subscribers = F.subscribers.filter((z) => z.ref !== E));
          };
        }
      }
    };
  }), n = t.getState();
  let r = n.size, o = n.viewport.dpr, c = n.camera;
  return t.subscribe(() => {
    const {
      camera: f,
      size: h,
      viewport: p,
      gl: v,
      set: y
    } = t.getState();
    if (h.width !== r.width || h.height !== r.height || p.dpr !== o) {
      var x;
      r = h, o = p.dpr, pR(f, h), v.setPixelRatio(p.dpr);
      const M = (x = h.updateStyle) != null ? x : typeof HTMLCanvasElement < "u" && v.domElement instanceof HTMLCanvasElement;
      v.setSize(h.width, h.height, M);
    }
    f !== c && (c = f, y((M) => ({
      viewport: {
        ...M.viewport,
        ...M.viewport.getCurrentViewport(f)
      }
    })));
  }), t.subscribe((f) => s(f)), t;
};
let vg, dz = /* @__PURE__ */ new Set(), hz = /* @__PURE__ */ new Set(), pz = /* @__PURE__ */ new Set();
function dx(s, e) {
  if (s.size)
    for (const {
      callback: t
    } of s.values())
      t(e);
}
function ep(s, e) {
  switch (s) {
    case "before":
      return dx(dz, e);
    case "after":
      return dx(hz, e);
    case "tail":
      return dx(pz, e);
  }
}
let hx, px;
function mx(s, e, t) {
  let n = e.clock.getDelta();
  for (e.frameloop === "never" && typeof s == "number" && (n = s - e.clock.elapsedTime, e.clock.oldTime = e.clock.elapsedTime, e.clock.elapsedTime = s), hx = e.internal.subscribers, vg = 0; vg < hx.length; vg++)
    px = hx[vg], px.ref.current(px.store.getState(), n, t);
  return !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera), e.internal.frames = Math.max(0, e.internal.frames - 1), e.frameloop === "always" ? 1 : e.internal.frames;
}
function mz(s) {
  let e = !1, t = !1, n, r, o;
  function c(p) {
    r = requestAnimationFrame(c), e = !0, n = 0, ep("before", p), t = !0;
    for (const y of s.values()) {
      var v;
      o = y.store.getState(), o.internal.active && (o.frameloop === "always" || o.internal.frames > 0) && !((v = o.gl.xr) != null && v.isPresenting) && (n += mx(p, o));
    }
    if (t = !1, ep("after", p), n === 0)
      return ep("tail", p), e = !1, cancelAnimationFrame(r);
  }
  function f(p, v = 1) {
    var y;
    if (!p)
      return s.forEach((x) => f(x.store.getState(), v));
    (y = p.gl.xr) != null && y.isPresenting || !p.internal.active || p.frameloop === "never" || (v > 1 ? p.internal.frames = Math.min(60, p.internal.frames + v) : t ? p.internal.frames = 2 : p.internal.frames = 1, e || (e = !0, requestAnimationFrame(c)));
  }
  function h(p, v = !0, y, x) {
    if (v && ep("before", p), y)
      mx(p, y, x);
    else
      for (const M of s.values())
        mx(p, M.store.getState());
    v && ep("after", p);
  }
  return {
    loop: c,
    invalidate: f,
    advance: h
  };
}
function iM() {
  const s = qt.useContext(nM);
  if (!s)
    throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return s;
}
function gs(s = (t) => t, e) {
  return iM()(s, e);
}
function rM(s, e = 0) {
  const t = iM(), n = t.getState().internal.subscribe, r = uR(s);
  return kp(() => n(r, e, t), [e, n, t]), null;
}
const vd = /* @__PURE__ */ new Map(), {
  invalidate: H1,
  advance: V1
} = mz(vd), {
  reconciler: Pp,
  applyProps: id
} = tz(vd, oz), rd = {
  objects: "shallow",
  strict: !1
}, vz = (s, e) => {
  const t = typeof s == "function" ? s(e) : s;
  return vR(t) ? t : new US({
    powerPreference: "high-performance",
    canvas: e,
    antialias: !0,
    alpha: !0,
    ...s
  });
};
function gz(s, e) {
  const t = typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement;
  if (e) {
    const {
      width: n,
      height: r,
      top: o,
      left: c,
      updateStyle: f = t
    } = e;
    return {
      width: n,
      height: r,
      top: o,
      left: c,
      updateStyle: f
    };
  } else if (typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement && s.parentElement) {
    const {
      width: n,
      height: r,
      top: o,
      left: c
    } = s.parentElement.getBoundingClientRect();
    return {
      width: n,
      height: r,
      top: o,
      left: c,
      updateStyle: t
    };
  } else if (typeof OffscreenCanvas < "u" && s instanceof OffscreenCanvas)
    return {
      width: s.width,
      height: s.height,
      top: 0,
      left: 0,
      updateStyle: t
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  };
}
function yz(s) {
  const e = vd.get(s), t = e == null ? void 0 : e.fiber, n = e == null ? void 0 : e.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const r = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), o = n || fz(H1, V1), c = t || Pp.createContainer(o, fd.ConcurrentRoot, null, !1, null, "", r, null);
  e || vd.set(s, {
    fiber: c,
    store: o
  });
  let f, h = !1, p;
  return {
    configure(v = {}) {
      let {
        gl: y,
        size: x,
        scene: M,
        events: T,
        onCreated: C,
        shadows: w = !1,
        linear: E = !1,
        flat: L = !1,
        legacy: R = !1,
        orthographic: U = !1,
        frameloop: F = "always",
        dpr: z = [1, 2],
        performance: B,
        raycaster: W,
        camera: O,
        onPointerMissed: I
      } = v, Z = o.getState(), ie = Z.gl;
      Z.gl || Z.set({
        gl: ie = vz(y, s)
      });
      let fe = Z.raycaster;
      fe || Z.set({
        raycaster: fe = new eM()
      });
      const {
        params: K,
        ...he
      } = W || {};
      if (Qn.equ(he, fe, rd) || id(fe, {
        ...he
      }), Qn.equ(K, fe.params, rd) || id(fe, {
        params: {
          ...fe.params,
          ...K
        }
      }), !Z.camera || Z.camera === p && !Qn.equ(p, O, rd)) {
        p = O;
        const re = O instanceof Op, J = re ? O : U ? new Vo(0, 0, 0, 0, 0.1, 1e3) : new Ri(75, 0, 0.1, 1e3);
        re || (J.position.z = 5, O && (id(J, O), ("aspect" in O || "left" in O || "right" in O || "bottom" in O || "top" in O) && (J.manual = !0, J.updateProjectionMatrix())), !Z.camera && !(O != null && O.rotation) && J.lookAt(0, 0, 0)), Z.set({
          camera: J
        }), fe.camera = J;
      }
      if (!Z.scene) {
        let re;
        M != null && M.isScene ? re = M : (re = new Yg(), M && id(re, M)), Z.set({
          scene: ad(re)
        });
      }
      if (!Z.xr) {
        var Te;
        const re = (Pe, qe) => {
          const $e = o.getState();
          $e.frameloop !== "never" && V1(Pe, !0, $e, qe);
        }, J = () => {
          const Pe = o.getState();
          Pe.gl.xr.enabled = Pe.gl.xr.isPresenting, Pe.gl.xr.setAnimationLoop(Pe.gl.xr.isPresenting ? re : null), Pe.gl.xr.isPresenting || H1(Pe);
        }, ue = {
          connect() {
            const Pe = o.getState().gl;
            Pe.xr.addEventListener("sessionstart", J), Pe.xr.addEventListener("sessionend", J);
          },
          disconnect() {
            const Pe = o.getState().gl;
            Pe.xr.removeEventListener("sessionstart", J), Pe.xr.removeEventListener("sessionend", J);
          }
        };
        typeof ((Te = ie.xr) == null ? void 0 : Te.addEventListener) == "function" && ue.connect(), Z.set({
          xr: ue
        });
      }
      if (ie.shadowMap) {
        const re = ie.shadowMap.enabled, J = ie.shadowMap.type;
        if (ie.shadowMap.enabled = !!w, Qn.boo(w))
          ie.shadowMap.type = rp;
        else if (Qn.str(w)) {
          var Me;
          const ue = {
            basic: $1,
            percentage: Ig,
            soft: rp,
            variance: vs
          };
          ie.shadowMap.type = (Me = ue[w]) != null ? Me : rp;
        } else
          Qn.obj(w) && Object.assign(ie.shadowMap, w);
        (re !== ie.shadowMap.enabled || J !== ie.shadowMap.type) && (ie.shadowMap.needsUpdate = !0);
      }
      const ne = oR();
      ne && ("enabled" in ne ? ne.enabled = !R : "legacyMode" in ne && (ne.legacyMode = R)), h || id(ie, {
        outputEncoding: E ? 3e3 : 3001,
        toneMapping: L ? qs : pS
      }), Z.legacy !== R && Z.set(() => ({
        legacy: R
      })), Z.linear !== E && Z.set(() => ({
        linear: E
      })), Z.flat !== L && Z.set(() => ({
        flat: L
      })), y && !Qn.fun(y) && !vR(y) && !Qn.equ(y, ie, rd) && id(ie, y), T && !Z.events.handlers && Z.set({
        events: T(o)
      });
      const le = gz(s, x);
      return Qn.equ(le, Z.size, rd) || Z.setSize(le.width, le.height, le.updateStyle, le.top, le.left), z && Z.viewport.dpr !== dR(z) && Z.setDpr(z), Z.frameloop !== F && Z.setFrameloop(F), Z.onPointerMissed || Z.set({
        onPointerMissed: I
      }), B && !Qn.equ(B, Z.performance, rd) && Z.set((re) => ({
        performance: {
          ...re.performance,
          ...B
        }
      })), f = C, h = !0, this;
    },
    render(v) {
      return h || this.configure(), Pp.updateContainer(/* @__PURE__ */ Mn.jsx(_z, {
        store: o,
        children: v,
        onCreated: f,
        rootElement: s
      }), c, null, () => {
      }), o;
    },
    unmount() {
      gR(s);
    }
  };
}
function _z({
  store: s,
  children: e,
  onCreated: t,
  rootElement: n
}) {
  return kp(() => {
    const r = s.getState();
    r.set((o) => ({
      internal: {
        ...o.internal,
        active: !0
      }
    })), t && t(r), s.getState().events.connected || r.events.connect == null || r.events.connect(n);
  }, []), /* @__PURE__ */ Mn.jsx(nM.Provider, {
    value: s,
    children: e
  });
}
function gR(s, e) {
  const t = vd.get(s), n = t == null ? void 0 : t.fiber;
  if (n) {
    const r = t == null ? void 0 : t.store.getState();
    r && (r.internal.active = !1), Pp.updateContainer(null, n, null, () => {
      r && setTimeout(() => {
        try {
          var o, c, f, h;
          r.events.disconnect == null || r.events.disconnect(), (o = r.gl) == null || (c = o.renderLists) == null || c.dispose == null || c.dispose(), (f = r.gl) == null || f.forceContextLoss == null || f.forceContextLoss(), (h = r.gl) != null && h.xr && r.xr.disconnect(), az(r), vd.delete(s), e && e(s);
        } catch {
        }
      }, 500);
    });
  }
}
function xz(s, e, t) {
  return /* @__PURE__ */ Mn.jsx(Sz, {
    children: s,
    container: e,
    state: t
  }, e.uuid);
}
function Sz({
  state: s = {},
  children: e,
  container: t
}) {
  const {
    events: n,
    size: r,
    ...o
  } = s, c = iM(), [f] = qt.useState(() => new eM()), [h] = qt.useState(() => new Ie()), p = qt.useCallback(
    (y, x) => {
      const M = {
        ...y
      };
      Object.keys(y).forEach((C) => {
        // Some props should be off-limits
        (cz.includes(C) || // Otherwise filter out the props that are different and let the inject layer take precedence
        // Unless the inject layer props is undefined, then we keep the root layer
        y[C] !== x[C] && x[C]) && delete M[C];
      });
      let T;
      if (x && r) {
        const C = x.camera;
        T = y.viewport.getCurrentViewport(C, new Y(), r), C !== y.camera && pR(C, r);
      }
      return {
        // The intersect consists of the previous root state
        ...M,
        // Portals have their own scene, which forms the root, a raycaster and a pointer
        scene: t,
        raycaster: f,
        pointer: h,
        mouse: h,
        // Their previous root is the layer before it
        previousRoot: c,
        // Events, size and viewport can be overridden by the inject layer
        events: {
          ...y.events,
          ...x == null ? void 0 : x.events,
          ...n
        },
        size: {
          ...y.size,
          ...r
        },
        viewport: {
          ...y.viewport,
          ...T
        },
        ...o
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [s]
  ), [v] = qt.useState(() => {
    const y = c.getState();
    return aR((M, T) => ({
      ...y,
      scene: t,
      raycaster: f,
      pointer: h,
      mouse: h,
      previousRoot: c,
      events: {
        ...y.events,
        ...n
      },
      size: {
        ...y.size,
        ...r
      },
      ...o,
      // Set and get refer to this root-state
      set: M,
      get: T,
      // Layers are allowed to override events
      setEvents: (C) => M((w) => ({
        ...w,
        events: {
          ...w.events,
          ...C
        }
      }))
    }));
  });
  return qt.useEffect(() => {
    const y = c.subscribe((x) => v.setState((M) => p(x, M)));
    return () => {
      y();
    };
  }, [p]), qt.useEffect(() => {
    v.setState((y) => p(c.getState(), y));
  }, [p]), qt.useEffect(() => () => {
    v.destroy();
  }, []), /* @__PURE__ */ Mn.jsx(Mn.Fragment, {
    children: Pp.createPortal(/* @__PURE__ */ Mn.jsx(nM.Provider, {
      value: v,
      children: e
    }), v, null)
  });
}
Pp.injectIntoDevTools({
  bundleType: process.env.NODE_ENV === "production" ? 0 : 1,
  rendererPackageName: "@react-three/fiber",
  version: qt.version
});
const vx = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function Mz(s) {
  const {
    handlePointer: e
  } = uz(s);
  return {
    priority: 1,
    enabled: !0,
    compute(t, n, r) {
      n.pointer.set(t.offsetX / n.size.width * 2 - 1, -(t.offsetY / n.size.height) * 2 + 1), n.raycaster.setFromCamera(n.pointer, n.camera);
    },
    connected: void 0,
    handlers: Object.keys(vx).reduce((t, n) => ({
      ...t,
      [n]: e(n)
    }), {}),
    update: () => {
      var t;
      const {
        events: n,
        internal: r
      } = s.getState();
      (t = r.lastEvent) != null && t.current && n.handlers && n.handlers.onPointerMove(r.lastEvent.current);
    },
    connect: (t) => {
      var n;
      const {
        set: r,
        events: o
      } = s.getState();
      o.disconnect == null || o.disconnect(), r((c) => ({
        events: {
          ...c.events,
          connected: t
        }
      })), Object.entries((n = o.handlers) != null ? n : []).forEach(([c, f]) => {
        const [h, p] = vx[c];
        t.addEventListener(h, f, {
          passive: p
        });
      });
    },
    disconnect: () => {
      const {
        set: t,
        events: n
      } = s.getState();
      if (n.connected) {
        var r;
        Object.entries((r = n.handlers) != null ? r : []).forEach(([o, c]) => {
          if (n && n.connected instanceof HTMLElement) {
            const [f] = vx[o];
            n.connected.removeEventListener(f, c);
          }
        }), t((o) => ({
          events: {
            ...o.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
function k1(s, e) {
  let t;
  return (...n) => {
    window.clearTimeout(t), t = window.setTimeout(() => s(...n), e);
  };
}
function Ez({ debounce: s, scroll: e, polyfill: t, offsetSize: n } = { debounce: 0, scroll: !1, offsetSize: !1 }) {
  const r = t || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!r)
    throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [o, c] = tp({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), f = ys({ element: null, scrollContainers: null, resizeObserver: null, lastBounds: o, orientationHandler: null }), h = s ? typeof s == "number" ? s : s.scroll : null, p = s ? typeof s == "number" ? s : s.resize : null, v = ys(!1);
  fc(() => (v.current = !0, () => void (v.current = !1)));
  const [y, x, M] = gx(() => {
    const E = () => {
      if (!f.current.element)
        return;
      const { left: L, top: R, width: U, height: F, bottom: z, right: B, x: W, y: O } = f.current.element.getBoundingClientRect(), I = { left: L, top: R, width: U, height: F, bottom: z, right: B, x: W, y: O };
      f.current.element instanceof HTMLElement && n && (I.height = f.current.element.offsetHeight, I.width = f.current.element.offsetWidth), Object.freeze(I), v.current && !Az(f.current.lastBounds, I) && c(f.current.lastBounds = I);
    };
    return [E, p ? k1(E, p) : E, h ? k1(E, h) : E];
  }, [c, n, h, p]);
  function T() {
    f.current.scrollContainers && (f.current.scrollContainers.forEach((E) => E.removeEventListener("scroll", M, !0)), f.current.scrollContainers = null), f.current.resizeObserver && (f.current.resizeObserver.disconnect(), f.current.resizeObserver = null), f.current.orientationHandler && ("orientation" in screen && "removeEventListener" in screen.orientation ? screen.orientation.removeEventListener("change", f.current.orientationHandler) : "onorientationchange" in window && window.removeEventListener("orientationchange", f.current.orientationHandler));
  }
  function C() {
    f.current.element && (f.current.resizeObserver = new r(M), f.current.resizeObserver.observe(f.current.element), e && f.current.scrollContainers && f.current.scrollContainers.forEach((E) => E.addEventListener("scroll", M, { capture: !0, passive: !0 })), f.current.orientationHandler = () => {
      M();
    }, "orientation" in screen && "addEventListener" in screen.orientation ? screen.orientation.addEventListener("change", f.current.orientationHandler) : "onorientationchange" in window && window.addEventListener("orientationchange", f.current.orientationHandler));
  }
  const w = (E) => {
    !E || E === f.current.element || (T(), f.current.element = E, f.current.scrollContainers = yR(E), C());
  };
  return bz(M, !!e), Tz(x), fc(() => {
    T(), C();
  }, [e, M, x]), fc(() => T, []), [w, o, y];
}
function Tz(s) {
  fc(() => {
    const e = s;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [s]);
}
function bz(s, e) {
  fc(() => {
    if (e) {
      const t = s;
      return window.addEventListener("scroll", t, { capture: !0, passive: !0 }), () => void window.removeEventListener("scroll", t, !0);
    }
  }, [s, e]);
}
function yR(s) {
  const e = [];
  if (!s || s === document.body)
    return e;
  const { overflow: t, overflowX: n, overflowY: r } = window.getComputedStyle(s);
  return [t, n, r].some((o) => o === "auto" || o === "scroll") && e.push(s), [...e, ...yR(s.parentElement)];
}
const wz = ["x", "y", "top", "bottom", "left", "right", "width", "height"], Az = (s, e) => wz.every((t) => s[t] === e[t]);
var Rz = Object.defineProperty, Cz = Object.defineProperties, Lz = Object.getOwnPropertyDescriptors, G1 = Object.getOwnPropertySymbols, Pz = Object.prototype.hasOwnProperty, Dz = Object.prototype.propertyIsEnumerable, W1 = (s, e, t) => e in s ? Rz(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t, X1 = (s, e) => {
  for (var t in e || (e = {}))
    Pz.call(e, t) && W1(s, t, e[t]);
  if (G1)
    for (var t of G1(e))
      Dz.call(e, t) && W1(s, t, e[t]);
  return s;
}, Uz = (s, e) => Cz(s, Lz(e)), Y1, j1;
typeof window < "u" && ((Y1 = window.document) != null && Y1.createElement || ((j1 = window.navigator) == null ? void 0 : j1.product) === "ReactNative") ? qt.useLayoutEffect : qt.useEffect;
function _R(s, e, t) {
  if (!s)
    return;
  if (t(s) === !0)
    return s;
  let n = e ? s.return : s.child;
  for (; n; ) {
    const r = _R(n, e, t);
    if (r)
      return r;
    n = e ? null : n.sibling;
  }
}
function xR(s) {
  try {
    return Object.defineProperties(s, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return s;
  }
}
const q1 = console.error;
console.error = function() {
  const s = [...arguments].join("");
  if (s != null && s.startsWith("Warning:") && s.includes("useContext")) {
    console.error = q1;
    return;
  }
  return q1.apply(this, arguments);
};
const aM = xR(qt.createContext(null));
class SR extends qt.Component {
  render() {
    return /* @__PURE__ */ qt.createElement(aM.Provider, {
      value: this._reactInternals
    }, this.props.children);
  }
}
function Nz() {
  const s = qt.useContext(aM);
  if (s === null)
    throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = qt.useId();
  return qt.useMemo(() => {
    for (const n of [s, s == null ? void 0 : s.alternate]) {
      if (!n)
        continue;
      const r = _R(n, !1, (o) => {
        let c = o.memoizedState;
        for (; c; ) {
          if (c.memoizedState === e)
            return !0;
          c = c.next;
        }
      });
      if (r)
        return r;
    }
  }, [s, e]);
}
function Oz() {
  const s = Nz(), [e] = qt.useState(() => /* @__PURE__ */ new Map());
  e.clear();
  let t = s;
  for (; t; ) {
    if (t.type && typeof t.type == "object") {
      const r = t.type._context === void 0 && t.type.Provider === t.type ? t.type : t.type._context;
      r && r !== aM && !e.has(r) && e.set(r, qt.useContext(xR(r)));
    }
    t = t.return;
  }
  return e;
}
function Iz() {
  const s = Oz();
  return qt.useMemo(
    () => Array.from(s.keys()).reduce(
      (e, t) => (n) => /* @__PURE__ */ qt.createElement(e, null, /* @__PURE__ */ qt.createElement(t.Provider, Uz(X1({}, n), {
        value: s.get(t)
      }))),
      (e) => /* @__PURE__ */ qt.createElement(SR, X1({}, e))
    ),
    [s]
  );
}
const Fz = /* @__PURE__ */ qt.forwardRef(function({
  children: e,
  fallback: t,
  resize: n,
  style: r,
  gl: o,
  events: c = Mz,
  eventSource: f,
  eventPrefix: h,
  shadows: p,
  linear: v,
  flat: y,
  legacy: x,
  orthographic: M,
  frameloop: T,
  dpr: C,
  performance: w,
  raycaster: E,
  camera: L,
  scene: R,
  onPointerMissed: U,
  onCreated: F,
  ...z
}, B) {
  qt.useMemo(() => sR(WF), []);
  const W = Iz(), [O, I] = Ez({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...n
  }), Z = qt.useRef(null), ie = qt.useRef(null);
  qt.useImperativeHandle(B, () => Z.current);
  const fe = uR(U), [K, he] = qt.useState(!1), [Te, Me] = qt.useState(!1);
  if (K)
    throw K;
  if (Te)
    throw Te;
  const ne = qt.useRef(null);
  kp(() => {
    const re = Z.current;
    I.width > 0 && I.height > 0 && re && (ne.current || (ne.current = yz(re)), ne.current.configure({
      gl: o,
      events: c,
      shadows: p,
      linear: v,
      flat: y,
      legacy: x,
      orthographic: M,
      frameloop: T,
      dpr: C,
      performance: w,
      raycaster: E,
      camera: L,
      scene: R,
      size: I,
      // Pass mutable reference to onPointerMissed so it's free to update
      onPointerMissed: (...J) => fe.current == null ? void 0 : fe.current(...J),
      onCreated: (J) => {
        J.events.connect == null || J.events.connect(f ? nz(f) ? f.current : f : ie.current), h && J.setEvents({
          compute: (ue, Pe) => {
            const qe = ue[h + "X"], $e = ue[h + "Y"];
            Pe.pointer.set(qe / Pe.size.width * 2 - 1, -($e / Pe.size.height) * 2 + 1), Pe.raycaster.setFromCamera(Pe.pointer, Pe.camera);
          }
        }), F == null || F(J);
      }
    }), ne.current.render(/* @__PURE__ */ Mn.jsx(W, {
      children: /* @__PURE__ */ Mn.jsx(cR, {
        set: Me,
        children: /* @__PURE__ */ Mn.jsx(qt.Suspense, {
          fallback: /* @__PURE__ */ Mn.jsx(iz, {
            set: he
          }),
          children: e ?? null
        })
      })
    })));
  }), qt.useEffect(() => {
    const re = Z.current;
    if (re)
      return () => gR(re);
  }, []);
  const le = f ? "none" : "auto";
  return /* @__PURE__ */ Mn.jsx("div", {
    ref: ie,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: le,
      ...r
    },
    ...z,
    children: /* @__PURE__ */ Mn.jsx("div", {
      ref: O,
      style: {
        width: "100%",
        height: "100%"
      },
      children: /* @__PURE__ */ Mn.jsx("canvas", {
        ref: Z,
        style: {
          display: "block"
        },
        children: t
      })
    })
  });
}), zz = /* @__PURE__ */ qt.forwardRef(function(e, t) {
  return /* @__PURE__ */ Mn.jsx(SR, {
    children: /* @__PURE__ */ Mn.jsx(Fz, {
      ...e,
      ref: t
    })
  });
});
function fS() {
  return fS = Object.assign ? Object.assign.bind() : function(s) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var n in t)
        ({}).hasOwnProperty.call(t, n) && (s[n] = t[n]);
    }
    return s;
  }, fS.apply(null, arguments);
}
var Bz = Object.defineProperty, Hz = (s, e, t) => e in s ? Bz(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t, Vz = (s, e, t) => (Hz(s, typeof e != "symbol" ? e + "" : e, t), t);
class kz {
  constructor() {
    Vz(this, "_listeners");
  }
  /**
   * Adds a listener to an event type.
   * @param type The type of event to listen to.
   * @param listener The function that gets called when the event is fired.
   */
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  /**
      * Checks if listener is added to an event type.
      * @param type The type of event to listen to.
      * @param listener The function that gets called when the event is fired.
      */
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  /**
      * Removes a listener from an event type.
      * @param type The type of the listener that gets removed.
      * @param listener The listener function that gets removed.
      */
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const r = this._listeners[e];
    if (r !== void 0) {
      const o = r.indexOf(t);
      o !== -1 && r.splice(o, 1);
    }
  }
  /**
      * Fire an event type.
      * @param event The event that gets fired.
      */
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const r = n.slice(0);
      for (let o = 0, c = r.length; o < c; o++)
        r[o].call(this, e);
      e.target = null;
    }
  }
}
var Gz = Object.defineProperty, Wz = (s, e, t) => e in s ? Gz(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t, Gt = (s, e, t) => (Wz(s, typeof e != "symbol" ? e + "" : e, t), t);
const gg = /* @__PURE__ */ new Sc(), Z1 = /* @__PURE__ */ new Fo(), Xz = Math.cos(70 * (Math.PI / 180)), J1 = (s, e) => (s % e + e) % e;
let Yz = class extends kz {
  constructor(e, t) {
    super(), Gt(this, "object"), Gt(this, "domElement"), Gt(this, "enabled", !0), Gt(this, "target", new Y()), Gt(this, "minDistance", 0), Gt(this, "maxDistance", 1 / 0), Gt(this, "minZoom", 0), Gt(this, "maxZoom", 1 / 0), Gt(this, "minPolarAngle", 0), Gt(this, "maxPolarAngle", Math.PI), Gt(this, "minAzimuthAngle", -1 / 0), Gt(this, "maxAzimuthAngle", 1 / 0), Gt(this, "enableDamping", !1), Gt(this, "dampingFactor", 0.05), Gt(this, "enableZoom", !0), Gt(this, "zoomSpeed", 1), Gt(this, "enableRotate", !0), Gt(this, "rotateSpeed", 1), Gt(this, "enablePan", !0), Gt(this, "panSpeed", 1), Gt(this, "screenSpacePanning", !0), Gt(this, "keyPanSpeed", 7), Gt(this, "zoomToCursor", !1), Gt(this, "autoRotate", !1), Gt(this, "autoRotateSpeed", 2), Gt(this, "reverseOrbit", !1), Gt(this, "reverseHorizontalOrbit", !1), Gt(this, "reverseVerticalOrbit", !1), Gt(this, "keys", { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" }), Gt(this, "mouseButtons", {
      LEFT: nc.ROTATE,
      MIDDLE: nc.DOLLY,
      RIGHT: nc.PAN
    }), Gt(this, "touches", { ONE: ic.ROTATE, TWO: ic.DOLLY_PAN }), Gt(this, "target0"), Gt(this, "position0"), Gt(this, "zoom0"), Gt(this, "_domElementKeyEvents", null), Gt(this, "getPolarAngle"), Gt(this, "getAzimuthalAngle"), Gt(this, "setPolarAngle"), Gt(this, "setAzimuthalAngle"), Gt(this, "getDistance"), Gt(this, "getZoomScale"), Gt(this, "listenToKeyEvents"), Gt(this, "stopListenToKeyEvents"), Gt(this, "saveState"), Gt(this, "reset"), Gt(this, "update"), Gt(this, "connect"), Gt(this, "dispose"), Gt(this, "dollyIn"), Gt(this, "dollyOut"), Gt(this, "getScale"), Gt(this, "setScale"), this.object = e, this.domElement = t, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = () => v.phi, this.getAzimuthalAngle = () => v.theta, this.setPolarAngle = (ee) => {
      let Ee = J1(ee, 2 * Math.PI), xe = v.phi;
      xe < 0 && (xe += 2 * Math.PI), Ee < 0 && (Ee += 2 * Math.PI);
      let k = Math.abs(Ee - xe);
      2 * Math.PI - k < k && (Ee < xe ? Ee += 2 * Math.PI : xe += 2 * Math.PI), y.phi = Ee - xe, n.update();
    }, this.setAzimuthalAngle = (ee) => {
      let Ee = J1(ee, 2 * Math.PI), xe = v.theta;
      xe < 0 && (xe += 2 * Math.PI), Ee < 0 && (Ee += 2 * Math.PI);
      let k = Math.abs(Ee - xe);
      2 * Math.PI - k < k && (Ee < xe ? Ee += 2 * Math.PI : xe += 2 * Math.PI), y.theta = Ee - xe, n.update();
    }, this.getDistance = () => n.object.position.distanceTo(n.target), this.listenToKeyEvents = (ee) => {
      ee.addEventListener("keydown", Ze), this._domElementKeyEvents = ee;
    }, this.stopListenToKeyEvents = () => {
      this._domElementKeyEvents.removeEventListener("keydown", Ze), this._domElementKeyEvents = null;
    }, this.saveState = () => {
      n.target0.copy(n.target), n.position0.copy(n.object.position), n.zoom0 = n.object.zoom;
    }, this.reset = () => {
      n.target.copy(n.target0), n.object.position.copy(n.position0), n.object.zoom = n.zoom0, n.object.updateProjectionMatrix(), n.dispatchEvent(r), n.update(), h = f.NONE;
    }, this.update = (() => {
      const ee = new Y(), Ee = new Y(0, 1, 0), xe = new Tr().setFromUnitVectors(e.up, Ee), k = xe.clone().invert(), ze = new Y(), Ce = new Tr(), Be = 2 * Math.PI;
      return function() {
        const He = n.object.position;
        xe.setFromUnitVectors(e.up, Ee), k.copy(xe).invert(), ee.copy(He).sub(n.target), ee.applyQuaternion(xe), v.setFromVector3(ee), n.autoRotate && h === f.NONE && K(ie()), n.enableDamping ? (v.theta += y.theta * n.dampingFactor, v.phi += y.phi * n.dampingFactor) : (v.theta += y.theta, v.phi += y.phi);
        let vt = n.minAzimuthAngle, Ut = n.maxAzimuthAngle;
        isFinite(vt) && isFinite(Ut) && (vt < -Math.PI ? vt += Be : vt > Math.PI && (vt -= Be), Ut < -Math.PI ? Ut += Be : Ut > Math.PI && (Ut -= Be), vt <= Ut ? v.theta = Math.max(vt, Math.min(Ut, v.theta)) : v.theta = v.theta > (vt + Ut) / 2 ? Math.max(vt, v.theta) : Math.min(Ut, v.theta)), v.phi = Math.max(n.minPolarAngle, Math.min(n.maxPolarAngle, v.phi)), v.makeSafe(), n.enableDamping === !0 ? n.target.addScaledVector(M, n.dampingFactor) : n.target.add(M), n.zoomToCursor && O || n.object.isOrthographicCamera ? v.radius = Pe(v.radius) : v.radius = Pe(v.radius * x), ee.setFromSpherical(v), ee.applyQuaternion(k), He.copy(n.target).add(ee), n.object.matrixAutoUpdate || n.object.updateMatrix(), n.object.lookAt(n.target), n.enableDamping === !0 ? (y.theta *= 1 - n.dampingFactor, y.phi *= 1 - n.dampingFactor, M.multiplyScalar(1 - n.dampingFactor)) : (y.set(0, 0, 0), M.set(0, 0, 0));
        let Nt = !1;
        if (n.zoomToCursor && O) {
          let Kt = null;
          if (n.object instanceof Ri && n.object.isPerspectiveCamera) {
            const Un = ee.length();
            Kt = Pe(Un * x);
            const wn = Un - Kt;
            n.object.position.addScaledVector(B, wn), n.object.updateMatrixWorld();
          } else if (n.object.isOrthographicCamera) {
            const Un = new Y(W.x, W.y, 0);
            Un.unproject(n.object), n.object.zoom = Math.max(n.minZoom, Math.min(n.maxZoom, n.object.zoom / x)), n.object.updateProjectionMatrix(), Nt = !0;
            const wn = new Y(W.x, W.y, 0);
            wn.unproject(n.object), n.object.position.sub(wn).add(Un), n.object.updateMatrixWorld(), Kt = ee.length();
          } else
            console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."), n.zoomToCursor = !1;
          Kt !== null && (n.screenSpacePanning ? n.target.set(0, 0, -1).transformDirection(n.object.matrix).multiplyScalar(Kt).add(n.object.position) : (gg.origin.copy(n.object.position), gg.direction.set(0, 0, -1).transformDirection(n.object.matrix), Math.abs(n.object.up.dot(gg.direction)) < Xz ? e.lookAt(n.target) : (Z1.setFromNormalAndCoplanarPoint(n.object.up, n.target), gg.intersectPlane(Z1, n.target))));
        } else
          n.object instanceof Vo && n.object.isOrthographicCamera && (Nt = x !== 1, Nt && (n.object.zoom = Math.max(n.minZoom, Math.min(n.maxZoom, n.object.zoom / x)), n.object.updateProjectionMatrix()));
        return x = 1, O = !1, Nt || ze.distanceToSquared(n.object.position) > p || 8 * (1 - Ce.dot(n.object.quaternion)) > p ? (n.dispatchEvent(r), ze.copy(n.object.position), Ce.copy(n.object.quaternion), Nt = !1, !0) : !1;
      };
    })(), this.connect = (ee) => {
      n.domElement = ee, n.domElement.style.touchAction = "none", n.domElement.addEventListener("contextmenu", Se), n.domElement.addEventListener("pointerdown", rn), n.domElement.addEventListener("pointercancel", H), n.domElement.addEventListener("wheel", Ve);
    }, this.dispose = () => {
      var ee, Ee, xe, k, ze, Ce;
      n.domElement && (n.domElement.style.touchAction = "auto"), (ee = n.domElement) == null || ee.removeEventListener("contextmenu", Se), (Ee = n.domElement) == null || Ee.removeEventListener("pointerdown", rn), (xe = n.domElement) == null || xe.removeEventListener("pointercancel", H), (k = n.domElement) == null || k.removeEventListener("wheel", Ve), (ze = n.domElement) == null || ze.ownerDocument.removeEventListener("pointermove", X), (Ce = n.domElement) == null || Ce.ownerDocument.removeEventListener("pointerup", H), n._domElementKeyEvents !== null && n._domElementKeyEvents.removeEventListener("keydown", Ze);
    };
    const n = this, r = { type: "change" }, o = { type: "start" }, c = { type: "end" }, f = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    };
    let h = f.NONE;
    const p = 1e-6, v = new aS(), y = new aS();
    let x = 1;
    const M = new Y(), T = new Ie(), C = new Ie(), w = new Ie(), E = new Ie(), L = new Ie(), R = new Ie(), U = new Ie(), F = new Ie(), z = new Ie(), B = new Y(), W = new Ie();
    let O = !1;
    const I = [], Z = {};
    function ie() {
      return 2 * Math.PI / 60 / 60 * n.autoRotateSpeed;
    }
    function fe() {
      return Math.pow(0.95, n.zoomSpeed);
    }
    function K(ee) {
      n.reverseOrbit || n.reverseHorizontalOrbit ? y.theta += ee : y.theta -= ee;
    }
    function he(ee) {
      n.reverseOrbit || n.reverseVerticalOrbit ? y.phi += ee : y.phi -= ee;
    }
    const Te = (() => {
      const ee = new Y();
      return function(xe, k) {
        ee.setFromMatrixColumn(k, 0), ee.multiplyScalar(-xe), M.add(ee);
      };
    })(), Me = (() => {
      const ee = new Y();
      return function(xe, k) {
        n.screenSpacePanning === !0 ? ee.setFromMatrixColumn(k, 1) : (ee.setFromMatrixColumn(k, 0), ee.crossVectors(n.object.up, ee)), ee.multiplyScalar(xe), M.add(ee);
      };
    })(), ne = (() => {
      const ee = new Y();
      return function(xe, k) {
        const ze = n.domElement;
        if (ze && n.object instanceof Ri && n.object.isPerspectiveCamera) {
          const Ce = n.object.position;
          ee.copy(Ce).sub(n.target);
          let Be = ee.length();
          Be *= Math.tan(n.object.fov / 2 * Math.PI / 180), Te(2 * xe * Be / ze.clientHeight, n.object.matrix), Me(2 * k * Be / ze.clientHeight, n.object.matrix);
        } else
          ze && n.object instanceof Vo && n.object.isOrthographicCamera ? (Te(
            xe * (n.object.right - n.object.left) / n.object.zoom / ze.clientWidth,
            n.object.matrix
          ), Me(
            k * (n.object.top - n.object.bottom) / n.object.zoom / ze.clientHeight,
            n.object.matrix
          )) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), n.enablePan = !1);
      };
    })();
    function le(ee) {
      n.object instanceof Ri && n.object.isPerspectiveCamera || n.object instanceof Vo && n.object.isOrthographicCamera ? x = ee : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), n.enableZoom = !1);
    }
    function re(ee) {
      le(x / ee);
    }
    function J(ee) {
      le(x * ee);
    }
    function ue(ee) {
      if (!n.zoomToCursor || !n.domElement)
        return;
      O = !0;
      const Ee = n.domElement.getBoundingClientRect(), xe = ee.clientX - Ee.left, k = ee.clientY - Ee.top, ze = Ee.width, Ce = Ee.height;
      W.x = xe / ze * 2 - 1, W.y = -(k / Ce) * 2 + 1, B.set(W.x, W.y, 1).unproject(n.object).sub(n.object.position).normalize();
    }
    function Pe(ee) {
      return Math.max(n.minDistance, Math.min(n.maxDistance, ee));
    }
    function qe(ee) {
      T.set(ee.clientX, ee.clientY);
    }
    function $e(ee) {
      ue(ee), U.set(ee.clientX, ee.clientY);
    }
    function it(ee) {
      E.set(ee.clientX, ee.clientY);
    }
    function gt(ee) {
      C.set(ee.clientX, ee.clientY), w.subVectors(C, T).multiplyScalar(n.rotateSpeed);
      const Ee = n.domElement;
      Ee && (K(2 * Math.PI * w.x / Ee.clientHeight), he(2 * Math.PI * w.y / Ee.clientHeight)), T.copy(C), n.update();
    }
    function ot(ee) {
      F.set(ee.clientX, ee.clientY), z.subVectors(F, U), z.y > 0 ? re(fe()) : z.y < 0 && J(fe()), U.copy(F), n.update();
    }
    function Vt(ee) {
      L.set(ee.clientX, ee.clientY), R.subVectors(L, E).multiplyScalar(n.panSpeed), ne(R.x, R.y), E.copy(L), n.update();
    }
    function nn(ee) {
      ue(ee), ee.deltaY < 0 ? J(fe()) : ee.deltaY > 0 && re(fe()), n.update();
    }
    function Tt(ee) {
      let Ee = !1;
      switch (ee.code) {
        case n.keys.UP:
          ne(0, n.keyPanSpeed), Ee = !0;
          break;
        case n.keys.BOTTOM:
          ne(0, -n.keyPanSpeed), Ee = !0;
          break;
        case n.keys.LEFT:
          ne(n.keyPanSpeed, 0), Ee = !0;
          break;
        case n.keys.RIGHT:
          ne(-n.keyPanSpeed, 0), Ee = !0;
          break;
      }
      Ee && (ee.preventDefault(), n.update());
    }
    function Q() {
      if (I.length == 1)
        T.set(I[0].pageX, I[0].pageY);
      else {
        const ee = 0.5 * (I[0].pageX + I[1].pageX), Ee = 0.5 * (I[0].pageY + I[1].pageY);
        T.set(ee, Ee);
      }
    }
    function ke() {
      if (I.length == 1)
        E.set(I[0].pageX, I[0].pageY);
      else {
        const ee = 0.5 * (I[0].pageX + I[1].pageX), Ee = 0.5 * (I[0].pageY + I[1].pageY);
        E.set(ee, Ee);
      }
    }
    function Re() {
      const ee = I[0].pageX - I[1].pageX, Ee = I[0].pageY - I[1].pageY, xe = Math.sqrt(ee * ee + Ee * Ee);
      U.set(0, xe);
    }
    function Xe() {
      n.enableZoom && Re(), n.enablePan && ke();
    }
    function Ue() {
      n.enableZoom && Re(), n.enableRotate && Q();
    }
    function Mt(ee) {
      if (I.length == 1)
        C.set(ee.pageX, ee.pageY);
      else {
        const xe = rt(ee), k = 0.5 * (ee.pageX + xe.x), ze = 0.5 * (ee.pageY + xe.y);
        C.set(k, ze);
      }
      w.subVectors(C, T).multiplyScalar(n.rotateSpeed);
      const Ee = n.domElement;
      Ee && (K(2 * Math.PI * w.x / Ee.clientHeight), he(2 * Math.PI * w.y / Ee.clientHeight)), T.copy(C);
    }
    function lt(ee) {
      if (I.length == 1)
        L.set(ee.pageX, ee.pageY);
      else {
        const Ee = rt(ee), xe = 0.5 * (ee.pageX + Ee.x), k = 0.5 * (ee.pageY + Ee.y);
        L.set(xe, k);
      }
      R.subVectors(L, E).multiplyScalar(n.panSpeed), ne(R.x, R.y), E.copy(L);
    }
    function at(ee) {
      const Ee = rt(ee), xe = ee.pageX - Ee.x, k = ee.pageY - Ee.y, ze = Math.sqrt(xe * xe + k * k);
      F.set(0, ze), z.set(0, Math.pow(F.y / U.y, n.zoomSpeed)), re(z.y), U.copy(F);
    }
    function Dt(ee) {
      n.enableZoom && at(ee), n.enablePan && lt(ee);
    }
    function Zt(ee) {
      n.enableZoom && at(ee), n.enableRotate && Mt(ee);
    }
    function rn(ee) {
      var Ee, xe;
      n.enabled !== !1 && (I.length === 0 && ((Ee = n.domElement) == null || Ee.ownerDocument.addEventListener("pointermove", X), (xe = n.domElement) == null || xe.ownerDocument.addEventListener("pointerup", H)), Ge(ee), ee.pointerType === "touch" ? bt(ee) : ye(ee));
    }
    function X(ee) {
      n.enabled !== !1 && (ee.pointerType === "touch" ? Ke(ee) : Ye(ee));
    }
    function H(ee) {
      var Ee, xe, k;
      yt(ee), I.length === 0 && ((Ee = n.domElement) == null || Ee.releasePointerCapture(ee.pointerId), (xe = n.domElement) == null || xe.ownerDocument.removeEventListener("pointermove", X), (k = n.domElement) == null || k.ownerDocument.removeEventListener("pointerup", H)), n.dispatchEvent(c), h = f.NONE;
    }
    function ye(ee) {
      let Ee;
      switch (ee.button) {
        case 0:
          Ee = n.mouseButtons.LEFT;
          break;
        case 1:
          Ee = n.mouseButtons.MIDDLE;
          break;
        case 2:
          Ee = n.mouseButtons.RIGHT;
          break;
        default:
          Ee = -1;
      }
      switch (Ee) {
        case nc.DOLLY:
          if (n.enableZoom === !1)
            return;
          $e(ee), h = f.DOLLY;
          break;
        case nc.ROTATE:
          if (ee.ctrlKey || ee.metaKey || ee.shiftKey) {
            if (n.enablePan === !1)
              return;
            it(ee), h = f.PAN;
          } else {
            if (n.enableRotate === !1)
              return;
            qe(ee), h = f.ROTATE;
          }
          break;
        case nc.PAN:
          if (ee.ctrlKey || ee.metaKey || ee.shiftKey) {
            if (n.enableRotate === !1)
              return;
            qe(ee), h = f.ROTATE;
          } else {
            if (n.enablePan === !1)
              return;
            it(ee), h = f.PAN;
          }
          break;
        default:
          h = f.NONE;
      }
      h !== f.NONE && n.dispatchEvent(o);
    }
    function Ye(ee) {
      if (n.enabled !== !1)
        switch (h) {
          case f.ROTATE:
            if (n.enableRotate === !1)
              return;
            gt(ee);
            break;
          case f.DOLLY:
            if (n.enableZoom === !1)
              return;
            ot(ee);
            break;
          case f.PAN:
            if (n.enablePan === !1)
              return;
            Vt(ee);
            break;
        }
    }
    function Ve(ee) {
      n.enabled === !1 || n.enableZoom === !1 || h !== f.NONE && h !== f.ROTATE || (ee.preventDefault(), n.dispatchEvent(o), nn(ee), n.dispatchEvent(c));
    }
    function Ze(ee) {
      n.enabled === !1 || n.enablePan === !1 || Tt(ee);
    }
    function bt(ee) {
      switch (Ne(ee), I.length) {
        case 1:
          switch (n.touches.ONE) {
            case ic.ROTATE:
              if (n.enableRotate === !1)
                return;
              Q(), h = f.TOUCH_ROTATE;
              break;
            case ic.PAN:
              if (n.enablePan === !1)
                return;
              ke(), h = f.TOUCH_PAN;
              break;
            default:
              h = f.NONE;
          }
          break;
        case 2:
          switch (n.touches.TWO) {
            case ic.DOLLY_PAN:
              if (n.enableZoom === !1 && n.enablePan === !1)
                return;
              Xe(), h = f.TOUCH_DOLLY_PAN;
              break;
            case ic.DOLLY_ROTATE:
              if (n.enableZoom === !1 && n.enableRotate === !1)
                return;
              Ue(), h = f.TOUCH_DOLLY_ROTATE;
              break;
            default:
              h = f.NONE;
          }
          break;
        default:
          h = f.NONE;
      }
      h !== f.NONE && n.dispatchEvent(o);
    }
    function Ke(ee) {
      switch (Ne(ee), h) {
        case f.TOUCH_ROTATE:
          if (n.enableRotate === !1)
            return;
          Mt(ee), n.update();
          break;
        case f.TOUCH_PAN:
          if (n.enablePan === !1)
            return;
          lt(ee), n.update();
          break;
        case f.TOUCH_DOLLY_PAN:
          if (n.enableZoom === !1 && n.enablePan === !1)
            return;
          Dt(ee), n.update();
          break;
        case f.TOUCH_DOLLY_ROTATE:
          if (n.enableZoom === !1 && n.enableRotate === !1)
            return;
          Zt(ee), n.update();
          break;
        default:
          h = f.NONE;
      }
    }
    function Se(ee) {
      n.enabled !== !1 && ee.preventDefault();
    }
    function Ge(ee) {
      I.push(ee);
    }
    function yt(ee) {
      delete Z[ee.pointerId];
      for (let Ee = 0; Ee < I.length; Ee++)
        if (I[Ee].pointerId == ee.pointerId) {
          I.splice(Ee, 1);
          return;
        }
    }
    function Ne(ee) {
      let Ee = Z[ee.pointerId];
      Ee === void 0 && (Ee = new Ie(), Z[ee.pointerId] = Ee), Ee.set(ee.pageX, ee.pageY);
    }
    function rt(ee) {
      const Ee = ee.pointerId === I[0].pointerId ? I[1] : I[0];
      return Z[Ee.pointerId];
    }
    this.dollyIn = (ee = fe()) => {
      J(ee), n.update();
    }, this.dollyOut = (ee = fe()) => {
      re(ee), n.update();
    }, this.getScale = () => x, this.setScale = (ee) => {
      le(ee), n.update();
    }, this.getZoomScale = () => fe(), t !== void 0 && this.connect(t), this.update();
  }
};
function jz(s, e, t) {
  const n = gs((x) => x.size), r = gs((x) => x.viewport), o = typeof s == "number" ? s : n.width * r.dpr, c = typeof e == "number" ? e : n.height * r.dpr, f = (typeof s == "number" ? t : s) || {}, {
    samples: h = 0,
    depth: p,
    ...v
  } = f, y = qt.useMemo(() => {
    const x = new Za(o, c, {
      minFilter: hi,
      magFilter: hi,
      type: vc,
      ...v
    });
    return p && (x.depthTexture = new DS(o, c, Ta)), x.samples = h, x;
  }, []);
  return qt.useLayoutEffect(() => {
    y.setSize(o, c), h && (y.samples = h);
  }, [h, y, o, c]), qt.useEffect(() => () => y.dispose(), []), y;
}
const qz = /* @__PURE__ */ qt.forwardRef(({
  makeDefault: s,
  camera: e,
  regress: t,
  domElement: n,
  enableDamping: r = !0,
  keyEvents: o = !1,
  onChange: c,
  onStart: f,
  onEnd: h,
  ...p
}, v) => {
  const y = gs((z) => z.invalidate), x = gs((z) => z.camera), M = gs((z) => z.gl), T = gs((z) => z.events), C = gs((z) => z.setEvents), w = gs((z) => z.set), E = gs((z) => z.get), L = gs((z) => z.performance), R = e || x, U = n || T.connected || M.domElement, F = qt.useMemo(() => new Yz(R), [R]);
  return rM(() => {
    F.enabled && F.update();
  }, -1), qt.useEffect(() => (o && F.connect(o === !0 ? U : o), F.connect(U), () => void F.dispose()), [o, U, t, F, y]), qt.useEffect(() => {
    const z = (O) => {
      y(), t && L.regress(), c && c(O);
    }, B = (O) => {
      f && f(O);
    }, W = (O) => {
      h && h(O);
    };
    return F.addEventListener("change", z), F.addEventListener("start", B), F.addEventListener("end", W), () => {
      F.removeEventListener("start", B), F.removeEventListener("end", W), F.removeEventListener("change", z);
    };
  }, [c, f, h, F, y, C]), qt.useEffect(() => {
    if (s) {
      const z = E().controls;
      return w({
        controls: F
      }), () => w({
        controls: z
      });
    }
  }, [s, F]), /* @__PURE__ */ qt.createElement("primitive", fS({
    ref: v,
    object: F,
    enableDamping: r
  }, p));
});
function MR(s) {
  const e = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(s);
  return e ? {
    r: parseInt(e[1], 16) / 255,
    g: parseInt(e[2], 16) / 255,
    b: parseInt(e[3], 16) / 255
  } : null;
}
function Zz(s) {
  const e = MR(s);
  return e ? 0.299 * e.r + 0.587 * e.g + 0.114 * e.b > 0.5 : !1;
}
function Jz(s, e) {
  const t = new Float32Array(s * 4);
  for (let n = 0; n < s * 4; n += 4)
    t[n] = (Math.random() - 0.5) * 4, t[n + 1] = (Math.random() - 0.5) * 4, t[n + 2] = (Math.random() - 0.5) * 4, t[n + 3] = 1;
  return t;
}
const Kz = `
  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
  vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
  vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }
  vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

  float snoise(vec3 v) {
    const vec2 C = vec2(1.0/6.0, 1.0/3.0);
    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
    vec3 i = floor(v + dot(v, C.yyy));
    vec3 x0 = v - i + dot(i, C.xxx);
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min(g.xyz, l.zxy);
    vec3 i2 = max(g.xyz, l.zxy);
    vec3 x1 = x0 - i1 + C.xxx;
    vec3 x2 = x0 - i2 + C.yyy;
    vec3 x3 = x0 - D.yyy;
    i = mod289(i);
    vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));
    float n_ = 0.142857142857;
    vec3 ns = n_ * D.wyz - D.xzx;
    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_);
    vec4 x = x_ * ns.x + ns.yyyy;
    vec4 y = y_ * ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);
    vec4 b0 = vec4(x.xy, y.xy);
    vec4 b1 = vec4(x.zw, y.zw);
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));
    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
    vec3 p0 = vec3(a0.xy, h.x);
    vec3 p1 = vec3(a0.zw, h.y);
    vec3 p2 = vec3(a1.xy, h.z);
    vec3 p3 = vec3(a1.zw, h.w);
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));
    p0 *= norm.x; p1 *= norm.y; p2 *= norm.z; p3 *= norm.w;
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
    m = m * m;
    return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));
  }
`, Qz = `
vec3 snoiseVec3(vec3 x) {
  float s  = snoise(vec3( x ));
  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));
  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));
  vec3 c = vec3( s , s1 , s2 );
  return c;
}
`, $z = `
vec3 curlNoise(vec3 p) {
  const float e = .1;
  vec3 dx = vec3( e   , 0.0 , 0.0 );
  vec3 dy = vec3( 0.0 , e   , 0.0 );
  vec3 dz = vec3( 0.0 , 0.0 , e   );

  vec3 p_x0 = snoiseVec3( p - dx );
  vec3 p_x1 = snoiseVec3( p + dx );
  vec3 p_y0 = snoiseVec3( p - dy );
  vec3 p_y1 = snoiseVec3( p + dy );
  vec3 p_z0 = snoiseVec3( p - dz );
  vec3 p_z1 = snoiseVec3( p + dz );

  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

  const float divisor = 1.0 / ( 2.0 * e );
  return normalize( vec3( x , y , z ) * divisor );
}
`;
class eB extends Ja {
  constructor(e = 512) {
    const t = new pc(
      Jz(e * e),
      e,
      e,
      Er,
      Ta
    );
    t.needsUpdate = !0, super({
      uniforms: {
        positions: { value: t },
        uFrequency: { value: 0.25 },
        uTime: { value: 0 }
      },
      vertexShader: `
        precision mediump float;
        varying vec2 vUv;
        void main() {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `,
      fragmentShader: `
        precision mediump float;
        precision mediump sampler2D;
        uniform float uTime;
        uniform float uFrequency;
        uniform sampler2D positions;
        varying vec2 vUv;

        ${Kz}
        ${Qz}
        ${$z}

        void main() {
          float time = uTime * 0.015;
          vec3 pos = texture2D(positions, vUv).rgb;
          vec3 curlPos = texture2D(positions, vUv).rgb;

          pos = curlNoise(pos * uFrequency + time);
          curlPos = curlNoise(curlPos * uFrequency + time);
          curlPos += curlNoise(curlPos * uFrequency * 2.0) * 0.5;
          curlPos += curlNoise(curlPos * uFrequency * 4.0) * 0.25;
          curlPos += curlNoise(curlPos * uFrequency * 8.0) * 0.125;

          gl_FragColor = vec4(mix(pos, curlPos, snoise(pos + time) * 0.5 + 0.5), 1.0);
        }
      `
    });
  }
}
class tB extends Ja {
  constructor(e = "normal", t = !1) {
    const n = e === "additive" ? Ag : ql;
    super({
      uniforms: {
        positions: { value: null },
        pointSize: { value: 3 },
        uTime: { value: 0 },
        uFocus: { value: 4 },
        uFov: { value: 45 },
        uBlur: { value: 30 },
        uGradientColors: { value: new Float32Array([1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1]) },
        uGradientStops: { value: new Float32Array([0, 0.3, 0.7, 1]) },
        uGradientRadius: { value: 2 },
        uIsLightBackground: { value: t ? 1 : 0 }
      },
      vertexShader: `
        precision mediump float;
        uniform sampler2D positions;
        uniform float pointSize;
        uniform float uTime;
        uniform float uFocus;
        uniform float uFov;
        uniform float uBlur;
        uniform float uGradientRadius;
        varying float vDistance;
        varying float vGradientDistance;
        varying vec3 vWorldPosition;

        void main() {
          vec3 pos = texture2D(positions, position.xy).xyz;
          vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);
          vec4 worldPosition = modelMatrix * vec4(pos, 1.0);

          gl_Position = projectionMatrix * mvPosition;

          vDistance = abs(uFocus - -mvPosition.z);
          vGradientDistance = length(worldPosition.xyz) / uGradientRadius;

          float sizeFactor = step(1.0 - (1.0 / uFov), position.x);
          gl_PointSize = sizeFactor * vDistance * uBlur;
        }
      `,
      fragmentShader: `
        precision mediump float;
        varying float vDistance;
        varying float vGradientDistance;
        varying vec3 vWorldPosition;
        uniform vec3 uGradientColors[4];
        uniform float uGradientStops[4];
        uniform float uTime;
        uniform float uIsLightBackground;

        vec3 getGradientColor(float t) {
          t = clamp(t, 0.0, 1.0);
          vec3 color = mix(uGradientColors[0], uGradientColors[1], smoothstep(uGradientStops[0], uGradientStops[1], t));
          color = mix(color, uGradientColors[2], smoothstep(uGradientStops[1], uGradientStops[2], t));
          color = mix(color, uGradientColors[3], smoothstep(uGradientStops[2], uGradientStops[3], t));
          return color;
        }

        void main() {
          vec2 cxy = 2.0 * gl_PointCoord - 1.0;
          float r2 = dot(cxy, cxy);
          if (r2 > 1.0) discard;
          float mask = 1.0 - smoothstep(0.95, 1.0, r2);

          float alpha = (1.04 - clamp(vDistance, 0.0, 1.0)) * mask;
          
          // Make particles more opaque on light backgrounds
          if (uIsLightBackground > 0.5) {
            alpha *= 2.0; // Double opacity for light backgrounds
            alpha = min(alpha, 1.0); // Clamp to max 1.0
          }

          float timeOffset = sin(uTime * 0.5) * 0.1;
          vec3 gradientColor = getGradientColor(vGradientDistance + timeOffset);

          gl_FragColor = vec4(gradientColor, alpha);
        }
      `,
      transparent: !0,
      blending: n,
      depthWrite: !1
    });
  }
}
sR({ SimulationMaterial: eB, DepthOfFieldMaterial: tB });
function nB({
  frequency: s = 0.15,
  speedFactor: e = 4,
  fov: t = 35,
  blur: n = 24,
  focus: r = 8.7,
  size: o = 256,
  gradientColors: c = ["#F0F4FF", "#637AFF", "#372CD5", "#F0F4FF"],
  gradientStops: f = [0.6, 0.65, 0.75, 0.8],
  gradientRadius: h = 1.35,
  blendMode: p = "normal",
  isLightBackground: v = !1,
  ...y
}) {
  const x = ys(), M = ys(), [T] = tp(() => new Yg()), [C] = tp(() => new Vo(-1, 1, 1, -1, 1 / Math.pow(2, 53), 1)), [w] = tp(() => new Float32Array([-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0])), [E] = tp(() => new Float32Array([0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0])), L = jz(o, o, {
    minFilter: di,
    magFilter: di,
    format: Er,
    stencilBuffer: !1,
    type: Ta
  }), R = gx(() => {
    const F = o * o, z = new Float32Array(F * 3);
    for (let B = 0; B < F; B++) {
      const W = B * 3;
      z[W + 0] = B % o / o, z[W + 1] = Math.floor(B / o) / o, z[W + 2] = 0;
    }
    return z;
  }, [o]), U = gx(() => {
    const F = c.map((z) => {
      const B = MR(z);
      return [B.r, B.g, B.b];
    });
    return {
      colors: new Float32Array(F.flat()),
      stops: new Float32Array(f)
    };
  }, [c, f]);
  return rM(({ gl: F, clock: z }) => {
    if (!x.current || !M.current)
      return;
    F.setRenderTarget(L), F.clear(), F.render(T, C), F.setRenderTarget(null);
    const B = M.current;
    B && B.uniforms && (B.uniforms.positions.value = L.texture, B.uniforms.uFocus.value = r, B.uniforms.uFov.value = t, B.uniforms.uBlur.value = n, B.uniforms.uGradientColors.value = U.colors, B.uniforms.uGradientStops.value = U.stops, B.uniforms.uGradientRadius.value = h, B.uniforms.uTime.value = z.elapsedTime);
    const W = x.current;
    W && W.uniforms && (W.uniforms.uTime.value = z.elapsedTime * e, W.uniforms.uFrequency.value = Jw.lerp(
      W.uniforms.uFrequency.value,
      s,
      0.1
    ));
  }), /* @__PURE__ */ Mn.jsxs(Mn.Fragment, { children: [
    xz(
      /* @__PURE__ */ Mn.jsxs("mesh", { children: [
        /* @__PURE__ */ Mn.jsx("simulationMaterial", { ref: x, args: [o] }),
        /* @__PURE__ */ Mn.jsxs("bufferGeometry", { children: [
          /* @__PURE__ */ Mn.jsx("bufferAttribute", { attach: "attributes-position", count: w.length / 3, array: w, itemSize: 3 }),
          /* @__PURE__ */ Mn.jsx("bufferAttribute", { attach: "attributes-uv", count: E.length / 2, array: E, itemSize: 2 })
        ] })
      ] }),
      T
    ),
    /* @__PURE__ */ Mn.jsxs("points", { ...y, children: [
      /* @__PURE__ */ Mn.jsx("bufferGeometry", { children: /* @__PURE__ */ Mn.jsx("bufferAttribute", { attach: "attributes-position", count: R.length / 3, array: R, itemSize: 3 }) }),
      /* @__PURE__ */ Mn.jsx("depthOfFieldMaterial", { ref: M, args: [finalBlendMode, v] })
    ] })
  ] });
}
function iB({
  frequency: s = 0.15,
  speedFactor: e = 4,
  rotationSpeed: t = 3.3,
  gradientColors: n = ["#F0F4FF", "#637AFF", "#372CD5", "#F0F4FF"],
  gradientStops: r = [0.6, 0.65, 0.75, 0.8],
  gradientRadius: o = 1.35,
  autoRotate: c = !0,
  enableVerticalRotation: f = !0,
  blur: h = 24,
  focus: p = 8.7,
  fov: v = 35,
  cameraZ: y = 7.6,
  blendMode: x = "additive"
}) {
  const M = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), E = /^((?!chrome|android).)*safari/i.test(navigator.userAgent) ? M ? 128 : 256 : M ? 128 : 300, { camera: L } = gs(), R = ys();
  return rM((U, F) => {
    R.current && R.current.update && R.current.update(F);
  }), fc(() => {
    L.position.set(0, 0, y);
  }, [y, L]), /* @__PURE__ */ Mn.jsxs(Mn.Fragment, { children: [
    /* @__PURE__ */ Mn.jsx(
      qz,
      {
        ref: R,
        makeDefault: !0,
        autoRotate: c,
        autoRotateSpeed: t,
        enableZoom: !1,
        enableDamping: !0,
        dampingFactor: 0.05,
        enableRotate: !0,
        minPolarAngle: f ? 0 : Math.PI / 2,
        maxPolarAngle: f ? Math.PI : Math.PI / 2
      }
    ),
    /* @__PURE__ */ Mn.jsx("ambientLight", {}),
    /* @__PURE__ */ Mn.jsx(
      nB,
      {
        frequency: s,
        speedFactor: e,
        fov: v,
        blur: h,
        focus: p,
        position: [0, 0, 0],
        size: E,
        gradientColors: n,
        gradientStops: r,
        gradientRadius: o,
        blendMode: finalBlendMode,
        isLightBackground
      }
    )
  ] });
}
function uB({
  width: s = "100%",
  height: e = "100%",
  backgroundColor: t = "#000000",
  frequency: n = 0.15,
  speedFactor: r = 4,
  rotationSpeed: o = 3.3,
  // Accept either format
  gradientColors: c = ["#F0F4FF", "#637AFF", "#372CD5", "#F0F4FF"],
  gradientColor1: f,
  gradientColor2: h,
  gradientColor3: p,
  gradientColor4: v,
  gradientStops: y = [0.6, 0.65, 0.75, 0.8],
  gradientStop1: x,
  gradientStop2: M,
  gradientStop3: T,
  gradientStop4: C,
  gradientRadius: w = 1.35,
  autoRotate: E = !0,
  enableVerticalRotation: L,
  blur: R = 24,
  focus: U = 8.7,
  fov: F = 35,
  cameraZ: z = 7.6,
  blendMode: B = "auto",
  // 'normal', 'additive', or 'auto'
  style: W = {},
  ...O
}) {
  const I = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), Z = L !== void 0 ? L : !I;
  t && Zz(t);
  let ie = B;
  B === "auto" && (ie = "normal");
  const fe = f ? [
    f,
    h || c[1],
    p || c[2],
    v || c[3]
  ] : c, K = x !== void 0 ? [
    x,
    M !== void 0 ? M : y[1],
    T !== void 0 ? T : y[2],
    C !== void 0 ? C : y[3]
  ] : y;
  return /* @__PURE__ */ Mn.jsx("div", { style: { width: s, height: e, backgroundColor: t, ...W }, ...O, children: /* @__PURE__ */ Mn.jsx(
    zz,
    {
      camera: {
        fov: F,
        position: [0, 0, z]
      },
      gl: {
        alpha: !0,
        antialias: !0,
        powerPreference: "high-performance",
        desynchronized: !0,
        premultipliedAlpha: !1,
        preserveDrawingBuffer: !1,
        failIfMajorPerformanceCaveat: !1,
        stencil: !1,
        depth: !0
      },
      resize: { scroll: !1 },
      dpr: [1, 2],
      style: { background: "transparent" },
      children: /* @__PURE__ */ Mn.jsx(
        iB,
        {
          frequency: n,
          speedFactor: r,
          rotationSpeed: o,
          gradientColors: fe,
          gradientStops: K,
          gradientRadius: w,
          autoRotate: E,
          enableVerticalRotation: Z,
          blur: R,
          focus: U,
          fov: F,
          cameraZ: z,
          blendMode: ie
        }
      )
    }
  ) });
}
export {
  uB as default
};
